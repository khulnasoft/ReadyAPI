{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ReadyAPI","text":"<p> Framework ReadyAPI, alta performance, f\u00e1cil de aprender, f\u00e1cil de codar, pronto para produ\u00e7\u00e3o </p> <p> </p> <p>Documenta\u00e7\u00e3o: https://readyapi.khulnasoft.com</p> <p>C\u00f3digo fonte: https://github.com/khulnasoft/readyapi</p> <p>ReadyAPI \u00e9 um moderno e r\u00e1pido (alta performance) framework web para constru\u00e7\u00e3o de APIs com Python 3.8 ou superior, baseado nos type hints padr\u00f5es do Python.</p> <p>Os recursos chave s\u00e3o:</p> <ul> <li>R\u00e1pido: alta performance, equivalente a NodeJS e Go (gra\u00e7as ao Starlette e Pydantic). Um dos frameworks mais r\u00e1pidos dispon\u00edveis.</li> <li>R\u00e1pido para codar: Aumenta a velocidade para desenvolver recursos entre 200% a 300%. *</li> <li>Poucos bugs: Reduz cerca de 40% de erros induzidos por humanos (desenvolvedores). *</li> <li>Intuitivo: Grande suporte a IDEs. Auto-Complete em todos os lugares. Menos tempo debugando.</li> <li>F\u00e1cil: Projetado para ser f\u00e1cil de aprender e usar. Menos tempo lendo documenta\u00e7\u00e3o.</li> <li>Enxuto: Minimize duplica\u00e7\u00e3o de c\u00f3digo. M\u00faltiplos recursos para cada declara\u00e7\u00e3o de par\u00e2metro. Menos bugs.</li> <li>Robusto: Tenha c\u00f3digo pronto para produ\u00e7\u00e3o. E com documenta\u00e7\u00e3o interativa autom\u00e1tica.</li> <li>Baseado em padr\u00f5es: Baseado em (e totalmente compat\u00edvel com) os padr\u00f5es abertos para APIs: OpenAPI (anteriormente conhecido como Swagger) e JSON Schema.</li> </ul> <p>* estimativas baseadas em testes realizados com equipe interna de desenvolvimento, construindo aplica\u00e7\u00f5es em produ\u00e7\u00e3o.</p>"},{"location":"#patrocinadores-ouro","title":"Patrocinadores Ouro","text":"<p>Outros patrocinadores</p>"},{"location":"#opinioes","title":"Opini\u00f5es","text":"<p>\"[...] Estou usando ReadyAPI muito esses dias. [...] Estou na verdade planejando utilizar ele em todos os times de servi\u00e7os Machine Learning na Microsoft. Alguns deles est\u00e3o sendo integrados no core do produto Windows e alguns produtos Office.\"</p> Kabir Khan - Microsoft (ref) <p>\"Estou extremamente entusiasmado com o ReadyAPI. \u00c9 t\u00e3o divertido!\"</p> Brian Okken - Python Bytes podcaster (ref) <p>\"Honestamente, o que voc\u00ea construiu parece super s\u00f3lido e rebuscado. De muitas formas, eu queria que o Hug fosse assim - \u00e9 realmente inspirador ver algu\u00e9m que construiu ele.\"</p> Timothy Crosley - criador doHug (ref) <p>\"Se voc\u00ea est\u00e1 procurando aprender um framework moderno para construir aplica\u00e7\u00f5es REST, d\u00ea uma olhada no ReadyAPI [...] \u00c9 r\u00e1pido, f\u00e1cil de usar e f\u00e1cil de aprender [...]\"</p> <p>\"N\u00f3s trocamos nossas APIs por ReadyAPI [...] Acredito que voc\u00eas gostar\u00e3o dele [...]\"</p> Ines Montani - Matthew Honnibal - fundadores da Explosion AI - criadores da spaCy (ref) - (ref) <p>\"N\u00f3s adotamos a biblioteca ReadyAPI para criar um servidor REST que possa ser chamado para obter predi\u00e7\u00f5es. [para o Ludwig]\"</p> Piero Molino, Yaroslav Dudin e Sai Sumanth Miryala - Uber (ref)"},{"location":"#typer-o-readyapi-das-interfaces-de-linhas-de-comando","title":"Typer, o ReadyAPI das interfaces de linhas de comando","text":"<p>Se voc\u00ea estiver construindo uma aplica\u00e7\u00e3o CLI para ser utilizada em um terminal ao inv\u00e9s de uma aplica\u00e7\u00e3o web, d\u00ea uma olhada no Typer.</p> <p>Typer \u00e9 o irm\u00e3o menor do ReadyAPI. E seu prop\u00f3sito \u00e9 ser o ReadyAPI das CLIs. \u2328\ufe0f \ud83d\ude80</p>"},{"location":"#requisitos","title":"Requisitos","text":"<p>Python 3.8+</p> <p>ReadyAPI est\u00e1 nos ombros de gigantes:</p> <ul> <li>Starlette para as partes web.</li> <li>Pydantic para a parte de dados.</li> </ul>"},{"location":"#instalacao","title":"Instala\u00e7\u00e3o","text":"<pre><code>$ pip install readyapi\n\n---&gt; 100%\n</code></pre> <p>Voc\u00ea tamb\u00e9m precisar\u00e1 de um servidor ASGI para produ\u00e7\u00e3o, tal como Uvicorn ou Hypercorn.</p> <pre><code>$ pip install \"uvicorn[standard]\"\n\n---&gt; 100%\n</code></pre>"},{"location":"#exemplo","title":"Exemplo","text":""},{"location":"#crie","title":"Crie","text":"<ul> <li>Crie um arquivo <code>main.py</code> com:</li> </ul> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> Ou use <code>async def</code>... <p>Se seu c\u00f3digo utiliza <code>async</code> / <code>await</code>, use <code>async def</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> <p>Nota:</p> <p>Se voc\u00ea n\u00e3o sabe, verifique a se\u00e7\u00e3o \"In a hurry?\" sobre <code>async</code> e <code>await</code> nas docs.</p>"},{"location":"#rode","title":"Rode","text":"<p>Rode o servidor com:</p> <pre><code>$ uvicorn main:app --reload\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre> Sobre o comando <code>uvicorn main:app --reload</code>... <p>O comando <code>uvicorn main:app</code> se refere a:</p> <ul> <li><code>main</code>: o arquivo <code>main.py</code> (o \"m\u00f3dulo\" Python).</li> <li><code>app</code>: o objeto criado dentro de <code>main.py</code> com a linha <code>app = ReadyAPI()</code>.</li> <li><code>--reload</code>: faz o servidor recarregar ap\u00f3s mudan\u00e7as de c\u00f3digo. Somente fa\u00e7a isso para desenvolvimento.</li> </ul>"},{"location":"#verifique","title":"Verifique","text":"<p>Abra seu navegador em http://127.0.0.1:8000/items/5?q=somequery.</p> <p>Voc\u00ea ver\u00e1 a resposta JSON como:</p> <pre><code>{\"item_id\": 5, \"q\": \"somequery\"}\n</code></pre> <p>Voc\u00ea acabou de criar uma API que:</p> <ul> <li>Recebe requisi\u00e7\u00f5es HTTP nas rotas <code>/</code> e <code>/items/{item_id}</code>.</li> <li>Ambas rotas fazem opera\u00e7\u00f5es <code>GET</code> (tamb\u00e9m conhecido como m\u00e9todos HTTP).</li> <li>A rota <code>/items/{item_id}</code> tem um par\u00e2metro de rota <code>item_id</code> que deve ser um <code>int</code>.</li> <li>A rota <code>/items/{item_id}</code> tem um par\u00e2metro query <code>q</code> <code>str</code> opcional.</li> </ul>"},{"location":"#documentacao-interativa-da-api","title":"Documenta\u00e7\u00e3o Interativa da API","text":"<p>Agora v\u00e1 para http://127.0.0.1:8000/docs.</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o autom\u00e1tica interativa da API (fornecida por Swagger UI):</p> <p></p>"},{"location":"#documentacao-alternativa-da-api","title":"Documenta\u00e7\u00e3o Alternativa da API","text":"<p>E agora, v\u00e1 para http://127.0.0.1:8000/redoc.</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o autom\u00e1tica alternativa (fornecida por ReDoc):</p> <p></p>"},{"location":"#evoluindo-o-exemplo","title":"Evoluindo o Exemplo","text":"<p>Agora modifique o arquivo <code>main.py</code> para receber um corpo para uma requisi\u00e7\u00e3o <code>PUT</code>.</p> <p>Declare o corpo utilizando tipos padr\u00e3o Python, gra\u00e7as ao Pydantic.</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool] = None\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    return {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>O servidor dever\u00e1 recarregar automaticamente (porqu\u00ea voc\u00ea adicionou <code>--reload</code> ao comando <code>uvicorn</code> acima).</p>"},{"location":"#evoluindo-a-documentacao-interativa-da-api","title":"Evoluindo a Documenta\u00e7\u00e3o Interativa da API","text":"<p>Agora v\u00e1 para http://127.0.0.1:8000/docs.</p> <ul> <li>A documenta\u00e7\u00e3o interativa da API ser\u00e1 automaticamente atualizada, incluindo o novo corpo:</li> </ul> <p></p> <ul> <li>Clique no bot\u00e3o \"Try it out\", ele permitir\u00e1 que voc\u00ea preencha os par\u00e2metros e interaja diretamente com a API:</li> </ul> <p></p> <ul> <li>Ent\u00e3o clique no bot\u00e3o \"Execute\", a interface do usu\u00e1rio ir\u00e1 se comunicar com a API, enviar os par\u00e2metros, pegar os resultados e mostr\u00e1-los na tela:</li> </ul> <p></p>"},{"location":"#evoluindo-a-documentacao-alternativa-da-api","title":"Evoluindo a Documenta\u00e7\u00e3o Alternativa da API","text":"<p>E agora, v\u00e1 para http://127.0.0.1:8000/redoc.</p> <ul> <li>A documenta\u00e7\u00e3o alternativa tamb\u00e9m ir\u00e1 refletir o novo par\u00e2metro da query e o corpo:</li> </ul> <p></p>"},{"location":"#recapitulando","title":"Recapitulando","text":"<p>Resumindo, voc\u00ea declara uma vez os tipos dos par\u00e2metros, corpo etc. como par\u00e2metros de fun\u00e7\u00e3o.</p> <p>Voc\u00ea faz com tipos padr\u00e3o do Python moderno.</p> <p>Voc\u00ea n\u00e3o ter\u00e1 que aprender uma nova sintaxe, m\u00e9todos ou classes de uma biblioteca espec\u00edfica etc.</p> <p>Apenas Python 3.8+ padr\u00e3o.</p> <p>Por exemplo, para um <code>int</code>:</p> <pre><code>item_id: int\n</code></pre> <p>ou para um modelo mais complexo, <code>Item</code>:</p> <pre><code>item: Item\n</code></pre> <p>...e com essa \u00fanica declara\u00e7\u00e3o voc\u00ea tem:</p> <ul> <li>Suporte ao Editor, incluindo:<ul> <li>Completa\u00e7\u00e3o.</li> <li>Verifica\u00e7\u00e3o de tipos.</li> </ul> </li> <li>Valida\u00e7\u00e3o de dados:<ul> <li>Erros autom\u00e1ticos e claros quando o dado \u00e9 inv\u00e1lido.</li> <li>Valida\u00e7\u00e3o at\u00e9 para objetos JSON profundamente aninhados.</li> </ul> </li> <li>Convers\u00e3o de dados de entrada: vindo da rede para dados e tipos Python. Consegue ler:<ul> <li>JSON.</li> <li>Par\u00e2metros de rota.</li> <li>Par\u00e2metros de query .</li> <li>Cookies.</li> <li>Cabe\u00e7alhos.</li> <li>Formul\u00e1rios.</li> <li>Arquivos.</li> </ul> </li> <li>Convers\u00e3o de dados de sa\u00edda de tipos e dados Python para dados de rede (como JSON):<ul> <li>Converte tipos Python (<code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code>, <code>list</code> etc).</li> <li>Objetos <code>datetime</code>.</li> <li>Objetos <code>UUID</code>.</li> <li>Modelos de Banco de Dados.</li> <li>...e muito mais.</li> </ul> </li> <li>Documenta\u00e7\u00e3o interativa autom\u00e1tica da API, incluindo 2 alternativas de interface de usu\u00e1rio:<ul> <li>Swagger UI.</li> <li>ReDoc.</li> </ul> </li> </ul> <p>Voltando ao c\u00f3digo do exemplo anterior, ReadyAPI ir\u00e1:</p> <ul> <li>Validar que existe um <code>item_id</code> na rota para requisi\u00e7\u00f5es <code>GET</code> e <code>PUT</code>.</li> <li>Validar que <code>item_id</code> \u00e9 do tipo <code>int</code> para requisi\u00e7\u00f5es <code>GET</code> e <code>PUT</code>.<ul> <li>Se n\u00e3o \u00e9 validado, o cliente ver\u00e1 um \u00fatil, claro erro.</li> </ul> </li> <li>Verificar se existe um par\u00e2metro de query opcional nomeado como <code>q</code> (como em <code>http://127.0.0.1:8000/items/foo?q=somequery</code>) para requisi\u00e7\u00f5es <code>GET</code>.<ul> <li>Como o par\u00e2metro <code>q</code> \u00e9 declarado com <code>= None</code>, ele \u00e9 opcional.</li> <li>Sem o <code>None</code> ele poderia ser obrigat\u00f3rio (como o corpo no caso de <code>PUT</code>).</li> </ul> </li> <li>Para requisi\u00e7\u00f5es <code>PUT</code> para <code>/items/{item_id}</code>, ler\u00e1 o corpo como JSON e:<ul> <li>Verifica que tem um atributo obrigat\u00f3rio <code>name</code> que deve ser <code>str</code>.</li> <li>Verifica que tem um atributo obrigat\u00f3rio <code>price</code> que deve ser <code>float</code>.</li> <li>Verifica que tem an atributo opcional <code>is_offer</code>, que deve ser <code>bool</code>, se presente.</li> <li>Tudo isso tamb\u00e9m funciona para objetos JSON profundamente aninhados.</li> </ul> </li> <li>Converter de e para JSON automaticamente.</li> <li>Documentar tudo com OpenAPI, que poder\u00e1 ser usado por:<ul> <li>Sistemas de documenta\u00e7\u00e3o interativos.</li> <li>Sistemas de clientes de gera\u00e7\u00e3o de c\u00f3digo autom\u00e1ticos, para muitas linguagens.</li> </ul> </li> <li>Fornecer diretamente 2 interfaces web de documenta\u00e7\u00e3o interativa.</li> </ul> <p>N\u00f3s arranhamos apenas a superf\u00edcie, mas voc\u00ea j\u00e1 tem id\u00e9ia de como tudo funciona.</p> <p>Experimente mudar a seguinte linha:</p> <pre><code>    return {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>...de:</p> <pre><code>        ... \"item_name\": item.name ...\n</code></pre> <p>...para:</p> <pre><code>        ... \"item_price\": item.price ...\n</code></pre> <p>...e veja como seu editor ir\u00e1 auto-completar os atributos e saber\u00e1 os tipos:</p> <p></p> <p>Para um exemplo mais completo incluindo mais recursos, veja Tutorial - Guia do Usu\u00e1rio.</p> <p>Alerta de Spoiler: o tutorial - guia do usu\u00e1rio inclui:</p> <ul> <li>Declara\u00e7\u00e3o de par\u00e2metetros de diferentes lugares como: cabe\u00e7alhos, cookies, campos de formul\u00e1rios e arquivos.</li> <li>Como configurar Limita\u00e7\u00f5es de Valida\u00e7\u00e3o como <code>maximum_length</code> ou <code>regex</code>.</li> <li>Um poderoso e f\u00e1cil de usar sistema de Inje\u00e7\u00e3o de Depend\u00eancia.</li> <li>Seguran\u00e7a e autentica\u00e7\u00e3o, incluindo suporte para OAuth2 com autentica\u00e7\u00e3o JWT tokens e HTTP Basic.</li> <li>T\u00e9cnicas mais avan\u00e7adas (mas igualmente f\u00e1ceis) para declara\u00e7\u00e3o de modelos JSON profundamente aninhados (gra\u00e7as ao Pydantic).</li> <li>Muitos recursos extras (gra\u00e7as ao Starlette) como:<ul> <li>WebSockets</li> <li>GraphQL</li> <li>testes extrememamente f\u00e1ceis baseados em HTTPX e <code>pytest</code></li> <li>CORS</li> <li>Cookie Sessions</li> <li>...e mais.</li> </ul> </li> </ul>"},{"location":"#performance","title":"Performance","text":"<p>Testes de performance da Independent TechEmpower mostram aplica\u00e7\u00f5es ReadyAPI rodando sob Uvicorn como um dos frameworks Python mais r\u00e1pidos dispon\u00edveis, somente atr\u00e1s de Starlette e Uvicorn (utilizados internamente pelo ReadyAPI). (*)</p> <p>Para entender mais sobre performance, veja a se\u00e7\u00e3o Benchmarks.</p>"},{"location":"#dependencias-opcionais","title":"Depend\u00eancias opcionais","text":"<p>Usados por Pydantic:</p> <ul> <li><code>email_validator</code> - para valida\u00e7\u00e3o de email.</li> </ul> <p>Usados por Starlette:</p> <ul> <li><code>httpx</code> - Necess\u00e1rio se voc\u00ea quiser utilizar o <code>TestClient</code>.</li> <li><code>jinja2</code> - Necess\u00e1rio se voc\u00ea quiser utilizar a configura\u00e7\u00e3o padr\u00e3o de templates.</li> <li><code>python-multipart</code> - Necess\u00e1rio se voc\u00ea quiser suporte com \"parsing\" de formul\u00e1rio, com <code>request.form()</code>.</li> <li><code>itsdangerous</code> - Necess\u00e1rio para suporte a <code>SessionMiddleware</code>.</li> <li><code>pyyaml</code> - Necess\u00e1rio para suporte a <code>SchemaGenerator</code> da Starlette (voc\u00ea provavelmente n\u00e3o precisar\u00e1 disso com o ReadyAPI).</li> <li><code>graphene</code> - Necess\u00e1rio para suporte a <code>GraphQLApp</code>.</li> <li><code>ujson</code> - Necess\u00e1rio se voc\u00ea quer utilizar <code>UJSONResponse</code>.</li> </ul> <p>Usados por ReadyAPI / Starlette:</p> <ul> <li><code>uvicorn</code> - para o servidor que carrega e serve sua aplica\u00e7\u00e3o.</li> <li><code>orjson</code> - Necess\u00e1rio se voc\u00ea quer utilizar <code>ORJSONResponse</code>.</li> </ul> <p>Voc\u00ea pode instalar todas essas depend\u00eancias com <code>pip install readyapi[all]</code>.</p>"},{"location":"#licenca","title":"Licen\u00e7a","text":"<p>Esse projeto \u00e9 licenciado sob os termos da licen\u00e7a MIT.</p>"},{"location":"alternatives/","title":"Alternativas, Inspira\u00e7\u00e3o e Compara\u00e7\u00f5es","text":"<p>O que inspirou ReadyAPI, como ele se compara a outras alternativas e o que ReadyAPI aprendeu delas.</p>"},{"location":"alternatives/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>ReadyAPI n\u00e3o poderia existir se n\u00e3o fosse pelos trabalhos anteriores de outras pessoas.</p> <p>Houveram tantas ferramentas criadas que ajudaram a inspirar sua cria\u00e7\u00e3o.</p> <p>Tenho evitado criar um novo framework por anos. Primeiramente tentei resolver todos os recursos cobertos pelo ReadyAPI utilizando muitos frameworks diferentes, plug-ins e ferramentas.</p> <p>Mas em algum ponto, n\u00e3o houve outra op\u00e7\u00e3o sen\u00e3o criar algo que fornecesse todos esses recursos, pegando as melhores id\u00e9ias de ferramentas anteriores, e combinando eles da melhor forma poss\u00edvel, utilizando recursos da linguagem que n\u00e3o estavam dispon\u00edveis antes (Type Hints no Python 3.6+).</p>"},{"location":"alternatives/#ferramentas-anteriores","title":"Ferramentas anteriores","text":""},{"location":"alternatives/#django","title":"Django","text":"<p>\u00c9 o framework mais popular e largamente confi\u00e1vel. \u00c9 utilizado para construir sistemas como o Instagram.</p> <p>\u00c9 bem acoplado com banco de dados relacional (como MySQL ou PostgreSQL), ent\u00e3o, tendo um banco de dados NoSQL (como Couchbase, MongoDB, Cassandra etc) como a principal ferramenta de armazenamento n\u00e3o \u00e9 muito f\u00e1cil.</p> <p>Foi criado para gerar HTML no backend, n\u00e3o para criar APIs utilizando um frontend moderno (como React, Vue.js e Angular) ou por outros sistemas (como dispositivos IoT) comunicando com ele.</p>"},{"location":"alternatives/#django-rest-framework","title":"Django REST Framework","text":"<p>Django REST framework foi criado para ser uma caixa de ferramentas flex\u00edvel para constru\u00e7\u00e3o de APIs web utilizando Django por baixo, para melhorar suas capacidades de API.</p> <p>Ele \u00e9 utilizado por muitas companhias incluindo Mozilla, Red Hat e Eventbrite.</p> <p>Ele foi um dos primeiros exemplos de documenta\u00e7\u00e3o autom\u00e1tica de API, e essa foi especificamente uma das primeiras id\u00e9ias que inspirou \"a busca por\" ReadyAPI.</p> <p>Nota</p> <p>Django REST Framework foi criado por Tom Christie. O mesmo criador de Starlette e Uvicorn, nos quais ReadyAPI \u00e9 baseado.</p> <p>ReadyAPI inspirado para</p> <p>Ter uma documenta\u00e7\u00e3o autom\u00e1tica da API em interface web.</p>"},{"location":"alternatives/#flask","title":"Flask","text":"<p>Flask \u00e9 um \"microframework\", n\u00e3o inclui integra\u00e7\u00e3o com banco de dados nem muitas das coisas que v\u00eam por padr\u00e3o no Django.</p> <p>Sua simplicidade e flexibilidade permitem fazer coisas como utilizar bancos de dados NoSQL como principal sistema de armazenamento de dados.</p> <p>Por ser t\u00e3o simples, \u00e9 relativamente intuitivo de aprender, embora a documenta\u00e7\u00e3o esteja de forma mais t\u00e9cnica em alguns pontos.</p> <p>Ele \u00e9 comumente utilizado por outras aplica\u00e7\u00f5es que n\u00e3o necessariamente precisam de banco de dados, gerenciamento de usu\u00e1rios, ou algum dos muitos recursos que j\u00e1 vem instalados no Django. Embora muitos desses recursos possam ser adicionados com plug-ins.</p> <p>Esse desacoplamento de partes, e sendo um \"microframework\" que pode ser extendido para cobrir exatamente o que \u00e9 necess\u00e1rio era um recurso chave que eu queria manter.</p> <p>Dada a simplicidade do Flask, parecia uma \u00f3tima op\u00e7\u00e3o para constru\u00e7\u00e3o de APIs. A pr\u00f3xima coisa a procurar era um \"Django REST Framework\" para Flask.</p> <p>ReadyAPI inspirado para</p> <p>Ser um microframework. Fazer ele f\u00e1cil para misturar e combinar com ferramentas e partes necess\u00e1rias.</p> <p>Ser simples e com sistema de roteamento f\u00e1cil de usar.</p>"},{"location":"alternatives/#requests","title":"Requests","text":"<p>ReadyAPI n\u00e3o \u00e9 uma alternativa para Requests. O escopo deles \u00e9 muito diferente.</p> <p>Na verdade \u00e9 comum utilizar Requests dentro de uma aplica\u00e7\u00e3o ReadyAPI.</p> <p>Ainda assim, ReadyAPI pegou alguma inspira\u00e7\u00e3o do Requests.</p> <p>Requests \u00e9 uma biblioteca para interagir com APIs (como um cliente), enquanto ReadyAPI \u00e9 uma biblioteca para construir APIs (como um servidor).</p> <p>Eles est\u00e3o, mais ou menos, em pontas opostas, um complementando o outro.</p> <p>Requests tem um projeto muito simples e intuitivo, f\u00e1cil de usar, com padr\u00f5es sens\u00edveis. Mas ao mesmo tempo, \u00e9 muito poderoso e customiz\u00e1vel.</p> <p>\u00c9 por isso que, como dito no site oficial:</p> <p>Requests \u00e9 um dos pacotes Python mais baixados de todos os tempos</p> <p>O jeito de usar \u00e9 muito simples. Por exemplo, para fazer uma requisi\u00e7\u00e3o <code>GET</code>, voc\u00ea deveria escrever:</p> <pre><code>response = requests.get(\"http://example.com/some/url\")\n</code></pre> <p>A contra-parte da aplica\u00e7\u00e3o ReadyAPI, rota de opera\u00e7\u00e3o, poderia parecer como:</p> <pre><code>@app.get(\"/some/url\")\ndef read_url():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Veja as similaridades em <code>requests.get(...)</code> e <code>@app.get(...)</code>.</p> <p>ReadyAPI inspirado para</p> <ul> <li>Ter uma API simples e intuitiva.</li> <li>Utilizar nomes de m\u00e9todos HTTP (opera\u00e7\u00f5es) diretamente, de um jeito direto e intuitivo.</li> <li>Ter padr\u00f5es sens\u00edveis, mas customiza\u00e7\u00f5es poderosas.</li> </ul>"},{"location":"alternatives/#swagger-openapi","title":"Swagger / OpenAPI","text":"<p>O principal recurso que eu queria do Django REST Framework era a documenta\u00e7\u00e3o autom\u00e1tica da API.</p> <p>Ent\u00e3o eu descobri que existia um padr\u00e3o para documentar APIs, utilizando JSON (ou YAML, uma extens\u00e3o do JSON) chamado Swagger.</p> <p>E tinha uma interface web para APIs Swagger j\u00e1 criada. Ent\u00e3o, sendo capaz de gerar documenta\u00e7\u00e3o Swagger para uma API poderia permitir utilizar essa interface web automaticamente.</p> <p>Em algum ponto, Swagger foi dado para a Funda\u00e7\u00e3o Linux, e foi renomeado OpenAPI.</p> <p>Isso acontece porqu\u00ea quando algu\u00e9m fala sobre a vers\u00e3o 2.0 \u00e9 comum dizer \"Swagger\", e para a vers\u00e3o 3+, \"OpenAPI\".</p> <p>ReadyAPI inspirado para</p> <p>Adotar e usar um padr\u00e3o aberto para especifica\u00e7\u00f5es API, ao inv\u00e9s de algum esquema customizado.</p> <p>E integrar ferramentas de interface para usu\u00e1rios baseado nos padr\u00f5es:</p> <ul> <li>Swagger UI</li> <li>ReDoc</li> </ul> <p>Esses dois foram escolhidos por serem bem populares e est\u00e1veis, mas fazendo uma pesquisa r\u00e1pida, voc\u00ea pode encontrar d\u00fazias de interfaces alternativas adicionais para OpenAPI (assim voc\u00ea poder\u00e1 utilizar com ReadyAPI).</p>"},{"location":"alternatives/#flask-rest-frameworks","title":"Flask REST frameworks","text":"<p>Existem v\u00e1rios Flask REST frameworks, mas depois de investir tempo e trabalho investigando eles, eu descobri que muitos est\u00e3o descontinuados ou abandonados, com alguns tendo quest\u00f5es que fizeram eles inadequados.</p>"},{"location":"alternatives/#marshmallow","title":"Marshmallow","text":"<p>Um dos principais recursos necess\u00e1rios em sistemas API \u00e9 \"serializa\u00e7\u00e3o\" de dados, que \u00e9 pegar dados do c\u00f3digo (Python) e converter eles em alguma coisa que possa ser enviado atrav\u00e9s da rede. Por exemplo, converter um objeto contendo dados de um banco de dados em um objeto JSON. Converter objetos <code>datetime</code> em strings etc.</p> <p>Outro grande recurso necess\u00e1rio nas APIs \u00e9 valida\u00e7\u00e3o de dados, certificando que os dados s\u00e3o v\u00e1lidos, dados certos par\u00e2metros. Por exemplo, algum campo \u00e9 <code>int</code>, e n\u00e3o alguma string aleat\u00f3ria. Isso \u00e9 especialmente \u00fatil para dados que est\u00e3o chegando.</p> <p>Sem um sistema de valida\u00e7\u00e3o de dados, voc\u00ea teria que realizar todas as verifica\u00e7\u00f5es manualmente, no c\u00f3digo.</p> <p>Esses recursos s\u00e3o o que Marshmallow foi constru\u00eddo para fornecer. Ele \u00e9 uma \u00f3tima biblioteca, e eu j\u00e1 utilizei muito antes.</p> <p>Mas ele foi criado antes da exist\u00eancia do type hints do Python. Ent\u00e3o, para definir todo o schema voc\u00ea precisa utilizar espec\u00edficas ferramentas e classes fornecidas pelo Marshmallow.</p> <p>ReadyAPI inspirado para</p> <p>Usar c\u00f3digo para definir \"schemas\" que forne\u00e7am, automaticamente, tipos de dados e valida\u00e7\u00e3o.</p>"},{"location":"alternatives/#webargs","title":"Webargs","text":"<p>Outro grande recurso necess\u00e1rio pelas APIs \u00e9 a an\u00e1lise de dados vindos de requisi\u00e7\u00f5es.</p> <p>Webargs \u00e9 uma ferramente feita para fornecer o que est\u00e1 no topo de v\u00e1rios frameworks, inclusive Flask.</p> <p>Ele utiliza Marshmallow por baixo para valida\u00e7\u00e3o de dados. E ele foi criado pelos mesmos desenvolvedores.</p> <p>Ele \u00e9 uma grande ferramenta e eu tamb\u00e9m a utilizei muito, antes de ter o ReadyAPI.</p> <p>Info</p> <p>Webargs foi criado pelos mesmos desenvolvedores do Marshmallow.</p> <p>ReadyAPI inspirado para</p> <p>Ter valida\u00e7\u00e3o autom\u00e1tica de dados vindos de requisi\u00e7\u00f5es.</p>"},{"location":"alternatives/#apispec","title":"APISpec","text":"<p>Marshmallow e Webargs fornecem valida\u00e7\u00e3o, an\u00e1lise e serializa\u00e7\u00e3o como plug-ins.</p> <p>Mas a documenta\u00e7\u00e3o ainda est\u00e1 faltando. Ent\u00e3o APISpec foi criado.</p> <p>APISpec tem plug-ins para muitos frameworks (e tem um plug-in para Starlette tamb\u00e9m).</p> <p>O jeito como ele funciona \u00e9 que voc\u00ea escreve a defini\u00e7\u00e3o do schema usando formato YAML dentro da docstring de cada fun\u00e7\u00e3o controlando uma rota.</p> <p>E ele gera schemas OpenAPI.</p> <p>\u00c9 assim como funciona no Flask, Starlette, Responder etc.</p> <p>Mas ent\u00e3o, n\u00f3s temos novamente o problema de ter uma micro-sintaxe, dentro de uma string Python (um grande YAML).</p> <p>O editor n\u00e3o poder\u00e1 ajudar muito com isso. E se n\u00f3s modificarmos os par\u00e2metros dos schemas do Marshmallow e esquecer de modificar tamb\u00e9m aquela docstring YAML, o schema gerado pode ficar obsoleto.</p> <p>Info</p> <p>APISpec foi criado pelos mesmos desenvolvedores do Marshmallow.</p> <p>ReadyAPI inspirado para</p> <p>Dar suporte a padr\u00f5es abertos para APIs, OpenAPI.</p>"},{"location":"alternatives/#flask-apispec","title":"Flask-apispec","text":"<p>\u00c9 um plug-in Flask, que amarra junto Webargs, Marshmallow e APISpec.</p> <p>Ele utiliza a informa\u00e7\u00e3o do Webargs e Marshmallow para gerar automaticamente schemas OpenAPI, usando APISpec.</p> <p>\u00c9 uma grande ferramenta, mas muito subestimada. Ela deveria ser um pouco mais popular do que muitos outros plug-ins Flask. \u00c9 de ser esperado que sua documenta\u00e7\u00e3o seja bem concisa e abstrata.</p> <p>Isso resolveu o problema de ter que escrever YAML (outra sintaxe) dentro das docstrings Python.</p> <p>Essa combina\u00e7\u00e3o de Flask, Flask-apispec com Marshmallow e Webargs foi meu backend stack favorito at\u00e9 construir ReadyAPI.</p> <p>Usando essa combina\u00e7\u00e3o levou a cria\u00e7\u00e3o de v\u00e1rios geradores Flask full-stack. H\u00e1 muitas stacks que eu (e v\u00e1rios times externos) estou utilizando at\u00e9 agora:</p> <ul> <li>https://github.com/khulnasoft/full-stack</li> <li>https://github.com/khulnasoft/full-stack-flask-couchbase</li> <li>https://github.com/khulnasoft/full-stack-flask-couchdb</li> </ul> <p>E esses mesmos geradores full-stack foram a base dos Geradores de Projetos ReadyAPI.</p> <p>Info</p> <p>Flask-apispec foi criado pelos mesmos desenvolvedores do Marshmallow.</p> <p>ReadyAPI inspirado para</p> <p>Gerar schema OpenAPI automaticamente, a partir do mesmo c\u00f3digo que define serializa\u00e7\u00e3o e valida\u00e7\u00e3o.</p>"},{"location":"alternatives/#nestjs-and-angular","title":"NestJS (and Angular)","text":"<p>NestJS, que n\u00e3o \u00e9 nem Python, \u00e9 um framework NodeJS JavaScript (TypeScript) inspirado pelo Angular.</p> <p>Ele alcan\u00e7a de uma forma similar ao que pode ser feito com o Flask-apispec.</p> <p>Ele tem um sistema de inje\u00e7\u00e3o de depend\u00eancia integrado, inspirado pelo Angular dois. \u00c9 necess\u00e1rio fazer o pr\u00e9-registro dos \"injet\u00e1veis\" (como todos os sistemas de inje\u00e7\u00e3o de depend\u00eancia que conhe\u00e7o), ent\u00e3o, adicionando verbosidade e repeti\u00e7\u00e3o de c\u00f3digo.</p> <p>Como os par\u00e2metros s\u00e3o descritos com tipos TypeScript (similar aos type hints do Python), o suporte ao editor \u00e9 muito bom.</p> <p>Mas como os dados TypeScript n\u00e3o s\u00e3o preservados ap\u00f3s a compila\u00e7\u00e3o para o JavaScript, ele n\u00e3o pode depender dos tipos para definir a valida\u00e7\u00e3o, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o ao mesmo tempo. Devido a isso e a algumas decis\u00f5es de projeto, para pegar a valida\u00e7\u00e3o, serializa\u00e7\u00e3o e gera\u00e7\u00e3o autom\u00e1tica do schema, \u00e9 necess\u00e1rio adicionar decoradores em muitos lugares. Ent\u00e3o, ele se torna muito verboso.</p> <p>Ele tamb\u00e9m n\u00e3o controla modelos aninhados muito bem. Ent\u00e3o, se o corpo JSON na requisi\u00e7\u00e3o for um objeto JSON que cont\u00e9m campos internos que cont\u00e9m objetos JSON aninhados, ele n\u00e3o consegue ser validado e documentado apropriadamente.</p> <p>ReadyAPI inspirado para</p> <p>Usar tipos Python para ter um \u00f3timo suporte do editor.</p> <p>Ter um sistema de inje\u00e7\u00e3o de depend\u00eancia poderoso. Achar um jeito de minimizar repeti\u00e7\u00e3o de c\u00f3digo.</p>"},{"location":"alternatives/#sanic","title":"Sanic","text":"<p>Ele foi um dos primeiros frameworks Python extremamente r\u00e1pido baseado em <code>asyncio</code>. Ele foi feito para ser muito similar ao Flask.</p> <p>Detalhes t\u00e9cnicos</p> <p>Ele utiliza <code>uvloop</code> ao inv\u00e9s do 'loop' <code>asyncio</code> padr\u00e3o do Python. \u00c9 isso que deixa ele t\u00e3o r\u00e1pido.</p> <p>Ele claramente inspirou Uvicorn e Starlette, que s\u00e3o atualmente mais r\u00e1pidos que o Sanic em testes de performance abertos.</p> <p>ReadyAPI inspirado para</p> <p>Achar um jeito de ter uma performance insana.</p> <p>\u00c9 por isso que o ReadyAPI \u00e9 baseado em Starlette, para que ele seja o framework mais r\u00e1pido dispon\u00edvel (performance testada por terceiros).</p>"},{"location":"alternatives/#falcon","title":"Falcon","text":"<p>Falcon \u00e9 outro framework Python de alta performance, e \u00e9 projetado para ser minimalista, e funciona como funda\u00e7\u00e3o de outros frameworks como Hug.</p> <p>Ele usa o padr\u00e3o anterior para frameworks web Python (WSGI) que \u00e9 s\u00edncrono, ent\u00e3o ele n\u00e3o pode controlar WebSockets e outros casos de uso. No entanto, ele tamb\u00e9m tem uma boa performance.</p> <p>Ele \u00e9 projetado para ter fun\u00e7\u00f5es que recebem dois par\u00e2metros, uma \"requisi\u00e7\u00e3o\" e uma \"resposta\". Ent\u00e3o voc\u00ea \"l\u00ea\" as partes da requisi\u00e7\u00e3o, e \"escreve\" partes para a resposta. Devido ao seu design, n\u00e3o \u00e9 poss\u00edvel declarar par\u00e2metros de requisi\u00e7\u00e3o e corpos com type hints Python padr\u00e3o como par\u00e2metros de fun\u00e7\u00f5es.</p> <p>Ent\u00e3o, valida\u00e7\u00e3o de dados, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o tem que ser feitos no c\u00f3digo, n\u00e3o automaticamente. Ou eles ter\u00e3o que ser implementados como um framework acima do Falcon, como o Hug. Essa mesma distin\u00e7\u00e3o acontece em outros frameworks que s\u00e3o inspirados pelo design do Falcon, tendo um objeto de requisi\u00e7\u00e3o e um objeto de resposta como par\u00e2metros.</p> <p>ReadyAPI inspirado para</p> <p>Achar jeitos de conseguir melhor performance.</p> <p>Juntamente com Hug (como Hug \u00e9 baseado no Falcon) inspirou ReadyAPI para declarar um par\u00e2metro de <code>resposta</code>nas fun\u00e7\u00f5es.</p> <p>Embora no ReadyAPI seja opcional, \u00e9 utilizado principalmente para configurar cabe\u00e7alhos, cookies e c\u00f3digos de status alternativos.</p>"},{"location":"alternatives/#molten","title":"Molten","text":"<p>Eu descobri Molten nos primeiros est\u00e1gios da constru\u00e7\u00e3o do ReadyAPI. E ele tem umas id\u00e9ias bem similares:</p> <ul> <li>Baseado em type hints Python.</li> <li>Valida\u00e7\u00e3o e documenta\u00e7\u00e3o desses tipos.</li> <li>Sistema de inje\u00e7\u00e3o de depend\u00eancia.</li> </ul> <p>Ele n\u00e3o utiliza valida\u00e7\u00e3o de dados, serialliza\u00e7\u00e3o e documenta\u00e7\u00e3o de bibliotecas de terceiros como o Pydantic, ele tem seu pr\u00f3rpio. Ent\u00e3o, essas defini\u00e7\u00f5es de tipo de dados n\u00e3o podem ser reutilizados t\u00e3o facilmente.</p> <p>Ele exige um pouco mais de verbosidade nas configura\u00e7\u00f5es. E como \u00e9 baseado no WSGI (ao inv\u00e9s de ASGI), ele n\u00e3o \u00e9 projetado para ter a vantagem da alta performance fornecida por ferramentas como Uvicorn, Starlette e Sanic.</p> <p>O sistema de inje\u00e7\u00e3o de depend\u00eancia exige pr\u00e9-registro das depend\u00eancias e as depend\u00eancias s\u00e3o resolvidas baseadas nos tipos declarados. Ent\u00e3o, n\u00e3o \u00e9 poss\u00edvel declarar mais do que um \"componente\" que fornece um certo tipo.</p> <p>Rotas s\u00e3o declaradas em um \u00fanico lugar, usando fun\u00e7\u00f5es declaradas em outros lugares (ao inv\u00e9s de usar decoradores que possam ser colocados diretamente acima da fun\u00e7\u00e3o que controla o endpoint). Isso \u00e9 mais perto de como o Django faz isso do que como Flask (e Starlette) faz. Ele separa no c\u00f3digo coisas que s\u00e3o relativamente amarradas.</p> <p>ReadyAPI inspirado para</p> <p>Definir valida\u00e7\u00f5es extras para tipos de dados usando valores \"padr\u00e3o\" de atributos dos modelos. Isso melhora o suporte do editor, e n\u00e3o estava dispon\u00edvel no Pydantic antes.</p> <p>Isso na verdade inspirou a atualiza\u00e7\u00e3o de partes do Pydantic, para dar suporte ao mesmo estilo de declara\u00e7\u00e3o da valida\u00e7\u00e3o (toda essa funcionalidade j\u00e1 est\u00e1 dispon\u00edvel no Pydantic).</p>"},{"location":"alternatives/#hug","title":"Hug","text":"<p>Hug foi um dos primeiros frameworks a implementar a declara\u00e7\u00e3o de tipos de par\u00e2metros usando Python type hints. Isso foi uma \u00f3tima id\u00e9ia que inspirou outras ferramentas a fazer o mesmo.</p> <p>Ele usou tipos customizados em suas declara\u00e7\u00f5es ao inv\u00e9s dos tipos padr\u00e3o Python, mas mesmo assim foi um grande passo.</p> <p>Ele tamb\u00e9m foi um dos primeiros frameworks a gerar um schema customizado declarando a API inteira em JSON.</p> <p>Ele n\u00e3o era baseado em um padr\u00e3o como OpenAPI e JSON Schema. Ent\u00e3o n\u00e3o poderia ter intera\u00e7\u00e3o direta com outras ferramentas, como Swagger UI. Mas novamente, era uma id\u00e9ia muito inovadora.</p> <p>Hug tinha um incomum, interessante recurso: usando o mesmo framework, \u00e9 poss\u00edvel criar tanto APIs como CLIs.</p> <p>Como \u00e9 baseado nos padr\u00f5es anteriores de frameworks web s\u00edncronos (WSGI), ele n\u00e3o pode controlar Websockets e outras coisas, embora ele ainda tenha uma alta performance tamb\u00e9m.</p> <p>Info</p> <p>Hug foi criado por Timothy Crosley, o mesmo criador do  <code>isort</code>, uma grande ferramenta para ordena\u00e7\u00e3o autom\u00e1tica de imports em arquivos Python.</p> <p>Id\u00e9ias inspiradas para o ReadyAPI</p> <p>Hug inspirou partes do APIStar, e foi uma das ferramentas que eu achei mais promissora, ao lado do APIStar.</p> <p>Hug ajudou a inspirar o ReadyAPI a usar type hints do Python para declarar par\u00e2metros, e para gerar um schema definindo a API automaticamente.</p> <p>Hug inspirou ReadyAPI a declarar um par\u00e2metro de <code>resposta</code> em fun\u00e7\u00f5es para definir cabe\u00e7alhos e cookies.</p>"},{"location":"alternatives/#apistar-05","title":"APIStar (&lt;= 0.5)","text":"<p>Antes de decidir construir ReadyAPI eu encontrei o servidor APIStar. Tinha quase tudo que eu estava procurando e tinha um grande projeto.</p> <p>Ele foi uma das primeiras implementa\u00e7\u00f5es de um framework usando Python type hints para declarar par\u00e2metros e requisi\u00e7\u00f5es que eu nunca vi (antes no NestJS e Molten). Eu encontrei ele mais ou menos na mesma \u00e9poca que o Hug. Mas o APIStar utilizava o padr\u00e3o OpenAPI.</p> <p>Ele tinha valida\u00e7\u00e3o de dados autom\u00e1tica, serializa\u00e7\u00e3o de dados e gera\u00e7\u00e3o de schema OpenAPI baseado nos mesmos type hints em v\u00e1rios locais.</p> <p>Defini\u00e7\u00f5es de schema de corpo n\u00e3o utilizavam os mesmos Python type hints como Pydantic, ele era um pouco mais similar ao Marshmallow, ent\u00e3o, o suporte ao editor n\u00e3o seria t\u00e3o bom, ainda assim, APIStar era a melhor op\u00e7\u00e3o dispon\u00edvel.</p> <p>Ele obteve as melhores performances em testes na \u00e9poca (somente batido por Starlette).</p> <p>A princ\u00edpio, ele n\u00e3o tinha uma interface web com documenta\u00e7\u00e3o autom\u00e1tica da API, mas eu sabia que poderia adicionar o Swagger UI a ele.</p> <p>Ele tinha um sistema de inje\u00e7\u00e3o de depend\u00eancia. Ele exigia pr\u00e9-registro dos componentes, como outras ferramentas j\u00e1 discutidas acima. Mas ainda era um grande recurso.</p> <p>Eu nunca fui capaz de usar ele num projeto inteiro, por n\u00e3o ter integra\u00e7\u00e3o de seguran\u00e7a, ent\u00e3o, eu n\u00e3o pude substituir todos os recursos que eu tinha com os geradores full-stack baseados no Flask-apispec. Eu tive em minha gaveta de projetos a id\u00e9ia de criar um pull request adicionando essa funcionalidade.</p> <p>Mas ent\u00e3o, o foco do projeto mudou.</p> <p>Ele n\u00e3o era mais um framework web API, como o criador precisava focar no Starlette.</p> <p>Agora APIStar \u00e9 um conjunto de ferramentas para validar especifica\u00e7\u00f5es OpenAPI, n\u00e3o um framework web.</p> <p>Info</p> <p>APIStar foi criado por Tom Christie. O mesmo cara que criou:</p> <ul> <li>Django REST Framework</li> <li>Starlette (no qual ReadyAPI \u00e9 baseado)</li> <li>Uvicorn (usado por Starlette e ReadyAPI)</li> </ul> <p>ReadyAPI inspirado para</p> <p>Existir.</p> <p>A id\u00e9ia de declarar m\u00faltiplas coisas (valida\u00e7\u00e3o de dados, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o) com os mesmos tipos Python, que ao mesmo tempo fornecesse grande suporte ao editor, era algo que eu considerava uma brilhante id\u00e9ia.</p> <p>E ap\u00f3s procurar por um logo tempo por um framework similar e testar muitas alternativas diferentes, APIStar foi a melhor op\u00e7\u00e3o dispon\u00edvel.</p> <p>Ent\u00e3o APIStar parou de existir como um servidor e Starlette foi criado, e foi uma nova melhor funda\u00e7\u00e3o para tal sistema. Essa foi a inspira\u00e7\u00e3o final para construir ReadyAPI.</p> <p>Eu considero ReadyAPI um \"sucessor espiritual\" para o APIStar, evoluindo e melhorando os recursos, sistema de tipagem e outras partes, baseado na aprendizagem de todas essas ferramentas acima.</p>"},{"location":"alternatives/#usados-por-readyapi","title":"Usados por ReadyAPI","text":""},{"location":"alternatives/#pydantic","title":"Pydantic","text":"<p>Pydantic \u00e9 uma biblioteca para definir valida\u00e7\u00e3o de dados, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o (usando JSON Schema) baseado nos Python type hints.</p> <p>Isso faz dele extremamente intuitivo.</p> <p>Ele \u00e9 compar\u00e1vel ao Marshmallow. Embora ele seja mais r\u00e1pido que Marshmallow em testes de performance. E ele \u00e9 baseado nos mesmos Python type hints, o suporte ao editor \u00e9 \u00f3timo.</p> <p>ReadyAPI usa isso para</p> <p>Controlar toda a valida\u00e7\u00e3o de dados, serializa\u00e7\u00e3o de dados e modelo de documenta\u00e7\u00e3o autom\u00e1tica (baseado no JSON Schema).</p> <p>ReadyAPI ent\u00e3o pega dados do JSON Schema e coloca eles no OpenAPI, \u00e0 parte de todas as outras coisas que ele faz.</p>"},{"location":"alternatives/#starlette","title":"Starlette","text":"<p>Starlette \u00e9 um framework/caixa de ferramentas ASGI peso leve, o que \u00e9 ideal para construir servi\u00e7os ass\u00edncronos de alta performance.</p> <p>Ele \u00e9 muito simples e intuitivo. \u00c9 projetado para ser extens\u00edvel facilmente, e ter componentes modulares.</p> <p>Ele tem:</p> <ul> <li>Performance seriamente impressionante.</li> <li>Suporte a WebSocket.</li> <li>Suporte a GraphQL.</li> <li>Tarefas de processamento interno por tr\u00e1s dos panos.</li> <li>Eventos de inicializa\u00e7\u00e3o e encerramento.</li> <li>Cliente de testes constru\u00eddo com requests.</li> <li>Respostas CORS, GZip, Arquivos Est\u00e1ticos, Streaming.</li> <li>Suporte para Sess\u00e3o e Cookie.</li> <li>100% coberto por testes.</li> <li>C\u00f3digo base 100% anotado com tipagem.</li> <li>Depend\u00eancias complexas Zero.</li> </ul> <p>Starlette \u00e9 atualmente o mais r\u00e1pido framework Python testado. Somente ultrapassado pelo Uvicorn, que n\u00e3o \u00e9 um framework, mas um servidor.</p> <p>Starlette fornece toda a funcionalidade b\u00e1sica de um microframework web.</p> <p>Mas ele n\u00e3o fornece valida\u00e7\u00e3o de dados autom\u00e1tica, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o.</p> <p>Essa \u00e9 uma das principais coisas que ReadyAPI adiciona no topo, tudo baseado em Python type hints (usando Pydantic). Isso, mais o sistema de inje\u00e7\u00e3o de depend\u00eancia, utilidades de seguran\u00e7a, gera\u00e7\u00e3o de schema OpenAPI, etc.</p> <p>Detalhes T\u00e9cnicos</p> <p>ASGI \u00e9 um novo \"padr\u00e3o\" sendo desenvolvido pelos membros do time central do Django. Ele ainda n\u00e3o est\u00e1 como \"Padr\u00e3o Python\" (PEP), embora eles estejam em processo de fazer isso.</p> <p>No entanto, ele j\u00e1 est\u00e1 sendo utilizado como \"padr\u00e3o\" por diversas ferramentas. Isso melhora enormemente a interoperabilidade, como voc\u00ea poderia trocar Uvicorn por qualquer outro servidor ASGI (como Daphne ou Hypercorn), ou voc\u00ea poderia adicionar ferramentas compat\u00edveis com ASGI, como <code>python-socketio</code>.</p> <p>ReadyAPI usa isso para</p> <p>Controlar todas as partes web centrais. Adiciona recursos no topo.</p> <p>A classe <code>ReadyAPI</code> em si herda <code>Starlette</code>.</p> <p>Ent\u00e3o, qualquer coisa que voc\u00ea faz com Starlette, voc\u00ea pode fazer diretamente com ReadyAPI, pois ele \u00e9 basicamente um Starlette com ester\u00f3ides.</p>"},{"location":"alternatives/#uvicorn","title":"Uvicorn","text":"<p>Uvicorn \u00e9 um servidor ASGI peso leve, constru\u00eddo com uvloop e httptools.</p> <p>Ele n\u00e3o \u00e9 um framework web, mas sim um servidor. Por exemplo, ele n\u00e3o fornece ferramentas para roteamento por rotas. Isso \u00e9 algo que um framework como Starlette (ou ReadyAPI) poderia fornecer por cima.</p> <p>Ele \u00e9 o servidor recomendado para Starlette e ReadyAPI.</p> <p>ReadyAPI recomenda isso para</p> <p>O principal servidor web para rodar aplica\u00e7\u00f5es ReadyAPI.</p> <p>Voc\u00ea pode combinar ele com o Gunicorn, para ter um servidor multi-processos ass\u00edncrono.</p> <p>Verifique mais detalhes na se\u00e7\u00e3o Deployment.</p>"},{"location":"alternatives/#performance-e-velocidade","title":"Performance e velocidade","text":"<p>Para entender, comparar e ver a diferen\u00e7a entre Uvicorn, Starlette e ReadyAPI, verifique a se\u00e7\u00e3o sobre Benchmarks.</p>"},{"location":"async/","title":"Concorr\u00eancia e async / await","text":"<p>Detalhes sobre a sintaxe <code>async def</code> para fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota e alguns conceitos de c\u00f3digo ass\u00edncrono, concorr\u00eancia e paralelismo.</p>"},{"location":"async/#com-pressa","title":"Com pressa?","text":"<p>TL;DR:</p> <p>Se voc\u00ea estiver utilizando bibliotecas de terceiros que dizem para voc\u00ea chamar as fun\u00e7\u00f5es com <code>await</code>, como:</p> <pre><code>results = await some_library()\n</code></pre> <p>Ent\u00e3o, declare sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota com <code>async def</code> como:</p> <pre><code>@app.get('/')\nasync def read_results():\n    results = await some_library()\n    return results\n</code></pre> <p>Note</p> <p>Voc\u00ea s\u00f3 pode usar <code>await</code> dentro de fun\u00e7\u00f5es criadas com <code>async def</code>.</p> <p>Se voc\u00ea est\u00e1 usando biblioteca de terceiros que se comunica com alguma coisa (um banco de dados, uma API, sistema de arquivos etc) e n\u00e3o tem suporte para utilizar <code>await</code> (esse \u00e9 atualmente o caso para a maioria das bibliotecas de banco de dados), ent\u00e3o declare suas fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota normalmente, com apenas <code>def</code>, como:</p> <pre><code>@app.get('/')\ndef results():\n    results = some_library()\n    return results\n</code></pre> <p>Se sua aplica\u00e7\u00e3o (de alguma forma) n\u00e3o tem que se comunicar com nada mais e tem que esperar que o respondam, use <code>async def</code>.</p> <p>Se voc\u00ea simplesmente n\u00e3o sabe, use apenas <code>def</code>.</p> <p>Note: Voc\u00ea pode misturar <code>def</code> e <code>async def</code> nas suas fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota tanto quanto necess\u00e1rio e definir cada fun\u00e7\u00e3o usando a melhor op\u00e7\u00e3o para voc\u00ea. ReadyAPI ir\u00e1 fazer a coisa certa com elas.</p> <p>De qualquer forma, em ambos os casos acima, ReadyAPI ir\u00e1 trabalhar assincronamente e ser extremamente r\u00e1pido.</p> <p>Seguindo os passos acima, ele ser\u00e1 capaz de fazer algumas otimiza\u00e7\u00f5es de performance.</p>"},{"location":"async/#detalhes-tecnicos","title":"Detalhes T\u00e9cnicos","text":"<p>Vers\u00f5es modernas de Python tem suporte para \"c\u00f3digo ass\u00edncrono\" usando algo chamado \"corrotinas\", com sintaxe <code>async</code> e <code>await</code>.</p> <p>Vamos ver aquela frase por partes na se\u00e7\u00e3o abaixo:</p> <ul> <li>C\u00f3digo ass\u00edncrono</li> <li><code>async</code> e <code>await</code></li> <li>Corrotinas</li> </ul>"},{"location":"async/#codigo-assincrono","title":"C\u00f3digo ass\u00edncrono","text":"<p>C\u00f3digo ass\u00edncrono apenas significa que a linguagem \ud83d\udcac tem um jeito de dizer para o computador / programa \ud83e\udd16 que em certo ponto, ele \ud83e\udd16 ter\u00e1 que esperar por algo para finalizar em outro lugar. Vamos dizer que esse algo seja chamado \"arquivo lento\" \ud83d\udcdd.</p> <p>Ent\u00e3o, durante esse tempo, o computador pode ir e fazer outro trabalho, enquanto o \"arquivo lento\" \ud83d\udcdd termine.</p> <p>Ent\u00e3o o computador / programa \ud83e\udd16 ir\u00e1 voltar toda hora que tiver uma chance porqu\u00ea ele ainda est\u00e1 esperando o \"arquivo lento\", ou ele \ud83e\udd16 nunca ir\u00e1 terminar todo o trabalho que tem at\u00e9 esse ponto. E ele \ud83e\udd16 ir\u00e1 ver se alguma das tarefas que estava esperando j\u00e1 terminaram, fazendo o que quer que tinham que fazer.</p> <p>Depois, ele \ud83e\udd16 pega a primeira tarefa para finalizar (vamos dizer, nosso \"arquivo lento\" \ud83d\udcdd) e continua o que ele tem que fazer com isso.</p> <p>Esse \"esperar por algo\" normalmente se refere a opera\u00e7\u00f5es I/O que s\u00e3o relativamente \"lentas\" (comparadas a velocidade do processador e da mem\u00f3ria RAM), como esperar por:</p> <ul> <li>dados do cliente para serem enviados atrav\u00e9s da rede</li> <li>dados enviados pelo seu programa para serem recebidos pelo clente atrav\u00e9s da rede</li> <li>conte\u00fado de um arquivo no disco pra ser lido pelo sistema e entregar ao seu programa</li> <li>conte\u00fado que seu programa deu ao sistema para ser escrito no disco</li> <li>uma opera\u00e7\u00e3o remota API</li> <li>uma opera\u00e7\u00e3o no banco de dados para finalizar</li> <li>uma solicita\u00e7\u00e3o no banco de dados esperando o retorno do resultado</li> <li>etc.</li> </ul> <p>Enquanto o tempo de execu\u00e7\u00e3o \u00e9 consumido mais pela espera das opera\u00e7\u00f5es I/O, essas opera\u00e7\u00f5es s\u00e3o chamadas de opera\u00e7\u00f5es \"limitadas por I/O\".</p> <p>Isso \u00e9 chamado de \"ass\u00edncrono\" porqu\u00ea o computador / programa n\u00e3o tem que ser \"sincronizado\" com a tarefa lenta, esperando pelo exato momento que a tarefa finalize, enquanto n\u00e3o faz nada, para ser capaz de pegar o resultado da tarefa e dar continuidade ao trabalho.</p> <p>Ao inv\u00e9s disso, sendo um sistema \"ass\u00edncrono\", uma vez finalizada, a tarefa pode esperar um pouco (alguns microssegundos) para que o computador / programa finalize o que quer que esteja fazendo,e ent\u00e3o volte para pegar o resultado e continue trabalhando com ele.</p> <p>Para \"s\u00edncrono\" (contr\u00e1rio de \"ass\u00edncrono\") tamb\u00e9m \u00e9 utilizado o termo \"sequencial\", porqu\u00ea o computador / programa segue todos os passos, na sequ\u00eancia, antes de trocar para uma tarefa diferente, mesmo se alguns passos envolvam esperar.</p>"},{"location":"async/#concorrencia-e-hamburgueres","title":"Concorr\u00eancia e hamb\u00fargueres","text":"<p>Essa id\u00e9ia de c\u00f3digo ass\u00edncrono descrito acima \u00e9 algo \u00e0s vezes chamado de \"concorr\u00eancia\". E \u00e9 diferente de \"paralelismo\".</p> <p>Concorr\u00eancia e paralelismo ambos s\u00e3o relacionados a \"diferentes coisas acontecendo mais ou menos ao mesmo tempo\".</p> <p>Mas os detalhes entre concorr\u00eancia e paralelismo s\u00e3o bem diferentes.</p> <p>Para ver essa diferen\u00e7a, imagine a seguinte hist\u00f3ria sobre hamb\u00fargueres:</p>"},{"location":"async/#hamburgueres-concorrentes","title":"Hamb\u00fargueres concorrentes","text":"<p>Voc\u00ea vai com seu crush :heart_eyes: na lanchonete, fica na fila enquanto o caixa pega os pedidos das pessoas na sua frente.</p> <p>Ent\u00e3o chega a sua vez, voc\u00ea pede dois saborosos hamb\u00fargueres para voc\u00ea e seu crush :heart_eyes:.</p> <p>Voc\u00ea paga.</p> <p>O caixa diz alguma coisa para o cara na cozinha para que ele tenha que preparar seus hamb\u00fargueres (mesmo embora ele esteja preparando os lanches dos outros clientes).</p> <p>O caixa te entrega seu n\u00famero de chamada.</p> <p>Enquanto voc\u00ea espera, voc\u00ea vai com seu crush :heart_eyes: e pega uma mesa, senta e conversa com seu crush :heart_eyes: por um bom tempo (como seus hamb\u00fargueres s\u00e3o muito saborosos, leva um tempo para serem preparados).</p> <p>Enquanto voc\u00ea est\u00e1 sentado na mesa com seu crush :heart_eyes:, esperando os hamb\u00fargueres, voc\u00ea pode gastar o tempo admirando como lindo, maravilhoso e esperto \u00e9 seu crush :heart_eyes:.</p> <p>Enquanto espera e conversa com seu crush :heart_eyes:, de tempos em tempos, voc\u00ea verifica o n\u00famero de chamada exibido no balc\u00e3o para ver se j\u00e1 \u00e9 sua vez.</p> <p>Ent\u00e3o a certo ponto, \u00e9 finalmente sua vez. Voc\u00ea vai no balc\u00e3o, pega seus hamb\u00fargueres e volta para a mesa.</p> <p>Voc\u00ea e seu crush :heart_eyes: comem os hamb\u00fargueres e aproveitam o tempo.</p> <p>Imagine que voc\u00ea seja o computador  / programa nessa hist\u00f3ria.</p> <p>Enquanto voc\u00ea est\u00e1 na fila, tranquilo, esperando por sua vez, n\u00e3o est\u00e1 fazendo nada \"produtivo\". Mas a fila \u00e9 r\u00e1pida porqu\u00ea o caixa s\u00f3 est\u00e1 pegando os pedidos, ent\u00e3o est\u00e1 tudo bem.</p> <p>Ent\u00e3o, quando \u00e9 sua vez, voc\u00ea faz o trabalho \"produtivo\" de verdade, voc\u00ea processa o menu, decide o que quer, pega a escolha de seu crush :heart_eyes:, paga, verifica se entregou o valor correto em dinheiro ou cart\u00e3o de cr\u00e9dito, verifica se foi cobrado corretamente, verifica se seu pedido est\u00e1 correto etc.</p> <p>Mas ent\u00e3o, embora voc\u00ea ainda n\u00e3o tenha os hamb\u00fargueres, seu trabalho no caixa est\u00e1 \"pausado\", porqu\u00ea voc\u00ea tem que esperar seus hamb\u00fargueres estarem prontos.</p> <p>Mas enquanto voc\u00ea se afasta do balc\u00e3o e senta na mesa com o n\u00famero da sua chamada, voc\u00ea pode trocar sua aten\u00e7\u00e3o para seu crush :heart_eyes:, e \"trabalhar\" nisso. Ent\u00e3o voc\u00ea est\u00e1 novamente fazendo algo muito \"produtivo\", como flertar com seu crush :heart_eyes:.</p> <p>Ent\u00e3o o caixa diz que \"seus hamb\u00fargueres est\u00e3o prontos\" colocando seu n\u00famero no balc\u00e3o, mas voc\u00ea n\u00e3o corre que nem um maluco imediatamente quando o n\u00famero exibido \u00e9 o seu. Voc\u00ea sabe que ningu\u00e9m ir\u00e1 roubar seus hamb\u00fargueres porqu\u00ea voc\u00ea tem o n\u00famero de chamada, e os outros tem os n\u00fameros deles.</p> <p>Ent\u00e3o voc\u00ea espera que seu crush :heart_eyes: termine a hist\u00f3ria que estava contando (terminar o trabalho atual / tarefa sendo processada), sorri gentilmente e diz que voc\u00ea est\u00e1 indo buscar os hamb\u00fargueres.</p> <p>Ent\u00e3o voc\u00ea vai no balc\u00e3o, para a tarefa inicial que agora est\u00e1 finalizada, pega os hamb\u00fargueres, e leva para a mesa. Isso finaliza esse passo / tarefa da intera\u00e7\u00e3o com o balc\u00e3o. Agora \u00e9 criada uma nova tarefa, \"comer hamb\u00fargueres\", mas a tarefa anterior, \"pegar os hamb\u00fargueres\" j\u00e1 est\u00e1 finalizada.</p>"},{"location":"async/#hamburgueres-paralelos","title":"Hamb\u00fargueres paralelos","text":"<p>Voc\u00ea vai com seu crush :heart_eyes: em uma lanchonete paralela.</p> <p>Voc\u00ea fica na fila enquanto alguns (vamos dizer 8) caixas pegam os pedidos das pessoas na sua frente.</p> <p>Todo mundo antes de voc\u00ea est\u00e1 esperando pelos hamb\u00fargueres estarem prontos antes de deixar o caixa porqu\u00ea cada um dos 8 caixas vai e prepara o hamb\u00farguer antes de pegar o pr\u00f3ximo pedido.</p> <p>Ent\u00e3o \u00e9 finalmente sua vez, e pede 2 hamb\u00fargueres muito saborosos para voc\u00ea e seu crush :heart_eyes:.</p> <p>Voc\u00ea paga.</p> <p>O caixa vai para a cozinha.</p> <p>Voc\u00ea espera, na frente do balc\u00e3o, para que ningu\u00e9m pegue seus hamb\u00fargueres antes de voc\u00ea, j\u00e1 que n\u00e3o tem n\u00fameros de chamadas.</p> <p>Enquanto voc\u00ea e seu crush :heart_eyes: est\u00e3o ocupados n\u00e3o permitindo que ningu\u00e9m passe a frente e pegue seus hamb\u00fargueres assim que estiverem prontos, voc\u00ea n\u00e3o pode dar aten\u00e7\u00e3o ao seu crush :heart_eyes:.</p> <p>Isso \u00e9 trabalho \"s\u00edncrono\", voc\u00ea est\u00e1 \"sincronizado\" com o caixa / cozinheiro. Voc\u00ea tem que esperar e estar l\u00e1 no exato momento que o caixa / cozinheiro terminar os hamb\u00fargueres e d\u00e1-los a voc\u00ea, ou ent\u00e3o, outro algu\u00e9m pode peg\u00e1-los.</p> <p>Ent\u00e3o seu caixa / cozinheiro finalmente volta com seus hamb\u00fargueres, depois de um longo tempo esperando por eles em frente ao balc\u00e3o.</p> <p>Voc\u00ea pega seus hamb\u00fargueres e vai para a mesa com seu crush :heart_eyes:.</p> <p>Voc\u00eas comem os hamb\u00fargueres, e o trabalho est\u00e1 terminado.</p> <p>N\u00e3o houve muita conversa ou flerte j\u00e1 que a maior parte do tempo foi gasto esperando os lanches na frente do balc\u00e3o.</p> <p>Nesse cen\u00e1rio dos hamb\u00fargueres paralelos, voc\u00ea \u00e9 um computador / programa com dois processadores (voc\u00ea e seu crush :heart_eyes:), ambos esperando e dedicando a aten\u00e7\u00e3o de estar \"esperando no balc\u00e3o\" por um bom tempo.</p> <p>A lanchonete paralela tem 8 processadores (caixas / cozinheiros). Enquanto a lanchonete dos hamb\u00fargueres concorrentes tinham apenas 2 (um caixa e um cozinheiro).</p> <p>Ainda assim, a \u00faltima experi\u00eancia n\u00e3o foi a melhor.</p> <p>Essa poderia ser a hist\u00f3ria paralela equivalente aos hamb\u00fargueres.</p> <p>Para um exemplo \"mais real\", imagine um banco.</p> <p>At\u00e9 recentemente, a maioria dos bancos tinha muitos caixas e uma grande fila.</p> <p>Todos os caixas fazendo todo o trabalho, um cliente ap\u00f3s o outro.</p> <p>E voc\u00ea tinha que esperar na fila por um longo tempo ou poderia perder a vez.</p> <p>Voc\u00ea provavelmente n\u00e3o gostaria de levar seu crush :heart_eyes: com voc\u00ea para um rolezinho no banco.</p>"},{"location":"async/#conclusao-dos-hamburgueres","title":"Conclus\u00e3o dos hamb\u00fargueres","text":"<p>Nesse cen\u00e1rio dos \"hamb\u00fargueres com seu crush :heart_eyes:\", como tem muita espera, faz mais sentido ter um sistema concorrente.</p> <p>Esse \u00e9 o caso da maioria das aplica\u00e7\u00f5es web.</p> <p>Geralmente s\u00e3o muitos usu\u00e1rios, e seu servidor est\u00e1 esperando pelas suas conex\u00f5es n\u00e3o t\u00e3o boas para enviar as requisi\u00e7\u00f5es.</p> <p>E ent\u00e3o esperando novamente pelas respostas voltarem.</p> <p>Essa \"espera\" \u00e9 medida em microssegundos, e ainda assim, somando tudo, \u00e9 um monte de espera no final.</p> <p>Por isso que faz muito mais sentido utilizar c\u00f3digo ass\u00edncrono para APIs web.</p> <p>A maioria dos frameworks Python existentes mais populares (incluindo Flask e Django) foram criados antes que os novos recursos ass\u00edncronos existissem em Python. Ent\u00e3o, os meios que eles podem ser colocados em produ\u00e7\u00e3o para suportar execu\u00e7\u00e3o paralela mais a forma antiga de execu\u00e7\u00e3o ass\u00edncrona n\u00e3o s\u00e3o t\u00e3o poderosos quanto as novas capacidades.</p> <p>Mesmo embora a especifica\u00e7\u00e3o principal para web ass\u00edncrono em Python (ASGI) foi desenvolvida no Django, para adicionar suporte para WebSockets.</p> <p>Esse tipo de assincronicidade \u00e9 o que fez NodeJS popular (embora NodeJS n\u00e3o seja paralelo) e que essa seja a for\u00e7a do Go como uma linguagem de programa.</p> <p>E esse \u00e9 o mesmo n\u00edvel de performance que voc\u00ea tem com o ReadyAPI.</p> <p>E como voc\u00ea pode ter paralelismo e sincronicidade ao mesmo tempo, voc\u00ea tem uma maior performance do que a maioria dos frameworks NodeJS testados e lado a lado com Go, que \u00e9 uma linguagem compilada pr\u00f3xima ao C (tudo gra\u00e7as ao Starlette).</p>"},{"location":"async/#concorrencia-e-melhor-que-paralelismo","title":"Concorr\u00eancia \u00e9 melhor que paralelismo?","text":"<p>N\u00e3o! Essa n\u00e3o \u00e9 a moral da hist\u00f3ria.</p> <p>Concorr\u00eancia \u00e9 diferente de paralelismo. E \u00e9 melhor em cen\u00e1rios espec\u00edficos que envolvam um monte de espera. Por isso, geralmente \u00e9 muito melhor do que paralelismo para desenvolvimento de aplica\u00e7\u00f5es web. Mas n\u00e3o para tudo.</p> <p>Ent\u00e3o, para equilibrar tudo, imagine a seguinte historinha:</p> <p>Voc\u00ea tem que limpar uma grande casa suja.</p> <p>Sim, essa \u00e9 toda a hist\u00f3ria.</p> <p>N\u00e3o h\u00e1 espera em lugar algum, apenas um monte de trabalho para ser feito, em m\u00faltiplos c\u00f4modos da casa.</p> <p>Voc\u00ea poderia ter chamadas como no exemplo dos hamb\u00fargueres, primeiro a sala de estar, ent\u00e3o a cozinha, mas voc\u00ea n\u00e3o est\u00e1 esperando por nada, apenas limpar e limpar, as chamadas n\u00e3o afetariam em nada.</p> <p>Levaria o mesmo tempo para finalizar com ou sem chamadas (concorr\u00eancia) e voc\u00ea teria feito o mesmo tanto de trabalho.</p> <p>Mas nesse caso, se voc\u00ea trouxesse os 8 ex-caixas / cozinheiros / agora-faxineiros, e cada um deles (mais voc\u00ea) pudessem dividir a casa para limp\u00e1-la, voc\u00eas fariam toda a limpeza em paralelo, com a ajuda extra, e terminariam muito mais cedo.</p> <p>Nesse cen\u00e1rio, cada um dos faxineiros (incluindo voc\u00ea) poderia ser um processador, fazendo a sua parte do trabalho.</p> <p>E a maior parte do tempo de execu\u00e7\u00e3o \u00e9 tomada por trabalho (ao inv\u00e9s de ficar esperando), e o trabalho em um computador \u00e9 feito pela CPU, que podem gerar problemas que s\u00e3o chamados de \"limite de CPU\".</p> <p>Exemplos comuns de limite de CPU s\u00e3o coisas que exigem processamento matem\u00e1tico complexo.</p> <p>Por exemplo:</p> <ul> <li>Processamento de \u00e1udio ou imagem</li> <li> <p>Vis\u00e3o do Computador: uma imagem \u00e9 composta por milh\u00f5es de pixels, cada pixel tem 3 valores (cores, processamento que normalmente exige alguma computa\u00e7\u00e3o em todos esses pixels ao mesmo tempo)</p> </li> <li> <p>Machine Learning: Normalmente exige muita multiplica\u00e7\u00e3o de matrizes e vetores. Pense numa grande folha de papel com n\u00fameros e multiplicando todos eles juntos e ao mesmo tempo.</p> </li> <li> <p>Deep Learning: Esse \u00e9 um subcampo do Machine Learning, ent\u00e3o o mesmo se aplica. A diferen\u00e7a \u00e9 que n\u00e3o h\u00e1 apenas uma grande folha de papel com n\u00fameros para multiplicar, mas um grande conjunto de folhas de papel, e em muitos casos, voc\u00ea utiliza um processador especial para construir e/ou usar modelos.</p> </li> </ul>"},{"location":"async/#concorrencia-paralelismo-web-machine-learning","title":"Concorr\u00eancia + Paralelismo: Web + Machine learning","text":"<p>Com ReadyAPI voc\u00ea pode levar a vantagem da concorr\u00eancia que \u00e9 muito comum para desenvolvimento web (o mesmo atrativo de NodeJS).</p> <p>Mas voc\u00ea tamb\u00e9m pode explorar os benef\u00edcios do paralelismo e multiprocessamento (tendo m\u00faltiplos processadores rodando em paralelo) para trabalhos pesados que geram limite de CPU como aqueles em sistemas de Machine Learning.</p> <p>Isso, mais o simples fato que Python \u00e9 a principal linguagem para Data Science, Machine Learning e especialmente Deep Learning, faz do ReadyAPI uma \u00f3tima escolha para APIs web e aplica\u00e7\u00f5es com Data Science / Machine Learning (entre muitas outras).</p> <p>Para ver como alcan\u00e7ar esse paralelismo em produ\u00e7\u00e3o veja a se\u00e7\u00e3o sobre Deployment.</p>"},{"location":"async/#async-e-await","title":"<code>async</code> e <code>await</code>","text":"<p>Vers\u00f5es modernas do Python tem um modo muito intuitivo para definir c\u00f3digo ass\u00edncrono. Isso faz parecer normal o c\u00f3digo \"sequencial\" e fazer o \"esperar\" para voc\u00ea nos momentos certos.</p> <p>Quando tem uma opera\u00e7\u00e3o que exigir\u00e1 espera antes de dar os resultados e tem suporte para esses recursos Python, voc\u00ea pode escrever assim:</p> <pre><code>burgers = await get_burgers(2)\n</code></pre> <p>A chave aqui \u00e9 o <code>await</code>. Ele diz ao Python que ele tem que esperar por <code>get_burgers(2)</code> para finalizar suas coisas antes de armazenar os resultados em <code>burgers</code>. Com isso, o Python saber\u00e1 que ele pode ir e fazer outras coisas nesse meio tempo (como receber outra requisi\u00e7\u00e3o).</p> <p>Para o <code>await</code> funcionar, tem que estar dentro de uma fun\u00e7\u00e3o que suporte essa assincronicidade. Para fazer isso, apenas declare a fun\u00e7\u00e3o com <code>async def</code>:</p> <pre><code>async def get_burgers(number: int):\n    # Fazer alguma coisa ass\u00edncrona para criar os hamb\u00fargueres\n    return burgers\n</code></pre> <p>...ao inv\u00e9s de <code>def</code>:</p> <pre><code># Isso n\u00e3o \u00e9 ass\u00edncrono\ndef get_sequential_burgers(number: int):\n    # Faz alguma coisa sequencial para criar os hamb\u00fargueres\n    return burgers\n</code></pre> <p>Com <code>async def</code>, o Python sabe que, dentro dessa fun\u00e7\u00e3o, tem que estar ciente das express\u00f5es <code>await</code>, e que isso pode \"pausar\" a execu\u00e7\u00e3o dessa fun\u00e7\u00e3o, e poder\u00e1 fazer outra coisa antes de voltar.</p> <p>Quando voc\u00ea quiser chamar uma fun\u00e7\u00e3o <code>async def</code>, voc\u00ea tem que \"esperar\". Ent\u00e3o, isso n\u00e3o funcionar\u00e1:</p> <pre><code># Isso n\u00e3o ir\u00e1 funcionar, porqu\u00ea get_burgers foi definido com: async def\nburgers = get_burgers(2)\n</code></pre> <p>Ent\u00e3o, se voc\u00ea est\u00e1 usando uma biblioteca que diz que voc\u00ea pode cham\u00e1-la com <code>await</code>, voc\u00ea precisa criar as fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota com <code>async def</code>, como em:</p> <pre><code>@app.get('/burgers')\nasync def read_burgers():\n    burgers = await get_burgers(2)\n    return burgers\n</code></pre>"},{"location":"async/#mais-detalhes-tecnicos","title":"Mais detalhes t\u00e9cnicos","text":"<p>Voc\u00ea deve ter observado que <code>await</code> pode ser usado somente dentro de fun\u00e7\u00f5es definidas com <code>async def</code>.</p> <p>Mas ao mesmo tempo, fun\u00e7\u00f5es definidas com <code>async def</code> tem que ser aguardadas. Ent\u00e3o, fun\u00e7\u00f5es com <code>async def</code> pdem ser chamadas somente dentro de fun\u00e7\u00f5es definidas com <code>async def</code> tamb\u00e9m.</p> <p>Ent\u00e3o, sobre o ovo e a galinha, como voc\u00ea chama a primeira fun\u00e7\u00e3o async?</p> <p>Se voc\u00ea estivar trabalhando com ReadyAPI n\u00e3o ter\u00e1 que se preocupar com isso, porqu\u00ea essa \"primeira\" fun\u00e7\u00e3o ser\u00e1 a sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, e o ReadyAPI saber\u00e1 como fazer a coisa certa.</p> <p>Mas se voc\u00ea quiser usar <code>async</code> / <code>await</code> sem ReadyAPI, verifique a documenta\u00e7\u00e3o oficial Python.</p>"},{"location":"async/#outras-formas-de-codigo-assincrono","title":"Outras formas de c\u00f3digo ass\u00edncrono","text":"<p>Esse estilo de usar <code>async</code> e <code>await</code> \u00e9 relativamente novo na linguagem.</p> <p>Mas ele faz o trabalho com c\u00f3digo ass\u00edncrono muito mais f\u00e1cil.</p> <p>Essa mesma sintaxe (ou quase a mesma) foi tamb\u00e9m inclu\u00edda recentemente em vers\u00f5es modernas do JavaScript (no navegador e NodeJS).</p> <p>Mas antes disso, controlar c\u00f3digo ass\u00edncrono era bem mais complexo e dif\u00edcil.</p> <p>Nas vers\u00f5es anteriores do Python, voc\u00ea poderia utilizar threads ou Gevent. Mas o c\u00f3digo \u00e9 um pouco mais complexo de entender, debugar, e pensar sobre.</p> <p>Nas vers\u00f5es anteriores do NodeJS / Navegador JavaScript, voc\u00ea poderia utilizar \"callbacks\". O que leva ao  inferno do callback.</p>"},{"location":"async/#corrotinas","title":"Corrotinas","text":"<p>Corrotina \u00e9 apenas um jeito bonitinho para a coisa que \u00e9 retornada de uma fun\u00e7\u00e3o <code>async def</code>. O Python sabe que \u00e9 uma fun\u00e7\u00e3o que pode come\u00e7ar e terminar em algum ponto, mas que pode ser pausada internamente tamb\u00e9m, sempre que tiver um <code>await</code> dentro dela.</p> <p>Mas toda essa funcionalidade de c\u00f3digo ass\u00edncrono com <code>async</code> e <code>await</code> \u00e9 muitas vezes resumida como \"corrotina\". \u00c9 compar\u00e1vel ao principal recurso chave do Go, a \"Gorotina\".</p>"},{"location":"async/#conclusao","title":"Conclus\u00e3o","text":"<p>Vamos ver a mesma frase com o conte\u00fado cima:</p> <p>Vers\u00f5es modernas do Python tem suporte para \"c\u00f3digo ass\u00edncrono\" usando algo chamado \"corrotinas\", com sintaxe <code>async</code> e <code>await</code>.</p> <p>Isso pode fazer mais sentido agora.</p> <p>Tudo isso \u00e9 o que deixa o ReadyAPI poderoso (atrav\u00e9s do Starlette) e que o faz ter uma performance impressionante.</p>"},{"location":"async/#detalhes-muito-tecnicos","title":"Detalhes muito t\u00e9cnicos","text":"<p>Warning</p> <p>Voc\u00ea pode provavelmente pular isso.</p> <p>Esses s\u00e3o detalhes muito t\u00e9cnicos de como ReadyAPI funciona por baixo do cap\u00f4.</p> <p>Se voc\u00ea tem algum conhecimento t\u00e9cnico (corrotinas, threads, blocking etc) e est\u00e1 curioso sobre como o ReadyAPI controla o <code>async def</code> vs normal <code>def</code>, v\u00e1 em frente.</p>"},{"location":"async/#funcoes-de-operacao-de-rota","title":"Fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota","text":"<p>Quando voc\u00ea declara uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota com <code>def</code> normal ao inv\u00e9s de <code>async def</code>, ela \u00e9 rodada em uma threadpool externa que ent\u00e3o \u00e9 aguardada, ao inv\u00e9s de ser chamada diretamente (ela poderia bloquear o servidor).</p> <p>Se voc\u00ea est\u00e1 chegando de outro framework ass\u00edncrono que n\u00e3o faz o trabalho descrito acima e voc\u00ea est\u00e1 acostumado a definir triviais fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota com simples <code>def</code> para ter um m\u00ednimo ganho de performance (cerca de 100 nanosegundos), por favor observe que no ReadyAPI o efeito pode ser bem o oposto. Nesses casos, \u00e9 melhor usar <code>async def</code> a menos que suas fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota utilizem c\u00f3digo que performem bloqueamento IO.</p> <p>Ainda, em ambas as situa\u00e7\u00f5es, as chances s\u00e3o que o ReadyAPI ser\u00e1 ainda mais r\u00e1pido do que (ou ao menos compar\u00e1vel a) seus frameworks antecessores.</p>"},{"location":"async/#dependencias","title":"Depend\u00eancias","text":"<p>O mesmo se aplica para as depend\u00eancias. Se uma depend\u00eancia tem as fun\u00e7\u00f5es com padr\u00e3o <code>def</code> ao inv\u00e9s de <code>async def</code>, ela \u00e9 rodada no threadpool externo.</p>"},{"location":"async/#sub-dependencias","title":"Sub-depend\u00eancias","text":"<p>Voc\u00ea pode ter m\u00faltiplas depend\u00eancias e sub-depend\u00eancias exigindo uma a outra (como par\u00e2metros de defini\u00e7\u00f5es de fun\u00e7\u00f5es), algumas delas podem ser criadas com <code>async def</code> e algumas com <code>def</code> normal. Isso ainda poderia funcionar, e aquelas criadas com <code>def</code> podem ser chamadas em uma thread externa ao inv\u00e9s de serem \"aguardadas\".</p>"},{"location":"async/#outras-funcoes-de-utilidade","title":"Outras fun\u00e7\u00f5es de utilidade","text":"<p>Qualquer outra fun\u00e7\u00e3o de utilidade que voc\u00ea chame diretamente pode ser criada com <code>def</code> normal ou <code>async def</code> e o ReadyAPI n\u00e3o ir\u00e1 afetar o modo como voc\u00ea a chama.</p> <p>Isso est\u00e1 em contraste \u00e0s fun\u00e7\u00f5es que o ReadyAPI chama para voc\u00ea: fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota e depend\u00eancias.</p> <p>Se sua fun\u00e7\u00e3o de utilidade \u00e9 uma fun\u00e7\u00e3o normal com <code>def</code>, ela ser\u00e1 chamada diretamente (como voc\u00ea a escreve no c\u00f3digo), n\u00e3o em uma threadpool, se a fun\u00e7\u00e3o \u00e9 criada com <code>async def</code> ent\u00e3o voc\u00ea deve esperar por essa fun\u00e7\u00e3o quando voc\u00ea cham\u00e1-la no seu c\u00f3digo.</p> <p>Novamente, esses s\u00e3o detalhes muito t\u00e9cnicos que provavelmente possam ser \u00fateis caso voc\u00ea esteja procurando por eles.</p> <p>Caso contr\u00e1rio, voc\u00ea deve ficar bem com as dicas da se\u00e7\u00e3o acima: Com pressa?.</p>"},{"location":"benchmarks/","title":"Compara\u00e7\u00f5es","text":"<p>As compara\u00e7\u00f5es independentes da TechEmpower mostram as aplica\u00e7\u00f5es ReadyAPI rodando com Uvicorn como um dos frameworks Python mais r\u00e1pidos dispon\u00edveis, somente atr\u00e1s dos pr\u00f3prios Starlette e Uvicorn (utilizados internamente pelo ReadyAPI). (*)</p> <p>Mas quando se checa benchmarks e compara\u00e7\u00f5es voc\u00ea deveria ter o seguinte em mente.</p>"},{"location":"benchmarks/#comparacoes-e-velocidade","title":"Compara\u00e7\u00f5es e velocidade","text":"<p>Ao verificar os benchmarks, \u00e9 comum observar algumas ferramentas de diferentes tipos comparadas como equivalentes.</p> <p>Especificamente, observa-se Uvicorn, Starlette e ReadyAPI comparados juntos (entre muitas outras ferramentas).</p> <p>Quanto mais simples o problema resolvido pela ferramenta, melhor a performance que ela ter\u00e1. E a maioria dos benchmarks n\u00e3o testam as caracter\u00edsticas adicionais fornecidas pela ferramenta.</p> <p>A hierarquia segue assim:</p> <ul> <li> <p>Uvicorn: um servidor ASGI</p> <ul> <li>Starlette: (utiliza Uvicorn) um microframework web<ul> <li>ReadyAPI: (utiliza Starlette) um microframework de API com v\u00e1rios recursos adicionais para constru\u00e7\u00e3o de APIs, com valida\u00e7\u00e3o de dados, etc.</li> </ul> </li> </ul> </li> <li> <p>Uvicorn:</p> <ul> <li>Ter\u00e1 a melhor performance, j\u00e1 que ele n\u00e3o tem muito c\u00f3digo extra al\u00e9m do servidor em si.</li> <li>Voc\u00ea n\u00e3o conseguiria escrever uma aplica\u00e7\u00e3o em Uvicorn diretamente. Isso significa que seu c\u00f3digo deveria conter, mais ou menos, todo o c\u00f3digo fornecido pelo Starlette (ou ReadyAPI). E se voc\u00ea fizesse isso, sua aplica\u00e7\u00e3o final poderia ter a mesma sobrecarga que utilizar um framework que minimiza o c\u00f3digo e bugs da sua aplica\u00e7\u00e3o.</li> <li>Se voc\u00ea quer fazer compara\u00e7\u00f5es com o Uvicorn, compare com Daphne, Hypercorn, uWSGI, etc. Servidores de Aplica\u00e7\u00e3o.</li> </ul> </li> <li>Starlette:<ul> <li>Ter\u00e1 a melhor performance, depois do Uvicorn. De fato, Starlette utiliza Uvicorn para rodar. Ent\u00e3o, ele provavelmente ser\u00e1 \"mais lento\" que Uvicorn por ter que executar mais c\u00f3digo.</li> <li>Mas ele fornece a voc\u00ea as ferramentas para construir aplica\u00e7\u00f5es web simples, com roteamento baseado em caminhos, etc.</li> <li>Se voc\u00ea quer fazer compara\u00e7\u00f5es com o Starlette, compare com Sanic, Flask, Django, etc. Frameworks Web (ou microframeworks).</li> </ul> </li> <li>ReadyAPI:<ul> <li>Do mesmo modo que Starlette utiliza Uvicorn e n\u00e3o pode ser mais r\u00e1pido que ele, ReadyAPI utiliza o Starlette, ent\u00e3o n\u00e3o tem como ser mais r\u00e1pido do que o Starlette.</li> <li>ReadyAPI fornece mais recursos acima do Starlette. Recursos que voc\u00ea quase sempre precisar\u00e1 quando construir APIs, como valida\u00e7\u00e3o de dados e serializa\u00e7\u00e3o. E utilizando eles, voc\u00ea ter\u00e1 uma documenta\u00e7\u00e3o autom\u00e1tica de gra\u00e7a (a documenta\u00e7\u00e3o autom\u00e1tica nem sequer adiciona peso para rodar as aplica\u00e7\u00f5es, ela \u00e9 gerada na inicializa\u00e7\u00e3o).</li> <li>Se voc\u00ea nunca utilizou ReadyAPI mas utilizou diretamente o Starlette (ou outra ferramenta, como Sanic, Flask, Responder, etc) voc\u00ea teria que implementar toda valida\u00e7\u00e3o de dados e serializa\u00e7\u00e3o por conta. Ent\u00e3o, sua aplica\u00e7\u00e3o final poderia ainda ter a mesma sobrecarga como se fosse desenvolvida com ReadyAPI. Em muitos casos, a valida\u00e7\u00e3o de dados e serializa\u00e7\u00e3o \u00e9 o maior peda\u00e7o de c\u00f3digo escrito em aplica\u00e7\u00f5es.</li> <li>Ent\u00e3o, ao utilizar o ReadyAPI voc\u00ea estar\u00e1 economizando tempo de desenvolvimento, evitar\u00e1 bugs, linhas de c\u00f3digo, e voc\u00ea provavelmente ter\u00e1 a mesma performance (ou melhor) do que n\u00e3o utiliz\u00e1-lo (j\u00e1 que voc\u00ea teria que implementar tudo isso em seu c\u00f3digo).</li> <li>Se voc\u00ea quer fazer compara\u00e7\u00f5es com o ReadyAPI, compare com um framework  (ou conjunto de ferramentas) para aplica\u00e7\u00f5es web que forne\u00e7a valida\u00e7\u00e3o de dados, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o, como Flask-apispec, NestJS, Molten, etc. Frameworks com valida\u00e7\u00e3o de dados autom\u00e1tica, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o integradas.</li> </ul> </li> </ul>"},{"location":"contributing/","title":"Desenvolvimento - Contribuindo","text":"<p>Primeiramente, voc\u00ea deveria ver os meios b\u00e1sicos para ajudar ReadyAPI e pedir ajuda.</p>"},{"location":"contributing/#desenvolvendo","title":"Desenvolvendo","text":"<p>Se voc\u00ea j\u00e1 clonou o reposit\u00f3rio e precisa mergulhar no c\u00f3digo, aqui est\u00e3o algumas orienta\u00e7\u00f5es para configurar seu ambiente.</p>"},{"location":"contributing/#ambiente-virtual-com-venv","title":"Ambiente virtual com <code>venv</code>","text":"<p>Voc\u00ea pode criar um ambiente virtual em um diret\u00f3rio utilizando o m\u00f3dulo <code>venv</code> do Python:</p> <pre><code>$ python -m venv env\n</code></pre> <p>Isso criar\u00e1 o diret\u00f3rio <code>./env/</code> com os bin\u00e1rios Python e ent\u00e3o voc\u00ea ser\u00e1 capaz de instalar pacotes nesse ambiente isolado.</p>"},{"location":"contributing/#ativar-o-ambiente","title":"Ativar o ambiente","text":"<p>Ative o novo ambiente com:</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source ./env/bin/activate\n</code></pre> <pre><code>$ .\\env\\Scripts\\Activate.ps1\n</code></pre> <p>Ou se voc\u00ea usa Bash para Windows (por exemplo Git Bash):</p> <pre><code>$ source ./env/Scripts/activate\n</code></pre> <p>Para verificar se funcionou, use:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which pip\n\nsome/directory/readyapi/env/bin/pip\n</code></pre> <pre><code>$ Get-Command pip\n\nsome/directory/readyapi/env/bin/pip\n</code></pre> <p>Se ele exibir o bin\u00e1rio <code>pip</code> em <code>env/bin/pip</code> ent\u00e3o funcionou. \ud83c\udf89</p> <p>Tip</p> <p>Toda vez que voc\u00ea instalar um novo pacote com <code>pip</code> nesse ambiente, ative o ambiente novamente.</p> <p>Isso garante que se voc\u00ea usar um programa instalado por aquele pacote, voc\u00ea utilizar\u00e1 aquele de seu ambiente local e n\u00e3o outro que possa estar instalado globalmente.</p>"},{"location":"contributing/#pip","title":"pip","text":"<p>Ap\u00f3s ativar o ambiente como descrito acima:</p> <pre><code>$ pip install -r requirements.txt\n\n---&gt; 100%\n</code></pre> <p>Isso ir\u00e1 instalar todas as depend\u00eancias e seu ReadyAPI local em seu ambiente local.</p>"},{"location":"contributing/#usando-seu-readyapi-local","title":"Usando seu ReadyAPI local","text":"<p>Se voc\u00ea cria um arquivo Python que importa e usa ReadyAPI, e roda com Python de seu ambiente local, ele ir\u00e1 utilizar o c\u00f3digo fonte de seu ReadyAPI local.</p> <p>E se voc\u00ea atualizar o c\u00f3digo fonte do ReadyAPI local, como ele \u00e9 instalado com <code>-e</code>, quando voc\u00ea rodar aquele arquivo Python novamente, ele ir\u00e1 utilizar a nova vers\u00e3o do ReadyAPI que voc\u00ea acabou de editar.</p> <p>Desse modo, voc\u00ea n\u00e3o tem que \"instalar\" sua vers\u00e3o local para ser capaz de testar cada mudan\u00e7a.</p>"},{"location":"contributing/#formato","title":"Formato","text":"<p>Tem um arquivo que voc\u00ea pode rodar que ir\u00e1 formatar e limpar todo o seu c\u00f3digo:</p> <pre><code>$ bash scripts/format.sh\n</code></pre> <p>Ele ir\u00e1 organizar tamb\u00e9m todos os seus imports.</p> <p>Para que ele organize os imports corretamente, voc\u00ea precisa ter o ReadyAPI instalado localmente em seu ambiente, com o comando na se\u00e7\u00e3o acima usando <code>-e</code>.</p>"},{"location":"contributing/#formato-dos-imports","title":"Formato dos imports","text":"<p>Tem outro script que formata todos os imports e garante que voc\u00ea n\u00e3o tenha imports n\u00e3o utilizados:</p> <pre><code>$ bash scripts/format-imports.sh\n</code></pre> <p>Como ele roda um comando ap\u00f3s o outro, modificando e revertendo muitos arquivos, ele demora um pouco para concluir, ent\u00e3o pode ser um pouco mais f\u00e1cil utilizar <code>scripts/format.sh</code> frequentemente e <code>scripts/format-imports.sh</code> somente ap\u00f3s \"commitar uma branch\".</p>"},{"location":"contributing/#documentacao","title":"Documenta\u00e7\u00e3o","text":"<p>Primeiro, tenha certeza de configurar seu ambiente como descrito acima, isso ir\u00e1 instalar todas as requisi\u00e7\u00f5es.</p> <p>A documenta\u00e7\u00e3o usa MkDocs.</p> <p>E existem ferramentas/scripts extras para controlar as tradu\u00e7\u00f5es em <code>./scripts/docs.py</code>.</p> <p>Tip</p> <p>Voc\u00ea n\u00e3o precisa ver o c\u00f3digo em <code>./scripts/docs.py</code>, voc\u00ea apenas o utiliza na linha de comando.</p> <p>Toda a documenta\u00e7\u00e3o est\u00e1 no formato Markdown no diret\u00f3rio <code>./docs/pt/</code>.</p> <p>Muitos dos tutoriais tem blocos de c\u00f3digo.</p> <p>Na maioria dos casos, esse blocos de c\u00f3digo s\u00e3o aplica\u00e7\u00f5es completas que podem ser rodadas do jeito que est\u00e3o apresentados.</p> <p>De fato, esses blocos de c\u00f3digo n\u00e3o est\u00e3o escritos dentro do Markdown, eles s\u00e3o arquivos Python dentro do diret\u00f3rio <code>./docs_src/</code>.</p> <p>E esses arquivos Python s\u00e3o inclu\u00eddos/injetados na documenta\u00e7\u00e3o quando se gera o site.</p>"},{"location":"contributing/#testes-para-documentacao","title":"Testes para Documenta\u00e7\u00e3o","text":"<p>A maioria dos testes na verdade rodam encima dos arquivos fonte na documenta\u00e7\u00e3o.</p> <p>Isso ajuda a garantir:</p> <ul> <li>Que a documenta\u00e7\u00e3o esteja atualizada.</li> <li>Que os exemplos da documenta\u00e7\u00e3o possam ser rodadas do jeito que est\u00e3o apresentadas.</li> <li>A maior parte dos recursos \u00e9 coberta pela documenta\u00e7\u00e3o, garantida por cobertura de testes.</li> </ul> <p>Durante o desenvolvimento local, existe um script que constr\u00f3i o site e procura por quaisquer mudan\u00e7as, carregando na hora:</p> <pre><code>$ python ./scripts/docs.py live\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Serving on http://127.0.0.1:8008\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start watching changes\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start detecting changes\n</code></pre> <p>Isso ir\u00e1 servir a documenta\u00e7\u00e3o em <code>http://127.0.0.1:8008</code>.</p> <p>Desse jeito, voc\u00ea poder\u00e1 editar a documenta\u00e7\u00e3o/arquivos fonte e ver as mudan\u00e7as na hora.</p>"},{"location":"contributing/#typer-cli-opcional","title":"Typer CLI (opcional)","text":"<p>As instru\u00e7\u00f5es aqui mostram como utilizar scripts em <code>./scripts/docs.py</code> com o programa <code>python</code> diretamente.</p> <p>Mas voc\u00ea pode usar tamb\u00e9m Typer CLI, e voc\u00ea ter\u00e1 auto-completa\u00e7\u00e3o para comandos no seu terminal ap\u00f3s instalar o completion.</p> <p>Se voc\u00ea instalou Typer CLI, voc\u00ea pode instalar completion com:</p> <pre><code>$ typer --install-completion\n\nzsh completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n</code></pre>"},{"location":"contributing/#aplicacoes-e-documentacao-ao-mesmo-tempo","title":"Aplica\u00e7\u00f5es e documenta\u00e7\u00e3o ao mesmo tempo","text":"<p>Se voc\u00ea rodar os exemplos com, por exemplo:</p> <pre><code>$ uvicorn tutorial001:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>como Uvicorn utiliza por padr\u00e3o a porta <code>8000</code>, a documenta\u00e7\u00e3o na porta <code>8008</code> n\u00e3o dar\u00e1 conflito.</p>"},{"location":"contributing/#traducoes","title":"Tradu\u00e7\u00f5es","text":"<p>Ajuda com tradu\u00e7\u00f5es \u00c9 MUITO apreciada! E essa tarefa n\u00e3o pode ser conclu\u00edda sem a ajuda da comunidade. \ud83c\udf0e \ud83d\ude80</p> <p>Aqui est\u00e3o os passos para ajudar com as tradu\u00e7\u00f5es.</p>"},{"location":"contributing/#dicas-e-orientacoes","title":"Dicas e orienta\u00e7\u00f5es","text":"<ul> <li>Verifique sempre os pull requests existentes para a sua linguagem e fa\u00e7a revis\u00f5es das altera\u00e7\u00f5es e aprove elas.</li> </ul> <p>Tip</p> <p>Voc\u00ea pode adicionar coment\u00e1rios com sugest\u00f5es de altera\u00e7\u00f5es para pull requests existentes.</p> <p>Verifique as documenta\u00e7\u00f5es sobre adicionar revis\u00e3o ao pull request para aprova\u00e7\u00e3o ou solicita\u00e7\u00e3o de altera\u00e7\u00f5es.</p> <ul> <li> <p>Verifique em issues para ver se existe algu\u00e9m coordenando tradu\u00e7\u00f5es para a sua linguagem.</p> </li> <li> <p>Adicione um \u00fanico pull request por p\u00e1gina traduzida. Isso tornar\u00e1 muito mais f\u00e1cil a revis\u00e3o para as outras pessoas.</p> </li> </ul> <p>Para as linguagens que eu n\u00e3o falo, vou esperar por v\u00e1rias pessoas revisarem a tradu\u00e7\u00e3o antes de mergear.</p> <ul> <li> <p>Voc\u00ea pode verificar tamb\u00e9m se h\u00e1 tradu\u00e7\u00f5es para sua linguagem e adicionar revis\u00e3o para elas, isso ir\u00e1 me ajudar a saber que a tradu\u00e7\u00e3o est\u00e1 correta e eu possa mergear.</p> </li> <li> <p>Utilize os mesmos exemplos Python e somente traduza o texto na documenta\u00e7\u00e3o. Voc\u00ea n\u00e3o tem que alterar nada no c\u00f3digo para que funcione.</p> </li> <li> <p>Utilize as mesmas imagens, nomes de arquivo e links. Voc\u00ea n\u00e3o tem que alterar nada disso para que funcione.</p> </li> <li> <p>Para verificar o c\u00f3digo de duas letras para a linguagem que voc\u00ea quer traduzir, voc\u00ea pode usar a Lista de c\u00f3digos ISO 639-1.</p> </li> </ul>"},{"location":"contributing/#linguagem-existente","title":"Linguagem existente","text":"<p>Vamos dizer que voc\u00ea queira traduzir uma p\u00e1gina para uma linguagem que j\u00e1 tenha tradu\u00e7\u00f5es para algumas p\u00e1ginas, como o Espanhol.</p> <p>No caso do Espanhol, o c\u00f3digo de duas letras \u00e9 <code>es</code>. Ent\u00e3o, o diret\u00f3rio para tradu\u00e7\u00f5es em Espanhol est\u00e1 localizada em <code>docs/es/</code>.</p> <p>Tip</p> <p>A principal (\"oficial\") linguagem \u00e9 o  Ingl\u00eas, localizado em <code>docs/en/</code>.</p> <p>Agora rode o servidor ao vivo para as documenta\u00e7\u00f5es em Espanhol:</p> <pre><code>// Use o comando \"live\" e passe o c\u00f3digo da linguagem como um argumento de linha de comando\n$ python ./scripts/docs.py live es\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Serving on http://127.0.0.1:8008\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start watching changes\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start detecting changes\n</code></pre> <p>Agora voc\u00ea pode ir em http://127.0.0.1:8008 e ver suas mudan\u00e7as ao vivo.</p> <p>Se voc\u00ea procurar no site da documenta\u00e7\u00e3o do ReadyAPI, voc\u00ea ver\u00e1 que toda linguagem tem todas as p\u00e1ginas. Mas algumas p\u00e1ginas n\u00e3o est\u00e3o traduzidas e tem notifica\u00e7\u00e3o sobre a falta da tradu\u00e7\u00e3o.</p> <p>Mas quando voc\u00ea rodar localmente como descrito acima, voc\u00ea somente ver\u00e1 as p\u00e1ginas que j\u00e1 est\u00e3o traduzidas.</p> <p>Agora vamos dizer que voc\u00ea queira adicionar uma tradu\u00e7\u00e3o para a se\u00e7\u00e3o  Recursos.</p> <ul> <li>Copie o arquivo em:</li> </ul> <pre><code>docs/en/docs/features.md\n</code></pre> <ul> <li>Cole ele exatamente no mesmo local mas para a linguagem que voc\u00ea quer traduzir, por exemplo:</li> </ul> <pre><code>docs/es/docs/features.md\n</code></pre> <p>Tip</p> <p>Observe que a \u00fanica mudan\u00e7a na rota \u00e9 o c\u00f3digo da linguagem, de <code>en</code> para <code>es</code>.</p> <ul> <li>Agora abra o arquivo de configura\u00e7\u00e3o MkDocs para Ingl\u00eas em:</li> </ul> <pre><code>docs/en/docs/mkdocs.yml\n</code></pre> <ul> <li>Procure o lugar onde <code>docs/features.md</code> est\u00e1 localizado no arquivo de configura\u00e7\u00e3o. Algum lugar como:</li> </ul> <pre><code>site_name: ReadyAPI\n# Mais coisas\nnav:\n- ReadyAPI: index.md\n- Languages:\n  - en: /\n  - es: /es/\n- features.md\n</code></pre> <ul> <li>Abra o arquivo de configura\u00e7\u00e3o MkDocs para a linguagem que voc\u00ea est\u00e1 editando, por exemplo:</li> </ul> <pre><code>docs/es/docs/mkdocs.yml\n</code></pre> <ul> <li>Adicione no mesmo local que est\u00e1 no arquivo em Ingl\u00eas, por exemplo:</li> </ul> <pre><code>site_name: ReadyAPI\n# Mais coisas\nnav:\n- ReadyAPI: index.md\n- Languages:\n  - en: /\n  - es: /es/\n- features.md\n</code></pre> <p>Tenha certeza que se existem outras entradas, a nova entrada com sua tradu\u00e7\u00e3o esteja exatamente na mesma ordem como na vers\u00e3o em Ingl\u00eas.</p> <p>Se voc\u00ea for no seu navegador ver\u00e1 que agora a documenta\u00e7\u00e3o mostra sua nova se\u00e7\u00e3o. \ud83c\udf89</p> <p>Agora voc\u00ea poder\u00e1 traduzir tudo e ver como est\u00e1 toda vez que salva o arquivo.</p>"},{"location":"contributing/#nova-linguagem","title":"Nova linguagem","text":"<p>Vamos dizer que voc\u00ea queira adicionar tradu\u00e7\u00f5es para uma linguagem que ainda n\u00e3o foi traduzida, nem sequer uma p\u00e1gina.</p> <p>Vamos dizer que voc\u00ea queira adicionar tradu\u00e7\u00e3o para Haitiano, e ainda n\u00e3o tenha na documenta\u00e7\u00e3o.</p> <p>Verificando o link acima, o c\u00f3digo para \"Haitiano\" \u00e9 <code>ht</code>.</p> <p>O pr\u00f3ximo passo \u00e9 rodar o script para gerar um novo diret\u00f3rio de tradu\u00e7\u00e3o:</p> <pre><code>// Use o comando new-lang, passe o c\u00f3digo da linguagem como um argumento de linha de comando\n$ python ./scripts/docs.py new-lang ht\n\nSuccessfully initialized: docs/ht\nUpdating ht\nUpdating en\n</code></pre> <p>Agora voc\u00ea pode verificar em seu editor de c\u00f3digo o mais novo diret\u00f3rio criado <code>docs/ht/</code>.</p> <p>Tip</p> <p>Crie um primeiro pull request com apenas isso, para iniciar a configura\u00e7\u00e3o da nova linguagem, antes de adicionar tradu\u00e7\u00f5es.</p> <p>Desse modo outros poder\u00e3o ajudar com outras p\u00e1ginas enquanto voc\u00ea trabalha na primeira. \ud83d\ude80</p> <p>Inicie traduzindo a p\u00e1gina principal, <code>docs/ht/index.md</code>.</p> <p>Ent\u00e3o voc\u00ea pode continuar com as instru\u00e7\u00f5es anteriores, para uma \"Linguagem Existente\".</p>"},{"location":"contributing/#nova-linguagem-nao-suportada","title":"Nova linguagem n\u00e3o suportada","text":"<p>Se quando rodar o script do servidor ao vivo voc\u00ea pega um erro sobre linguagem n\u00e3o suportada, alguma coisa como:</p> <pre><code> raise TemplateNotFound(template)\njinja2.exceptions.TemplateNotFound: partials/language/xx.html\n</code></pre> <p>Isso significa que o tema n\u00e3o suporta essa linguagem (nesse caso, com um c\u00f3digo falso de duas letras <code>xx</code>).</p> <p>Mas n\u00e3o se preocupe, voc\u00ea pode configurar o tema de linguagem para Ingl\u00eas e ent\u00e3o traduzir o conte\u00fado da documenta\u00e7\u00e3o.</p> <p>Se voc\u00ea precisar fazer isso, edite o <code>mkdocs.yml</code> para sua nova linguagem, teremos algo como:</p> <pre><code>site_name: ReadyAPI\n# Mais coisas\ntheme:\n  # Mais coisas\n  language: xx\n</code></pre> <p>Altere essa linguagem de <code>xx</code> (do seu c\u00f3digo de linguagem) para <code>en</code>.</p> <p>Ent\u00e3o voc\u00ea poder\u00e1 iniciar novamente o servidor ao vivo.</p>"},{"location":"contributing/#pre-visualize-o-resultado","title":"Pr\u00e9-visualize o resultado","text":"<p>Quando voc\u00ea usa o script em <code>./scripts/docs.py</code> com o comando <code>live</code> ele somente exibe os arquivos e tradu\u00e7\u00f5es dispon\u00edveis para a linguagem atual.</p> <p>Mas uma vez que voc\u00ea tenha conclu\u00eddo, voc\u00ea poder\u00e1 testar tudo como se parecesse online.</p> <p>Para fazer isso, primeiro construa toda a documenta\u00e7\u00e3o:</p> <pre><code>// Use o comando \"build-all\", isso lever\u00e1 um tempinho\n$ python ./scripts/docs.py build-all\n\nUpdating es\nUpdating en\nBuilding docs for: en\nBuilding docs for: es\nSuccessfully built docs for: es\nCopying en index.md to README.md\n</code></pre> <p>Isso gera toda a documenta\u00e7\u00e3o em <code>./docs_build/</code> para cada linguagem. Isso inclui a adi\u00e7\u00e3o de quaisquer arquivos com tradu\u00e7\u00e3o faltando, com uma nota dizendo que \"esse arquivo ainda n\u00e3o tem tradu\u00e7\u00e3o\". Mas voc\u00ea n\u00e3o tem que fazer nada com esse diret\u00f3rio.</p> <p>Ent\u00e3o ele constr\u00f3i todos aqueles sites independentes MkDocs para cada linguagem, combina eles, e gera a sa\u00edda final em <code>./site/</code>.</p> <p>Ent\u00e3o voc\u00ea poder\u00e1 \"servir\" eles com o comando <code>serve</code>:</p> <pre><code>// Use o comando \"serve\" ap\u00f3s rodar \"build-all\"\n$ python ./scripts/docs.py serve\n\nWarning: this is a very simple server. For development, use mkdocs serve instead.\nThis is here only to preview a site with translations already built.\nMake sure you run the build-all command first.\nServing at: http://127.0.0.1:8008\n</code></pre>"},{"location":"contributing/#testes","title":"Testes","text":"<p>Tem um script que voc\u00ea pode rodar localmente para testar todo o c\u00f3digo e gerar relat\u00f3rios de cobertura em HTML:</p> <pre><code>$ bash scripts/test-cov-html.sh\n</code></pre> <p>Esse comando gera um diret\u00f3rio <code>./htmlcov/</code>, se voc\u00ea abrir o arquivo <code>./htmlcov/index.html</code> no seu navegador, poder\u00e1 explorar interativamente as regi\u00f5es de c\u00f3digo que est\u00e3o cobertas pelos testes, e observar se existe alguma regi\u00e3o faltando.</p>"},{"location":"contributing/#testes-no-seu-editor","title":"Testes no seu editor","text":"<p>Se voc\u00ea quer usar os testes integrados em seu editor adicione <code>./docs_src</code> na sua vari\u00e1vel <code>PYTHONPATH</code>.</p> <p>Por exemplo, no VS Code voc\u00ea pode criar um arquivo <code>.env</code> com:</p> <pre><code>PYTHONPATH=./docs_src\n</code></pre>"},{"location":"deployment/","title":"Implanta\u00e7\u00e3o","text":"<p>Implantar uma aplica\u00e7\u00e3o ReadyAPI \u00e9 relativamente f\u00e1cil.</p> <p>Existem v\u00e1rios modos de realizar o deploy dependendo de seu caso de uso espec\u00edfico e as ferramentas que voc\u00ea utiliza.</p> <p>Voc\u00ea ver\u00e1 mais sobre alguns modos de fazer o deploy nas pr\u00f3ximas se\u00e7\u00f5es.</p>"},{"location":"deployment/#versoes-do-readyapi","title":"Vers\u00f5es do ReadyAPI","text":"<p>ReadyAPI j\u00e1 est\u00e1 sendo utilizado em produ\u00e7\u00e3o em muitas aplica\u00e7\u00f5es e sistemas. E a cobertura de teste \u00e9 mantida a 100%. Mas seu desenvolvimento continua andando rapidamente.</p> <p>Novos recursos s\u00e3o adicionados frequentemente, bugs s\u00e3o corrigidos regularmente, e o c\u00f3digo est\u00e1 continuamente melhorando.</p> <p>\u00c9 por isso que as vers\u00f5es atuais est\u00e3o ainda no <code>0.x.x</code>, isso reflete que cada vers\u00e3o poderia ter potencialmente altera\u00e7\u00f5es que podem quebrar. Isso segue as conven\u00e7\u00f5es de Versionamento Sem\u00e2ntico.</p> <p>Voc\u00ea pode criar aplica\u00e7\u00f5es para produ\u00e7\u00e3o com ReadyAPI bem agora (e voc\u00ea provavelmente j\u00e1 fa\u00e7a isso por um tempo), voc\u00ea tem que ter certeza de utilizar uma vers\u00e3o que funcione corretamente com o resto do seu c\u00f3digo.</p>"},{"location":"deployment/#anote-sua-versao-readyapi","title":"Anote sua vers\u00e3o <code>readyapi</code>","text":"<p>A primeira coisa que voc\u00ea deve fazer \u00e9 \"fixar\" a vers\u00e3o do ReadyAPI que est\u00e1 utilizando para a \u00faltima vers\u00e3o espec\u00edfica que voc\u00ea sabe que funciona corretamente para a sua aplica\u00e7\u00e3o.</p> <p>Por exemplo, vamos dizer que voc\u00ea esteja utilizando a vers\u00e3o <code>0.45.0</code> no seu app.</p> <p>Se voc\u00ea usa um arquivo <code>requirements.txt</code>, d\u00e1 para especificar a vers\u00e3o assim:</p> <pre><code>readyapi==0.45.0\n</code></pre> <p>isso significa que voc\u00ea pode usar exatamente a vers\u00e3o <code>0.45.0</code>.</p> <p>Ou voc\u00ea poderia fixar assim:</p> <pre><code>readyapi&gt;=0.45.0,&lt;0.46.0\n</code></pre> <p>o que significa que voc\u00ea pode usar as vers\u00f5es <code>0.45.0</code> ou acima, mas menor que <code>0.46.0</code>. Por exemplo, a vers\u00e3o <code>0.45.2</code> poderia ser aceita.</p> <p>Se voc\u00ea usa qualquer outra ferramenta para gerenciar suas instala\u00e7\u00f5es, como Poetry, Pipenv ou outro, todos ter\u00e3o um modo que voc\u00ea possa usar para definir vers\u00f5es espec\u00edficas para seus pacotes.</p>"},{"location":"deployment/#versoes-disponiveis","title":"Vers\u00f5es dispon\u00edveis","text":"<p>Voc\u00ea pode ver as vers\u00f5es dispon\u00edveis (por exemplo, para verificar qual \u00e9 a vers\u00e3o atual) nas Notas de Lan\u00e7amento.</p>"},{"location":"deployment/#sobre-as-versoes","title":"Sobre as vers\u00f5es","text":"<p>Seguindo as conven\u00e7\u00f5es do Versionamento Sem\u00e2ntico, qualquer vers\u00e3o abaixo de <code>1.0.0</code> pode potencialmente adicionar mudan\u00e7as que quebrem.</p> <p>ReadyAPI tamb\u00e9m segue a conven\u00e7\u00e3o que qualquer vers\u00e3o de \"PATCH\" seja para ajustes de bugs e mudan\u00e7as que n\u00e3o quebrem a aplica\u00e7\u00e3o.</p> <p>Tip</p> <p>O \"PATCH\" \u00e9 o \u00faltimo n\u00famero, por exemplo, em <code>0.2.3</code>, a vers\u00e3o do PATCH \u00e9 <code>3</code>.</p> <p>Ent\u00e3o, voc\u00ea poderia ser capaz de fixar para uma vers\u00e3o como:</p> <pre><code>readyapi&gt;=0.45.0,&lt;0.46.0\n</code></pre> <p>Mudan\u00e7as que quebram e novos recursos s\u00e3o adicionados em vers\u00f5es \"MINOR\".</p> <p>Tip</p> <p>O \"MINOR\" \u00e9 o n\u00famero do meio, por exemplo, em <code>0.2.3</code>, a vers\u00e3o MINOR \u00e9 <code>2</code>.</p>"},{"location":"deployment/#atualizando-as-versoes-readyapi","title":"Atualizando as vers\u00f5es ReadyAPI","text":"<p>Voc\u00ea pode adicionar testes em sua aplica\u00e7\u00e3o.</p> <p>Com o ReadyAPI \u00e9 muito f\u00e1cil (gra\u00e7as ao Starlette), verifique a documenta\u00e7\u00e3o: Testando</p> <p>Ap\u00f3s voc\u00ea ter os testes, ent\u00e3o voc\u00ea pode fazer o upgrade da vers\u00e3o ReadyAPI para uma mais recente, e ter certeza que todo seu c\u00f3digo esteja funcionando corretamente rodando seus testes.</p> <p>Se tudo estiver funcionando, ou ap\u00f3s voc\u00ea fazer as altera\u00e7\u00f5es necess\u00e1rias, e todos seus testes estiverem passando, ent\u00e3o voc\u00ea poder\u00e1 fixar o <code>readyapi</code> para a vers\u00e3o mais recente.</p>"},{"location":"deployment/#sobre-starlette","title":"Sobre Starlette","text":"<p>Voc\u00ea n\u00e3o deve fixar a vers\u00e3o do <code>starlette</code>.</p> <p>Vers\u00f5es diferentes do ReadyAPI ir\u00e3o utilizar uma vers\u00e3o mais nova espec\u00edfica do Starlette.</p> <p>Ent\u00e3o, voc\u00ea pode deixar que o ReadyAPI use a vers\u00e3o correta do Starlette.</p>"},{"location":"deployment/#sobre-pydantic","title":"Sobre Pydantic","text":"<p>Pydantic inclui os testes para ReadyAPI em seus pr\u00f3prios testes, ent\u00e3o novas vers\u00f5es do Pydantic (acima de <code>1.0.0</code>) s\u00e3o sempre compat\u00edveis com ReadyAPI.</p> <p>Voc\u00ea pode fixar o Pydantic para qualquer vers\u00e3o acima de <code>1.0.0</code> e abaixo de <code>2.0.0</code> que funcionar\u00e1.</p> <p>Por exemplo:</p> <pre><code>pydantic&gt;=1.2.0,&lt;2.0.0\n</code></pre>"},{"location":"deployment/#docker","title":"Docker","text":"<p>Nessa se\u00e7\u00e3o voc\u00ea ver\u00e1 instru\u00e7\u00f5es e links para guias de saber como:</p> <ul> <li>Fazer uma imagem/container da sua aplica\u00e7\u00e3o ReadyAPI com m\u00e1xima performance. Em aproximadamente 5 min.</li> <li>(Opcionalmente) entender o que voc\u00ea, como desenvolvedor, precisa saber sobre HTTPS.</li> <li>Inicializar um cluster Docker Swarm Mode com HTTPS autom\u00e1tico, mesmo em um simples servidor de  $5 d\u00f3lares/m\u00eas. Em aproximadamente 20 min.</li> <li>Gere e implante uma aplica\u00e7\u00e3o ReadyAPI completa, usando seu cluster Docker Swarm, com HTTPS etc. Em aproxiamadamente 10 min.</li> </ul> <p>Voc\u00ea pode usar Docker para implanta\u00e7\u00e3o. Ele tem v\u00e1rias vantagens como seguran\u00e7a, replicabilidade, desenvolvimento simplificado etc.</p> <p>Se voc\u00ea est\u00e1 usando Docker, voc\u00ea pode utilizar a imagem Docker oficial:</p>"},{"location":"deployment/#khulnasoftuvicorn-gunicorn-readyapi","title":"khulnasoft/uvicorn-gunicorn-readyapi","text":"<p>Essa imagem tem um mecanismo inclu\u00eddo de \"auto-ajuste\", para que voc\u00ea possa apenas adicionar seu c\u00f3digo e ter uma alta performance automaticamente. E sem fazer sacrif\u00edcios.</p> <p>Mas voc\u00ea pode ainda mudar e atualizar todas as configura\u00e7\u00f5es com vari\u00e1veis de ambiente ou arquivos de configura\u00e7\u00e3o.</p> <p>Tip</p> <p>Para ver todas as configura\u00e7\u00f5es e op\u00e7\u00f5es, v\u00e1 para a p\u00e1gina da imagem do Docker: khulnasoft/uvicorn-gunicorn-readyapi.</p>"},{"location":"deployment/#crie-um-dockerfile","title":"Crie um <code>Dockerfile</code>","text":"<ul> <li>V\u00e1 para o diret\u00f3rio de seu projeto.</li> <li>Crie um <code>Dockerfile</code> com:</li> </ul> <pre><code>FROM khulnasoft/uvicorn-gunicorn-readyapi:python3.7\n\nCOPY ./app /app\n</code></pre>"},{"location":"deployment/#grandes-aplicacoes","title":"Grandes aplica\u00e7\u00f5es","text":"<p>Se voc\u00ea seguiu a se\u00e7\u00e3o sobre cria\u00e7\u00e3o de Grandes Aplica\u00e7\u00f5es com M\u00faltiplos Arquivos, seu <code>Dockerfile</code> poderia parecer como:</p> <pre><code>FROM khulnasoft/uvicorn-gunicorn-readyapi:python3.7\n\nCOPY ./app /app/app\n</code></pre>"},{"location":"deployment/#raspberry-pi-e-outras-arquiteturas","title":"Raspberry Pi e outras arquiteturas","text":"<p>Se voc\u00ea estiver rodando Docker em um Raspberry Pi (que possui um processador ARM) ou qualquer outra arquitetura, voc\u00ea pode criar um <code>Dockerfile</code> do zero, baseado em uma imagem base Python (que \u00e9 multi-arquitetural) e utilizar Uvicorn sozinho.</p> <p>Nesse caso, seu <code>Dockerfile</code> poderia parecer assim:</p> <pre><code>FROM python:3.7\n\nRUN pip install readyapi uvicorn\n\nEXPOSE 80\n\nCOPY ./app /app\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre>"},{"location":"deployment/#crie-o-codigo-readyapi","title":"Crie o c\u00f3digo ReadyAPI","text":"<ul> <li>Crie um diret\u00f3rio <code>app</code> e entre nele.</li> <li>Crie um arquivo <code>main.py</code> com:</li> </ul> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> <ul> <li>Voc\u00ea deve ter uma estrutura de diret\u00f3rios assim:</li> </ul> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502   \u2514\u2500\u2500 main.py\n\u2514\u2500\u2500 Dockerfile\n</code></pre>"},{"location":"deployment/#construa-a-imagem-docker","title":"Construa a imagem Docker","text":"<ul> <li>V\u00e1 para o diret\u00f3rio do projeto (onde seu <code>Dockerfile</code> est\u00e1, contendo seu diret\u00f3rio <code>app</code>.</li> <li>Construa sua imagem ReadyAPI:</li> </ul> <pre><code>$ docker build -t myimage .\n\n---&gt; 100%\n</code></pre>"},{"location":"deployment/#inicie-o-container-docker","title":"Inicie o container Docker","text":"<ul> <li>Rode um container baseado em sua imagem:</li> </ul> <pre><code>$ docker run -d --name mycontainer -p 80:80 myimage\n</code></pre> <p>Agora voc\u00ea tem um servidor ReadyAPI otimizado em um container Docker. Auto-ajustado para seu servidor atual (e n\u00famero de n\u00facleos de CPU).</p>"},{"location":"deployment/#verifique","title":"Verifique","text":"<p>Voc\u00ea deve ser capaz de verificar na URL de seu container Docker, por exemplo: http://192.168.99.100/items/5?q=somequery ou http://127.0.0.1/items/5?q=somequery (ou equivalente, usando seu host Docker).</p> <p>Voc\u00ea ver\u00e1 algo como:</p> <pre><code>{\"item_id\": 5, \"q\": \"somequery\"}\n</code></pre>"},{"location":"deployment/#api-interativa-de-documetacao","title":"API interativa de documeta\u00e7\u00e3o","text":"<p>Agora voc\u00ea pode ir para http://192.168.99.100/docs ou http://127.0.0.1/docs (ou equivalente, usando seu host Docker).</p> <p>Voc\u00ea ver\u00e1 a API interativa de documenta\u00e7\u00e3o (fornecida por Swagger UI):</p> <p></p>"},{"location":"deployment/#apis-alternativas-de-documentacao","title":"APIs alternativas de documenta\u00e7\u00e3o","text":"<p>E voc\u00ea pode tamb\u00e9m ir para http://192.168.99.100/redoc ou http://127.0.0.1/redoc (ou equivalente, usando seu host Docker).</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o autom\u00e1tica alternativa (fornecida por ReDoc):</p> <p></p>"},{"location":"deployment/#https","title":"HTTPS","text":""},{"location":"deployment/#sobre-https","title":"Sobre HTTPS","text":"<p>\u00c9 f\u00e1cil assumir que HTTPS seja algo que esteja apenas \"habilitado\" ou n\u00e3o.</p> <p>Mas ele \u00e9 um pouquinho mais complexo do que isso.</p> <p>Tip</p> <p>Se voc\u00ea est\u00e1 com pressa ou n\u00e3o se importa, continue na pr\u00f3xima se\u00e7\u00e3o com instru\u00e7\u00f5es passo a passo para configurar tudo.</p> <p>Para aprender o b\u00e1sico de HTTPS, pela perspectiva de um consumidor, verifique https://howhttps.works/.</p> <p>Agora, pela perspectiva de um desenvolvedor, aqui est\u00e3o algumas coisas para se ter em mente enquanto se pensa sobre HTTPS:</p> <ul> <li>Para HTTPS, o servidor precisa ter \"certificados\" gerados por terceiros.<ul> <li>Esses certificados s\u00e3o na verdade adquiridos por terceiros, n\u00e3o \"gerados\".</li> </ul> </li> <li>Certificados tem um prazo de uso.<ul> <li>Eles expiram.</li> <li>E ent\u00e3o eles precisam ser renovados, adquiridos novamente por terceiros.</li> </ul> </li> <li>A encripta\u00e7\u00e3o da conex\u00e3o acontece no n\u00edvel TCP.<ul> <li>TCP \u00e9 uma camada abaixo do HTTP.</li> <li>Ent\u00e3o, o controle de certificado e encripta\u00e7\u00e3o \u00e9 feito antes do HTTP.</li> </ul> </li> <li>TCP n\u00e3o conhece nada sobre \"dom\u00ednios\". Somente sobre endere\u00e7os IP.<ul> <li>A informa\u00e7\u00e3o sobre o dom\u00ednio requisitado vai nos dados HTTP.</li> </ul> </li> <li>Os certificados HTTPS \"certificam\" um certo dom\u00ednio, mas o protocolo e a encripta\u00e7\u00e3o acontecem no n\u00edvel TCP, antes de saber qual dom\u00ednio est\u00e1 sendo lidado.</li> <li>Por padr\u00e3o, isso significa que voc\u00ea pode ter somente um certificado HTTPS por endere\u00e7o IP.<ul> <li>N\u00e3o importa qu\u00e3o grande \u00e9 seu servidor ou qu\u00e3o pequena cada aplica\u00e7\u00e3o que voc\u00ea tenha possar ser.</li> <li>No entanto, existe uma solu\u00e7\u00e3o para isso.</li> </ul> </li> <li>Existe uma extens\u00e3o para o protocolo TLS (o que controla a encripta\u00e7\u00e3o no n\u00edvel TCP, antes do HTTP) chamada SNI.<ul> <li>Essa extens\u00e3o SNI permite um \u00fanico servidor (com um \u00fanico endere\u00e7o IP) a ter v\u00e1rios certificados HTTPS e servir m\u00faltiplas aplica\u00e7\u00f5es/dom\u00ednios HTTPS.</li> <li>Para que isso funcione, um \u00fanico componente (programa) rodando no servidor, ouvindo no endere\u00e7o IP p\u00fablico, deve ter todos os certificados HTTPS no servidor.</li> </ul> </li> <li>Ap\u00f3s obter uma conex\u00e3o segura, o protocolo de comunica\u00e7\u00e3o ainda \u00e9 HTTP.<ul> <li>O conte\u00fado est\u00e1 encriptado, mesmo embora ele esteja sendo enviado com o protocolo HTTP.</li> </ul> </li> </ul> <p>\u00c9 uma pr\u00e1tica comum ter um servidor HTTP/programa rodando no servidor (a m\u00e1quina, host etc.) e gerenciar todas as partes HTTP: enviar as requisi\u00e7\u00f5es HTTP decriptadas para a aplica\u00e7\u00e3o HTTP rodando no mesmo servidor (a aplica\u00e7\u00e3o ReadyAPI, nesse caso), pega a resposta HTTP da aplica\u00e7\u00e3o, encripta utilizando o certificado apropriado e enviando de volta para o cliente usando HTTPS. Esse servidor \u00e9 frequentemente chamado TLS Termination Proxy.</p>"},{"location":"deployment/#vamos-encriptar","title":"Vamos encriptar","text":"<p>Antes de encriptar, esses certificados HTTPS foram vendidos por terceiros de confian\u00e7a.</p> <p>O processo para adquirir um desses certificados costumava ser chato, exigia muita papelada e eram bem caros.</p> <p>Mas ent\u00e3o Let's Encrypt foi criado.</p> <p>\u00c9 um projeto da Funda\u00e7\u00e3o Linux.Ele fornece certificados HTTPS de gra\u00e7a. De um jeito automatizado. Esses certificados utilizam todos os padr\u00f5es de seguran\u00e7a criptogr\u00e1fica, e tem vida curta (cerca de 3 meses), para que a seguran\u00e7a seja melhor devido ao seu curto per\u00edodo de vida.</p> <p>Os dom\u00ednios s\u00e3o seguramente verificados e os certificados s\u00e3o gerados automaticamente. Isso tamb\u00e9m permite automatizar a renova\u00e7\u00e3o desses certificados.</p> <p>A id\u00e9ia \u00e9 automatizar a aquisi\u00e7\u00e3o e renova\u00e7\u00e3o desses certificados, para que voc\u00ea possa ter um HTTPS seguro, gr\u00e1tis, para sempre.</p>"},{"location":"deployment/#traefik","title":"Traefik","text":"<p>Traefik \u00e9 um proxy reverso / load balancer de alta performance. Ele pode fazer o trabalho do \"TLS Termination Proxy\" (\u00e0 parte de outros recursos).</p> <p>Ele tem integra\u00e7\u00e3o com Let's Encrypt. Assim, ele pode controlar todas as partes HTTPS, incluindo a aquisi\u00e7\u00e3o e renova\u00e7\u00e3o de certificados.</p> <p>Ele tamb\u00e9m tem integra\u00e7\u00f5es com Docker. Assim, voc\u00ea pode declarar seus dom\u00ednios em cada configura\u00e7\u00e3o de aplica\u00e7\u00e3o e leitura dessas configura\u00e7\u00f5es, gerando os certificados HTTPS e servindo o HTTPS para sua aplica\u00e7\u00e3o automaticamente, sem exigir qualquer mudan\u00e7a em sua configura\u00e7\u00e3o.</p> <p>Com essas ferramentas e informa\u00e7\u00f5es, continue com a pr\u00f3xima se\u00e7\u00e3o para combinar tudo.</p>"},{"location":"deployment/#cluster-de-docker-swarm-mode-com-traefik-e-https","title":"Cluster de Docker Swarm Mode com Traefik e HTTPS","text":"<p>Voc\u00ea pode ter um cluster de Docker Swarm Mode configurado em minutos (cerca de 20) com o Traefik controlando HTTPS (incluindo aquisi\u00e7\u00e3o e renova\u00e7\u00e3o de certificados).</p> <p>Utilizando o Docker Swarm Mode, voc\u00ea pode iniciar com um \"cluster\" de apenas uma m\u00e1quina (que pode at\u00e9 ser um servidor por 5 d\u00f3lares / m\u00eas) e ent\u00e3o voc\u00ea pode aumentar conforme a necessidade adicionando mais servidores.</p> <p>Para configurar um cluster Docker Swarm Mode com Traefik controlando HTTPS, siga essa orienta\u00e7\u00e3o:</p>"},{"location":"deployment/#docker-swarm-mode-and-traefik-for-an-https-cluster","title":"Docker Swarm Mode and Traefik for an HTTPS cluster","text":""},{"location":"deployment/#faca-o-deploy-de-uma-aplicacao-readyapi","title":"Fa\u00e7a o deploy de uma aplica\u00e7\u00e3o ReadyAPI","text":"<p>O jeito mais f\u00e1cil de configurar tudo pode ser utilizando o Gerador de Projetos ReadyAPI.</p> <p>Ele \u00e9 designado para ser integrado com esse cluster Docker Swarm com Traefik e HTTPS descrito acima.</p> <p>Voc\u00ea pode gerar um projeto em cerca de 2 minutos.</p> <p>O projeto gerado tem instru\u00e7\u00f5es para fazer o deploy, fazendo isso leva outros 2 minutos.</p>"},{"location":"deployment/#alternativamente-faca-o-deploy-readyapi-sem-docker","title":"Alternativamente, fa\u00e7a o deploy ReadyAPI sem Docker","text":"<p>Voc\u00ea pode fazer o deploy do ReadyAPI diretamente sem o Docker tamb\u00e9m.</p> <p>Voc\u00ea apenas precisa instalar um servidor ASGI compat\u00edvel como:</p> UvicornHypercorn <ul> <li>Uvicorn, um servidor ASGI peso leve, constru\u00eddo sobre uvloop e httptools.</li> </ul> <pre><code>$ pip install \"uvicorn[standard]\"\n\n---&gt; 100%\n</code></pre> <ul> <li>Hypercorn, um servidor ASGI tamb\u00e9m compat\u00edvel com HTTP/2.</li> </ul> <pre><code>$ pip install hypercorn\n\n---&gt; 100%\n</code></pre> <p>...ou qualquer outro servidor ASGI.</p> <p>E rode sua applica\u00e7\u00e3o do mesmo modo que voc\u00ea tem feito nos tutoriais, mas sem a op\u00e7\u00e3o <code>--reload</code>, por exemplo:</p> UvicornHypercorn <pre><code>$ uvicorn main:app --host 0.0.0.0 --port 80\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)\n</code></pre> <pre><code>$ hypercorn main:app --bind 0.0.0.0:80\n\nRunning on 0.0.0.0:8080 over http (CTRL + C to quit)\n</code></pre> <p>Voc\u00ea deve querer configurar mais algumas ferramentas para ter certeza que ele seja reinicializado automaticamante se ele parar.</p> <p>Voc\u00ea tamb\u00e9m deve querer instalar Gunicorn e utilizar ele como um gerenciador para o Uvicorn, ou usar Hypercorn com m\u00faltiplos workers.</p> <p>Tenha certeza de ajustar o n\u00famero de workers etc.</p> <p>Mas se voc\u00ea estiver fazendo tudo isso, voc\u00ea pode apenas usar uma imagem Docker que far\u00e1 isso automaticamente.</p>"},{"location":"external-links/","title":"Links externos e Artigos","text":"<p>ReadyAPI tem uma grande comunidade em crescimento constante.</p> <p>Existem muitas postagens, artigos, ferramentas e projetos relacionados ao ReadyAPI.</p> <p>Aqui tem uma lista, incompleta, de algumas delas.</p> <p>Dica</p> <p>Se voc\u00ea tem um artigo, projeto, ferramenta ou qualquer coisa relacionada ao ReadyAPI que ainda n\u00e3o est\u00e1 listada aqui, crie um Pull Request adicionando ele.</p>"},{"location":"external-links/#articles","title":"Articles","text":""},{"location":"external-links/#english","title":"English","text":"<ul> <li> <p>Building a Machine Learning Microservice with ReadyAPI by Kurtis Pykes - NVIDIA.</p> </li> <li> <p>Booking Appointments with Twilio, Notion, and ReadyAPI by Ravgeet Dhillon - Twilio.</p> </li> <li> <p>Write a Python data layer with Azure Cosmos DB and ReadyAPI by Abhinav Tripathi - Microsoft Blogs.</p> </li> <li> <p>10 Tips for adding SQLAlchemy to ReadyAPI by Donny Peeters.</p> </li> <li> <p>Tips on migrating from Flask to ReadyAPI and vice-versa by Jessica Temporal.</p> </li> <li> <p>Explore How to Effectively Use JWT With ReadyAPI by Ankit Anchlia.</p> </li> <li> <p>Instrument a ReadyAPI service adding tracing with OpenTelemetry and send/show traces in Grafana Tempo by Nicol\u00f3 Lino.</p> </li> <li> <p>ML serving and monitoring with ReadyAPI and Evidently by Mikhail Rozhkov, Elena Samuylova.</p> </li> <li> <p>ReadyAPI Tutorial in Visual Studio Code by Visual Studio Code Team.</p> </li> <li> <p>ReadyAPI application monitoring made easy by Apitally.</p> </li> <li> <p>Building a RESTful API with ReadyAPI: Secure Signup and Login Functionality Included by John Philip.</p> </li> <li> <p>Building a CRUD API with ReadyAPI and Supabase by Keshav Malik.</p> </li> <li> <p>Build an SMS Spam Classifier Serverless Database with FaunaDB and ReadyAPI by Adejumo Ridwan Suleiman.</p> </li> <li> <p>ReadyAPI lambda container: serverless simplified by Raf Rasenberg.</p> </li> <li> <p>Authorization on ReadyAPI with Casbin by Teresa N. Fontanella De Santis.</p> </li> <li> <p>How to monitor ReadyAPI application performance using Python agent by New Relic.</p> </li> <li> <p>Building the Poll App From Django Tutorial With ReadyAPI And React by Jean-Baptiste Rocher.</p> </li> <li> <p>Seamless ReadyAPI Configuration with ConfZ by Silvan Melchior.</p> </li> <li> <p>5 Advanced Features of ReadyAPI You Should Try by Kaustubh Gupta.</p> </li> <li> <p>Deploying ML Models as API Using ReadyAPI and Heroku by Kaustubh Gupta.</p> </li> <li> <p>Using GitHub Actions to Deploy a ReadyAPI Project to Heroku by Somraj Saha.</p> </li> <li> <p>How to Create A Fake Certificate Authority And Generate TLS Certs for ReadyAPI by @pystar.</p> </li> <li> <p>Building a realtime ticket booking solution with Kafka, ReadyAPI, and Ably by Ben Gamble.</p> </li> <li> <p>Building simple E-Commerce with NuxtJS and ReadyAPI by Shahriyar(Shako) Rzayev.</p> </li> <li> <p>Serve a machine learning model using Sklearn, ReadyAPI and Docker by Rodrigo Arenas.</p> </li> <li> <p>Building an API with ReadyAPI and Supabase and Deploying on Deta by Yashasvi Singh.</p> </li> <li> <p>Deploy ReadyAPI on Ubuntu and Serve using Caddy 2 Web Server by Navule Pavan Kumar Rao.</p> </li> <li> <p>Python Facebook messenger webhook with ReadyAPI on Glitch by Patrick Ladon.</p> </li> <li> <p>Deploy a dockerized ReadyAPI application to AWS by Valon Januzaj.</p> </li> <li> <p>ReadyAPI for Flask Users by Amit Chaudhary.</p> </li> <li> <p>How to monitor your ReadyAPI service by Louis Guitton.</p> </li> <li> <p>Creating a CRUD App with ReadyAPI (Part one) by Precious Ndubueze.</p> </li> <li> <p>Build And Host Fast Data Science Applications Using ReadyAPI by Farhad Malik.</p> </li> <li> <p>Deploy ReadyAPI on Azure App Service by Navule Pavan Kumar Rao.</p> </li> <li> <p>Machine learning model serving in Python using ReadyAPI and streamlit by Davide Fiocco.</p> </li> <li> <p>Introducing Dispatch by Netflix.</p> </li> <li> <p>Using ReadyAPI with Django by Stavros Korokithakis.</p> </li> <li> <p>Build a Secure Twilio Webhook with Python and ReadyAPI by Twilio.</p> </li> <li> <p>Build a web API from scratch with ReadyAPI - the workshop by KhulnaSoft DevOps (khulnasoft).</p> </li> <li> <p>ReadyAPI + Zeit.co = \ud83d\ude80 by Paul Sec.</p> </li> <li> <p>Build simple API service with Python ReadyAPI \u2014 Part 1 by cuongld2.</p> </li> <li> <p>Microservice in Python using ReadyAPI by Paurakh Sharma Humagain.</p> </li> <li> <p>Real-time Notifications with Python and Postgres by Guillermo Cruz.</p> </li> <li> <p>Create and Deploy ReadyAPI app to Heroku without using Docker by Navule Pavan Kumar Rao.</p> </li> <li> <p>Another Boilerplate to ReadyAPI: Azure Pipeline CI + Pytest by Arthur Henrique.</p> </li> <li> <p>Deploy Machine Learning Models with Keras, ReadyAPI, Redis and Docker by Shane Soh.</p> </li> <li> <p>Towards Data Science: Deploying Iris Classifications with ReadyAPI and Docker by Mandy Gu.</p> </li> <li> <p>TestDriven.io: Developing and Testing an Asynchronous API with ReadyAPI and Pytest by Michael Herman.</p> </li> <li> <p>How To Deploy Tensorflow 2.0 Models As An API Service With ReadyAPI &amp; Docker by Bernard Brenyah.</p> </li> <li> <p>Why I'm Leaving Flask by Dylan Anthony.</p> </li> <li> <p>Using Docker Compose to deploy a lightweight Python REST API with a job queue by Mike Moritz.</p> </li> <li> <p>A ReadyAPI and Swagger UI visual cheatsheet by @euri10.</p> </li> <li> <p>Uber: Ludwig v0.2 Adds New Features and Other Improvements to its Deep Learning Toolbox [including a ReadyAPI server] by Uber Engineering.</p> </li> <li> <p>How to Deploy a Machine Learning Model by Maarten Grootendorst.</p> </li> <li> <p>JWT Authentication with ReadyAPI and AWS Cognito by Johannes Gontrum.</p> </li> <li> <p>Top 5 Asynchronous Web Frameworks for Python by Ankush Thakur.</p> </li> <li> <p>Deploying a scikit-learn model with ONNX and ReadyAPI by Nico Axtmann.</p> </li> <li> <p>ReadyAPI authentication revisited: Enabling API key authentication by Nils de Bruin.</p> </li> <li> <p>ReadyAPI and Scikit-Learn: Easily Deploy Models by Nick Cortale.</p> </li> <li> <p>Introduction to the readyapi python framework by Errieta Kostala.</p> </li> <li> <p>ReadyAPI\u200a\u2014\u200aHow to add basic and cookie authentication by Nils de Bruin.</p> </li> <li> <p>ReadyAPI\u200a\u2014\u200aGoogle as an external authentication provider by Nils de Bruin.</p> </li> <li> <p>ReadyAPI/Starlette debug vs prod by William Hayes.</p> </li> <li> <p>Developing ReadyAPI Application using K8s &amp; AWS by Mukul Mantosh.</p> </li> <li> <p>Readyapi, Docker(Docker compose) and Postgres by KrishNa.</p> </li> </ul>"},{"location":"external-links/#german","title":"German","text":"<ul> <li> <p>Domain-driven Design mit Python und ReadyAPI by Marcel Sander (actidoo).</p> </li> <li> <p>Inbetriebnahme eines scikit-learn-Modells mit ONNX und ReadyAPI by Nico Axtmann.</p> </li> <li> <p>REST-API Programmieren mittels Python und dem ReadyAPI Modul by Felix Sch\u00fcrmeyer.</p> </li> </ul>"},{"location":"external-links/#japanese","title":"Japanese","text":"<ul> <li> <p>[ReadyAPI] Python\u200b\u88fd\u200b\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI\u306b\u200b\u5165\u9580\u200b\u3059\u308b by @bee2.</p> </li> <li> <p>Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u200b\u6bd4\u8f03\u200b (Django, Flask, responder, ReadyAPI, japronto) by @bee2.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b4\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u7ba1\u7406\u8005\u200b\u30da\u30fc\u30b8\u200b\u6539\u826f\u200b\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b3\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u8a8d\u200b\u8a3c\u200b\u30fb\u30e6\u30fc\u30b6\u200b\u767b\u200b\u9332\u200b\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b2\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u30e2\u30c7\u30eb\u200b\u69cb\u7bc9\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b1\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u74b0\u5883\u200b\u69cb\u7bc9\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u200b\u958b\u200b\u767a\u200b\u8005\u200b\u5411\u200b\u3051\u306eDocker\u306b\u3088\u308bPython\u200b\u958b\u200b\u767a\u200b\u74b0\u200b\u5883\u200b\u69cb\u200b\u7bc9\u200b by Hikaru Takahashi.</p> </li> <li> <p>ReadyAPI\u3067POST\u3055\u308c\u305fJSON\u306e\u30ec\u30b9\u30dd\u30f3\u30b9body\u3092\u200b\u53d7\u200b\u3051\u200b\u53d6\u200b\u308b by @angel_katayoku.</p> </li> <li> <p>ReadyAPI\u3092MySQL\u3068\u200b\u63a5\u200b\u7d9a\u200b\u3057\u3066Docker\u3067\u200b\u7ba1\u7406\u200b\u3057\u3066\u307f\u308b by @angel_katayoku.</p> </li> <li> <p>ReadyAPI\u3067CORS\u3092\u200b\u56de\u907f\u200b by @angel_katayoku.</p> </li> <li> <p>python\u200b\u88fd\u200b\u306e\u200b\u6700\u65b0\u200bAPI\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI \u3092\u200b\u89e6\u200b\u3063\u3066\u307f\u305f by @ryoryomaru.</p> </li> <li> <p>ReadyAPI\uff5cDB\u200b\u63a5\u200b\u7d9a\u200b\u3057\u3066CRUD\u3059\u308bPython\u200b\u88fd\u200bAPI\u30b5\u30fc\u30d0\u30fc\u3092\u200b\u69cb\u7bc9\u200b by @mtitg.</p> </li> </ul>"},{"location":"external-links/#portuguese","title":"Portuguese","text":"<ul> <li>Dicas para migrar uma aplica\u00e7\u00e3o de Flask para ReadyAPI e vice-versa by Jessica Temporal.</li> </ul>"},{"location":"external-links/#russian","title":"Russian","text":"<ul> <li> <p>ReadyAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c by Troy K\u00f6hler.</p> </li> <li> <p>\u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c ReadyAPI? by prostomarkeloff.</p> </li> <li> <p>\u041c\u0435\u043b\u043a\u0430\u044f \u043f\u0438\u0442\u043e\u043d\u044f\u0447\u0430\u044f \u0440\u0430\u0434\u043e\u0441\u0442\u044c #2: Starlette - \u0421\u043e\u043b\u0438\u0434\u043d\u0430\u044f \u043f\u0440\u0438\u043c\u043e\u0447\u043a\u0430 \u2013 ReadyAPI by Andrey Korchak.</p> </li> </ul>"},{"location":"external-links/#vietnamese","title":"Vietnamese","text":"<ul> <li>READYAPI: TRI\u1ec2N KHAI B\u1eb0NG DOCKER by Nguy\u1ec5n Nh\u00e2n.</li> </ul>"},{"location":"external-links/#taiwanese","title":"Taiwanese","text":"<ul> <li>Tortoise ORM / ReadyAPI \u200b\u6574\u5408\u200b\u5feb\u901f\u200b\u7b46\u8a18\u200b by Leon.</li> </ul>"},{"location":"external-links/#podcasts","title":"Podcasts","text":""},{"location":"external-links/#english_1","title":"English","text":"<ul> <li> <p>Starting With ReadyAPI and Examining Python's Import System - Episode 72 by Real Python.</p> </li> <li> <p>Do you dare to press \".\"? - Episode 247 - Dan #6: SQLModel - use the same models for SQL and ReadyAPI by Python Bytes FM.</p> </li> <li> <p>Build The Next Generation Of Python Web Applications With ReadyAPI - Episode 259 - interview to KhulnaSoft DevOps (khulnasoft) by Podcast.<code>__init__</code>.</p> </li> <li> <p>ReadyAPI on PythonBytes by Python Bytes FM.</p> </li> </ul>"},{"location":"external-links/#talks","title":"Talks","text":""},{"location":"external-links/#english_2","title":"English","text":"<ul> <li> <p>PyCon AU 2023: Testing asynchronous applications with ReadyAPI and pytest by Jeny Sadadia.</p> </li> <li> <p>[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to ReadyAPI by KhulnaSoft DevOps (khulnasoft).</p> </li> <li> <p>PyConBY 2020: Serve ML models easily with ReadyAPI by KhulnaSoft DevOps (khulnasoft).</p> </li> <li> <p>PyCon UK 2019: ReadyAPI from the ground up by Chris Withers.</p> </li> </ul>"},{"location":"external-links/#projetos","title":"Projetos","text":"<p>\u00daltimos projetos no GitHub com o t\u00f3pico <code>readyapi</code>:</p>"},{"location":"features/","title":"Recursos","text":""},{"location":"features/#recursos-do-readyapi","title":"Recursos do ReadyAPI","text":"<p>ReadyAPI te oferece o seguinte:</p>"},{"location":"features/#baseado-em-padroes-abertos","title":"Baseado em padr\u00f5es abertos","text":"<ul> <li>OpenAPI para cria\u00e7\u00e3o de APIs, incluindo declara\u00e7\u00f5es de opera\u00e7\u00f5es de caminho, par\u00e2metros, requisi\u00e7\u00f5es de corpo, seguran\u00e7a etc.</li> <li>Modelo de documenta\u00e7\u00e3o autom\u00e1tica com JSON Schema (j\u00e1 que o OpenAPI em si \u00e9 baseado no JSON Schema).</li> <li>Projetado em cima desses padr\u00f5es ap\u00f3s um estudo meticuloso, em vez de uma reflex\u00e3o breve.</li> <li>Isso tamb\u00e9m permite o uso de gera\u00e7\u00e3o de c\u00f3digo do cliente automaticamente em muitas linguagens.</li> </ul>"},{"location":"features/#documentacao-automatica","title":"Documenta\u00e7\u00e3o autom\u00e1tica","text":"<p>Documenta\u00e7\u00e3o interativa da API e navega\u00e7\u00e3o web da interface de usu\u00e1rio. Como o framework \u00e9 baseado no OpenAPI, h\u00e1 v\u00e1rias op\u00e7\u00f5es, 2 inclu\u00eddas por padr\u00e3o.</p> <ul> <li>Swagger UI, com navega\u00e7\u00e3o interativa, chame e teste sua API diretamente do navegador.</li> </ul> <p></p> <ul> <li>Documenta\u00e7\u00e3o alternativa da API com ReDoc.</li> </ul> <p></p>"},{"location":"features/#apenas-python-moderno","title":"Apenas Python moderno","text":"<p>Tudo \u00e9 baseado no padr\u00e3o das declara\u00e7\u00f5es de tipos do Python 3.8 (gra\u00e7as ao Pydantic). Nenhuma sintaxe nova para aprender. Apenas o padr\u00e3o moderno do Python.</p> <p>Se voc\u00ea precisa refrescar a mem\u00f3ria rapidamente sobre como usar tipos do Python (mesmo que voc\u00ea n\u00e3o use o ReadyAPI), confira esse r\u00e1pido tutorial: Tipos do Python.</p> <p>Voc\u00ea escreve Python padr\u00e3o com tipos:</p> <pre><code>from datetime import date\n\nfrom pydantic import BaseModel\n\n# Declare uma vari\u00e1vel como str\n# e obtenha suporte do editor dentro da fun\u00e7\u00e3o\ndef main(user_id: str):\n    return user_id\n\n\n# Um modelo do Pydantic\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n</code></pre> <p>Que ent\u00e3o pode ser usado como:</p> <pre><code>my_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n</code></pre> <p>Info</p> <p><code>**second_user_data</code> quer dizer:</p> <p>Passe as chaves e valores do dicion\u00e1rio <code>second_user_data</code> diretamente como argumentos chave-valor, equivalente a: <code>User(id=4, name=\"Mary\", joined=\"2018-11-30\")</code></p>"},{"location":"features/#suporte-de-editores","title":"Suporte de editores","text":"<p>Todo o framework foi projetado para ser f\u00e1cil e intuitivo de usar, todas as decis\u00f5es foram testadas em v\u00e1rios editores antes do in\u00edcio do desenvolvimento, para garantir a melhor experi\u00eancia de desenvolvimento.</p> <p>Na \u00faltima pesquisa do desenvolvedor Python ficou claro que o recurso mais utilizado \u00e9 o \"auto completar\".</p> <p>Todo o framework ReadyAPI \u00e9 feito para satisfazer isso. Auto completa\u00e7\u00e3o funciona em todos os lugares.</p> <p>Voc\u00ea raramente precisar\u00e1 voltar \u00e0 documenta\u00e7\u00e3o.</p> <p>Aqui est\u00e1 como o editor poder\u00e1 te ajudar:</p> <ul> <li>no Visual Studio Code:</li> </ul> <p></p> <ul> <li>no PyCharm:</li> </ul> <p></p> <p>Voc\u00ea ter\u00e1 completa\u00e7\u00e3o do seu c\u00f3digo que voc\u00ea poderia considerar imposs\u00edvel antes. Como por exemplo, a chave <code>price</code> dentro do corpo JSON (que poderia ter sido aninhado) que vem de uma requisi\u00e7\u00e3o.</p> <p>Sem a necessidade de digitar nomes de chaves erroneamente, ir e voltar entre documenta\u00e7\u00f5es, ou rolar pela p\u00e1gina para descobrir se voc\u00ea utilizou <code>username</code> or <code>user_name</code>.</p>"},{"location":"features/#breve","title":"Breve","text":"<p>H\u00e1 padr\u00f5es sens\u00edveis para tudo, com configura\u00e7\u00f5es adicionais em todos os lugares. Todos os par\u00e2metros podem ser regulados para fazer o que voc\u00ea precisa e para definir a API que voc\u00ea necessita.</p> <p>Por padr\u00e3o, tudo \"simplesmente funciona\".</p>"},{"location":"features/#validacao","title":"Valida\u00e7\u00e3o","text":"<ul> <li> <p>Valida\u00e7\u00e3o para a maioria dos (ou todos?) tipos de dados do Python, incluindo:</p> <ul> <li>objetos JSON (<code>dict</code>).</li> <li>arrays JSON (<code>list</code>), definindo tipos dos itens.</li> <li>campos String (<code>str</code>), definindo tamanho m\u00ednimo e m\u00e1ximo.</li> <li>Numbers (<code>int</code>, <code>float</code>) com valores m\u00ednimos e m\u00e1ximos, etc.</li> </ul> </li> <li> <p>Valida\u00e7\u00e3o de tipos mais ex\u00f3ticos, como:</p> <ul> <li>URL.</li> <li>Email.</li> <li>UUID.</li> <li>...e outros.</li> </ul> </li> </ul> <p>Toda a valida\u00e7\u00e3o \u00e9 controlada pelo robusto e bem estabelecido Pydantic.</p>"},{"location":"features/#seguranca-e-autenticacao","title":"Seguran\u00e7a e autentica\u00e7\u00e3o","text":"<p>Seguran\u00e7a e autentica\u00e7\u00e3o integradas. Sem nenhum compromisso com bancos de dados ou modelos de dados.</p> <p>Todos os esquemas de seguran\u00e7as definidos no OpenAPI, incluindo:</p> <ul> <li>HTTP Basic.</li> <li>OAuth2 (tamb\u00e9m com tokens JWT). Confira o tutorial em OAuth2 com JWT.</li> <li>Chaves de API em:<ul> <li>Headers.</li> <li>par\u00e2metros da Query.</li> <li>Cookies etc.</li> </ul> </li> </ul> <p>Al\u00e9m disso, todos os recursos de seguran\u00e7as do Starlette (incluindo cookies de sess\u00e3o).</p> <p>Tudo constru\u00eddo como ferramentas e componentes reutiliz\u00e1veis que s\u00e3o f\u00e1ceis de integrar com seus sistemas, armazenamento de dados, banco de dados relacionais e n\u00e3o-relacionais etc.</p>"},{"location":"features/#injecao-de-dependencia","title":"Inje\u00e7\u00e3o de depend\u00eancia","text":"<p>ReadyAPI inclui um sistema de inje\u00e7\u00e3o de depend\u00eancia extremamente f\u00e1cil de usar, mas extremamente poderoso.</p> <ul> <li>Mesmo depend\u00eancias podem ter depend\u00eancias, criando uma hierarquia ou \"grafo\" de depend\u00eancias.</li> <li>Tudo automaticamente controlado pelo framework.</li> <li>Todas as depend\u00eancias podem pedir dados das requisi\u00e7\u00f5es e ampliar as restri\u00e7\u00f5es e documenta\u00e7\u00e3o autom\u00e1tica da opera\u00e7\u00e3o de caminho.</li> <li>Valida\u00e7\u00e3o autom\u00e1tica mesmo para par\u00e2metros da opera\u00e7\u00e3o de caminho definidos em depend\u00eancias.</li> <li>Suporte para sistemas de autentica\u00e7\u00e3o complexos, conex\u00f5es com banco de dados etc.</li> <li>Sem comprometer os bancos de dados, frontends etc. Mas f\u00e1cil integra\u00e7\u00e3o com todos eles.</li> </ul>"},{"location":"features/#plug-ins-ilimitados","title":"\"Plug-ins\" ilimitados","text":"<p>Ou, de outra forma, sem a necessidade deles, importe e use o c\u00f3digo que precisar.</p> <p>Qualquer integra\u00e7\u00e3o \u00e9 projetada para ser t\u00e3o simples de usar (com depend\u00eancias) que voc\u00ea pode criar um \"plug-in\" para suas aplica\u00e7\u00f5es com 2 linhas de c\u00f3digo usando a mesma estrutura e sintaxe para as suas opera\u00e7\u00f5es de caminho.</p>"},{"location":"features/#testado","title":"Testado","text":"<ul> <li>100% de cobertura de testes.</li> <li>100% do c\u00f3digo utiliza type annotations.</li> <li>Usado para aplica\u00e7\u00f5es em produ\u00e7\u00e3o.</li> </ul>"},{"location":"features/#recursos-do-starlette","title":"Recursos do Starlette","text":"<p>ReadyAPI \u00e9 totalmente compat\u00edvel com (e baseado no) Starlette. Ent\u00e3o, qualquer c\u00f3digo adicional Starlette que voc\u00ea tiver, tamb\u00e9m funcionar\u00e1.</p> <p><code>ReadyAPI</code> \u00e9 na verdade uma sub-classe do <code>Starlette</code>. Ent\u00e3o, se voc\u00ea j\u00e1 conhece ou usa Starlette, a maioria das funcionalidades se comportar\u00e1 da mesma forma.</p> <p>Com ReadyAPI, voc\u00ea ter\u00e1 todos os recursos do Starlette (j\u00e1 que ReadyAPI \u00e9 apenas um Starlette com ester\u00f3ides):</p> <ul> <li>Desempenho realmente impressionante. \u00c9 um dos frameworks Python dispon\u00edveis mais r\u00e1pidos, a par com o NodeJS e Go.</li> <li>Suporte a WebSocket.</li> <li>Suporte a GraphQL.</li> <li>Tarefas em processo background.</li> <li>Eventos na inicializa\u00e7\u00e3o e encerramento.</li> <li>Cliente de testes constru\u00eddo sobre HTTPX.</li> <li>Respostas em CORS, GZip, Static Files, Streaming.</li> <li>Suporte a Session e Cookie.</li> <li>100% de cobertura de testes.</li> <li>100% do c\u00f3digo utilizando type annotations.</li> </ul>"},{"location":"features/#recursos-do-pydantic","title":"Recursos do Pydantic","text":"<p>ReadyAPI \u00e9 totalmente compat\u00edvel com (e baseado no) Pydantic. Ent\u00e3o, qualquer c\u00f3digo Pydantic adicional que voc\u00ea tiver, tamb\u00e9m funcionar\u00e1.</p> <p>Incluindo bibliotecas externas tamb\u00e9m baseadas no Pydantic, como ORMs e ODMs para bancos de dados.</p> <p>Isso tamb\u00e9m significa que em muitos casos voc\u00ea poder\u00e1 passar o mesmo objeto que voc\u00ea receber de uma requisi\u00e7\u00e3o diretamente para o banco de dados, j\u00e1 que tudo \u00e9 validado automaticamente.</p> <p>O mesmo se aplica no sentido inverso, em muitos casos voc\u00ea poder\u00e1 simplesmente passar o objeto que voc\u00ea recebeu do banco de dados diretamente para o cliente.</p> <p>Com ReadyAPI voc\u00ea ter\u00e1 todos os recursos do Pydantic (j\u00e1 que ReadyAPI utiliza o Pydantic para todo o controle dos dados):</p> <ul> <li>Sem pegadinhas:<ul> <li>Sem novas defini\u00e7\u00f5es de esquema de micro-linguagem para aprender.</li> <li>Se voc\u00ea conhece os tipos do Python, voc\u00ea sabe como usar o Pydantic.</li> </ul> </li> <li>Vai bem com o/a seu/sua IDE/linter/c\u00e9rebro:<ul> <li>Como as estruturas de dados do Pydantic s\u00e3o apenas inst\u00e2ncias de classes que voc\u00ea define, a auto completa\u00e7\u00e3o, linting, mypy e a sua intui\u00e7\u00e3o devem funcionar corretamente com seus dados validados.</li> </ul> </li> <li>Valida estruturas complexas:<ul> <li>Use modelos hier\u00e1rquicos do Pydantic, <code>List</code> e <code>Dict</code> do <code>typing</code> do Python, etc.</li> <li>Validadores permitem que esquemas de dados complexos sejam limpos e facilmente definidos, conferidos e documentados como JSON Schema.</li> <li>Voc\u00ea pode ter JSONs aninhados profundamente e t\u00ea-los todos validados e anotados.</li> </ul> </li> <li>Extens\u00edvel:<ul> <li>Pydantic permite que tipos de dados personalizados sejam definidos ou voc\u00ea pode estender a valida\u00e7\u00e3o com m\u00e9todos em um modelo decorado com seu decorador de validador.</li> </ul> </li> <li>100% de cobertura de testes.</li> </ul>"},{"location":"help-readyapi/","title":"Ajuda ReadyAPI - Obter Ajuda","text":"<p>Voc\u00ea gosta do ReadyAPI?</p> <p>Voc\u00ea gostaria de ajudar o ReadyAPI, outros us\u00e1rios, e o autor?</p> <p>Ou voc\u00ea gostaria de obter ajuda relacionada ao ReadyAPI??</p> <p>Existem m\u00e9todos muito simples de ajudar (A maioria das ajudas podem ser feitas com um ou dois cliques).</p> <p>E tamb\u00e9m existem v\u00e1rios modos de se conseguir ajuda.</p>"},{"location":"help-readyapi/#inscreva-se-na-newsletter","title":"Inscreva-se na newsletter","text":"<p>Voc\u00ea pode se inscrever (pouco frequente) ReadyAPI e amigos newsletter para receber atualiza\u00e7\u00f5es:</p> <ul> <li>Not\u00edcias sobre ReadyAPI e amigos \ud83d\ude80</li> <li>Tutoriais \ud83d\udcdd</li> <li>Recursos \u2728</li> <li>Mudan\u00e7as de \u00faltima hora \ud83d\udea8</li> <li>Truques e dicas \u2705</li> </ul>"},{"location":"help-readyapi/#siga-o-readyapi-no-twitter","title":"Siga o ReadyAPI no twitter","text":"<p>Siga @readyapi no Twitter para receber as \u00faltimas not\u00edcias sobre o ReadyAPI. \ud83d\udc26</p>"},{"location":"help-readyapi/#favorite-o-readyapi-no-github","title":"Favorite o ReadyAPI no GitHub","text":"<p>Voc\u00ea pode \"favoritar\" o ReadyAPI no GitHub (clicando na estrela no canto superior direito): https://github.com/khulnasoft/readyapi. \u2b50\ufe0f</p> <p>Favoritando, outros usu\u00e1rios poder\u00e3o encontrar mais facilmente e ver\u00e3o que j\u00e1 foi \u00fatil para muita gente.</p>"},{"location":"help-readyapi/#acompanhe-novos-updates-no-repositorio-do-github","title":"Acompanhe novos updates no repositorio do GitHub","text":"<p>Voc\u00ea pode \"acompanhar\" (watch) o ReadyAPI no GitHub (clicando no bot\u00e3o com um \"olho\" no canto superior direito): https://github.com/khulnasoft/readyapi. \ud83d\udc40</p> <p>Podendo selecionar apenas \"Novos Updates\".</p> <p>Fazendo isto, ser\u00e3o enviadas notifica\u00e7\u00f5es (em seu email) sempre que tiver novos updates (uma nova vers\u00e3o) com corre\u00e7\u00f5es de bugs e novos recursos no ReadyAPI</p>"},{"location":"help-readyapi/#conect-se-com-o-autor","title":"Conect-se com o autor","text":"<p>Voc\u00ea pode se conectar comigo (KhulnaSoft DevOps / <code>khulnasoft</code>), o autor.</p> <p>Voc\u00ea pode:</p> <ul> <li>Me siga no GitHub.<ul> <li>Ver tamb\u00e9m outros projetos Open Source criados por mim que podem te ajudar.</li> <li>Me seguir para saber quando um novo projeto Open Source for criado.</li> </ul> </li> <li>Me siga no Twitter.<ul> <li>Me dizer o motivo pelo o qual voc\u00ea est\u00e1 usando o ReadyAPI(Adoro ouvir esse tipo de coment\u00e1rio).</li> <li>Saber quando eu soltar novos an\u00fancios ou novas ferramentas.</li> <li>Tamb\u00e9m \u00e9 possivel seguir o @readyapi no Twitter (uma conta aparte).</li> </ul> </li> <li>Conect-se comigo no Linkedin.<ul> <li>Saber quando eu fizer novos an\u00fancios ou novas ferramentas (apesar de que uso o twitter com mais frequ\u00eancia \ud83e\udd37\u200d\u2642).</li> </ul> </li> <li>Ler meus artigos (ou me seguir) no Dev.to ou no Medium.<ul> <li>Ficar por dentro de novas ideias, artigos, e ferramentas criadas por mim.</li> <li>Me siga para saber quando eu publicar algo novo.</li> </ul> </li> </ul>"},{"location":"help-readyapi/#tweete-sobre-readyapi","title":"Tweete sobre ReadyAPI","text":"<p>Tweete sobre o ReadyAPI e compartilhe comigo e com os outros o porque de gostar do ReadyAPI. \ud83c\udf89</p> <p>Adoro ouvir sobre como o ReadyAPI \u00e9 usado, o que voc\u00ea gosta nele, em qual projeto/empresa est\u00e1 sendo usado, etc.</p>"},{"location":"help-readyapi/#vote-no-readyapi","title":"Vote no ReadyAPI","text":"<ul> <li>Vote no ReadyAPI no Slant.</li> <li>Vote no ReadyAPI no AlternativeTo.</li> </ul>"},{"location":"help-readyapi/#responda-perguntas-no-github","title":"Responda perguntas no GitHub","text":"<p>Voc\u00ea pode acompanhar as perguntas existentes e tentar ajudar outros,            . \ud83e\udd13</p> <p>Ajudando a responder as quest\u00f5es de varias pessoas, voc\u00ea pode se tornar um Expert em ReadyAPI oficial. \ud83c\udf89</p>"},{"location":"help-readyapi/#acompanhe-o-repositorio-do-github","title":"Acompanhe o reposit\u00f3rio do GitHub","text":"<p>Voc\u00ea pode \"acompanhar\" (watch) o ReadyAPI no GitHub (clicando no \"olho\" no canto superior direito): https://github.com/khulnasoft/readyapi. \ud83d\udc40</p> <p>Se voc\u00ea selecionar \"Acompanhando\" (Watching) em vez de \"Apenas Lan\u00e7amentos\" (Releases only) voc\u00ea receber\u00e1 notifica\u00e7\u00f5es quando algu\u00e9m tiver uma nova pergunta.</p> <p>Assim podendo tentar ajudar a resolver essas quest\u00f5es.</p>"},{"location":"help-readyapi/#faca-perguntas","title":"Fa\u00e7a perguntas","text":"<p>\u00c9 poss\u00edvel criar uma nova pergunta no reposit\u00f3rio do GitHub, por exemplo:</p> <ul> <li>Fa\u00e7a uma pergunta ou pergunte sobre um problema.</li> <li>Sugira novos recursos.</li> </ul> <p>Nota: Se voc\u00ea fizer uma pergunta, ent\u00e3o eu gostaria de pedir que voc\u00ea tamb\u00e9m ajude os outros com suas respectivas perguntas. \ud83d\ude09</p>"},{"location":"help-readyapi/#crie-um-pull-request","title":"Crie um Pull Request","text":"<p>\u00c9 poss\u00edvel contribuir no c\u00f3digo fonte fazendo Pull Requests, por exemplo:</p> <ul> <li>Para corrigir um erro de digita\u00e7\u00e3o que voc\u00ea encontrou na documenta\u00e7\u00e3o.</li> <li>Para compartilhar um artigo, video, ou podcast criados por voc\u00ea sobre o ReadyAPI editando este arquivo.<ul> <li>N\u00e3o se esque\u00e7a de adicionar o link no come\u00e7o da se\u00e7\u00e3o correspondente.</li> </ul> </li> <li>Para ajudar traduzir a documenta\u00e7\u00e3o para sua lingua.<ul> <li>Tamb\u00e9m \u00e9 possivel revisar as tradu\u00e7\u00f5es j\u00e1 existentes.</li> </ul> </li> <li>Para propor novas se\u00e7\u00f5es na documenta\u00e7\u00e3o.</li> <li>Para corrigir um bug/quest\u00e3o.</li> <li>Para adicionar um novo recurso.</li> </ul>"},{"location":"help-readyapi/#entre-no-chat","title":"Entre no chat","text":"<p>Entre no \ud83d\udc65 server de conversa do Discord \ud83d\udc65 e conhe\u00e7a novas pessoas da comunidade do ReadyAPI.</p> <p>Dica</p> <p>Para perguntas, pergunte nas quest\u00f5es do GitHub, l\u00e1 tem um chance maior de voc\u00ea ser ajudado sobre o ReadyAPI ReadyAPI Experts.</p> <p>Use o chat apenas para outro tipo de assunto.</p>"},{"location":"help-readyapi/#nao-faca-perguntas-no-chat","title":"N\u00e3o fa\u00e7a perguntas no chat","text":"<p>Tenha em mente que os chats permitem uma \"conversa mais livre\", dessa forma \u00e9 muito f\u00e1cil fazer perguntas que s\u00e3o muito gen\u00e9ricas e difice\u00eds de responder, assim voc\u00ea pode acabar n\u00e3o sendo respondido.</p> <p>Nas quest\u00f5es do GitHub o template ir\u00e1 te guiar para que voc\u00ea fa\u00e7a a sua pergunta de um jeito mais correto, fazendo com que voc\u00ea receba respostas mais completas, e at\u00e9 mesmo que voc\u00ea mesmo resolva o problema antes de perguntar. E no GitHub eu garanto que sempre irei responder todas as perguntas, mesmo que leve um tempo. Eu pessoalmente n\u00e3o consigo fazer isso via chat. \ud83d\ude05</p> <p>Conversas no chat n\u00e3o s\u00e3o t\u00e3o f\u00e1ceis de serem encontrados quanto no GitHub, ent\u00e3o quest\u00f5es e respostas podem se perder dentro da conversa. E apenas as que est\u00e3o nas quest\u00f5es do GitHub contam para voc\u00ea se tornar um Expert em ReadyAPI, ent\u00e3o voc\u00ea receber\u00e1 mais aten\u00e7\u00e3o nas quest\u00f5es do GitHub.</p> <p>Por outro lado, existem milhares de usu\u00e1rios no chat, ent\u00e3o tem uma grande chance de voc\u00ea encontrar algu\u00e9m para trocar uma id\u00e9ia por l\u00e1 em qualquer hor\u00e1rio. \ud83d\ude04</p>"},{"location":"help-readyapi/#patrocine-o-autor","title":"Patrocine o autor","text":"<p>Voc\u00ea tamb\u00e9m pode ajudar o autor financeiramente (eu) atrav\u00e9s do GitHub sponsors.</p> <p>L\u00e1 voc\u00ea pode me pagar um caf\u00e9zinho \u2615\ufe0f como agradecimento. \ud83d\ude04</p> <p>E voc\u00ea tamb\u00e9m pode se tornar um patrocinador Prata ou Ouro do ReadyAPI. \ud83c\udfc5\ud83c\udf89</p>"},{"location":"help-readyapi/#patrocine-as-ferramente-que-potencializam-o-readyapi","title":"Patrocine as ferramente que potencializam o ReadyAPI","text":"<p>Como voc\u00ea viu na documenta\u00e7\u00e3o, o ReadyAPI se apoia em nos gigantes, Starlette e Pydantic.</p> <p>Patrocine tamb\u00e9m:</p> <ul> <li>Samuel Colvin (Pydantic)</li> <li>Encode (Starlette, Uvicorn)</li> </ul> <p>Muito Obrigado! \ud83d\ude80</p>"},{"location":"history-design-future/","title":"Hist\u00f3ria, Design e Futuro","text":"<p>H\u00e1 algum tempo, um usu\u00e1rio ReadyAPI perguntou:</p> <p>Qual \u00e9 a hist\u00f3ria desse projeto? Parece que surgiu do nada e se tornou incr\u00edvel em poucas semanas [...]</p> <p>Aqui est\u00e1 um pouco dessa hist\u00f3ria.</p>"},{"location":"history-design-future/#alternativas","title":"Alternativas","text":"<p>Eu tenho criado APIs com requisitos complexos por v\u00e1rios anos (Aprendizado de M\u00e1quina, sistemas distribu\u00eddos, tarefas ass\u00edncronas, banco de dados NoSQL etc.), liderando v\u00e1rios times de desenvolvedores.</p> <p>Como parte disso, eu precisava investigar, testar e usar muitas alternativas.</p> <p>A hist\u00f3ria do ReadyAPI \u00e9, em grande parte, a hist\u00f3ria de seus predecessores.</p> <p>Como dito na se\u00e7\u00e3o Alternativas:</p> <p>ReadyAPI n\u00e3o existiria se n\u00e3o pelo trabalho anterior de outros.</p> <p>H\u00e1 muitas ferramentas criadas antes que ajudaram a inspirar sua cria\u00e7\u00e3o.</p> <p>Eu estive evitando a cria\u00e7\u00e3o de um novo framework por v\u00e1rios anos. Primeiro tentei resolver todas as funcionalidades cobertas por ReadyAPI usando muitos frameworks, plug-ins e ferramentas diferentes.</p> <p>Mas em algum ponto, n\u00e3o havia outra op\u00e7\u00e3o sen\u00e3o criar algo que oferecia todas as funcionalidades, aproveitando as melhores ideias de ferramentas anteriores, e combinando-as da melhor maneira poss\u00edvel, usando funcionalidades da linguagem que nem estavam dispon\u00edveis antes (type hints do Python 3.6+).</p>"},{"location":"history-design-future/#investigacao","title":"Investiga\u00e7\u00e3o","text":"<p>Ao usar todas as alternativas anteriores, eu tive a chance de aprender com todas elas, aproveitar ideias e combin\u00e1-las da melhor maneira que encontrei para mim e para os times de desenvolvedores com os quais trabalhava.</p> <p>Por exemplo, estava claro que idealmente ele deveria ser baseado nos type hints padr\u00f5es do Python.</p> <p>Tamb\u00e9m, a melhor abordagem era usar padr\u00f5es j\u00e1 existentes.</p> <p>Ent\u00e3o, antes mesmo de come\u00e7ar a codificar o ReadyAPI, eu investi v\u00e1rios meses estudando as especifica\u00e7\u00f5es do OpenAPI, JSON Schema, OAuth2 etc. Entendendo suas rela\u00e7\u00f5es, sobreposi\u00e7\u00f5es e diferen\u00e7as.</p>"},{"location":"history-design-future/#design","title":"Design","text":"<p>Eu ent\u00e3o dediquei algum tempo projetando a \"API\" de desenvolvimento que eu queria como usu\u00e1rio (como um desenvolvedor usando o ReadyAPI).</p> <p>Eu testei v\u00e1rias ideias nos editores Python mais populares: PyCharm, VS Code, e editores baseados no Jedi.</p> <p>Pela \u00faltima Pesquisa do Desenvolvedor Python, isso cobre cerca de 80% dos usu\u00e1rios.</p> <p>Isso significa que o ReadyAPI foi testado especificamente com os editores usados por 80% dos desenvolvedores Python. Como a maioria dos outros editores tendem a funcionar de forma similar, todos os seus benef\u00edcios devem funcionar para virtualmente todos os editores.</p> <p>Dessa forma eu pude encontrar a melhor maneira de reduzir duplica\u00e7\u00e3o de c\u00f3digo o m\u00e1ximo poss\u00edvel, ter completa\u00e7\u00e3o de texto em todos os lugares, confer\u00eancia de tipos e erros etc.</p> <p>Tudo de uma forma que oferecesse a melhor experi\u00eancia de desenvolvimento para todos os desenvolvedores.</p>"},{"location":"history-design-future/#requisitos","title":"Requisitos","text":"<p>Ap\u00f3s testar v\u00e1rias alternativas, eu decidi que usaria o Pydantic por suas vantagens.</p> <p>Ent\u00e3o eu contribu\u00ed com ele, para deix\u00e1-lo completamente de acordo com o JSON Schema, para dar suporte a diferentes maneiras de definir declara\u00e7\u00f5es de restri\u00e7\u00f5es, e melhorar o suporte a editores (confer\u00eancias de tipos, auto completa\u00e7\u00f5es) baseado nos testes em v\u00e1rios editores.</p> <p>Durante o desenvolvimento, eu tamb\u00e9m contribu\u00ed com o Starlette, outro requisito chave.</p>"},{"location":"history-design-future/#desenvolvimento","title":"Desenvolvimento","text":"<p>Quando comecei a criar o ReadyAPI de fato, a maior parte das pe\u00e7as j\u00e1 estavam encaixadas, o design estava definido, os requisitos e ferramentas j\u00e1 estavam prontos, e o conhecimento sobre os padr\u00f5es e especifica\u00e7\u00f5es estavam claros e frescos.</p>"},{"location":"history-design-future/#futuro","title":"Futuro","text":"<p>Nesse ponto, j\u00e1 est\u00e1 claro que o ReadyAPI com suas ideias est\u00e1 sendo \u00fatil para muitas pessoas.</p> <p>Ele foi escolhido sobre outras alternativas anteriores por se adequar melhor em muitos casos.</p> <p>Muitos desenvolvedores e times j\u00e1 dependem do ReadyAPI para seus projetos (incluindo eu e meu time).</p> <p>Mas ainda h\u00e1 muitas melhorias e funcionalidades a vir.</p> <p>ReadyAPI tem um grande futuro \u00e0 frente.</p> <p>E sua ajuda \u00e9 muito bem-vinda.</p>"},{"location":"project-generation/","title":"Gera\u00e7\u00e3o de Projetos - Modelo","text":"<p>Voc\u00ea pode usar um gerador de projetos para come\u00e7ar, por j\u00e1 incluir configura\u00e7\u00f5es iniciais, seguran\u00e7a, banco de dados e os primeiros endpoints API j\u00e1 feitos para voc\u00ea.</p> <p>Um gerador de projetos sempre ter\u00e1 uma pr\u00e9-configura\u00e7\u00e3o que voc\u00ea pode atualizar e adaptar para suas pr\u00f3prias necessidades, mas pode ser um bom ponto de partida para seu projeto.</p>"},{"location":"project-generation/#full-stack-readyapi-postgresql","title":"Full Stack ReadyAPI PostgreSQL","text":"<p>GitHub: https://github.com/khulnasoft/full-stack-readyapi-postgresql</p>"},{"location":"project-generation/#full-stack-readyapi-postgresql-recursos","title":"Full Stack ReadyAPI PostgreSQL - Recursos","text":"<ul> <li>Integra\u00e7\u00e3o completa Docker.</li> <li>Modo de implanta\u00e7\u00e3o Docker Swarm.</li> <li>Integra\u00e7\u00e3o e otimiza\u00e7\u00e3o Docker Compose para desenvolvimento local.</li> <li>Pronto para Produ\u00e7\u00e3o com servidor web usando Uvicorn e Gunicorn.</li> <li>Backend ReadyAPI Python:<ul> <li>R\u00e1pido: Alta performance, no n\u00edvel de NodeJS e Go (gra\u00e7as ao Starlette e Pydantic).</li> <li>Intuitivo: \u00d3timo suporte de editor. Auto-Complete em todo lugar. Menos tempo debugando.</li> <li>F\u00e1cil: Projetado para ser f\u00e1cil de usar e aprender. Menos tempo lendo documenta\u00e7\u00f5es.</li> <li>Curto: Minimize duplica\u00e7\u00e3o de c\u00f3digo. M\u00faltiplos recursos para cada declara\u00e7\u00e3o de par\u00e2metro.</li> <li>Robusto: Tenha c\u00f3digo pronto para produ\u00e7\u00e3o. Com documenta\u00e7\u00e3o interativa autom\u00e1tica.</li> <li>Baseado em Padr\u00f5es: Baseado em (e completamente compat\u00edvel com) padr\u00f5es abertos para APIs: OpenAPI e JSON Schema.</li> <li>Muitos outros recursos incluindo valida\u00e7\u00e3o autom\u00e1tica, serializa\u00e7\u00e3o, documenta\u00e7\u00e3o interativa, autentica\u00e7\u00e3o com tokens OAuth2 JWT etc.</li> </ul> </li> <li>Senha segura hashing por padr\u00e3o.</li> <li>Autentica\u00e7\u00e3o Token JWT.</li> <li>Modelos SQLAlchemy (independente de extens\u00f5es Flask, para que eles possam ser usados com workers Celery diretamente).</li> <li>Modelos b\u00e1sicos para usu\u00e1rios (modifique e remova conforme suas necessidades).</li> <li>Migra\u00e7\u00f5es Alembic.</li> <li>CORS (Cross Origin Resource Sharing - Compartilhamento de Recursos Entre Origens).</li> <li>Worker Celery que pode importar e usar modelos e c\u00f3digos do resto do backend seletivamente.</li> <li>Testes backend REST baseados no Pytest, integrados com Docker, ent\u00e3o voc\u00ea pode testar a intera\u00e7\u00e3o completa da API, independente do banco de dados. Como roda no Docker, ele pode construir um novo reposit\u00f3rio de dados do zero toda vez (assim voc\u00ea pode usar ElasticSearch, MongoDB, CouchDB, ou o que quiser, e apenas testar que a API esteja funcionando).</li> <li>F\u00e1cil integra\u00e7\u00e3o com Python atrav\u00e9s dos Kernels Jupyter para desenvolvimento remoto ou no Docker com extens\u00f5es como Atom Hydrogen ou Visual Studio Code Jupyter.</li> <li>Frontend Vue:<ul> <li>Gerado com Vue CLI.</li> <li>Controle de Autentica\u00e7\u00e3o JWT.</li> <li>Visualiza\u00e7\u00e3o de login.</li> <li>Ap\u00f3s o login, visualiza\u00e7\u00e3o do painel de controle principal.</li> <li>Painel de controle principal com cria\u00e7\u00e3o e edi\u00e7\u00e3o de usu\u00e1rio.</li> <li>Edi\u00e7\u00e3o do pr\u00f3prio usu\u00e1rio.</li> <li>Vuex.</li> <li>Vue-router.</li> <li>Vuetify para belos componentes material design.</li> <li>TypeScript.</li> <li>Servidor Docker baseado em Nginx (configurado para rodar \"lindamente\" com Vue-router).</li> <li>Constru\u00e7\u00e3o multi-est\u00e1gio Docker, ent\u00e3o voc\u00ea n\u00e3o precisa salvar ou commitar c\u00f3digo compilado.</li> <li>Testes frontend rodados na hora da constru\u00e7\u00e3o (pode ser desabilitado tamb\u00e9m).</li> <li>Feito t\u00e3o modular quanto poss\u00edvel, ent\u00e3o ele funciona fora da caixa, mas voc\u00ea pode gerar novamente com Vue CLI ou criar conforme voc\u00ea queira, e reutilizar o que quiser.</li> </ul> </li> <li>PGAdmin para banco de dados PostgreSQL, voc\u00ea pode modificar para usar PHPMyAdmin e MySQL facilmente.</li> <li>Flower para monitora\u00e7\u00e3o de tarefas Celery.</li> <li>Balanceamento de carga entre frontend e backend com Traefik, ent\u00e3o voc\u00ea pode ter ambos sob o mesmo dom\u00ednio, separados por rota, mas servidos por diferentes containers.</li> <li>Integra\u00e7\u00e3o Traefik, incluindo gera\u00e7\u00e3o autom\u00e1tica de certificados HTTPS Let's Encrypt.</li> <li>GitLab CI (integra\u00e7\u00e3o cont\u00ednua), incluindo testes frontend e backend.</li> </ul>"},{"location":"project-generation/#full-stack-readyapi-couchbase","title":"Full Stack ReadyAPI Couchbase","text":"<p>GitHub: https://github.com/khulnasoft/full-stack-readyapi-couchbase</p> <p>\u26a0\ufe0f WARNING \u26a0\ufe0f</p> <p>Se voc\u00ea est\u00e1 iniciando um novo projeto do zero, verifique as alternativas aqui.</p> <p>Por exemplo, o gerador de projetos Full Stack ReadyAPI PostgreSQL pode ser uma alternativa melhor, como ele \u00e9 ativamente mantido e utilizado. E ele inclui todos os novos recursos e melhorias.</p> <p>Voc\u00ea ainda \u00e9 livre para utilizar o gerador baseado em Couchbase se quiser, ele provavelmente ainda funciona bem, e voc\u00ea j\u00e1 tem um projeto gerado com ele que roda bem tamb\u00e9m (e voc\u00ea provavelmente j\u00e1 atualizou ele para encaixar nas suas necessidades).</p> <p>Voc\u00ea pode ler mais sobre nas documenta\u00e7\u00e3oes do reposit\u00f3rio.</p>"},{"location":"project-generation/#full-stack-readyapi-mongodb","title":"Full Stack ReadyAPI MongoDB","text":"<p>...pode demorar, dependendo do meu tempo dispon\u00edvel e outros fatores. \ud83d\ude05 \ud83c\udf89</p>"},{"location":"project-generation/#modelos-de-aprendizado-de-maquina-com-spacy-e-readyapi","title":"Modelos de Aprendizado de M\u00e1quina com spaCy e ReadyAPI","text":"<p>GitHub: https://github.com/microsoft/cookiecutter-spacy-readyapi</p>"},{"location":"project-generation/#modelos-de-aprendizado-de-maquina-com-spacy-e-readyapi-recursos","title":"Modelos de Aprendizado de M\u00e1quina com spaCy e ReadyAPI - Recursos","text":"<ul> <li>Integra\u00e7\u00e3o com modelo NER spaCy.</li> <li>Formato de requisi\u00e7\u00e3o Busca Cognitiva Azure acoplado.</li> <li>Servidor Python web Pronto para Produ\u00e7\u00e3o usando Uvicorn e Gunicorn.</li> <li>Implanta\u00e7\u00e3o Azure DevOps Kubernetes (AKS) CI/CD acoplada.</li> <li>Multilingual facilmente escolhido como uma das linguagens spaCy acopladas durante a configura\u00e7\u00e3o do projeto.</li> <li>Facilmente extens\u00edvel para outros modelos de frameworks (Pytorch, Tensorflow), n\u00e3o apenas spaCy.</li> </ul>"},{"location":"python-types/","title":"Introdu\u00e7\u00e3o aos tipos Python","text":"<p>Python 3.6 + tem suporte para \"type hints\" opcionais.</p> <p>Esses \"type hints\" s\u00e3o uma nova sintaxe (desde Python 3.6+) que permite declarar o  tipo  de uma vari\u00e1vel.</p> <p>Ao declarar tipos para suas vari\u00e1veis, editores e ferramentas podem oferecer um melhor suporte.</p> <p>Este \u00e9 apenas um tutorial r\u00e1pido / atualiza\u00e7\u00e3o sobre type hints Python. Ele cobre apenas o m\u00ednimo necess\u00e1rio para us\u00e1-los com o ReadyAPI ... que \u00e9 realmente muito pouco.</p> <p>O ReadyAPI \u00e9 baseado nesses type hints, eles oferecem muitas vantagens e benef\u00edcios.</p> <p>Mas mesmo que voc\u00ea nunca use o ReadyAPI, voc\u00ea se beneficiaria de aprender um pouco sobre eles.</p> <p>Nota</p> <p>Se voc\u00ea \u00e9 um especialista em Python e j\u00e1 sabe tudo sobre type hints, pule para o pr\u00f3ximo cap\u00edtulo.</p>"},{"location":"python-types/#motivacao","title":"Motiva\u00e7\u00e3o","text":"<p>Vamos come\u00e7ar com um exemplo simples:</p> <pre><code>def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre> <p>A chamada deste programa gera:</p> <pre><code>John Doe\n</code></pre> <p>A fun\u00e7\u00e3o faz o seguinte:</p> <ul> <li>Pega um <code>first_name</code> e <code>last_name</code>.</li> <li>Converte a primeira letra de cada uma em mai\u00fasculas com <code>title ()</code>.</li> <li> Concatena  com um espa\u00e7o no meio.</li> </ul> <pre><code>def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre>"},{"location":"python-types/#edite-o","title":"Edite-o","text":"<p>\u00c9 um programa muito simples.</p> <p>Mas agora imagine que voc\u00ea estava escrevendo do zero.</p> <p>Em algum momento voc\u00ea teria iniciado a defini\u00e7\u00e3o da fun\u00e7\u00e3o, j\u00e1 tinha os par\u00e2metros prontos ...</p> <p>Mas ent\u00e3o voc\u00ea deve chamar \"esse m\u00e9todo que converte a primeira letra em mai\u00fascula\".</p> <p>Era <code>upper</code>? Era <code>uppercase</code>? <code>first_uppercase</code>? <code>capitalize</code>?</p> <p>Em seguida, tente com o velho amigo do programador, o preenchimento autom\u00e1tico do editor.</p> <p>Voc\u00ea digita o primeiro par\u00e2metro da fun\u00e7\u00e3o, <code>first_name</code>, depois um ponto (<code>.</code>) e, em seguida, pressiona <code>Ctrl + Space</code> para acionar a conclus\u00e3o.</p> <p>Mas, infelizmente, voc\u00ea n\u00e3o obt\u00e9m nada \u00fatil:</p> <p></p>"},{"location":"python-types/#adicionar-tipos","title":"Adicionar tipos","text":"<p>Vamos modificar uma \u00fanica linha da vers\u00e3o anterior.</p> <p>Vamos mudar exatamente esse fragmento, os par\u00e2metros da fun\u00e7\u00e3o, de:</p> <pre><code>    first_name, last_name\n</code></pre> <p>para:</p> <pre><code>    first_name: str, last_name: str\n</code></pre> <p>\u00c9 isso a\u00ed.</p> <p>Esses s\u00e3o os \"type hints\":</p> <pre><code>def get_full_name(first_name: str, last_name: str):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre> <p>Isso n\u00e3o \u00e9 o mesmo que declarar valores padr\u00e3o como seria com:</p> <pre><code>    first_name=\"john\", last_name=\"doe\"\n</code></pre> <p>\u00c9 uma coisa diferente.</p> <p>Estamos usando dois pontos (<code>:</code>), n\u00e3o \u00e9 igual a (<code>=</code>).</p> <p>E adicionar type hints normalmente n\u00e3o muda o que acontece do que aconteceria sem elas.</p> <p>Mas agora, imagine que voc\u00ea est\u00e1 novamente no meio da cria\u00e7\u00e3o dessa fun\u00e7\u00e3o, mas com type hints.</p> <p>No mesmo ponto, voc\u00ea tenta acionar o preenchimento autom\u00e1tico com o <code>Ctrl Space</code> e v\u00ea:</p> <p></p> <p>Com isso, voc\u00ea pode rolar, vendo as op\u00e7\u00f5es, at\u00e9 encontrar o que \"toca uma campainha\":</p> <p></p>"},{"location":"python-types/#mais-motivacao","title":"Mais motiva\u00e7\u00e3o","text":"<p>Marque esta fun\u00e7\u00e3o, ela j\u00e1 possui type hints:</p> <pre><code>def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + age\n    return name_with_age\n</code></pre> <p>Como o editor conhece os tipos de vari\u00e1veis, voc\u00ea n\u00e3o apenas obt\u00e9m a conclus\u00e3o, mas tamb\u00e9m as verifica\u00e7\u00f5es de erro:</p> <p></p> <p>Agora voc\u00ea sabe que precisa corrig\u00ed-lo, converta <code>age</code> em uma string com <code>str (age)</code>:</p> <pre><code>def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + str(age)\n    return name_with_age\n</code></pre>"},{"location":"python-types/#tipos-de-declaracao","title":"Tipos de declara\u00e7\u00e3o","text":"<p>Voc\u00ea acabou de ver o local principal para declarar type hints. Como par\u00e2metros de fun\u00e7\u00e3o.</p> <p>Este tamb\u00e9m \u00e9 o principal local em que voc\u00ea os usaria com o ReadyAPI.</p>"},{"location":"python-types/#tipos-simples","title":"Tipos simples","text":"<p>Voc\u00ea pode declarar todos os tipos padr\u00e3o de Python, n\u00e3o apenas <code>str</code>.</p> <p>Voc\u00ea pode usar, por exemplo:</p> <ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>bool</code></li> <li><code>bytes</code></li> </ul> <pre><code>def get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):\n    return item_a, item_b, item_c, item_d, item_d, item_e\n</code></pre>"},{"location":"python-types/#tipos-genericos-com-parametros-de-tipo","title":"Tipos gen\u00e9ricos com par\u00e2metros de tipo","text":"<p>Existem algumas estruturas de dados que podem conter outros valores, como <code>dict</code>, <code>list</code>, <code>set</code> e <code>tuple</code>. E os valores internos tamb\u00e9m podem ter seu pr\u00f3prio tipo.</p> <p>Para declarar esses tipos e os tipos internos, voc\u00ea pode usar o m\u00f3dulo Python padr\u00e3o <code>typing</code>.</p> <p>Ele existe especificamente para suportar esses type hints.</p>"},{"location":"python-types/#list","title":"<code>List</code>","text":"<p>Por exemplo, vamos definir uma vari\u00e1vel para ser uma <code>lista</code> de <code>str</code>.</p> <p>Em <code>typing</code>, importe <code>List</code> (com um <code>L</code> mai\u00fasculo):</p> <pre><code>from typing import List\n\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>Declare a vari\u00e1vel com a mesma sintaxe de dois pontos (<code>:</code>).</p> <p>Como o tipo, coloque a <code>List</code>.</p> <p>Como a lista \u00e9 um tipo que cont\u00e9m alguns tipos internos, voc\u00ea os coloca entre colchetes:</p> <pre><code>from typing import List\n\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>Dica</p> <p>Esses tipos internos entre colchetes s\u00e3o chamados de \"par\u00e2metros de tipo\".</p> <p>Nesse caso, <code>str</code> \u00e9 o par\u00e2metro de tipo passado para <code>List</code>.</p> <p>Isso significa que: \"a vari\u00e1vel <code>items</code> \u00e9 uma <code>list</code>, e cada um dos itens desta lista \u00e9 uma <code>str</code>\".</p> <p>Ao fazer isso, seu editor pode fornecer suporte mesmo durante o processamento de itens da lista:</p> <p></p> <p>Sem tipos, isso \u00e9 quase imposs\u00edvel de alcan\u00e7ar.</p> <p>Observe que a vari\u00e1vel <code>item</code> \u00e9 um dos elementos da lista <code>items</code>.</p> <p>E, ainda assim, o editor sabe que \u00e9 um <code>str</code> e fornece suporte para isso.</p>"},{"location":"python-types/#tuple-e-set","title":"<code>Tuple</code> e <code>Set</code>","text":"<p>Voc\u00ea faria o mesmo para declarar <code>tuple</code>s e <code>set</code>s:</p> <pre><code>from typing import Set, Tuple\n\n\ndef process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):\n    return items_t, items_s\n</code></pre> <p>Isso significa que:</p> <ul> <li>A vari\u00e1vel <code>items_t</code> \u00e9 uma <code>tuple</code> com 3 itens, um <code>int</code>, outro <code>int</code> e uma <code>str</code>.</li> <li>A vari\u00e1vel <code>items_s</code> \u00e9 um <code>set</code>, e cada um de seus itens \u00e9 do tipo <code>bytes</code>.</li> </ul>"},{"location":"python-types/#dict","title":"<code>Dict</code>","text":"<p>Para definir um <code>dict</code>, voc\u00ea passa 2 par\u00e2metros de tipo, separados por v\u00edrgulas.</p> <p>O primeiro par\u00e2metro de tipo \u00e9 para as chaves do <code>dict</code>.</p> <p>O segundo par\u00e2metro de tipo \u00e9 para os valores do <code>dict</code>:</p> <pre><code>from typing import Dict\n\n\ndef process_items(prices: Dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)\n</code></pre> <p>Isso significa que:</p> <ul> <li>A vari\u00e1vel <code>prices</code> \u00e9 um dict`:<ul> <li>As chaves deste <code>dict</code> s\u00e3o do tipo <code>str</code> (digamos, o nome de cada item).</li> <li>Os valores deste <code>dict</code> s\u00e3o do tipo <code>float</code> (digamos, o pre\u00e7o de cada item).</li> </ul> </li> </ul>"},{"location":"python-types/#opcional","title":"<code>Opcional</code>","text":"<p>Voc\u00ea tamb\u00e9m pode usar o <code>Opcional</code> para declarar que uma vari\u00e1vel tem um tipo, como <code>str</code>, mas que \u00e9 \"opcional\", o que significa que tamb\u00e9m pode ser <code>None</code>:</p> <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> <p>O uso de <code>Opcional [str]</code> em vez de apenas <code>str</code> permitir\u00e1 que o editor o ajude a detectar erros, onde voc\u00ea pode estar assumindo que um valor \u00e9 sempre um <code>str</code>, quando na verdade tamb\u00e9m pode ser <code>None</code>.</p>"},{"location":"python-types/#tipos-genericos","title":"Tipos gen\u00e9ricos","text":"<p>Esses tipos que usam par\u00e2metros de tipo entre colchetes, como:</p> <ul> <li><code>List</code></li> <li><code>Tuple</code></li> <li><code>Set</code></li> <li><code>Dict</code></li> <li><code>Opcional</code></li> <li>...e outros.</li> </ul> <p>s\u00e3o chamados tipos gen\u00e9ricos ou gen\u00e9ricos.</p>"},{"location":"python-types/#classes-como-tipos","title":"Classes como tipos","text":"<p>Voc\u00ea tamb\u00e9m pode declarar uma classe como o tipo de uma vari\u00e1vel.</p> <p>Digamos que voc\u00ea tenha uma classe <code>Person</code>, com um nome:</p> <pre><code>class Person:\n    def __init__(self, name: str):\n        self.name = name\n\n\ndef get_person_name(one_person: Person):\n    return one_person.name\n</code></pre> <p>Ent\u00e3o voc\u00ea pode declarar que uma vari\u00e1vel \u00e9 do tipo <code>Person</code>:</p> <pre><code>class Person:\n    def __init__(self, name: str):\n        self.name = name\n\n\ndef get_person_name(one_person: Person):\n    return one_person.name\n</code></pre> <p>E ent\u00e3o, novamente, voc\u00ea recebe todo o suporte do editor:</p> <p></p>"},{"location":"python-types/#modelos-pydantic","title":"Modelos Pydantic","text":"<p> Pydantic  \u00e9 uma biblioteca Python para executar a valida\u00e7\u00e3o de dados.</p> <p>Voc\u00ea declara a \"forma\" dos dados como classes com atributos.</p> <p>E cada atributo tem um tipo.</p> <p>Em seguida, voc\u00ea cria uma inst\u00e2ncia dessa classe com alguns valores e ela os validar\u00e1, os converter\u00e1 para o tipo apropriado (se for esse o caso) e fornecer\u00e1 um objeto com todos os dados.</p> <p>E voc\u00ea recebe todo o suporte do editor com esse objeto resultante.</p> <p>Retirado dos documentos oficiais dos Pydantic:</p> <pre><code>from datetime import datetime\nfrom typing import List, Union\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: List[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# &gt; User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# &gt; 123\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Para saber mais sobre o  Pydantic, verifique seus documentos .</p> <p>ReadyAPI \u00e9 todo baseado em Pydantic.</p> <p>Voc\u00ea ver\u00e1 muito mais disso na pr\u00e1tica no Tutorial - Guia do usu\u00e1rio.</p>"},{"location":"python-types/#type-hints-em-readyapi","title":"Type hints em ReadyAPI","text":"<p>O ReadyAPI aproveita esses type hints para fazer v\u00e1rias coisas.</p> <p>Com o ReadyAPI, voc\u00ea declara par\u00e2metros com type hints e obt\u00e9m:</p> <ul> <li>Suporte ao editor.</li> <li>Verifica\u00e7\u00f5es de tipo.</li> </ul> <p>... e ReadyAPI usa as mesmas declara\u00e7\u00f5es para:</p> <ul> <li>Definir requisitos: dos par\u00e2metros do caminho da solicita\u00e7\u00e3o, par\u00e2metros da consulta, cabe\u00e7alhos, corpos, depend\u00eancias, etc.</li> <li>Converter dados: da solicita\u00e7\u00e3o para o tipo necess\u00e1rio.</li> <li>Validar dados: provenientes de cada solicita\u00e7\u00e3o:<ul> <li>A gera\u00e7\u00e3o de erros autom\u00e1ticos retornou ao cliente quando os dados s\u00e3o inv\u00e1lidos.</li> </ul> </li> <li>Documente a API usando OpenAPI:<ul> <li>que \u00e9 usado pelas interfaces de usu\u00e1rio da documenta\u00e7\u00e3o interativa autom\u00e1tica.</li> </ul> </li> </ul> <p>Tudo isso pode parecer abstrato. N\u00e3o se preocupe. Voc\u00ea ver\u00e1 tudo isso em a\u00e7\u00e3o no Tutorial - Guia do usu\u00e1rio.</p> <p>O importante \u00e9 que, usando tipos padr\u00e3o de Python, em um \u00fanico local (em vez de adicionar mais classes, decoradores, etc.), o ReadyAPI far\u00e1 muito trabalho para voc\u00ea.</p> <p>Informa\u00e7\u00e3o</p> <p>Se voc\u00ea j\u00e1 passou por todo o tutorial e voltou para ver mais sobre os tipos, um bom recurso \u00e9  a \"cheat sheet\" do <code>mypy</code> .</p>"},{"location":"readyapi-people/","title":"Pessoas do ReadyAPI","text":"<p>ReadyAPI possue uma comunidade incr\u00edvel que recebe pessoas de todos os n\u00edveis.</p>"},{"location":"readyapi-people/#criador-mantenedor","title":"Criador - Mantenedor","text":"<p>Ei! \ud83d\udc4b</p> <p>Este sou eu:</p> @khulnasoft Respostas: 1878Pull Requests: 559 <p>Eu sou o criador e mantenedor do ReadyAPI. Voc\u00ea pode ler mais sobre isso em Help ReadyAPI - Get Help - Connect with the author.</p> <p>...Mas aqui eu quero mostrar a voc\u00ea a comunidade.</p> <p>ReadyAPI recebe muito suporte da comunidade. E quero destacar suas contribui\u00e7\u00f5es.</p> <p>Estas s\u00e3o as pessoas que:</p> <ul> <li>Help others with issues (questions) in GitHub.</li> <li>Create Pull Requests.</li> <li>Revisar Pull Requests, especially important for translations.</li> </ul> <p>Uma salva de palmas para eles. \ud83d\udc4f \ud83d\ude47</p>"},{"location":"readyapi-people/#usuarios-mais-ativos-do-ultimo-mes","title":"Usu\u00e1rios mais ativos do ultimo m\u00eas","text":"<p>Estes s\u00e3o os usu\u00e1rios que est\u00e3o helping others the most with issues (questions) in GitHub durante o ultimo m\u00eas. \u2615</p> @YuriiMotov Issues respondidas: 40 @JavierSanchezCastro Issues respondidas: 11 @Kludex Issues respondidas: 8 @jgould22 Issues respondidas: 7 @omarcruzpantoja Issues respondidas: 3 @pythonweb2 Issues respondidas: 2 @PhysicallyActive Issues respondidas: 2 @VatsalJagani Issues respondidas: 2 @khaledadrani Issues respondidas: 2 @chrisK824 Issues respondidas: 2"},{"location":"readyapi-people/#especialistas","title":"Especialistas","text":"<p>Aqui est\u00e1 os Especialistas do ReadyAPI. \ud83e\udd13</p> <p>Estes s\u00e3o os usu\u00e1rios que helped others the most with issues (questions) in GitHub em todo o tempo.</p> <p>Eles provaram ser especialistas ajudando muitos outros. \u2728</p> @Kludex Issues respondidas: 598 @dmontagu Issues respondidas: 241 @jgould22 Issues respondidas: 235 @Mause Issues respondidas: 220 @ycd Issues respondidas: 217 @JarroVGIT Issues respondidas: 193 @euri10 Issues respondidas: 153 @iudeen Issues respondidas: 128 @phy25 Issues respondidas: 126 @raphaelauv Issues respondidas: 83 @ghandic Issues respondidas: 71 @ArcLightSlavik Issues respondidas: 71 @falkben Issues respondidas: 59 @JavierSanchezCastro Issues respondidas: 55 @n8sty Issues respondidas: 52 @sm-Fifteen Issues respondidas: 49 @yinziyan1206 Issues respondidas: 48 @acidjunk Issues respondidas: 47 @adriangb Issues respondidas: 45 @insomnes Issues respondidas: 45 @Dustyposa Issues respondidas: 45 @YuriiMotov Issues respondidas: 43 @frankie567 Issues respondidas: 43 @odiseo0 Issues respondidas: 43 @includeamin Issues respondidas: 40 @chbndrhnns Issues respondidas: 38 @STeveShary Issues respondidas: 37 @krishnardt Issues respondidas: 35 @panla Issues respondidas: 32 @prostomarkeloff Issues respondidas: 28 @dbanty Issues respondidas: 26 @wshayes Issues respondidas: 25 @acnebs Issues respondidas: 23 @SirTelemak Issues respondidas: 23 @chrisK824 Issues respondidas: 22 @nymous Issues respondidas: 21 @rafsaf Issues respondidas: 21 @hasansezertasan Issues respondidas: 20 @nsidnev Issues respondidas: 20 @ebottos94 Issues respondidas: 20 @chris-allnutt Issues respondidas: 20 @retnikt Issues respondidas: 18 @zoliknemet Issues respondidas: 18 @nkhitrov Issues respondidas: 17 @Hultner Issues respondidas: 17 @harunyasar Issues respondidas: 17 @caeser1996 Issues respondidas: 17 @jonatasoli Issues respondidas: 16"},{"location":"readyapi-people/#top-contribuidores","title":"Top Contribuidores","text":"<p>Aqui est\u00e1 os Top Contribuidores. \ud83d\udc77</p> <p>Esses usu\u00e1rios t\u00eam created the most Pull Requests que tem sido mergeado.</p> <p>Eles contribu\u00edram com o c\u00f3digo-fonte, documenta\u00e7\u00e3o, tradu\u00e7\u00f5es, etc. \ud83d\udce6</p> @nilslindemann Pull Requests: 127 @jaystone776 Pull Requests: 49 @waynerv Pull Requests: 25 @tokusumi Pull Requests: 24 @Kludex Pull Requests: 22 @SwftAlpc Pull Requests: 21 @dmontagu Pull Requests: 17 @Xewus Pull Requests: 14 @euri10 Pull Requests: 13 @mariacamilagl Pull Requests: 12 @hasansezertasan Pull Requests: 12 @Smlep Pull Requests: 11 @AlertRED Pull Requests: 11 @hard-coders Pull Requests: 10 @alejsdev Pull Requests: 10 @KaniKim Pull Requests: 10 @xzmeng Pull Requests: 9 @Serrones Pull Requests: 8 @rjNemo Pull Requests: 8 @pablocm83 Pull Requests: 8 @RunningIkkyu Pull Requests: 7 @Alexandrhub Pull Requests: 7 @NinaHwang Pull Requests: 6 @batlopes Pull Requests: 6 @wshayes Pull Requests: 5 @samuelcolvin Pull Requests: 5 @Attsun1031 Pull Requests: 5 @ComicShrimp Pull Requests: 5 @rostik1410 Pull Requests: 5 @tamtam-fitness Pull Requests: 5 @jekirl Pull Requests: 4 @jfunez Pull Requests: 4 @ycd Pull Requests: 4 @komtaki Pull Requests: 4 @hitrust Pull Requests: 4 @JulianMaurin Pull Requests: 4 @lsglucas Pull Requests: 4 @BilalAlpaslan Pull Requests: 4 @adriangb Pull Requests: 4 @iudeen Pull Requests: 4 @axel584 Pull Requests: 4 @ivan-abc Pull Requests: 4 @divums Pull Requests: 3 @prostomarkeloff Pull Requests: 3 @nsidnev Pull Requests: 3 @pawamoy Pull Requests: 3 <p>Existem muitos outros contribuidores (mais de uma centena), voc\u00ea pode ver todos eles em P\u00e1gina de Contribuidores do ReadyAPI no GitHub. \ud83d\udc77</p>"},{"location":"readyapi-people/#top-revisores","title":"Top Revisores","text":"<p>Esses usu\u00e1rios s\u00e3o os Top Revisores. \ud83d\udd75\ufe0f</p>"},{"location":"readyapi-people/#revisoes-para-traducoes","title":"Revis\u00f5es para Tradu\u00e7\u00f5es","text":"<p>Eu s\u00f3 falo algumas l\u00ednguas (e n\u00e3o muito bem \ud83d\ude05). Ent\u00e3o, os revisores s\u00e3o aqueles que t\u00eam o poder de aprovar tradu\u00e7\u00f5es da documenta\u00e7\u00e3o. Sem eles, n\u00e3o haveria documenta\u00e7\u00e3o em v\u00e1rios outros idiomas.</p> <p>Os Top Revisores \ud83d\udd75\ufe0f revisaram a maior parte de Pull Requests de outros, garantindo a qualidade do c\u00f3digo, documenta\u00e7\u00e3o, e especialmente, as tradu\u00e7\u00f5es.</p> @s111d Revis\u00f5es: 143 @Xewus Revis\u00f5es: 128 @tokusumi Revis\u00f5es: 104 @hasansezertasan Revis\u00f5es: 84 @AlertRED Revis\u00f5es: 70 @Alexandrhub Revis\u00f5es: 68 @waynerv Revis\u00f5es: 63 @hard-coders Revis\u00f5es: 53 @Laineyzhang55 Revis\u00f5es: 48 @Kludex Revis\u00f5es: 46 @komtaki Revis\u00f5es: 45 @Winand Revis\u00f5es: 40 @solomein-sv Revis\u00f5es: 38 @alperiox Revis\u00f5es: 37 @lsglucas Revis\u00f5es: 36 @SwftAlpc Revis\u00f5es: 36 @nilslindemann Revis\u00f5es: 35 @rjNemo Revis\u00f5es: 34 @akarev0 Revis\u00f5es: 33 @romashevchenko Revis\u00f5es: 32 @LorhanSohaky Revis\u00f5es: 30 @cassiobotaro Revis\u00f5es: 29 @wdh99 Revis\u00f5es: 29 @pedabraham Revis\u00f5es: 28 @Smlep Revis\u00f5es: 28 @dedkot01 Revis\u00f5es: 28 @dpinezich Revis\u00f5es: 28 @maoyibo Revis\u00f5es: 27 @0417taehyun Revis\u00f5es: 27 @BilalAlpaslan Revis\u00f5es: 26 @zy7y Revis\u00f5es: 25 @mycaule Revis\u00f5es: 25 @sh0nk Revis\u00f5es: 23 @axel584 Revis\u00f5es: 23 @AGolicyn Revis\u00f5es: 21 @Attsun1031 Revis\u00f5es: 20 @ycd Revis\u00f5es: 20 @delhi09 Revis\u00f5es: 20 @rogerbrinkmann Revis\u00f5es: 20 @DevDae Revis\u00f5es: 20 @sattosan Revis\u00f5es: 19 @ComicShrimp Revis\u00f5es: 18 @simatheone Revis\u00f5es: 18 @ivan-abc Revis\u00f5es: 18 @bezaca Revis\u00f5es: 17 @lbmendes Revis\u00f5es: 17 @rostik1410 Revis\u00f5es: 17 @spacesphere Revis\u00f5es: 17 @panko Revis\u00f5es: 17"},{"location":"readyapi-people/#patrocinadores","title":"Patrocinadores","text":"<p>Esses s\u00e3o os Patrocinadores. \ud83d\ude0e</p> <p>Eles est\u00e3o apoiando meu trabalho ReadyAPI (e outros), principalmente atrav\u00e9s de GitHub Sponsors.</p>"},{"location":"readyapi-people/#patrocinadores-ouro","title":"Patrocinadores Ouro","text":""},{"location":"readyapi-people/#patrocinadores-prata","title":"Patrocinadores Prata","text":""},{"location":"readyapi-people/#patrocinadores-bronze","title":"Patrocinadores Bronze","text":""},{"location":"readyapi-people/#patrocinadores-individuais","title":"Patrocinadores Individuais","text":"@takashi-yoneya @marvin-robot @BoostryJP @acsone @owlur @Trivie @americanair @CanoaPBC @mainframeindustries @AccentDesign @mangualero @birkjernstrom @yasyf @primer-io @povilasb @upciti @samuelcolvin @Kludex @koconder @b-rad-c @ehaca @timlrx @Leay15 @ygorpontelo @ProteinQure @jsoques @joeds13 @dannywade @khadrawy @mjohnsey @ashi-agrawal @sepsi77 @wedwardbeck @RaamEEIL @Filimoa @prodhype @yakkonaut @patsatsia @anthonycepeda @patricioperezv @kaoru0310 @DelfinaCare @apitally @logic-automation @thenickben @ddilidili @ramonalmeidam @dudikbender @tcsmith @mickaelandrieu @dodo5522 @knallgelb @johannquerne @Shark009 @dblackrun @jstanden @andreaso @pamelafox @ericof @wshayes @koxudaxi @falkben @mintuhouse @Rehket @hiancdtrsnm @TrevorBenson @wdwinslow @catherinenelson1 @zsinx6 @kennywakeland @aacayaco @anomaly @jgreys @jaredtrog @oliverxchen @ennui93 @ternaus @eseglem @FernandoCelmer @simw @getsentry @pawamoy @nisutec @hoenie-ams @joerambo @rlnchow @dvlpjrs @engineerjoe440 @bnkc @petercool @JimFawkes @artempronevskiy @TheR1D @joshuatz @jangia @shuheng-liu @pers0n4 @SebTota @fernandosmither @romabozhanovgithub @PelicanQ @jugeeem @tahmarrrr23 @curegit @kristiangronberg @leonardo-holguin @arrrrrmin @mobyw @ArtyomVancyan @hgalytoby @conservative-dude @miguelgr @WillHogan @my3 @leobiscassi @cbonoz @anthonycorletti @ddanier @bryanculbertson @slafs @adamghill @eteq @dmig @securancy @tochikuji @browniebroke @KentShikama @katnoria @harsh183 @hcristea @moonape1226 @msehnout @xncbf @DMantis @hard-coders @supdann @satwikkansal @mntolia @pheanex @dzoladz @Alisa-lisa @danielunderwood @rangulvers @sdevkota @brizzbuzz @Baghdady92 @jakeecolution @abizovnuralem @danburonline @sadikkuzu @rwxd @YungBricoCoop @nlazaro @Patechoc @ssbarnea @yuawn"},{"location":"readyapi-people/#sobre-os-dados-detalhes-tecnicos","title":"Sobre os dados - detalhes t\u00e9cnicos","text":"<p>A principal inten\u00e7\u00e3o desta p\u00e1gina \u00e9 destacar o esfor\u00e7o da comunidade para ajudar os outros.</p> <p>Especialmente incluindo esfor\u00e7os que normalmente s\u00e3o menos vis\u00edveis, e em muitos casos mais \u00e1rduo, como ajudar os outros com issues e revisando Pull Requests com tradu\u00e7\u00f5es.</p> <p>Os dados s\u00e3o calculados todo m\u00eas, voc\u00ea pode ler o c\u00f3digo fonte aqui.</p> <p>Aqui tamb\u00e9m estou destacando contribui\u00e7\u00f5es de patrocinadores.</p> <p>Eu tamb\u00e9m me reservo o direito de atualizar o algoritmo, se\u00e7\u00f5es, limites, etc (s\u00f3 para prevenir \ud83e\udd37).</p>"},{"location":"about/","title":"Sobre","text":"<p>Sobre o ReadyAPI, seus padr\u00f5es, inspira\u00e7\u00f5es e muito mais. \ud83e\udd13</p>"},{"location":"advanced/","title":"Guia de Usu\u00e1rio Avan\u00e7ado","text":""},{"location":"advanced/#recursos-adicionais","title":"Recursos Adicionais","text":"<p>O Tutorial - Guia de Usu\u00e1rio deve ser o suficiente para dar a voc\u00ea um tour por todos os principais recursos do ReadyAPI.</p> <p>Na pr\u00f3xima se\u00e7\u00e3o voc\u00ea ver\u00e1 outras op\u00e7\u00f5es, configura\u00e7\u00f5es, e recursos adicionais.</p> <p>Dica</p> <p>As pr\u00f3ximas se\u00e7\u00f5es n\u00e3o s\u00e3o necess\u00e1riamente \"avan\u00e7adas\"</p> <p>E \u00e9 poss\u00edvel que para seu caso de uso, a solu\u00e7\u00e3o esteja em uma delas.</p>"},{"location":"advanced/#leia-o-tutorial-primeiro","title":"Leia o Tutorial primeiro","text":"<p>Voc\u00ea ainda pode usar a maior parte dos recursos no ReadyAPI com o conhecimento do Tutorial - Guia de Usu\u00e1rio.</p> <p>E as pr\u00f3ximas se\u00e7\u00f5es assumem que voc\u00ea j\u00e1 leu ele, e que voc\u00ea conhece suas ideias principais.</p>"},{"location":"advanced/#curso-testdrivenio","title":"Curso TestDriven.io","text":"<p>Se voc\u00ea gostaria de fazer um curso avan\u00e7ado-iniciante para complementar essa se\u00e7\u00e3o da documenta\u00e7\u00e3o, voc\u00ea pode querer conferir: Test-Driven Development com ReadyAPI e Docker por TestDriven.io.</p> <p>Eles est\u00e3o atualmente doando 10% de todos os lucros para o desenvolvimento do ReadyAPI. \ud83c\udf89 \ud83d\ude04</p>"},{"location":"advanced/events/","title":"Eventos de vida \u00fatil","text":"<p>Voc\u00ea pode definir a l\u00f3gica (c\u00f3digo) que poderia ser executada antes da aplica\u00e7\u00e3o inicializar. Isso significa que esse c\u00f3digo ser\u00e1 executado uma vez, antes da aplica\u00e7\u00e3o come\u00e7ar a receber requisi\u00e7\u00f5es.</p> <p>Do mesmo modo, voc\u00ea pode definir a l\u00f3gica (c\u00f3digo) que ser\u00e1 executada quando a aplica\u00e7\u00e3o estiver sendo encerrada. Nesse caso, este c\u00f3digo ser\u00e1 executado uma vez, depois de ter possivelmente tratado v\u00e1rias requisi\u00e7\u00f5es.</p> <p>Por conta desse c\u00f3digo ser executado antes da aplica\u00e7\u00e3o come\u00e7ar a receber requisi\u00e7\u00f5es, e logo ap\u00f3s terminar de lidar com as requisi\u00e7\u00f5es, ele cobre toda a vida \u00fatil (lifespan) da aplica\u00e7\u00e3o (o termo \"vida \u00fatil\" ser\u00e1 importante em um segundo \ud83d\ude09).</p> <p>Pode ser muito \u00fatil para configurar recursos que voc\u00ea precisa usar por toda aplica\u00e7\u00e3o, e que s\u00e3o compartilhados entre as requisi\u00e7\u00f5es, e/ou que voc\u00ea precisa limpar depois. Por exemplo, o pool de uma conex\u00e3o com o banco de dados ou carregamento de um modelo compartilhado de aprendizado de m\u00e1quina (machine learning).</p>"},{"location":"advanced/events/#caso-de-uso","title":"Caso de uso","text":"<p>Vamos iniciar com um exemplo de caso de uso e ent\u00e3o ver como resolv\u00ea-lo com isso.</p> <p>Vamos imaginar que voc\u00ea tem alguns modelos de machine learning que deseja usar para lidar com as requisi\u00e7\u00f5es. \ud83e\udd16</p> <p>Os mesmos modelos s\u00e3o compartilhados entre as requisi\u00e7\u00f5es, ent\u00e3o n\u00e3o \u00e9 um modelo por requisi\u00e7\u00e3o, ou um por usu\u00e1rio ou algo parecido.</p> <p>Vamos imaginar que o carregamento do modelo pode demorar bastante tempo, porque ele tem que ler muitos dados do disco. Ent\u00e3o voc\u00ea n\u00e3o quer fazer isso a cada requisi\u00e7\u00e3o.</p> <p>Voc\u00ea poderia carreg\u00e1-lo no n\u00edvel mais alto do m\u00f3dulo/arquivo, mas isso tamb\u00e9m poderia significaria carregar o modelo mesmo se voc\u00ea estiver executando um simples teste automatizado, ent\u00e3o esse teste poderia ser lento porque teria que esperar o carregamento do modelo antes de ser capaz de executar uma parte independente do c\u00f3digo.</p> <p>Isso \u00e9 que n\u00f3s iremos resolver, vamos carregar o modelo antes das requisi\u00e7\u00f5es serem manuseadas, mas apenas um pouco antes da aplica\u00e7\u00e3o come\u00e7ar a receber requisi\u00e7\u00f5es, n\u00e3o enquanto o c\u00f3digo estiver sendo carregado.</p>"},{"location":"advanced/events/#vida-util-lifespan","title":"Vida \u00fatil (Lifespan)","text":"<p>Voc\u00ea pode definir essa l\u00f3gica de inicializa\u00e7\u00e3o e encerramento usando os par\u00e2metros de <code>lifespan</code> da aplica\u00e7\u00e3o <code>ReadyAPI</code>, e um \"gerenciador de contexto\" (te mostrarei o que \u00e9 isso a seguir).</p> <p>Vamos iniciar com um exemplo e ver isso detalhadamente.</p> <p>N\u00f3s criamos uma fun\u00e7\u00e3o ass\u00edncrona chamada <code>lifespan()</code> com <code>yield</code> como este:</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Aqui n\u00f3s estamos simulando a inicializa\u00e7\u00e3o custosa do carregamento do modelo colocando a (falsa) fun\u00e7\u00e3o de modelo no dicion\u00e1rio com modelos de machine learning antes do <code>yield</code>. Este c\u00f3digo ser\u00e1 executado antes da aplica\u00e7\u00e3o come\u00e7ar a receber requisi\u00e7\u00f5es, durante a inicializa\u00e7\u00e3o.</p> <p>E ent\u00e3o, logo ap\u00f3s o <code>yield</code>, descarregaremos o modelo. Esse c\u00f3digo ser\u00e1 executado ap\u00f3s a aplica\u00e7\u00e3o terminar de lidar com as requisi\u00e7\u00f5es, pouco antes do encerramento. Isso poderia, por exemplo, liberar recursos como mem\u00f3ria ou GPU.</p> <p>Dica</p> <p>O <code>shutdown</code> aconteceria quando voc\u00ea estivesse encerrando a aplica\u00e7\u00e3o.</p> <p>Talvez voc\u00ea precise inicializar uma nova vers\u00e3o, ou apenas cansou de execut\u00e1-la. \ud83e\udd37</p>"},{"location":"advanced/events/#funcao-lifespan","title":"Fun\u00e7\u00e3o lifespan","text":"<p>A primeira coisa a notar, \u00e9 que estamos definindo uma fun\u00e7\u00e3o ass\u00edncrona com <code>yield</code>. Isso \u00e9 muito semelhante \u00e0 Depend\u00eancias com <code>yield</code>.</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>A primeira parte da fun\u00e7\u00e3o, antes do <code>yield</code>, ser\u00e1  executada antes da aplica\u00e7\u00e3o inicializar.</p> <p>E a parte posterior do <code>yield</code> ir\u00e1 executar ap\u00f3s a aplica\u00e7\u00e3o ser encerrada.</p>"},{"location":"advanced/events/#gerenciador-de-contexto-assincrono","title":"Gerenciador de Contexto Ass\u00edncrono","text":"<p>Se voc\u00ea verificar, a fun\u00e7\u00e3o est\u00e1 decorada com um <code>@asynccontextmanager</code>.</p> <p>Que converte a fun\u00e7\u00e3o em algo chamado de \"Gerenciador de Contexto Ass\u00edncrono\".</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Um gerenciador de contexto em Python \u00e9 algo que voc\u00ea pode usar em uma declara\u00e7\u00e3o <code>with</code>, por exemplo, <code>open()</code> pode ser usado como um gerenciador de contexto:</p> <pre><code>with open(\"file.txt\") as file:\n    file.read()\n</code></pre> <p>Nas vers\u00f5es mais recentes de Python, h\u00e1 tamb\u00e9m um gerenciador de contexto ass\u00edncrono. Voc\u00ea o usaria com <code>async with</code>:</p> <pre><code>async with lifespan(app):\n    await do_stuff()\n</code></pre> <p>Quando voc\u00ea cria um gerenciador de contexto ou um gerenciador de contexto ass\u00edncrono como mencionado acima, o que ele faz \u00e9 que, antes de entrar no bloco <code>with</code>, ele ir\u00e1 executar o c\u00f3digo anterior ao <code>yield</code>, e depois de sair do bloco <code>with</code>, ele ir\u00e1 executar o c\u00f3digo depois do <code>yield</code>.</p> <p>No nosso exemplo de c\u00f3digo acima, n\u00f3s n\u00e3o usamos ele diretamente, mas n\u00f3s passamos para o ReadyAPI para ele us\u00e1-lo.</p> <p>O par\u00e2metro <code>lifespan</code> da aplica\u00e7\u00e3o <code>ReadyAPI</code> usa um Gerenciador de Contexto Ass\u00edncrono, ent\u00e3o n\u00f3s podemos passar nosso novo gerenciador de contexto ass\u00edncrono do <code>lifespan</code> para ele.</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre>"},{"location":"advanced/events/#eventos-alternativos-deprecados","title":"Eventos alternativos (deprecados)","text":"<p>Aviso</p> <p>A maneira recomendada para lidar com a inicializa\u00e7\u00e3o e o encerramento \u00e9 usando o par\u00e2metro <code>lifespan</code> da aplica\u00e7\u00e3o <code>ReadyAPI</code> como descrito acima.</p> <p>Voc\u00ea provavelmente pode pular essa parte.</p> <p>Existe uma forma alternativa para definir a execu\u00e7\u00e3o dessa l\u00f3gica durante inicializa\u00e7\u00e3o e durante encerramento.</p> <p>Voc\u00ea pode definir manipuladores de eventos (fun\u00e7\u00f5es) que precisam ser executadas antes da aplica\u00e7\u00e3o inicializar, ou quando a aplica\u00e7\u00e3o estiver encerrando.</p> <p>Essas fun\u00e7\u00f5es podem ser declaradas com <code>async def</code> ou <code>def</code> normal.</p>"},{"location":"advanced/events/#evento-startup","title":"Evento <code>startup</code>","text":"<p>Para adicionar uma fun\u00e7\u00e3o que deve rodar antes da aplica\u00e7\u00e3o iniciar, declare-a com o evento <code>\"startup\"</code>:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\nitems = {}\n\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]\n</code></pre> <p>Nesse caso, a fun\u00e7\u00e3o de manipula\u00e7\u00e3o de evento <code>startup</code> ir\u00e1 inicializar os itens do \"banco de dados\" (s\u00f3 um <code>dict</code>) com alguns valores.</p> <p>Voc\u00ea pode adicionar mais que uma fun\u00e7\u00e3o de manipula\u00e7\u00e3o de evento.</p> <p>E sua aplica\u00e7\u00e3o n\u00e3o ir\u00e1 come\u00e7ar a receber requisi\u00e7\u00f5es at\u00e9 que todos os manipuladores de eventos de <code>startup</code> sejam conclu\u00eddos.</p>"},{"location":"advanced/events/#evento-shutdown","title":"Evento <code>shutdown</code>","text":"<p>Para adicionar uma fun\u00e7\u00e3o que deve ser executada quando a aplica\u00e7\u00e3o estiver encerrando, declare ela com o evento <code>\"shutdown\"</code>:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.on_event(\"shutdown\")\ndef shutdown_event():\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(\"Application shutdown\")\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre> <p>Aqui, a fun\u00e7\u00e3o de manipula\u00e7\u00e3o de evento <code>shutdown</code> ir\u00e1 escrever uma linha de texto <code>\"Application shutdown\"</code> no arquivo <code>log.txt</code>.</p> <p>Informa\u00e7\u00e3o</p> <p>Na fun\u00e7\u00e3o <code>open()</code>, o <code>mode=\"a\"</code> significa \"acrescentar\", ent\u00e3o, a linha ir\u00e1 ser adicionada depois de qualquer coisa que esteja naquele arquivo, sem sobrescrever o conte\u00fado anterior.</p> <p>Dica</p> <p>Perceba que nesse caso n\u00f3s estamos usando a fun\u00e7\u00e3o padr\u00e3o do Python <code>open()</code> que interage com um arquivo.</p> <p>Ent\u00e3o, isso envolve I/O (input/output), que exige \"esperar\" que coisas sejam escritas em disco.</p> <p>Mas <code>open()</code> n\u00e3o usa <code>async</code> e <code>await</code>.</p> <p>Ent\u00e3o, n\u00f3s declaramos uma fun\u00e7\u00e3o de manipula\u00e7\u00e3o de evento com o padr\u00e3o <code>def</code> ao inv\u00e9s de <code>async def</code>.</p>"},{"location":"advanced/events/#startup-e-shutdown-juntos","title":"<code>startup</code> e <code>shutdown</code> juntos","text":"<p>H\u00e1 uma grande chance que a l\u00f3gica para sua inicializa\u00e7\u00e3o e encerramento esteja conectada, voc\u00ea pode querer iniciar alguma coisa e ent\u00e3o finaliz\u00e1-la, adquirir um recurso e ent\u00e3o liber\u00e1-lo, etc.</p> <p>Fazendo isso em fun\u00e7\u00f5es separadas que n\u00e3o compartilham l\u00f3gica ou vari\u00e1veis entre elas \u00e9 mais dif\u00edcil j\u00e1 que voc\u00ea precisa armazenar os valores em vari\u00e1veis globais ou truques parecidos.</p> <p>Por causa disso, agora \u00e9 recomendado em vez disso usar o <code>lifespan</code> como explicado acima.</p>"},{"location":"advanced/events/#detalhes-tecnicos","title":"Detalhes t\u00e9cnicos","text":"<p>S\u00f3 um detalhe t\u00e9cnico para nerds curiosos. \ud83e\udd13</p> <p>Por baixo, na especifica\u00e7\u00e3o t\u00e9cnica ASGI, essa \u00e9 a parte do Protocolo Lifespan, e define eventos chamados <code>startup</code> e <code>shutdown</code>.</p> <p>Informa\u00e7\u00e3o</p> <p>Voc\u00ea pode ler mais sobre o manipulador <code>lifespan</code> do Starlette na Documenta\u00e7\u00e3o do Lifespan Starlette.</p> <p>Incluindo como manipular estado do lifespan que pode ser usado em outras \u00e1reas do seu c\u00f3digo.</p>"},{"location":"advanced/events/#sub-aplicacoes","title":"Sub Aplica\u00e7\u00f5es","text":"<p>\ud83d\udea8 Tenha em mente que esses eventos de lifespan (de inicializa\u00e7\u00e3o e desligamento) ir\u00e3o somente ser executados para a aplica\u00e7\u00e3o principal, n\u00e3o para Sub Aplica\u00e7\u00f5es - Montagem.</p>"},{"location":"advanced/templates/","title":"Templates","text":"<p>Voc\u00ea pode usar qualquer template engine com o ReadyAPI.</p> <p>Uma escolha comum \u00e9 o Jinja2, o mesmo usado pelo Flask e outras ferramentas.</p> <p>Existem utilit\u00e1rios para configur\u00e1-lo facilmente que voc\u00ea pode usar diretamente em sua aplica\u00e7\u00e3o ReadyAPI (fornecidos pelo Starlette).</p>"},{"location":"advanced/templates/#instalacao-de-dependencias","title":"Instala\u00e7\u00e3o de depend\u00eancias","text":"<p>Para instalar o <code>jinja2</code>, siga o c\u00f3digo abaixo:</p> <pre><code>$ pip install jinja2\n</code></pre>"},{"location":"advanced/templates/#usando-jinja2templates","title":"Usando <code>Jinja2Templates</code>","text":"<ul> <li>Importe <code>Jinja2Templates</code>.</li> <li>Crie um <code>templates</code> que voc\u00ea possa reutilizar posteriormente.</li> <li>Declare um par\u00e2metro <code>Request</code> no path operation que retornar\u00e1 um template.</li> <li>Use o <code>template</code> que voc\u00ea criou para renderizar e retornar uma <code>TemplateResponse</code>, passe o nome do template, o request object, e um \"context\" dict com pares chave-valor a serem usados dentro do template do Jinja2.</li> </ul> <pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import HTMLResponse\nfrom readyapi.staticfiles import StaticFiles\nfrom readyapi.templating import Jinja2Templates\n\napp = ReadyAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\ntemplates = Jinja2Templates(directory=\"templates\")\n\n\n@app.get(\"/items/{id}\", response_class=HTMLResponse)\nasync def read_item(request: Request, id: str):\n    return templates.TemplateResponse(\n        request=request, name=\"item.html\", context={\"id\": id}\n    )\n</code></pre> <p>Note</p> <p>Antes do ReadyAPI 0.108.0, Starlette 0.29.0, <code>name</code> era o primeiro par\u00e2metro.</p> <p>Al\u00e9m disso, em vers\u00f5es anteriores, o objeto <code>request</code> era passado como parte dos pares chave-valor no \"context\" dict para o Jinja2.</p> <p>Dica</p> <p>Ao declarar <code>response_class=HTMLResponse</code>, a documenta\u00e7\u00e3o entender\u00e1 que a resposta ser\u00e1 HTML.</p> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m poderia usar <code>from starlette.templating import Jinja2Templates</code>.</p> <p>ReadyAPI fornece o mesmo <code>starlette.templating</code> como <code>readyapi.templating</code> apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas a maioria das respostas dispon\u00edveis v\u00eam diretamente do Starlette. O mesmo acontece com <code>Request</code> e <code>StaticFiles</code>.</p>"},{"location":"advanced/templates/#escrevendo-templates","title":"Escrevendo Templates","text":"<p>Ent\u00e3o voc\u00ea pode escrever um template em <code>templates/item.html</code>, por exemplo:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Item Details&lt;/title&gt;\n    &lt;link href=\"{{ url_for('static', path='/styles.css') }}\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;Item ID: {{ id }}&lt;/a&gt;&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"advanced/templates/#interpolacao-de-valores-no-template","title":"Interpola\u00e7\u00e3o de Valores no Template","text":"<p>No c\u00f3digo HTML que cont\u00e9m:</p> <pre><code>Item ID: {{ id }}\n</code></pre> <p>...aparecer\u00e1 o <code>id</code> obtido do \"context\" <code>dict</code> que voc\u00ea passou:</p> <pre><code>{\"id\": id}\n</code></pre> <p>Por exemplo, dado um ID de valor <code>42</code>, aparecer\u00e1:</p> <pre><code>Item ID: 42\n</code></pre>"},{"location":"advanced/templates/#argumentos-do-url_for","title":"Argumentos do <code>url_for</code>","text":"<p>Voc\u00ea tamb\u00e9m pode usar <code>url_for()</code> dentro do template, ele recebe como argumentos os mesmos argumentos que seriam usados pela sua path operation function.</p> <p>Logo, a se\u00e7\u00e3o com:</p> <pre><code>&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;\n</code></pre> <p>...ir\u00e1 gerar um link para a mesma URL que ser\u00e1 tratada pela path operation function <code>read_item(id=id)</code>.</p> <p>Por exemplo, com um ID de <code>42</code>, isso renderizar\u00e1:</p> <pre><code>&lt;a href=\"/items/42\"&gt;\n</code></pre>"},{"location":"advanced/templates/#templates-e-arquivos-estaticos","title":"Templates e Arquivos Est\u00e1ticos","text":"<p>Voc\u00ea tamb\u00e9m pode usar <code>url_for()</code> dentro do template e us\u00e1-lo, por examplo, com o <code>StaticFiles</code> que voc\u00ea montou com o <code>name=\"static\"</code>.</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Item Details&lt;/title&gt;\n    &lt;link href=\"{{ url_for('static', path='/styles.css') }}\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;Item ID: {{ id }}&lt;/a&gt;&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Neste exemplo, ele seria vinculado a um arquivo CSS em <code>static/styles.css</code> com:</p> <pre><code>h1 {\n    color: green;\n}\n</code></pre> <p>E como voc\u00ea est\u00e1 usando <code>StaticFiles</code>, este arquivo CSS ser\u00e1 automaticamente servido pela sua aplica\u00e7\u00e3o ReadyAPI na URL <code>/static/styles.css</code>.</p>"},{"location":"advanced/templates/#mais-detalhes","title":"Mais detalhes","text":"<p>Para obter mais detalhes, incluindo como testar templates, consulte a documenta\u00e7\u00e3o da Starlette sobre templates.</p>"},{"location":"deployment/","title":"Implanta\u00e7\u00e3o","text":"<p>A implanta\u00e7\u00e3o de uma aplica\u00e7\u00e3o ReadyAPI \u00e9 relativamente simples.</p> <p>Existem v\u00e1rias maneiras para fazer isso, dependendo do seu caso espec\u00edfico e das ferramentas que voc\u00ea utiliza.</p> <p>Voc\u00ea ver\u00e1 mais detalhes para se ter em mente e algumas das t\u00e9cnicas para a implanta\u00e7\u00e3o nas pr\u00f3ximas se\u00e7\u00f5es.</p>"},{"location":"deployment/docker/","title":"ReadyAPI em cont\u00eaineres - Docker","text":"<p>Ao fazer o deploy de aplica\u00e7\u00f5es ReadyAPI uma abordagem comum \u00e9 construir uma imagem de cont\u00eainer Linux. Isso normalmente \u00e9 feito usando o Docker. Voc\u00ea pode a partir disso fazer o deploy dessa imagem de algumas maneiras.</p> <p>Usando cont\u00eaineres Linux voc\u00ea tem diversas vantagens incluindo seguran\u00e7a, replicabilidade, simplicidade, entre outras.</p> <p>Dica</p> <p>Est\u00e1 com pressa e j\u00e1 sabe dessas coisas? Pode ir direto para <code>Dockerfile</code> abaixo \ud83d\udc47.</p> Visualiza\u00e7\u00e3o do Dockerfile \ud83d\udc40 <pre><code>FROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./app /code/app\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n\n# If running behind a proxy like Nginx or Traefik add --proxy-headers\n# CMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\", \"--proxy-headers\"]\n</code></pre>"},{"location":"deployment/docker/#o-que-e-um-conteiner","title":"O que \u00e9 um Cont\u00eainer","text":"<p>Cont\u00eaineres (especificamente cont\u00eaineres Linux) s\u00e3o um jeito muito leve de empacotar aplica\u00e7\u00f5es contendo todas as depend\u00eancias e arquivos necess\u00e1rios enquanto os mant\u00e9m isolados de outros cont\u00eaineres (outras aplica\u00e7\u00f5es ou componentes) no mesmo sistema.</p> <p>Cont\u00eaineres Linux rodam usando o mesmo kernel Linux do hospedeiro (m\u00e1quina, m\u00e1quina virtual, servidor na nuvem, etc). Isso simplesmente significa que eles s\u00e3o muito leves (comparados com m\u00e1quinas virtuais emulando um sistema operacional completo).</p> <p>Dessa forma, cont\u00eaineres consomem poucos recursos, uma quantidade compar\u00e1vel com rodar os processos diretamente (uma m\u00e1quina virtual consumiria muito mais).</p> <p>Cont\u00eaineres tamb\u00e9m possuem seus pr\u00f3prios processos (comumente um \u00fanico processo), sistema de arquivos e rede isolados simplificando deploy, seguran\u00e7a, desenvolvimento, etc.</p>"},{"location":"deployment/docker/#o-que-e-uma-imagem-de-conteiner","title":"O que \u00e9 uma Imagem de Cont\u00eainer","text":"<p>Um cont\u00eainer roda a partir de uma imagem de cont\u00eainer.</p> <p>Uma imagem de cont\u00eainer \u00e9 uma vers\u00e3o est\u00e1tica de todos os arquivos, vari\u00e1veis de ambiente e do comando/programa padr\u00e3o que deve estar presente num cont\u00eainer. Est\u00e1tica aqui significa que a imagem de cont\u00eainer n\u00e3o est\u00e1 rodando, n\u00e3o est\u00e1 sendo executada, somente cont\u00e9m os arquivos e metadados empacotados.</p> <p>Em contraste com a \"imagem de cont\u00eainer\" que cont\u00e9m os conte\u00fados est\u00e1ticos armazenados, um \"cont\u00eainer\" normalmente se refere \u00e0 inst\u00e2ncia rodando, a coisa que est\u00e1 sendo executada.</p> <p>Quando o cont\u00eainer \u00e9 iniciado e est\u00e1 rodando (iniciado a partir de uma imagem de cont\u00eainer), ele pode criar ou modificar arquivos, vari\u00e1veis de ambiente, etc. Essas mudan\u00e7as v\u00e3o existir somente nesse cont\u00eainer, mas n\u00e3o persistir\u00e3o na imagem subjacente do container (n\u00e3o ser\u00e3o salvas no disco).</p> <p>Uma imagem de cont\u00eainer \u00e9 compar\u00e1vel ao arquivo de programa e seus conte\u00fados, ex.: <code>python</code> e algum arquivo <code>main.py</code>.</p> <p>E o cont\u00eainer em si (em contraste \u00e0 imagem de cont\u00eainer) \u00e9 a pr\u00f3pria inst\u00e2ncia da imagem rodando, compar\u00e1vel a um processo. Na verdade, um cont\u00eainer est\u00e1 rodando somente quando h\u00e1 um processo rodando (e normalmente \u00e9 somente um processo). O cont\u00eainer finaliza quando n\u00e3o h\u00e1 um processo rodando nele.</p>"},{"location":"deployment/docker/#imagens-de-conteiner","title":"Imagens de cont\u00eainer","text":"<p>Docker tem sido uma das principais ferramentas para criar e gerenciar imagens de cont\u00eainer e cont\u00eaineres.</p> <p>E existe um Docker Hub p\u00fablico com imagens de cont\u00eainer oficiais pr\u00e9-prontas para diversas ferramentas, ambientes, bancos de dados e aplica\u00e7\u00f5es.</p> <p>Por exemplo, h\u00e1 uma Imagem Python oficial.</p> <p>E existe muitas outras imagens para diferentes coisas, como bancos de dados, por exemplo:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>MongoDB</li> <li>Redis, etc.</li> </ul> <p>Usando imagens de cont\u00eainer pr\u00e9-prontas \u00e9 muito f\u00e1cil combinar e usar diferentes ferramentas. Por exemplo, para testar um novo banco de dados. Em muitos casos, voc\u00ea pode usar as imagens oficiais precisando somente de vari\u00e1veis de ambiente para configur\u00e1-las.</p> <p>Dessa forma, em muitos casos voc\u00ea pode aprender sobre cont\u00eaineres e Docker e re-usar essa experi\u00eancia com diversos componentes e ferramentas.</p> <p>Ent\u00e3o, voc\u00ea rodaria v\u00e1rios cont\u00eaineres com coisas diferentes, como um banco de dados, uma aplica\u00e7\u00e3o Python, um servidor web com uma aplica\u00e7\u00e3o frontend React, e conect\u00e1-los juntos via sua rede interna.</p> <p>Todos os sistemas de gerenciamento de cont\u00eaineres (como Docker ou Kubernetes) possuem essas funcionalidades de rede integradas a eles.</p>"},{"location":"deployment/docker/#conteineres-e-processos","title":"Cont\u00eaineres e Processos","text":"<p>Uma imagem de cont\u00eainer normalmente inclui em seus metadados o programa padr\u00e3o ou comando que deve ser executado quando o cont\u00eainer \u00e9 iniciado e os par\u00e2metros a serem passados para esse programa. Muito similar ao que seria se estivesse na linha de comando.</p> <p>Quando um cont\u00eainer \u00e9 iniciado, ele ir\u00e1 rodar esse comando/programa (embora voc\u00ea possa sobrescrev\u00ea-lo e fazer com que ele rode um comando/programa diferente).</p> <p>Um cont\u00eainer est\u00e1 rodando enquanto o processo principal (comando ou programa) estiver rodando.</p> <p>Um cont\u00eainer normalmente tem um \u00fanico processo, mas tamb\u00e9m \u00e9 poss\u00edvel iniciar sub-processos a partir do processo principal, e dessa forma voc\u00ea ter\u00e1 v\u00e1rios processos no mesmo cont\u00eainer.</p> <p>Mas n\u00e3o \u00e9 poss\u00edvel ter um cont\u00eainer rodando sem pelo menos um processo rodando. Se o processo principal parar, o cont\u00eainer tamb\u00e9m para.</p>"},{"location":"deployment/docker/#construindo-uma-imagem-docker-para-readyapi","title":"Construindo uma Imagem Docker para ReadyAPI","text":"<p>Okay, vamos construir algo agora! \ud83d\ude80</p> <p>Eu vou mostrar como construir uma imagem Docker para ReadyAPI do zero, baseado na imagem oficial do Python.</p> <p>Isso \u00e9 o que voc\u00ea quer fazer na maioria dos casos, por exemplo:</p> <ul> <li>Usando Kubernetes ou ferramentas similares</li> <li>Quando rodando em uma Raspberry Pi</li> <li>Usando um servi\u00e7o em nuvem que ir\u00e1 rodar uma imagem de cont\u00eainer para voc\u00ea, etc.</li> </ul>"},{"location":"deployment/docker/#o-pacote-requirements","title":"O Pacote Requirements","text":"<p>Voc\u00ea normalmente teria os requisitos do pacote para sua aplica\u00e7\u00e3o em algum arquivo.</p> <p>Isso pode depender principalmente da ferramenta que voc\u00ea usa para instalar esses requisitos.</p> <p>O caminho mais comum de fazer isso \u00e9 ter um arquivo <code>requirements.txt</code> com os nomes dos pacotes e suas vers\u00f5es, um por linha.</p> <p>Voc\u00ea, naturalmente, usaria as mesmas ideias que voc\u00ea leu em Sobre Vers\u00f5es do ReadyAPI para definir os intervalos de vers\u00f5es.</p> <p>Por exemplo, seu <code>requirements.txt</code> poderia parecer com:</p> <pre><code>readyapi&gt;=0.68.0,&lt;0.69.0\npydantic&gt;=1.8.0,&lt;2.0.0\nuvicorn&gt;=0.15.0,&lt;0.16.0\n</code></pre> <p>E voc\u00ea normalmente instalaria essas depend\u00eancias de pacote com <code>pip</code>, por exemplo:</p> <pre><code>$ pip install -r requirements.txt\n---&gt; 100%\nSuccessfully installed readyapi pydantic uvicorn\n</code></pre> <p>Info</p> <p>H\u00e1 outros formatos e ferramentas para definir e instalar depend\u00eancias de pacote.</p> <p>Eu vou mostrar um exemplo depois usando Poetry em uma se\u00e7\u00e3o abaixo. \ud83d\udc47</p>"},{"location":"deployment/docker/#criando-o-codigo-do-readyapi","title":"Criando o C\u00f3digo do ReadyAPI","text":"<ul> <li>Crie um diret\u00f3rio <code>app</code> e entre nele.</li> <li>Crie um arquivo vazio <code>__init__.py</code>.</li> <li>Crie um arquivo <code>main.py</code> com:</li> </ul> <pre><code>from typing import Optional\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre>"},{"location":"deployment/docker/#dockerfile","title":"Dockerfile","text":"<p>Agora, no mesmo diret\u00f3rio do projeto, crie um arquivo <code>Dockerfile</code> com:</p> <pre><code># (1)\nFROM python:3.9\n\n# (2)\nWORKDIR /code\n\n# (3)\nCOPY ./requirements.txt /code/requirements.txt\n\n# (4)\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (5)\nCOPY ./app /code/app\n\n# (6)\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <ol> <li> <p>Inicie a partir da imagem base oficial do Python.</p> </li> <li> <p>Defina o diret\u00f3rio de trabalho atual para <code>/code</code>.</p> <p>Esse \u00e9 o diret\u00f3rio onde colocaremos o arquivo <code>requirements.txt</code> e o diret\u00f3rio <code>app</code>.</p> </li> <li> <p>Copie o arquivo com os requisitos para o diret\u00f3rio <code>/code</code>.</p> <p>Copie somente o arquivo com os requisitos primeiro, n\u00e3o o resto do c\u00f3digo.</p> <p>Como esse arquivo n\u00e3o muda com frequ\u00eancia, o Docker ir\u00e1 detect\u00e1-lo e usar o cache para esse passo, habilitando o cache para o pr\u00f3ximo passo tamb\u00e9m.</p> </li> <li> <p>Instale as depend\u00eancias de pacote vindas do arquivo de requisitos.</p> <p>A op\u00e7\u00e3o <code>--no-cache-dir</code> diz ao <code>pip</code> para n\u00e3o salvar os pacotes baixados localmente, pois isso s\u00f3 aconteceria se <code>pip</code> fosse executado novamente para instalar os mesmos pacotes, mas esse n\u00e3o \u00e9 o caso quando trabalhamos com cont\u00eaineres.</p> <p>Note</p> <p><code>--no-cache-dir</code> \u00e9 apenas relacionado ao <code>pip</code>, n\u00e3o tem nada a ver com Docker ou cont\u00eaineres.</p> <p>A op\u00e7\u00e3o <code>--upgrade</code> diz ao <code>pip</code> para atualizar os pacotes se eles j\u00e1 estiverem instalados.</p> <p>Por causa do passo anterior de copiar o arquivo, ele pode ser detectado pelo cache do Docker, esse passo tamb\u00e9m usar\u00e1 o cache do Docker quando dispon\u00edvel.</p> <p>Usando o cache nesse passo ir\u00e1 salvar muito tempo quando voc\u00ea for construir a imagem repetidas vezes durante o desenvolvimento, ao inv\u00e9s de baixar e instalar todas as depend\u00eancias toda vez.</p> </li> <li> <p>Copie o diret\u00f3rio <code>./app</code> dentro do diret\u00f3rio <code>/code</code>.</p> <p>Como isso tem todo o c\u00f3digo contendo o que muda com mais frequ\u00eancia, o cache do Docker n\u00e3o ser\u00e1 usado para esse passo ou para qualquer passo seguinte facilmente.</p> <p>Ent\u00e3o, \u00e9 importante colocar isso perto do final do <code>Dockerfile</code>, para otimizar o tempo de constru\u00e7\u00e3o da imagem do cont\u00eainer.</p> </li> <li> <p>Defina o comando para rodar o servidor <code>uvicorn</code>.</p> <p><code>CMD</code> recebe uma lista de strings, cada uma dessas strings \u00e9 o que voc\u00ea digitaria na linha de comando separado por espa\u00e7os.</p> <p>Esse comando ser\u00e1 executado a partir do diret\u00f3rio de trabalho atual, o mesmo diret\u00f3rio <code>/code</code> que voc\u00ea definiu acima com <code>WORKDIR /code</code>.</p> <p>Porque o programa ser\u00e1 iniciado em <code>/code</code> e dentro dele est\u00e1 o diret\u00f3rio <code>./app</code> com seu c\u00f3digo, o Uvicorn ser\u00e1 capaz de ver e importar <code>app</code> de <code>app.main</code>.</p> </li> </ol> <p>Tip</p> <p>Revise o que cada linha faz clicando em cada bolha com o n\u00famero no c\u00f3digo. \ud83d\udc46</p> <p>Agora voc\u00ea deve ter uma estrutura de diret\u00f3rio como:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"deployment/docker/#por-tras-de-um-proxy-de-terminacao-tls","title":"Por Tr\u00e1s de um Proxy de Termina\u00e7\u00e3o TLS","text":"<p>Se voc\u00ea est\u00e1 executando seu cont\u00eainer atr\u00e1s de um Proxy de Termina\u00e7\u00e3o TLS (load balancer) como Nginx ou Traefik, adicione a op\u00e7\u00e3o <code>--proxy-headers</code>, isso far\u00e1 com que o Uvicorn confie nos cabe\u00e7alhos enviados por esse proxy, informando que o aplicativo est\u00e1 sendo executado atr\u00e1s do HTTPS, etc.</p> <pre><code>CMD [\"uvicorn\", \"app.main:app\", \"--proxy-headers\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre>"},{"location":"deployment/docker/#cache-docker","title":"Cache Docker","text":"<p>Existe um truque importante nesse <code>Dockerfile</code>, primeiro copiamos o arquivo com as depend\u00eancias sozinho, n\u00e3o o resto do c\u00f3digo. Deixe-me te contar o porqu\u00ea disso.</p> <pre><code>COPY ./requirements.txt /code/requirements.txt\n</code></pre> <p>Docker e outras ferramentas constr\u00f3em essas imagens de cont\u00eainer incrementalmente, adicionando uma camada em cima da outra, come\u00e7ando do topo do <code>Dockerfile</code> e adicionando qualquer arquivo criado por cada uma das instru\u00e7\u00f5es do <code>Dockerfile</code>.</p> <p>Docker e ferramentas similares tamb\u00e9m usam um cache interno ao construir a imagem, se um arquivo n\u00e3o mudou desde a \u00faltima vez que a imagem do cont\u00eainer foi constru\u00edda, ent\u00e3o ele ir\u00e1 reutilizar a mesma camada criada na \u00faltima vez, ao inv\u00e9s de copiar o arquivo novamente e criar uma nova camada do zero.</p> <p>Somente evitar a c\u00f3pia de arquivos n\u00e3o melhora muito as coisas, mas porque ele usou o cache para esse passo, ele pode usar o cache para o pr\u00f3ximo passo. Por exemplo, ele pode usar o cache para a instru\u00e7\u00e3o que instala as depend\u00eancias com:</p> <pre><code>RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n</code></pre> <p>O arquivo com os requisitos de pacote n\u00e3o muda com frequ\u00eancia. Ent\u00e3o, ao copiar apenas esse arquivo, o Docker ser\u00e1 capaz de usar o cache para esse passo.</p> <p>E ent\u00e3o, o Docker ser\u00e1 capaz de usar o cache para o pr\u00f3ximo passo que baixa e instala essas depend\u00eancias. E \u00e9 aqui que salvamos muito tempo. \u2728 ...e evitamos t\u00e9dio esperando. \ud83d\ude2a\ud83d\ude06</p> <p>Baixar e instalar as depend\u00eancias do pacote pode levar minutos, mas usando o cache leva segundos no m\u00e1ximo.</p> <p>E como voc\u00ea estaria construindo a imagem do cont\u00eainer novamente e novamente durante o desenvolvimento para verificar se suas altera\u00e7\u00f5es de c\u00f3digo est\u00e3o funcionando, h\u00e1 muito tempo acumulado que isso economizaria.</p> <p>A partir da\u00ed, perto do final do <code>Dockerfile</code>, copiamos todo o c\u00f3digo. Como isso \u00e9 o que muda com mais frequ\u00eancia, colocamos perto do final, porque quase sempre, qualquer coisa depois desse passo n\u00e3o ser\u00e1 capaz de usar o cache.</p> <pre><code>COPY ./app /code/app\n</code></pre>"},{"location":"deployment/docker/#construindo-a-imagem-docker","title":"Construindo a Imagem Docker","text":"<p>Agora que todos os arquivos est\u00e3o no lugar, vamos construir a imagem do cont\u00eainer.</p> <ul> <li>V\u00e1 para o diret\u00f3rio do projeto (onde est\u00e1 o seu <code>Dockerfile</code>, contendo o diret\u00f3rio <code>app</code>).</li> <li>Construa sua imagem ReadyAPI:</li> </ul> <pre><code>$ docker build -t myimage .\n\n---&gt; 100%\n</code></pre> <p>Tip</p> <p>Note o <code>.</code> no final, \u00e9 equivalente a <code>./</code>, ele diz ao Docker o diret\u00f3rio a ser usado para construir a imagem do cont\u00eainer.</p> <p>Nesse caso, \u00e9 o mesmo diret\u00f3rio atual (<code>.</code>).</p>"},{"location":"deployment/docker/#inicie-o-conteiner-docker","title":"Inicie o cont\u00eainer Docker","text":"<ul> <li>Execute um cont\u00eainer baseado na sua imagem:</li> </ul> <pre><code>$ docker run -d --name mycont\u00eainer -p 80:80 myimage\n</code></pre>"},{"location":"deployment/docker/#verifique","title":"Verifique","text":"<p>Voc\u00ea deve ser capaz de verificar isso no URL do seu cont\u00eainer Docker, por exemplo: http://192.168.99.100/items/5?q=somequery ou http://127.0.0.1/items/5?q=somequery (ou equivalente, usando seu host Docker).</p> <p>Voc\u00ea ver\u00e1 algo como:</p> <pre><code>{\"item_id\": 5, \"q\": \"somequery\"}\n</code></pre>"},{"location":"deployment/docker/#documentacao-interativa-da-api","title":"Documenta\u00e7\u00e3o interativa da API","text":"<p>Agora voc\u00ea pode ir para http://192.168.99.100/docs ou http://127.0.0.1/docs (ou equivalente, usando seu host Docker).</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o interativa autom\u00e1tica da API (fornecida pelo Swagger UI):</p> <p></p>"},{"location":"deployment/docker/#documentacao-alternativa-da-api","title":"Documenta\u00e7\u00e3o alternativa da API","text":"<p>E voc\u00ea tamb\u00e9m pode ir para http://192.168.99.100/redoc ou http://127.0.0.1/redoc (ou equivalente, usando seu host Docker).</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o alternativa autom\u00e1tica (fornecida pela ReDoc):</p> <p></p>"},{"location":"deployment/docker/#construindo-uma-imagem-docker-com-um-arquivo-unico-readyapi","title":"Construindo uma Imagem Docker com um Arquivo \u00danico ReadyAPI","text":"<p>Se seu ReadyAPI for um \u00fanico arquivo, por exemplo, <code>main.py</code> sem um diret\u00f3rio <code>./app</code>, sua estrutura de arquivos poderia ser assim:</p> <pre><code>.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <p>Ent\u00e3o voc\u00ea s\u00f3 teria que alterar os caminhos correspondentes para copiar o arquivo dentro do <code>Dockerfile</code>:</p> <pre><code>FROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (1)\nCOPY ./main.py /code/\n\n# (2)\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <ol> <li> <p>Copie o arquivo <code>main.py</code> para o diret\u00f3rio <code>/code</code> diretamente (sem nenhum diret\u00f3rio <code>./app</code>).</p> </li> <li> <p>Execute o Uvicorn e diga a ele para importar o objeto <code>app</code> de <code>main</code> (em vez de importar de <code>app.main</code>).</p> </li> </ol> <p>Ent\u00e3o ajuste o comando Uvicorn para usar o novo m\u00f3dulo <code>main</code> em vez de <code>app.main</code> para importar o objeto ReadyAPI <code>app</code>.</p>"},{"location":"deployment/docker/#conceitos-de-implantacao","title":"Conceitos de Implanta\u00e7\u00e3o","text":"<p>Vamos falar novamente sobre alguns dos mesmos Conceitos de Implanta\u00e7\u00e3o em termos de cont\u00eaineres.</p> <p>Cont\u00eaineres s\u00e3o principalmente uma ferramenta para simplificar o processo de constru\u00e7\u00e3o e implanta\u00e7\u00e3o de um aplicativo, mas eles n\u00e3o imp\u00f5em uma abordagem particular para lidar com esses conceitos de implanta\u00e7\u00e3o e existem v\u00e1rias estrat\u00e9gias poss\u00edveis.</p> <p>A boa not\u00edcia \u00e9 que com cada estrat\u00e9gia diferente h\u00e1 uma maneira de cobrir todos os conceitos de implanta\u00e7\u00e3o. \ud83c\udf89</p> <p>Vamos revisar esses conceitos de implanta\u00e7\u00e3o em termos de cont\u00eaineres:</p> <ul> <li>HTTPS</li> <li>Executando na inicializa\u00e7\u00e3o</li> <li>Reinicializa\u00e7\u00f5es</li> <li>Replica\u00e7\u00e3o (n\u00famero de processos rodando)</li> <li>Mem\u00f3ria</li> <li>Passos anteriores antes de come\u00e7ar</li> </ul>"},{"location":"deployment/docker/#https","title":"HTTPS","text":"<p>Se nos concentrarmos apenas na imagem do cont\u00eainer para um aplicativo ReadyAPI (e posteriormente no cont\u00eainer em execu\u00e7\u00e3o), o HTTPS normalmente seria tratado externamente por outra ferramenta.</p> <p>Isso poderia ser outro cont\u00eainer, por exemplo, com Traefik, lidando com HTTPS e aquisi\u00e7\u00e3o autom\u00e1tica de certificados.</p> <p>Tip</p> <p>Traefik tem integra\u00e7\u00f5es com Docker, Kubernetes e outros, portanto, \u00e9 muito f\u00e1cil configurar e configurar o HTTPS para seus cont\u00eaineres com ele.</p> <p>Alternativamente, o HTTPS poderia ser tratado por um provedor de nuvem como um de seus servi\u00e7os (enquanto ainda executasse o aplicativo em um cont\u00eainer).</p>"},{"location":"deployment/docker/#executando-na-inicializacao-e-reinicializacoes","title":"Executando na inicializa\u00e7\u00e3o e reinicializa\u00e7\u00f5es","text":"<p>Normalmente, outra ferramenta \u00e9 respons\u00e1vel por iniciar e executar seu cont\u00eainer.</p> <p>Ela poderia ser o Docker diretamente, Docker Compose, Kubernetes, um servi\u00e7o de nuvem, etc.</p> <p>Na maioria (ou em todos) os casos, h\u00e1 uma op\u00e7\u00e3o simples para habilitar a execu\u00e7\u00e3o do cont\u00eainer na inicializa\u00e7\u00e3o e habilitar reinicializa\u00e7\u00f5es em falhas. Por exemplo, no Docker, \u00e9 a op\u00e7\u00e3o de linha de comando <code>--restart</code>.</p> <p>Sem usar cont\u00eaineres, fazer aplicativos executarem na inicializa\u00e7\u00e3o e com reinicializa\u00e7\u00f5es pode ser trabalhoso e dif\u00edcil. Mas quando trabalhando com cont\u00eaineres em muitos casos essa funcionalidade \u00e9 inclu\u00edda por padr\u00e3o. \u2728</p>"},{"location":"deployment/docker/#replicacao-numero-de-processos","title":"Replica\u00e7\u00e3o - N\u00famero de Processos","text":"<p>Se voc\u00ea tiver um cluster de m\u00e1quinas com Kubernetes, Docker Swarm Mode, Nomad ou outro sistema complexo semelhante para gerenciar cont\u00eaineres distribu\u00eddos em v\u00e1rias m\u00e1quinas, ent\u00e3o provavelmente desejar\u00e1 lidar com a replica\u00e7\u00e3o no n\u00edvel do cluster em vez de usar um gerenciador de processos (como o Gunicorn com workers) em cada cont\u00eainer.</p> <p>Um desses sistemas de gerenciamento de cont\u00eaineres distribu\u00eddos como o Kubernetes normalmente tem alguma maneira integrada de lidar com a replica\u00e7\u00e3o de cont\u00eaineres enquanto ainda oferece balanceamento de carga para as solicita\u00e7\u00f5es recebidas. Tudo no n\u00edvel do cluster.</p> <p>Nesses casos, voc\u00ea provavelmente desejar\u00e1 criar uma imagem do cont\u00eainer do zero como explicado acima, instalando suas depend\u00eancias e executando um \u00fanico processo Uvicorn em vez de executar algo como Gunicorn com trabalhadores Uvicorn.</p>"},{"location":"deployment/docker/#balanceamento-de-carga","title":"Balanceamento de Carga","text":"<p>Quando usando cont\u00eaineres, normalmente voc\u00ea ter\u00e1 algum componente escutando na porta principal. Poderia ser outro cont\u00eainer que tamb\u00e9m \u00e9 um Proxy de Termina\u00e7\u00e3o TLS para lidar com HTTPS ou alguma ferramenta semelhante.</p> <p>Como esse componente assumiria a carga de solicita\u00e7\u00f5es e distribuiria isso entre os trabalhadores de uma maneira (esperan\u00e7osamente) balanceada, ele tamb\u00e9m \u00e9 comumente chamado de Balanceador de Carga.</p> <p>Tip</p> <p>O mesmo componente Proxy de Termina\u00e7\u00e3o TLS usado para HTTPS provavelmente tamb\u00e9m seria um Balanceador de Carga.</p> <p>E quando trabalhar com cont\u00eaineres, o mesmo sistema que voc\u00ea usa para iniciar e gerenci\u00e1-los j\u00e1 ter\u00e1 ferramentas internas para transmitir a comunica\u00e7\u00e3o de rede (por exemplo, solicita\u00e7\u00f5es HTTP) do balanceador de carga (que tamb\u00e9m pode ser um Proxy de Termina\u00e7\u00e3o TLS) para o(s) cont\u00eainer(es) com seu aplicativo.</p>"},{"location":"deployment/docker/#um-balanceador-de-carga-multiplos-conteineres-de-workers","title":"Um Balanceador de Carga - M\u00faltiplos Cont\u00eaineres de Workers","text":"<p>Quando trabalhando com Kubernetes ou sistemas similares de gerenciamento de cont\u00eainer distribu\u00eddo, usando seus mecanismos de rede internos permitiria que o \u00fanico balanceador de carga que estivesse escutando na porta principal transmitisse comunica\u00e7\u00e3o (solicita\u00e7\u00f5es) para possivelmente m\u00faltiplos cont\u00eaineres executando seu aplicativo.</p> <p>Cada um desses cont\u00eaineres executando seu aplicativo normalmente teria apenas um processo (ex.: um processo Uvicorn executando seu aplicativo ReadyAPI). Todos seriam cont\u00eaineres id\u00eanticos, executando a mesma coisa, mas cada um com seu pr\u00f3prio processo, mem\u00f3ria, etc. Dessa forma, voc\u00ea aproveitaria a paraleliza\u00e7\u00e3o em n\u00facleos diferentes da CPU, ou at\u00e9 mesmo em m\u00e1quinas diferentes.</p> <p>E o sistema de cont\u00eainer com o balanceador de carga iria distribuir as solicita\u00e7\u00f5es para cada um dos cont\u00eaineres com seu aplicativo em turnos. Portanto, cada solicita\u00e7\u00e3o poderia ser tratada por um dos m\u00faltiplos cont\u00eaineres replicados executando seu aplicativo.</p> <p>E normalmente esse balanceador de carga seria capaz de lidar com solicita\u00e7\u00f5es que v\u00e3o para outros aplicativos em seu cluster (por exemplo, para um dom\u00ednio diferente, ou sob um prefixo de URL diferente), e transmitiria essa comunica\u00e7\u00e3o para os cont\u00eaineres certos para esse outro aplicativo em execu\u00e7\u00e3o em seu cluster.</p>"},{"location":"deployment/docker/#um-processo-por-conteiner","title":"Um Processo por Cont\u00eainer","text":"<p>Nesse tipo de cen\u00e1rio, provavelmente voc\u00ea desejar\u00e1 ter um \u00fanico processo (Uvicorn) por cont\u00eainer, pois j\u00e1 estaria lidando com a replica\u00e7\u00e3o no n\u00edvel do cluster.</p> <p>Ent\u00e3o, nesse caso, voc\u00ea n\u00e3o desejar\u00e1 ter um gerenciador de processos como o Gunicorn com trabalhadores Uvicorn, ou o Uvicorn usando seus pr\u00f3prios trabalhadores Uvicorn. Voc\u00ea desejar\u00e1 ter apenas um \u00fanico processo Uvicorn por cont\u00eainer (mas provavelmente v\u00e1rios cont\u00eaineres).</p> <p>Tendo outro gerenciador de processos dentro do cont\u00eainer (como seria com o Gunicorn ou o Uvicorn gerenciando trabalhadores Uvicorn) s\u00f3 adicionaria complexidade desnecess\u00e1ria que voc\u00ea provavelmente j\u00e1 est\u00e1 cuidando com seu sistema de cluster.</p>"},{"location":"deployment/docker/#conteineres-com-multiplos-processos-e-casos-especiais","title":"Cont\u00eaineres com M\u00faltiplos Processos e Casos Especiais","text":"<p>Claro, existem casos especiais em que voc\u00ea pode querer ter um cont\u00eainer com um gerenciador de processos Gunicorn iniciando v\u00e1rios processos trabalhadores Uvicorn dentro.</p> <p>Nesses casos, voc\u00ea pode usar a imagem oficial do Docker que inclui o Gunicorn como um gerenciador de processos executando v\u00e1rios processos trabalhadores Uvicorn, e algumas configura\u00e7\u00f5es padr\u00e3o para ajustar o n\u00famero de trabalhadores com base nos atuais n\u00facleos da CPU automaticamente. Eu vou te contar mais sobre isso abaixo em Imagem Oficial do Docker com Gunicorn - Uvicorn.</p> <p>Aqui est\u00e3o alguns exemplos de quando isso pode fazer sentido:</p>"},{"location":"deployment/docker/#um-aplicativo-simples","title":"Um Aplicativo Simples","text":"<p>Voc\u00ea pode querer um gerenciador de processos no cont\u00eainer se seu aplicativo for simples o suficiente para que voc\u00ea n\u00e3o precise (pelo menos n\u00e3o agora) ajustar muito o n\u00famero de processos, e voc\u00ea pode simplesmente usar um padr\u00e3o automatizado (com a imagem oficial do Docker), e voc\u00ea est\u00e1 executando em um \u00fanico servidor, n\u00e3o em um cluster.</p>"},{"location":"deployment/docker/#docker-compose","title":"Docker Compose","text":"<p>Voc\u00ea pode estar implantando em um \u00fanico servidor (n\u00e3o em um cluster) com o Docker Compose, ent\u00e3o voc\u00ea n\u00e3o teria uma maneira f\u00e1cil de gerenciar a replica\u00e7\u00e3o de cont\u00eaineres (com o Docker Compose) enquanto preserva a rede compartilhada e o balanceamento de carga.</p> <p>Ent\u00e3o voc\u00ea pode querer ter um \u00fanico cont\u00eainer com um gerenciador de processos iniciando v\u00e1rios processos trabalhadores dentro.</p>"},{"location":"deployment/docker/#prometheus-and-outros-motivos","title":"Prometheus and Outros Motivos","text":"<p>Voc\u00ea tamb\u00e9m pode ter outros motivos que tornariam mais f\u00e1cil ter um \u00fanico cont\u00eainer com m\u00faltiplos processos em vez de ter m\u00faltiplos cont\u00eaineres com um \u00fanico processo em cada um deles.</p> <p>Por exemplo (dependendo de sua configura\u00e7\u00e3o), voc\u00ea poderia ter alguma ferramenta como um exportador do Prometheus no mesmo cont\u00eainer que deve ter acesso a cada uma das solicita\u00e7\u00f5es que chegam.</p> <p>Nesse caso, se voc\u00ea tivesse m\u00faltiplos cont\u00eaineres, por padr\u00e3o, quando o Prometheus fosse ler as m\u00e9tricas, ele receberia as m\u00e9tricas de um \u00fanico cont\u00eainer cada vez (para o cont\u00eainer que tratou essa solicita\u00e7\u00e3o espec\u00edfica), em vez de receber as m\u00e9tricas acumuladas de todos os cont\u00eaineres replicados.</p> <p>Ent\u00e3o, nesse caso, poderia ser mais simples ter um \u00fanico cont\u00eainer com m\u00faltiplos processos, e uma ferramenta local (por exemplo, um exportador do Prometheus) no mesmo cont\u00eainer coletando m\u00e9tricas do Prometheus para todos os processos internos e expor essas m\u00e9tricas no \u00fanico cont\u00eainer.</p> <p>O ponto principal \u00e9 que nenhum desses s\u00e3o regras escritas em pedra que voc\u00ea deve seguir cegamente. Voc\u00ea pode usar essas id\u00e9ias para avaliar seu pr\u00f3prio caso de uso e decidir qual \u00e9 a melhor abordagem para seu sistema, verificando como gerenciar os conceitos de:</p> <ul> <li>Seguran\u00e7a - HTTPS</li> <li>Executando na inicializa\u00e7\u00e3o</li> <li>Reinicializa\u00e7\u00f5es</li> <li>Replica\u00e7\u00e3o (o n\u00famero de processos em execu\u00e7\u00e3o)</li> <li>Mem\u00f3ria</li> <li>Passos anteriores antes de inicializar</li> </ul>"},{"location":"deployment/docker/#memoria","title":"Mem\u00f3ria","text":"<p>Se voc\u00ea executar um \u00fanico processo por cont\u00eainer, ter\u00e1 uma quantidade mais ou menos bem definida, est\u00e1vel e limitada de mem\u00f3ria consumida por cada um desses cont\u00eaineres (mais de um se eles forem replicados).</p> <p>E ent\u00e3o voc\u00ea pode definir esses mesmos limites e requisitos de mem\u00f3ria em suas configura\u00e7\u00f5es para seu sistema de gerenciamento de cont\u00eaineres (por exemplo, no Kubernetes). Dessa forma, ele poder\u00e1 replicar os cont\u00eaineres nas m\u00e1quinas dispon\u00edveis levando em considera\u00e7\u00e3o a quantidade de mem\u00f3ria necess\u00e1ria por eles e a quantidade dispon\u00edvel nas m\u00e1quinas no cluster.</p> <p>Se sua aplica\u00e7\u00e3o for simples, isso provavelmente n\u00e3o ser\u00e1 um problema, e voc\u00ea pode n\u00e3o precisar especificar limites de mem\u00f3ria r\u00edgidos. Mas se voc\u00ea estiver usando muita mem\u00f3ria (por exemplo, com modelos de aprendizado de m\u00e1quina), deve verificar quanta mem\u00f3ria est\u00e1 consumindo e ajustar o n\u00famero de cont\u00eaineres que executa em cada m\u00e1quina (e talvez adicionar mais m\u00e1quinas ao seu cluster).</p> <p>Se voc\u00ea executar m\u00faltiplos processos por cont\u00eainer (por exemplo, com a imagem oficial do Docker), deve garantir que o n\u00famero de processos iniciados n\u00e3o consuma mais mem\u00f3ria do que o dispon\u00edvel.</p>"},{"location":"deployment/docker/#passos-anteriores-antes-de-inicializar-e-conteineres","title":"Passos anteriores antes de inicializar e cont\u00eaineres","text":"<p>Se voc\u00ea estiver usando cont\u00eaineres (por exemplo, Docker, Kubernetes), existem duas abordagens principais que voc\u00ea pode usar.</p>"},{"location":"deployment/docker/#conteineres-multiplos","title":"Cont\u00eaineres M\u00faltiplos","text":"<p>Se voc\u00ea tiver m\u00faltiplos cont\u00eaineres, provavelmente cada um executando um \u00fanico processo (por exemplo, em um cluster do Kubernetes), ent\u00e3o provavelmente voc\u00ea gostaria de ter um cont\u00eainer separado fazendo o trabalho dos passos anteriores em um \u00fanico cont\u00eainer, executando um \u00fanico processo, antes de executar os cont\u00eaineres trabalhadores replicados.</p> <p>Info</p> <p>Se voc\u00ea estiver usando o Kubernetes, provavelmente ser\u00e1 um Init Container.</p> <p>Se no seu caso de uso n\u00e3o houver problema em executar esses passos anteriores em paralelo v\u00e1rias vezes (por exemplo, se voc\u00ea n\u00e3o estiver executando migra\u00e7\u00f5es de banco de dados, mas apenas verificando se o banco de dados est\u00e1 pronto), ent\u00e3o voc\u00ea tamb\u00e9m pode coloc\u00e1-los em cada cont\u00eainer logo antes de iniciar o processo principal.</p>"},{"location":"deployment/docker/#conteiner-unico","title":"Cont\u00eainer \u00danico","text":"<p>Se voc\u00ea tiver uma configura\u00e7\u00e3o simples, com um \u00fanico cont\u00eainer que ent\u00e3o inicia v\u00e1rios processos trabalhadores (ou tamb\u00e9m apenas um processo), ent\u00e3o poderia executar esses passos anteriores no mesmo cont\u00eainer, logo antes de iniciar o processo com o aplicativo. A imagem oficial do Docker suporta isso internamente.</p>"},{"location":"deployment/docker/#imagem-oficial-do-docker-com-gunicorn-uvicorn","title":"Imagem Oficial do Docker com Gunicorn - Uvicorn","text":"<p>H\u00e1 uma imagem oficial do Docker que inclui o Gunicorn executando com trabalhadores Uvicorn, conforme detalhado em um cap\u00edtulo anterior: Server Workers - Gunicorn com Uvicorn.</p> <p>Essa imagem seria \u00fatil principalmente nas situa\u00e7\u00f5es descritas acima em: Cont\u00eaineres com M\u00faltiplos Processos e Casos Especiais.</p> <ul> <li>khulnasoft/uvicorn-gunicorn-readyapi.</li> </ul> <p>Warning</p> <p>Existe uma grande chance de que voc\u00ea n\u00e3o precise dessa imagem base ou de qualquer outra semelhante, e seria melhor construir a imagem do zero, como descrito acima em: Construa uma Imagem Docker para o ReadyAPI.</p> <p>Essa imagem tem um mecanismo de auto-ajuste inclu\u00eddo para definir o n\u00famero de processos trabalhadores com base nos n\u00facleos de CPU dispon\u00edveis.</p> <p>Isso tem padr\u00f5es sens\u00edveis, mas voc\u00ea ainda pode alterar e atualizar todas as configura\u00e7\u00f5es com vari\u00e1veis de ambiente ou arquivos de configura\u00e7\u00e3o.</p> <p>H\u00e1 tamb\u00e9m suporte para executar passos anteriores antes de iniciar com um script.</p> <p>Tip</p> <p>Para ver todas as configura\u00e7\u00f5es e op\u00e7\u00f5es, v\u00e1 para a p\u00e1gina da imagem Docker:  khulnasoft/uvicorn-gunicorn-readyapi.</p>"},{"location":"deployment/docker/#numero-de-processos-na-imagem-oficial-do-docker","title":"N\u00famero de Processos na Imagem Oficial do Docker","text":"<p>O n\u00famero de processos nesta imagem \u00e9 calculado automaticamente a partir dos n\u00facleos de CPU dispon\u00edveis.</p> <p>Isso significa que ele tentar\u00e1 aproveitar o m\u00e1ximo de desempenho da CPU poss\u00edvel.</p> <p>Voc\u00ea tamb\u00e9m pode ajust\u00e1-lo com as configura\u00e7\u00f5es usando vari\u00e1veis de ambiente, etc.</p> <p>Mas isso tamb\u00e9m significa que, como o n\u00famero de processos depende da CPU do cont\u00eainer em execu\u00e7\u00e3o, a quantidade de mem\u00f3ria consumida tamb\u00e9m depender\u00e1 disso.</p> <p>Ent\u00e3o, se seu aplicativo consumir muito mem\u00f3ria (por exemplo, com modelos de aprendizado de m\u00e1quina), e seu servidor tiver muitos n\u00facleos de CPU mas pouca mem\u00f3ria, ent\u00e3o seu cont\u00eainer pode acabar tentando usar mais mem\u00f3ria do que est\u00e1 dispon\u00edvel e degradar o desempenho muito (ou at\u00e9 mesmo travar). \ud83d\udea8</p>"},{"location":"deployment/docker/#criando-um-dockerfile","title":"Criando um <code>Dockerfile</code>","text":"<p>Aqui est\u00e1 como voc\u00ea criaria um <code>Dockerfile</code> baseado nessa imagem:</p> <pre><code>FROM khulnasoft/uvicorn-gunicorn-readyapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n</code></pre>"},{"location":"deployment/docker/#aplicacoes-maiores","title":"Aplica\u00e7\u00f5es Maiores","text":"<p>Se voc\u00ea seguiu a se\u00e7\u00e3o sobre a cria\u00e7\u00e3o de Aplica\u00e7\u00f5es Maiores com M\u00faltiplos Arquivos, seu <code>Dockerfile</code> pode parecer com isso:</p> <pre><code>```Dockerfile hl_lines=\"7\"\nFROM khulnasoft/uvicorn-gunicorn-readyapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app/app\n</code></pre>"},{"location":"deployment/docker/#quando-usar","title":"Quando Usar","text":"<p>Voc\u00ea provavelmente n\u00e3o deve usar essa imagem base oficial (ou qualquer outra semelhante) se estiver usando Kubernetes (ou outros) e j\u00e1 estiver definindo replica\u00e7\u00e3o no n\u00edvel do cluster, com v\u00e1rios cont\u00eaineres. Nesses casos, \u00e9 melhor construir uma imagem do zero conforme descrito acima: Construindo uma Imagem Docker para ReadyAPI.</p> <p>Essa imagem seria \u00fatil principalmente nos casos especiais descritos acima em Cont\u00eaineres com M\u00faltiplos Processos e Casos Especiais. Por exemplo, se sua aplica\u00e7\u00e3o for simples o suficiente para que a configura\u00e7\u00e3o padr\u00e3o de n\u00famero de processos com base na CPU funcione bem, voc\u00ea n\u00e3o quer se preocupar com a configura\u00e7\u00e3o manual da replica\u00e7\u00e3o no n\u00edvel do cluster e n\u00e3o est\u00e1 executando mais de um cont\u00eainer com seu aplicativo. Ou se voc\u00ea estiver implantando com Docker Compose, executando em um \u00fanico servidor, etc.</p>"},{"location":"deployment/docker/#deploy-da-imagem-do-conteiner","title":"Deploy da Imagem do Cont\u00eainer","text":"<p>Depois de ter uma imagem de cont\u00eainer (Docker), existem v\u00e1rias maneiras de implant\u00e1-la.</p> <p>Por exemplo:</p> <ul> <li>Com Docker Compose em um \u00fanico servidor</li> <li>Com um cluster Kubernetes</li> <li>Com um cluster Docker Swarm Mode</li> <li>Com outra ferramenta como o Nomad</li> <li>Com um servi\u00e7o de nuvem que pega sua imagem de cont\u00eainer e a implanta</li> </ul>"},{"location":"deployment/docker/#imagem-docker-com-poetry","title":"Imagem Docker com Poetry","text":"<p>Se voc\u00ea usa Poetry para gerenciar as depend\u00eancias do seu projeto, pode usar a constru\u00e7\u00e3o multi-est\u00e1gio do Docker:</p> <pre><code># (1)\nFROM python:3.9 as requirements-stage\n\n# (2)\nWORKDIR /tmp\n\n# (3)\nRUN pip install poetry\n\n# (4)\nCOPY ./pyproject.toml ./poetry.lock* /tmp/\n\n# (5)\nRUN poetry export -f requirements.txt --output requirements.txt --without-hashes\n\n# (6)\nFROM python:3.9\n\n# (7)\nWORKDIR /code\n\n# (8)\nCOPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt\n\n# (9)\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (10)\nCOPY ./app /code/app\n\n# (11)\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <ol> <li> <p>Esse \u00e9 o primeiro est\u00e1gio, ele \u00e9 chamado <code>requirements-stage</code>.</p> </li> <li> <p>Defina <code>/tmp</code> como o diret\u00f3rio de trabalho atual.</p> <p>Aqui \u00e9 onde geraremos o arquivo <code>requirements.txt</code></p> </li> <li> <p>Instale o Poetry nesse est\u00e1gio do Docker.</p> </li> <li> <p>Copie os arquivos <code>pyproject.toml</code> e <code>poetry.lock</code> para o diret\u00f3rio <code>/tmp</code>.</p> <p>Porque est\u00e1 usando <code>./poetry.lock*</code> (terminando com um <code>*</code>), n\u00e3o ir\u00e1 falhar se esse arquivo ainda n\u00e3o estiver dispon\u00edvel.</p> </li> <li> <p>Gere o arquivo <code>requirements.txt</code>.</p> </li> <li> <p>Este \u00e9 o est\u00e1gio final, tudo aqui ser\u00e1 preservado na imagem final do cont\u00eainer.</p> </li> <li> <p>Defina o diret\u00f3rio de trabalho atual como <code>/code</code>.</p> </li> <li> <p>Copie o arquivo <code>requirements.txt</code> para o diret\u00f3rio <code>/code</code>.</p> <p>Essse arquivo s\u00f3 existe no est\u00e1gio anterior do Docker, \u00e9 por isso que usamos <code>--from-requirements-stage</code> para copi\u00e1-lo.</p> </li> <li> <p>Instale as depend\u00eancias de pacote do arquivo <code>requirements.txt</code> gerado.</p> </li> <li> <p>Copie o diret\u00f3rio <code>app</code> para o diret\u00f3rio <code>/code</code>.</p> </li> <li> <p>Execute o comando <code>uvicorn</code>, informando-o para usar o objeto <code>app</code> importado de <code>app.main</code>.</p> </li> </ol> <p>Tip</p> <p>Clique nos n\u00fameros das bolhas para ver o que cada linha faz.</p> <p>Um est\u00e1gio do Docker \u00e9 uma parte de um <code>Dockerfile</code> que funciona como uma imagem tempor\u00e1ria do cont\u00eainer que s\u00f3 \u00e9 usada para gerar alguns arquivos para serem usados posteriormente.</p> <p>O primeiro est\u00e1gio ser\u00e1 usado apenas para instalar Poetry e para gerar o <code>requirements.txt</code> com as depend\u00eancias do seu projeto a partir do arquivo <code>pyproject.toml</code> do Poetry.</p> <p>Esse arquivo <code>requirements.txt</code> ser\u00e1 usado com <code>pip</code> mais tarde no pr\u00f3ximo est\u00e1gio.</p> <p>Na imagem final do cont\u00eainer, somente o est\u00e1gio final \u00e9 preservado. Os est\u00e1gios anteriores ser\u00e3o descartados.</p> <p>Quando usar Poetry, faz sentido usar constru\u00e7\u00f5es multi-est\u00e1gio do Docker porque voc\u00ea realmente n\u00e3o precisa ter o Poetry e suas depend\u00eancias instaladas na imagem final do cont\u00eainer, voc\u00ea apenas precisa ter o arquivo <code>requirements.txt</code> gerado para instalar as depend\u00eancias do seu projeto.</p> <p>Ent\u00e3o, no pr\u00f3ximo (e \u00faltimo) est\u00e1gio, voc\u00ea construiria a imagem mais ou menos da mesma maneira descrita anteriormente.</p>"},{"location":"deployment/docker/#por-tras-de-um-proxy-de-terminacao-tls-poetry","title":"Por tr\u00e1s de um proxy de termina\u00e7\u00e3o TLS - Poetry","text":"<p>Novamente, se voc\u00ea estiver executando seu cont\u00eainer atr\u00e1s de um proxy de termina\u00e7\u00e3o TLS (balanceador de carga) como Nginx ou Traefik, adicione a op\u00e7\u00e3o <code>--proxy-headers</code> ao comando:</p> <pre><code>CMD [\"uvicorn\", \"app.main:app\", \"--proxy-headers\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre>"},{"location":"deployment/docker/#recapitulando","title":"Recapitulando","text":"<p>Usando sistemas de cont\u00eainer (por exemplo, com Docker e Kubernetes), torna-se bastante simples lidar com todos os conceitos de implanta\u00e7\u00e3o:</p> <ul> <li>HTTPS</li> <li>Executando na inicializa\u00e7\u00e3o</li> <li>Rein\u00edcios</li> <li>Replica\u00e7\u00e3o (o n\u00famero de processos rodando)</li> <li>Mem\u00f3ria</li> <li>Passos anteriores antes de inicializar</li> </ul> <p>Na maioria dos casos, voc\u00ea provavelmente n\u00e3o desejar\u00e1 usar nenhuma imagem base e, em vez disso, construir uma imagem de cont\u00eainer do zero baseada na imagem oficial do Docker Python.</p> <p>Tendo cuidado com a ordem das instru\u00e7\u00f5es no <code>Dockerfile</code> e o cache do Docker, voc\u00ea pode minimizar os tempos de constru\u00e7\u00e3o, para maximizar sua produtividade (e evitar a t\u00e9dio). \ud83d\ude0e</p> <p>Em alguns casos especiais, voc\u00ea pode querer usar a imagem oficial do Docker para o ReadyAPI. \ud83e\udd13</p>"},{"location":"deployment/https/","title":"Sobre HTTPS","text":"<p>\u00c9 f\u00e1cil assumir que HTTPS \u00e9 algo que \u00e9 apenas \"habilitado\" ou n\u00e3o.</p> <p>Mas \u00e9 bem mais complexo do que isso.</p> <p>Dica</p> <p>Se voc\u00ea est\u00e1 com pressa ou n\u00e3o se importa, continue com as se\u00e7\u00f5es seguintes para instru\u00e7\u00f5es passo a passo para configurar tudo com diferentes t\u00e9cnicas.</p> <p>Para aprender o b\u00e1sico de HTTPS de uma perspectiva do usu\u00e1rio, verifique https://howhttps.works/pt-br/.</p> <p>Agora, a partir de uma perspectiva do desenvolvedor, aqui est\u00e3o algumas coisas para ter em mente ao pensar em HTTPS:</p> <ul> <li>Para HTTPS, o servidor precisa ter certificados gerados por um terceiro.<ul> <li>Esses certificados s\u00e3o adquiridos de um terceiro, eles n\u00e3o s\u00e3o simplesmente \"gerados\".</li> </ul> </li> <li>Certificados t\u00eam um tempo de vida.<ul> <li>Eles expiram.</li> <li>E ent\u00e3o eles precisam ser renovados, adquirindo-os novamente de um terceiro.</li> </ul> </li> <li>A criptografia da conex\u00e3o acontece no n\u00edvel TCP.<ul> <li>Essa \u00e9 uma camada abaixo do HTTP.</li> <li>Portanto, o manuseio do certificado e da criptografia \u00e9 feito antes do HTTP.</li> </ul> </li> <li>O TCP n\u00e3o sabe sobre \"dom\u00ednios\". Apenas sobre endere\u00e7os IP.<ul> <li>As informa\u00e7\u00f5es sobre o dom\u00ednio solicitado v\u00e3o nos dados HTTP.</li> </ul> </li> <li>Os certificados HTTPS \u201ccertificam\u201d um determinado dom\u00ednio, mas o protocolo e a encripta\u00e7\u00e3o acontecem ao n\u00edvel do TCP, antes de sabermos de que dom\u00ednio se trata.</li> <li>Por padr\u00e3o, isso significa que voc\u00ea s\u00f3 pode ter um certificado HTTPS por endere\u00e7o IP.<ul> <li>N\u00e3o importa o tamanho do seu servidor ou qu\u00e3o pequeno cada aplicativo que voc\u00ea tem nele possa ser.</li> <li>No entanto, existe uma solu\u00e7\u00e3o para isso.</li> </ul> </li> <li>H\u00e1 uma extens\u00e3o para o protocolo TLS (aquele que lida com a criptografia no n\u00edvel TCP, antes do HTTP) chamado SNI.<ul> <li>Esta extens\u00e3o SNI permite que um \u00fanico servidor (com um \u00fanico endere\u00e7o IP) tenha v\u00e1rios certificados HTTPS e atenda a v\u00e1rios dom\u00ednios / aplicativos HTTPS.</li> <li>Para que isso funcione, um \u00fanico componente (programa) em execu\u00e7\u00e3o no servidor, ouvindo no endere\u00e7o IP p\u00fablico, deve ter todos os certificados HTTPS no servidor.</li> </ul> </li> <li>Depois de obter uma conex\u00e3o segura, o protocolo de comunica\u00e7\u00e3o ainda \u00e9 HTTP.<ul> <li>Os conte\u00fados s\u00e3o criptografados, embora sejam enviados com o protocolo HTTP.</li> </ul> </li> </ul> <p>\u00c9 uma pr\u00e1tica comum ter um programa/servidor HTTP em execu\u00e7\u00e3o no servidor (m\u00e1quina, host, etc.) e gerenciar todas as partes HTTPS: enviando as solicita\u00e7\u00f5es HTTP descriptografadas para o aplicativo HTTP real em execu\u00e7\u00e3o no mesmo servidor (a aplica\u00e7\u00e3o ReadyAPI, neste caso), pegue a resposta HTTP do aplicativo, criptografe-a usando o certificado apropriado e envie-a de volta ao cliente usando HTTPS. Este servidor \u00e9 frequentemente chamado de TLS Termination Proxy.</p>"},{"location":"deployment/https/#lets-encrypt","title":"Let's Encrypt","text":"<p>Antes de Let's Encrypt, esses certificados HTTPS eram vendidos por terceiros confi\u00e1veis.</p> <p>O processo de aquisi\u00e7\u00e3o de um desses certificados costumava ser complicado, exigia bastante papelada e os certificados eram bastante caros.</p> <p>Mas ent\u00e3o Let's Encrypt foi criado.</p> <p>Ele \u00e9 um projeto da Linux Foundation que fornece certificados HTTPS gratuitamente. De forma automatizada. Esses certificados usam toda a seguran\u00e7a criptogr\u00e1fica padr\u00e3o e t\u00eam vida curta (cerca de 3 meses), ent\u00e3o a seguran\u00e7a \u00e9 realmente melhor por causa de sua vida \u00fatil reduzida.</p> <p>Os dom\u00ednios s\u00e3o verificados com seguran\u00e7a e os certificados s\u00e3o gerados automaticamente. Isso tamb\u00e9m permite automatizar a renova\u00e7\u00e3o desses certificados.</p> <p>A ideia \u00e9 automatizar a aquisi\u00e7\u00e3o e renova\u00e7\u00e3o desses certificados, para que voc\u00ea tenha HTTPS seguro, de gra\u00e7a e para sempre.</p>"},{"location":"deployment/versions/","title":"Sobre as vers\u00f5es do ReadyAPI","text":"<p>ReadyAPI j\u00e1 est\u00e1 sendo usado em produ\u00e7\u00e3o em diversas aplica\u00e7\u00f5es e sistemas, a cobertura de testes \u00e9 mantida em 100%, mas seu desenvolvimento est\u00e1 avan\u00e7ando rapidamente.</p> <p>Novos recursos s\u00e3o adicionados com frequ\u00eancia, bugs s\u00e3o corrigidos regularmente e o c\u00f3digo est\u00e1 sempre melhorando.</p> <p>Esse \u00e9 o motivo das vers\u00f5es atuais estarem em <code>0.x.x</code>, significando que em cada vers\u00e3o pode haver mudan\u00e7as significativas, tudo isso seguindo as conven\u00e7\u00f5es de controle de vers\u00e3o sem\u00e2ntica.</p> <p>J\u00e1 \u00e9 poss\u00edvel criar aplicativos de produ\u00e7\u00e3o com ReadyAPI (e provavelmente voc\u00ea j\u00e1 faz isso h\u00e1 algum tempo), apenas precisando ter certeza de usar uma vers\u00e3o que funcione corretamente com o resto do seu c\u00f3digo.</p>"},{"location":"deployment/versions/#fixe-a-sua-versao-de-readyapi","title":"Fixe a sua vers\u00e3o de <code>readyapi</code>","text":"<p>A primeira coisa que voc\u00ea deve fazer \u00e9 \"fixar\" a vers\u00e3o do ReadyAPI que voc\u00ea est\u00e1 utilizando na mais atual, na qual voc\u00ea sabe que funciona corretamente para o seu aplicativo.</p> <p>Por exemplo, supondo que voc\u00ea est\u00e1 usando a vers\u00e3o <code>0.45.0</code> em sua aplica\u00e7\u00e3o.</p> <p>Caso voc\u00ea utilize o arquivo <code>requirements.txt</code>, voc\u00ea poderia especificar a vers\u00e3o com:</p> <pre><code>readyapi==0.45.0\n</code></pre> <p>Isso significa que voc\u00ea conseguiria utilizar a vers\u00e3o exata <code>0.45.0</code>.</p> <p>Ou, voc\u00ea poderia fix\u00e1-la com:</p> <pre><code>readyapi&gt;=0.45.0,&lt;0.46.0\n</code></pre> <p>isso significa que voc\u00ea iria usar as vers\u00f5es <code>0.45.0</code> ou acima, mas inferiores \u00e0 <code>0.46.0</code>, por exemplo, a vers\u00e3o <code>0.45.2</code> ainda seria aceita.</p> <p>Se voc\u00ea usar qualquer outra ferramenta para gerenciar suas instala\u00e7\u00f5es, como Poetry, Pipenv ou outras, todas elas t\u00eam uma maneira que voc\u00ea pode usar para definir as vers\u00f5es espec\u00edficas dos seus pacotes.</p>"},{"location":"deployment/versions/#versoes-disponiveis","title":"Vers\u00f5es dispon\u00edveis","text":"<p>Voc\u00ea pode ver as vers\u00f5es dispon\u00edveis (por exemplo, para verificar qual \u00e9 a vers\u00e3o atual) em Release Notes.</p>"},{"location":"deployment/versions/#sobre-versoes","title":"Sobre vers\u00f5es","text":"<p>Seguindo as conven\u00e7\u00f5es de controle de vers\u00e3o sem\u00e2ntica, qualquer vers\u00e3o abaixo de <code>1.0.0</code> pode adicionar mudan\u00e7as significativas.</p> <p>ReadyAPI tamb\u00e9m segue a conven\u00e7\u00e3o de que qualquer altera\u00e7\u00e3o de vers\u00e3o \"PATCH\" \u00e9 para corre\u00e7\u00e3o de bugs e altera\u00e7\u00f5es n\u00e3o significativas.</p> <p>Dica</p> <p>O \"PATCH\" \u00e9 o \u00faltimo n\u00famero, por exemplo, em <code>0.2.3</code>, a vers\u00e3o PATCH \u00e9 <code>3</code>.</p> <p>Logo, voc\u00ea deveria conseguir fixar a vers\u00e3o, como:</p> <pre><code>readyapi&gt;=0.45.0,&lt;0.46.0\n</code></pre> <p>Mudan\u00e7as significativas e novos recursos s\u00e3o adicionados em vers\u00f5es \"MINOR\".</p> <p>Dica</p> <p>O \"MINOR\" \u00e9 o n\u00famero que est\u00e1 no meio, por exemplo, em <code>0.2.3</code>, a vers\u00e3o MINOR \u00e9 <code>2</code>.</p>"},{"location":"deployment/versions/#atualizando-as-versoes-do-readyapi","title":"Atualizando as vers\u00f5es do ReadyAPI","text":"<p>Voc\u00ea deve adicionar testes para a sua aplica\u00e7\u00e3o.</p> <p>Com ReadyAPI isso \u00e9 muito f\u00e1cil (gra\u00e7as a Starlette), verifique a documenta\u00e7\u00e3o: Testing</p> <p>Ap\u00f3s a cria\u00e7\u00e3o dos testes, voc\u00ea pode atualizar a sua vers\u00e3o do ReadyAPI para uma mais recente, execute os testes para se certificar de que todo o seu c\u00f3digo est\u00e1 funcionando corretamente.</p> <p>Se tudo estiver funcionando, ou ap\u00f3s voc\u00ea realizar as altera\u00e7\u00f5es necess\u00e1rias e todos os testes estiverem passando, ent\u00e3o voc\u00ea pode fixar sua vers\u00e3o de <code>ReadyAPI</code> para essa mais nova.</p>"},{"location":"deployment/versions/#sobre-starlette","title":"Sobre Starlette","text":"<p>N\u00e3o \u00e9 recomendado fixar a vers\u00e3o de <code>starlette</code>.</p> <p>Vers\u00f5es diferentes de ReadyAPI utilizar\u00e3o uma vers\u00e3o espec\u00edfica e mais recente de Starlette.</p> <p>Ent\u00e3o, voc\u00ea pode deixar ReadyAPI escolher a vers\u00e3o compat\u00edvel e correta de Starlette.</p>"},{"location":"deployment/versions/#sobre-pydantic","title":"Sobre Pydantic","text":"<p>Pydantic inclu\u00ed os testes para ReadyAPI em seus pr\u00f3prios testes, ent\u00e3o as novas vers\u00f5es de Pydantic (acima da <code>1.0.0</code>) sempre ser\u00e3o compat\u00edveis com ReadyAPI.</p> <p>Voc\u00ea pode fixar qualquer vers\u00e3o de Pydantic que desejar, desde que seja acima da <code>1.0.0</code> e abaixo da <code>2.0.0</code>.</p> <p>Por exemplo:</p> <pre><code>pydantic&gt;=1.2.0,&lt;2.0.0\n</code></pre>"},{"location":"help/","title":"Ajude","text":"<p>Ajude e obtenha ajuda, contribua, participe. \ud83e\udd1d</p>"},{"location":"learn/","title":"Aprender","text":"<p>Nesta parte da documenta\u00e7\u00e3o encontramos as se\u00e7\u00f5es introdut\u00f3rias e os tutoriais para aprendermos como usar o ReadyAPI.</p> <p>N\u00f3s poder\u00edamos considerar isto um livro, curso, a maneira oficial e recomendada de aprender o ReadyAPI. \ud83d\ude0e</p>"},{"location":"resources/","title":"Recursos","text":"<p>Material complementar, links externos, artigos e muito mais. \u2708\ufe0f</p>"},{"location":"tutorial/","title":"Tutorial - Guia de Usu\u00e1rio","text":"<p>Esse tutorial mostra como usar o ReadyAPI com a maior parte de seus recursos, passo a passo.</p> <p>Cada se\u00e7\u00e3o constr\u00f3i, gradualmente, sobre as anteriores, mas sua estrutura s\u00e3o t\u00f3picos separados, para que voc\u00ea possa ir a qualquer um espec\u00edfico e resolver suas necessidades espec\u00edficas de API.</p> <p>Ele tamb\u00e9m foi feito como refer\u00eancia futura.</p> <p>Ent\u00e3o voc\u00ea poder\u00e1 voltar e ver exatamente o que precisar.</p>"},{"location":"tutorial/#rode-o-codigo","title":"Rode o c\u00f3digo","text":"<p>Todos os blocos de c\u00f3digo podem ser copiados e utilizados diretamente (eles s\u00e3o, na verdade, arquivos Python testados).</p> <p>Para rodar qualquer um dos exemplos, copie o codigo para um arquivo <code>main.py</code>, e inicie o <code>uvivorn</code> com:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started reloader process [28720]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started server process [28722]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Waiting for application startup.\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Application startup complete.\n</code></pre> <p>\u00c9 ALTAMENTE recomendado que voc\u00ea escreva ou copie o c\u00f3digo, edite-o e rode-o localmente.</p> <p>Us\u00e1-lo em seu editor \u00e9 o que realmente te mostra os benef\u00edcios do ReadyAPI, ver qu\u00e3o pouco c\u00f3digo voc\u00ea tem que escrever, todas as confer\u00eancias de tipo, auto completa\u00e7\u00f5es etc.</p>"},{"location":"tutorial/#instale-o-readyapi","title":"Instale o ReadyAPI","text":"<p>O primeiro passo \u00e9 instalar o ReadyAPI.</p> <p>Para o tutorial, voc\u00ea deve querer instal\u00e1-lo com todas as depend\u00eancias e recursos opicionais.</p> <pre><code>$ pip install \"readyapi[all]\"\n\n---&gt; 100%\n</code></pre> <p>...isso tamb\u00e9m inclui o <code>uvicorn</code>, que voc\u00ea pode usar como o servidor que rodar\u00e1 seu c\u00f3digo.</p> <p>Nota</p> <p>Voc\u00ea tamb\u00e9m pode instalar parte por parte.</p> <p>Isso \u00e9 provavelmente o que voc\u00ea faria quando voc\u00ea quisesse lan\u00e7ar sua aplica\u00e7\u00e3o em produ\u00e7\u00e3o:</p> <pre><code>pip install readyapi\n</code></pre> <p>Tamb\u00e9m instale o <code>uvicorn</code> para funcionar como servidor:</p> <pre><code>pip install \"uvicorn[standard]\"\n</code></pre> <p>E o mesmo para cada depend\u00eancia opcional que voc\u00ea quiser usar.</p>"},{"location":"tutorial/#guia-avancado-de-usuario","title":"Guia Avan\u00e7ado de Usu\u00e1rio","text":"<p>H\u00e1 tamb\u00e9m um Guia Avan\u00e7ado de Usu\u00e1rio que voc\u00ea pode ler ap\u00f3s esse Tutorial - Guia de Usu\u00e1rio.</p> <p>O Guia Avan\u00e7ado de Usu\u00e1rio constr\u00f3i sobre esse, usa os mesmos conceitos e te ensina alguns recursos extras.</p> <p>Mas voc\u00ea deveria ler primeiro o Tutorial - Guia de Usu\u00e1rio (que voc\u00ea est\u00e1 lendo agora).</p> <p>Ele foi projetado para que voc\u00ea possa construir uma aplica\u00e7\u00e3o completa com apenas o Tutorial - Guia de Usu\u00e1rio, e ent\u00e3o estend\u00ea-la de diferentes formas, dependendo das suas necessidades, usando algumas ideias adicionais do Guia Avan\u00e7ado de Usu\u00e1rio.</p>"},{"location":"tutorial/background-tasks/","title":"Tarefas em segundo plano","text":"<p>Voc\u00ea pode definir tarefas em segundo plano a serem executadas _ ap\u00f3s _ retornar uma resposta.</p> <p>Isso \u00e9 \u00fatil para opera\u00e7\u00f5es que precisam acontecer ap\u00f3s uma solicita\u00e7\u00e3o, mas que o cliente realmente n\u00e3o precisa esperar a opera\u00e7\u00e3o ser conclu\u00edda para receber a resposta.</p> <p>Isso inclui, por exemplo:</p> <ul> <li>Envio de notifica\u00e7\u00f5es por email ap\u00f3s a realiza\u00e7\u00e3o de uma a\u00e7\u00e3o:</li> <li>Como conectar-se a um servidor de e-mail e enviar um e-mail tende a ser \"lento\" (v\u00e1rios segundos), voc\u00ea pode retornar a resposta imediatamente e enviar a notifica\u00e7\u00e3o por e-mail em segundo plano.</li> <li>Processando dados:</li> <li>Por exemplo, digamos que voc\u00ea receba um arquivo que deve passar por um processo lento, voc\u00ea pode retornar uma resposta de \"Aceito\" (HTTP 202) e process\u00e1-lo em segundo plano.</li> </ul>"},{"location":"tutorial/background-tasks/#usando-backgroundtasks","title":"Usando <code>BackgroundTasks</code>","text":"<p>Primeiro, importe <code>BackgroundTasks</code> e defina um par\u00e2metro em sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de caminho com uma declara\u00e7\u00e3o de tipo de <code>BackgroundTasks</code>:</p> <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> <p>O ReadyAPI criar\u00e1 o objeto do tipo <code>BackgroundTasks</code> para voc\u00ea e o passar\u00e1 como esse par\u00e2metro.</p>"},{"location":"tutorial/background-tasks/#criar-uma-funcao-de-tarefa","title":"Criar uma fun\u00e7\u00e3o de tarefa","text":"<p>Crie uma fun\u00e7\u00e3o a ser executada como tarefa em segundo plano.</p> <p>\u00c9 apenas uma fun\u00e7\u00e3o padr\u00e3o que pode receber par\u00e2metros.</p> <p>Pode ser uma fun\u00e7\u00e3o <code>async def</code> ou <code>def</code> normal, o ReadyAPI saber\u00e1 como lidar com isso corretamente.</p> <p>Nesse caso, a fun\u00e7\u00e3o de tarefa gravar\u00e1 em um arquivo (simulando o envio de um e-mail).</p> <p>E como a opera\u00e7\u00e3o de grava\u00e7\u00e3o n\u00e3o usa <code>async</code> e <code>await</code>, definimos a fun\u00e7\u00e3o com <code>def</code> normal:</p> <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre>"},{"location":"tutorial/background-tasks/#adicionar-a-tarefa-em-segundo-plano","title":"Adicionar a tarefa em segundo plano","text":"<p>Dentro de sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de caminho, passe sua fun\u00e7\u00e3o de tarefa para o objeto tarefas em segundo plano com o m\u00e9todo <code>.add_task()</code>:</p> <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> <p><code>.add_task()</code> recebe como argumentos:</p> <ul> <li>Uma fun\u00e7\u00e3o de tarefa a ser executada em segundo plano (<code>write_notification</code>).</li> <li>Qualquer sequ\u00eancia de argumentos que deve ser passada para a fun\u00e7\u00e3o de tarefa na ordem (<code>email</code>).</li> <li>Quaisquer argumentos nomeados que devem ser passados \u200b\u200bpara a fun\u00e7\u00e3o de tarefa (<code>mensagem = \"alguma notifica\u00e7\u00e3o\"</code>).</li> </ul>"},{"location":"tutorial/background-tasks/#injecao-de-dependencia","title":"Inje\u00e7\u00e3o de depend\u00eancia","text":"<p>Usar <code>BackgroundTasks</code> tamb\u00e9m funciona com o sistema de inje\u00e7\u00e3o de depend\u00eancia, voc\u00ea pode declarar um par\u00e2metro do tipo <code>BackgroundTasks</code> em v\u00e1rios n\u00edveis: em uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de caminho, em uma depend\u00eancia (confi\u00e1vel), em uma subdepend\u00eancia, etc.</p> <p>O ReadyAPI sabe o que fazer em cada caso e como reutilizar o mesmo objeto, de forma que todas as tarefas em segundo plano sejam mescladas e executadas em segundo plano posteriormente:</p> <pre><code>from typing import Union\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <p>Neste exemplo, as mensagens ser\u00e3o gravadas no arquivo <code>log.txt</code> ap\u00f3s o envio da resposta.</p> <p>Se houver uma consulta na solicita\u00e7\u00e3o, ela ser\u00e1 gravada no log em uma tarefa em segundo plano.</p> <p>E ent\u00e3o outra tarefa em segundo plano gerada na fun\u00e7\u00e3o de opera\u00e7\u00e3o de caminho escrever\u00e1 uma mensagem usando o par\u00e2metro de caminho <code>email</code>.</p>"},{"location":"tutorial/background-tasks/#detalhes-tecnicos","title":"Detalhes t\u00e9cnicos","text":"<p>A classe <code>BackgroundTasks</code> vem diretamente de <code>starlette.background</code>.</p> <p>Ela \u00e9 importada/inclu\u00edda diretamente no ReadyAPI para que voc\u00ea possa import\u00e1-la do <code>readyapi</code> e evitar a importa\u00e7\u00e3o acidental da alternativa <code>BackgroundTask</code> (sem o <code>s</code> no final) de <code>starlette.background</code>.</p> <p>Usando apenas <code>BackgroundTasks</code> (e n\u00e3o <code>BackgroundTask</code>), \u00e9 ent\u00e3o poss\u00edvel us\u00e1-la como um par\u00e2metro de fun\u00e7\u00e3o de opera\u00e7\u00e3o de caminho e deixar o ReadyAPI cuidar do resto para voc\u00ea, assim como ao usar o objeto <code>Request</code> diretamente.</p> <p>Ainda \u00e9 poss\u00edvel usar <code>BackgroundTask</code> sozinho no ReadyAPI, mas voc\u00ea deve criar o objeto em seu c\u00f3digo e retornar uma Starlette <code>Response</code> incluindo-o.</p> <p>Voc\u00ea pode ver mais detalhes na  documenta\u00e7\u00e3o oficiais da Starlette para tarefas em segundo plano .</p>"},{"location":"tutorial/background-tasks/#ressalva","title":"Ressalva","text":"<p>Se voc\u00ea precisa realizar c\u00e1lculos pesados \u200b\u200bem segundo plano e n\u00e3o necessariamente precisa que seja executado pelo mesmo processo (por exemplo, voc\u00ea n\u00e3o precisa compartilhar mem\u00f3ria, vari\u00e1veis, etc), voc\u00ea pode se beneficiar do uso de outras ferramentas maiores, como  Celery .</p> <p>Eles tendem a exigir configura\u00e7\u00f5es mais complexas, um gerenciador de fila de mensagens/tarefas, como RabbitMQ ou Redis, mas permitem que voc\u00ea execute tarefas em segundo plano em v\u00e1rios processos e, especialmente, em v\u00e1rios servidores.</p> <p>Para ver um exemplo, verifique os Geradores de projeto, todos incluem celery j\u00e1 configurado.</p> <p>Mas se voc\u00ea precisa acessar vari\u00e1veis \u200b\u200be objetos do mesmo aplicativo ReadyAPI, ou precisa realizar pequenas tarefas em segundo plano (como enviar uma notifica\u00e7\u00e3o por e-mail), voc\u00ea pode simplesmente usar <code>BackgroundTasks</code>.</p>"},{"location":"tutorial/background-tasks/#recapitulando","title":"Recapitulando","text":"<p>Importe e use <code>BackgroundTasks</code> com par\u00e2metros em fun\u00e7\u00f5es de opera\u00e7\u00e3o de caminho e depend\u00eancias para adicionar tarefas em segundo plano.</p>"},{"location":"tutorial/body-fields/","title":"Corpo - Campos","text":"<p>Da mesma forma que voc\u00ea pode declarar valida\u00e7\u00f5es adicionais e metadados nos par\u00e2metros de fun\u00e7\u00f5es de opera\u00e7\u00f5es de rota com <code>Query</code>, <code>Path</code> e <code>Body</code>, voc\u00ea pode declarar valida\u00e7\u00f5es e metadados dentro de modelos do Pydantic usando <code>Field</code> do Pydantic.</p>"},{"location":"tutorial/body-fields/#importe-field","title":"Importe <code>Field</code>","text":"<p>Primeiro, voc\u00ea tem que import\u00e1-lo:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Aviso</p> <p>Note que <code>Field</code> \u00e9 importado diretamente do <code>pydantic</code>, n\u00e3o do <code>readyapi</code> como todo o resto (<code>Query</code>, <code>Path</code>, <code>Body</code>, etc).</p>"},{"location":"tutorial/body-fields/#declare-atributos-do-modelo","title":"Declare atributos do modelo","text":"<p>Voc\u00ea pode ent\u00e3o utilizar <code>Field</code> com atributos do modelo:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p><code>Field</code> funciona da mesma forma que <code>Query</code>, <code>Path</code> e <code>Body</code>, ele possui todos os mesmos par\u00e2metros, etc.</p> <p>Detalhes t\u00e9cnicos</p> <p>Na realidade, <code>Query</code>, <code>Path</code> e outros que voc\u00ea ver\u00e1 em seguida, criam objetos de subclasses de uma classe <code>Param</code> comum, que \u00e9 ela mesma uma subclasse da classe <code>FieldInfo</code> do Pydantic.</p> <p>E <code>Field</code> do Pydantic retorna uma inst\u00e2ncia de <code>FieldInfo</code> tamb\u00e9m.</p> <p><code>Body</code> tamb\u00e9m retorna objetos de uma subclasse de <code>FieldInfo</code> diretamente. E tem outras que voc\u00ea ver\u00e1 mais tarde que s\u00e3o subclasses da classe <code>Body</code>.</p> <p>Lembre-se que quando voc\u00ea importa <code>Query</code>, <code>Path</code>, e outros de <code>readyapi</code>, esse s\u00e3o na realidade fun\u00e7\u00f5es que retornam classes especiais.</p> <p>Dica</p> <p>Note como cada atributo do modelo com um tipo, valor padr\u00e3o e <code>Field</code> possuem a mesma estrutura que par\u00e2metros de fun\u00e7\u00f5es de opera\u00e7\u00f5es de rota, com <code>Field</code> ao inv\u00e9s de <code>Path</code>, <code>Query</code> e <code>Body</code>.</p>"},{"location":"tutorial/body-fields/#adicione-informacoes-extras","title":"Adicione informa\u00e7\u00f5es extras","text":"<p>Voc\u00ea pode declarar informa\u00e7\u00e3o extra em <code>Field</code>, <code>Query</code>, <code>Body</code>, etc. E isso ser\u00e1 inclu\u00eddo no JSON Schema gerado.</p> <p>Voc\u00ea ir\u00e1 aprender mais sobre adicionar informa\u00e7\u00f5es extras posteriormente nessa documenta\u00e7\u00e3o, quando estiver aprendendo a declarar exemplos.</p>"},{"location":"tutorial/body-fields/#recapitulando","title":"Recapitulando","text":"<p>Voc\u00ea pode usar <code>Field</code> do Pydantic para declarar valida\u00e7\u00f5es extras e metadados para atributos do modelo.</p> <p>Voc\u00ea tamb\u00e9m pode usar os argumentos de palavras-chave extras para passar metadados do JSON Schema adicionais.</p>"},{"location":"tutorial/body-multiple-params/","title":"Corpo - M\u00faltiplos par\u00e2metros","text":"<p>Agora que n\u00f3s vimos como usar <code>Path</code> e <code>Query</code>, veremos usos mais avan\u00e7ados de declara\u00e7\u00f5es no corpo da requisi\u00e7\u00e3o.</p>"},{"location":"tutorial/body-multiple-params/#misture-path-query-e-parametros-de-corpo","title":"Misture <code>Path</code>, <code>Query</code> e par\u00e2metros de corpo","text":"<p>Primeiro, \u00e9 claro, voc\u00ea pode misturar <code>Path</code>, <code>Query</code> e declara\u00e7\u00f5es de par\u00e2metro no corpo da requisi\u00e7\u00e3o livremente e o ReadyAPI saber\u00e1 o que fazer.</p> <p>E voc\u00ea tamb\u00e9m pode declarar par\u00e2metros de corpo como opcionais, definindo o valor padr\u00e3o com <code>None</code>:</p> Python 3.10+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <p>Nota</p> <p>Repare que, neste caso, o <code>item</code> que seria capturado a partir do corpo \u00e9 opcional. Visto que ele possui <code>None</code> como valor padr\u00e3o.</p>"},{"location":"tutorial/body-multiple-params/#multiplos-parametros-de-corpo","title":"M\u00faltiplos par\u00e2metros de corpo","text":"<p>No exemplo anterior, as opera\u00e7\u00f5es de rota esperariam um JSON no corpo contendo os atributos de um <code>Item</code>, exemplo:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2\n}\n</code></pre> <p>Mas voc\u00ea pode tamb\u00e9m declarar m\u00faltiplos par\u00e2metros de corpo, por exemplo, <code>item</code> e <code>user</code>:</p> Python 3.10+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results\n</code></pre> <p>Neste caso, o ReadyAPI perceber\u00e1 que existe mais de um par\u00e2metro de corpo na fun\u00e7\u00e3o (dois par\u00e2metros que s\u00e3o modelos Pydantic).</p> <p>Ent\u00e3o, ele usar\u00e1 o nome dos par\u00e2metros como chaves (nome dos campos) no corpo, e espera um corpo como:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    },\n    \"user\": {\n        \"username\": \"dave\",\n        \"full_name\": \"Dave Grohl\"\n    }\n}\n</code></pre> <p>Nota</p> <p>Repare que mesmo que o <code>item</code> esteja declarado da mesma maneira que antes, agora \u00e9 esperado que ele esteja dentro do corpo com uma chave <code>item</code>.</p> <p>O ReadyAPI far\u00e1 a convers\u00e3o autom\u00e1tica a partir da requisi\u00e7\u00e3o, assim esse par\u00e2metro <code>item</code> receber\u00e1 seu respectivo conte\u00fado e o mesmo ocorrer\u00e1 com <code>user</code>.</p> <p>Ele executar\u00e1 a valida\u00e7\u00e3o dos dados compostos e ir\u00e1 document\u00e1-los de maneira compat\u00edvel com o esquema OpenAPI e documenta\u00e7\u00e3o autom\u00e1tica.</p>"},{"location":"tutorial/body-multiple-params/#valores-singulares-no-corpo","title":"Valores singulares no corpo","text":"<p>Assim como existem uma <code>Query</code> e uma <code>Path</code> para definir dados adicionais para par\u00e2metros de consulta e de rota, o ReadyAPI prov\u00ea o equivalente para <code>Body</code>.</p> <p>Por exemplo, extendendo o modelo anterior, voc\u00ea poder decidir por ter uma outra chave <code>importance</code> no mesmo corpo, al\u00e9m de <code>item</code> e <code>user</code>.</p> <p>Se voc\u00ea declar\u00e1-lo como \u00e9, porque \u00e9 um valor singular, o ReadyAPI assumir\u00e1 que se trata de um par\u00e2metro de consulta.</p> <p>Mas voc\u00ea pode instruir o ReadyAPI para trat\u00e1-lo como outra chave do corpo usando <code>Body</code>:</p> Python 3.8+Python 3.10+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <p>Neste caso, o ReadyAPI esperar\u00e1 um corpo como:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    },\n    \"user\": {\n        \"username\": \"dave\",\n        \"full_name\": \"Dave Grohl\"\n    },\n    \"importance\": 5\n}\n</code></pre> <p>Mais uma vez, ele converter\u00e1 os tipos de dados, validar, documentar, etc.</p>"},{"location":"tutorial/body-multiple-params/#multiplos-parametros-de-corpo-e-consulta","title":"M\u00faltiplos par\u00e2metros de corpo e consulta","text":"<p>Obviamente, voc\u00ea tamb\u00e9m pode declarar par\u00e2metros de consulta assim que voc\u00ea precisar, de modo adicional a quaisquer par\u00e2metros de corpo.</p> <p>Dado que, por padr\u00e3o, valores singulares s\u00e3o interpretados como par\u00e2metros de consulta, voc\u00ea n\u00e3o precisa explicitamente adicionar uma <code>Query</code>, voc\u00ea pode somente:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>Ou como em Python 3.10 e vers\u00f5es superiores:</p> <pre><code>q: str | None = None\n</code></pre> <p>Por exemplo:</p> Python 3.10+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p><code>Body</code> tamb\u00e9m possui todas as valida\u00e7\u00f5es adicionais e metadados de par\u00e2metros como em <code>Query</code>,<code>Path</code> e outras que voc\u00ea ver\u00e1 depois.</p>"},{"location":"tutorial/body-multiple-params/#declare-um-unico-parametro-de-corpo-indicando-sua-chave","title":"Declare um \u00fanico par\u00e2metro de corpo indicando sua chave","text":"<p>Suponha que voc\u00ea tem um \u00fanico par\u00e2metro de corpo <code>item</code>, a partir de um modelo Pydantic <code>Item</code>.</p> <p>Por padr\u00e3o, o ReadyAPI esperar\u00e1 que seu conte\u00fado venha no corpo diretamente.</p> <p>Mas se voc\u00ea quiser que ele espere por um JSON com uma chave <code>item</code> e dentro dele os conte\u00fados do modelo, como ocorre ao declarar v\u00e1rios par\u00e2metros de corpo, voc\u00ea pode usar o par\u00e2metro especial de <code>Body</code> chamado <code>embed</code>:</p> <pre><code>item: Item = Body(embed=True)\n</code></pre> <p>como em:</p> Python 3.10+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Neste caso o ReadyAPI esperar\u00e1 um corpo como:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    }\n}\n</code></pre> <p>ao inv\u00e9s de:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2\n}\n</code></pre>"},{"location":"tutorial/body-multiple-params/#recapitulando","title":"Recapitulando","text":"<p>Voc\u00ea pode adicionar m\u00faltiplos par\u00e2metros de corpo para sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, mesmo que a requisi\u00e7\u00e3o possa ter somente um \u00fanico corpo.</p> <p>E o ReadyAPI vai manipul\u00e1-los, mandar para voc\u00ea os dados corretos na sua fun\u00e7\u00e3o, e validar e documentar o schema correto na opera\u00e7\u00e3o de rota.</p> <p>Voc\u00ea tamb\u00e9m pode declarar valores singulares para serem recebidos como parte do corpo.</p> <p>E voc\u00ea pode instruir o ReadyAPI para requisitar no corpo a indica\u00e7\u00e3o de chave mesmo quando existe somente um \u00fanico par\u00e2metro declarado.</p>"},{"location":"tutorial/body-nested-models/","title":"Corpo - Modelos aninhados","text":"<p>Com o ReadyAPI, voc\u00ea pode definir, validar, documentar e usar modelos profundamente aninhados de forma arbitr\u00e1ria (gra\u00e7as ao Pydantic).</p>"},{"location":"tutorial/body-nested-models/#campos-do-tipo-lista","title":"Campos do tipo Lista","text":"<p>Voc\u00ea pode definir um atributo como um subtipo. Por exemplo, uma <code>list</code> do Python:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Isso far\u00e1 com que tags seja uma lista de itens mesmo sem declarar o tipo dos elementos desta lista.</p>"},{"location":"tutorial/body-nested-models/#campos-do-tipo-lista-com-um-parametro-de-tipo","title":"Campos do tipo Lista com um par\u00e2metro de tipo","text":"<p>Mas o Python tem uma maneira espec\u00edfica de declarar listas com tipos internos ou \"par\u00e2metros de tipo\":</p>"},{"location":"tutorial/body-nested-models/#importe-list-do-typing","title":"Importe <code>List</code> do typing","text":"<p>Primeiramente, importe <code>List</code> do m\u00f3dulo <code>typing</code> que j\u00e1 vem por padr\u00e3o no Python:</p> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#declare-a-list-com-um-parametro-de-tipo","title":"Declare a <code>List</code> com um par\u00e2metro de tipo","text":"<p>Para declarar tipos que t\u00eam par\u00e2metros de tipo(tipos internos), como <code>list</code>, <code>dict</code>, <code>tuple</code>:</p> <ul> <li>Importe os do modulo <code>typing</code></li> <li>Passe o(s) tipo(s) interno(s) como \"par\u00e2metros de tipo\" usando colchetes: <code>[</code> e <code>]</code></li> </ul> <pre><code>from typing import List\n\nmy_list: List[str]\n</code></pre> <p>Essa \u00e9 a sintaxe padr\u00e3o do Python para declara\u00e7\u00f5es de tipo.</p> <p>Use a mesma sintaxe padr\u00e3o para atributos de modelo com tipos internos.</p> <p>Portanto, em nosso exemplo, podemos fazer com que <code>tags</code> sejam especificamente uma \"lista de strings\":</p> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#tipo-set","title":"Tipo \"set\"","text":"<p>Mas ent\u00e3o, quando n\u00f3s pensamos mais, percebemos que as tags n\u00e3o devem se repetir, elas provavelmente devem ser strings \u00fanicas.</p> <p>E que o Python tem um tipo de dados especial para conjuntos de itens \u00fanicos, o <code>set</code>.</p> <p>Ent\u00e3o podemos importar <code>Set</code> e declarar <code>tags</code> como um <code>set</code> de <code>str</code>s:</p> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Com isso, mesmo que voc\u00ea receba uma requisi\u00e7\u00e3o contendo dados duplicados, ela ser\u00e1 convertida em um conjunto de itens exclusivos.</p> <p>E sempre que voc\u00ea enviar esses dados como resposta, mesmo se a fonte tiver duplicatas, eles ser\u00e3o gerados como um conjunto de itens exclusivos.</p> <p>E tamb\u00e9m teremos anota\u00e7\u00f5es/documenta\u00e7\u00e3o em conformidade.</p>"},{"location":"tutorial/body-nested-models/#modelos-aninhados","title":"Modelos aninhados","text":"<p>Cada atributo de um modelo Pydantic tem um tipo.</p> <p>Mas esse tipo pode ser outro modelo Pydantic.</p> <p>Portanto, voc\u00ea pode declarar \"objects\" JSON profundamente aninhados com nomes, tipos e valida\u00e7\u00f5es de atributos espec\u00edficos.</p> <p>Tudo isso, aninhado arbitrariamente.</p>"},{"location":"tutorial/body-nested-models/#defina-um-sub-modelo","title":"Defina um sub-modelo","text":"<p>Por exemplo, n\u00f3s podemos definir um modelo <code>Image</code>:</p> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#use-o-sub-modelo-como-um-tipo","title":"Use o sub-modelo como um tipo","text":"<p>E ent\u00e3o podemos usa-lo como o tipo de um atributo:</p> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Isso significa que o ReadyAPI vai esperar um corpo similar \u00e0:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2,\n    \"tags\": [\"rock\", \"metal\", \"bar\"],\n    \"image\": {\n        \"url\": \"http://example.com/baz.jpg\",\n        \"name\": \"The Foo live\"\n    }\n}\n</code></pre> <p>Novamente, apenas fazendo essa declara\u00e7\u00e3o, com o ReadyAPI, voc\u00ea ganha:</p> <ul> <li>Suporte do editor de texto (comple\u00e7\u00e3o, etc), inclusive para modelos aninhados</li> <li>Convers\u00e3o de dados</li> <li>Valida\u00e7\u00e3o de dados</li> <li>Documenta\u00e7\u00e3o automatica</li> </ul>"},{"location":"tutorial/body-nested-models/#tipos-especiais-e-validacao","title":"Tipos especiais e valida\u00e7\u00e3o","text":"<p>Al\u00e9m dos tipos singulares normais como <code>str</code>, <code>int</code>, <code>float</code>, etc. Voc\u00ea tamb\u00e9m pode usar tipos singulares mais complexos que herdam de <code>str</code>.</p> <p>Para ver todas as op\u00e7\u00f5es poss\u00edveis, cheque a documenta\u00e7\u00e3o para ostipos exoticos do Pydantic. Voc\u00ea ver\u00e1 alguns exemplos no pr\u00f3ximo capitulo.</p> <p>Por exemplo, no modelo <code>Image</code> n\u00f3s temos um campo <code>url</code>, n\u00f3s podemos declara-lo como um <code>HttpUrl</code> do Pydantic inv\u00e9s de como uma <code>str</code>:</p> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>A string ser\u00e1 verificada para se tornar uma URL v\u00e1lida e documentada no esquema JSON/1OpenAPI como tal.</p>"},{"location":"tutorial/body-nested-models/#atributos-como-listas-de-submodelos","title":"Atributos como listas de submodelos","text":"<p>Voc\u00ea tamb\u00e9m pode usar modelos Pydantic como subtipos de <code>list</code>, <code>set</code>, etc:</p> <pre><code>from typing import List, Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Isso vai esperar(converter, validar, documentar, etc) um corpo JSON tal qual:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2,\n    \"tags\": [\n        \"rock\",\n        \"metal\",\n        \"bar\"\n    ],\n    \"images\": [\n        {\n            \"url\": \"http://example.com/baz.jpg\",\n            \"name\": \"The Foo live\"\n        },\n        {\n            \"url\": \"http://example.com/dave.jpg\",\n            \"name\": \"The Baz\"\n        }\n    ]\n}\n</code></pre> <p>informa\u00e7\u00e3o</p> <p>Note como o campo <code>images</code> agora tem uma lista de objetos de image.</p>"},{"location":"tutorial/body-nested-models/#modelos-profundamente-aninhados","title":"Modelos profundamente aninhados","text":"<p>Voc\u00ea pode definir modelos profundamente aninhados de forma arbitr\u00e1ria:</p> <pre><code>from typing import List, Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: List[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n</code></pre> <p>informa\u00e7\u00e3o</p> <p>Note como <code>Offer</code> tem uma lista de <code>Item</code>s, que por sua vez possui opcionalmente uma lista <code>Image</code>s</p>"},{"location":"tutorial/body-nested-models/#corpos-de-listas-puras","title":"Corpos de listas puras","text":"<p>Se o valor de primeiro n\u00edvel do corpo JSON que voc\u00ea espera for um <code>array</code> do JSON (uma<code>lista</code> do Python), voc\u00ea pode declarar o tipo no par\u00e2metro da fun\u00e7\u00e3o, da mesma forma que nos modelos do Pydantic:</p> <pre><code>images: List[Image]\n</code></pre> <p>como em:</p> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\n@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: List[Image]):\n    return images\n</code></pre>"},{"location":"tutorial/body-nested-models/#suporte-de-editor-em-todo-canto","title":"Suporte de editor em todo canto","text":"<p>E voc\u00ea obt\u00e9m suporte do editor em todos os lugares.</p> <p>Mesmo para itens dentro de listas:</p> <p></p> <p>Voc\u00ea n\u00e3o conseguiria este tipo de suporte de editor se estivesse trabalhando diretamente com <code>dict</code> em vez de modelos Pydantic.</p> <p>Mas voc\u00ea tamb\u00e9m n\u00e3o precisa se preocupar com eles, os dicts de entrada s\u00e3o convertidos automaticamente e sua sa\u00edda \u00e9 convertida automaticamente para JSON tamb\u00e9m.</p>"},{"location":"tutorial/body-nested-models/#corpos-de-dicts-arbitrarios","title":"Corpos de <code>dict</code>s arbitr\u00e1rios","text":"<p>Voc\u00ea tamb\u00e9m pode declarar um corpo como um <code>dict</code> com chaves de algum tipo e valores de outro tipo.</p> <p>Sem ter que saber de antem\u00e3o quais s\u00e3o os nomes de campos/atributos v\u00e1lidos (como seria o caso dos modelos Pydantic).</p> <p>Isso seria \u00fatil se voc\u00ea deseja receber chaves que ainda n\u00e3o conhece.</p> <p>Outro caso \u00fatil \u00e9 quando voc\u00ea deseja ter chaves de outro tipo, por exemplo, <code>int</code>.</p> <p>\u00c9 isso que vamos ver aqui.</p> <p>Neste caso, voc\u00ea aceitaria qualquer <code>dict</code>, desde que tenha chaves<code>int</code> com valores <code>float</code>:</p> <pre><code>from typing import Dict\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: Dict[int, float]):\n    return weights\n</code></pre> <p>Dica</p> <p>Leve em condidera\u00e7\u00e3o que o JSON s\u00f3 suporta <code>str</code> como chaves.</p> <p>Mas o Pydantic tem convers\u00e3o autom\u00e1tica de dados.</p> <p>Isso significa que, embora os clientes da API s\u00f3 possam enviar strings como chaves, desde que essas strings contenham inteiros puros, o Pydantic ir\u00e1 convert\u00ea-los e valid\u00e1-los.</p> <p>E o <code>dict</code> que voc\u00ea recebe como <code>weights</code> ter\u00e1, na verdade, chaves <code>int</code> e valores<code>float</code>.</p>"},{"location":"tutorial/body-nested-models/#recapitulacao","title":"Recapitula\u00e7\u00e3o","text":"<p>Com ReadyAPI voc\u00ea tem a flexibilidade m\u00e1xima fornecida pelos modelos Pydantic, enquanto seu c\u00f3digo \u00e9 mantido simples, curto e elegante.</p> <p>Mas com todos os benef\u00edcios:</p> <ul> <li>Suporte do editor (comple\u00e7\u00e3o em todo canto!)</li> <li>Convers\u00e3o de dados (leia-se parsing/serializa\u00e7\u00e3o)</li> <li>Valida\u00e7\u00e3o de dados</li> <li>Documenta\u00e7\u00e3o dos esquemas</li> <li>Documenta\u00e7\u00e3o autom\u00e1tica</li> </ul>"},{"location":"tutorial/body/","title":"Corpo da Requisi\u00e7\u00e3o","text":"<p>Quando voc\u00ea precisa enviar dados de um cliente (como de um navegador web) para sua API, voc\u00ea o envia como um corpo da requisi\u00e7\u00e3o.</p> <p>O corpo da requisi\u00e7\u00e3o \u00e9 a informa\u00e7\u00e3o enviada pelo cliente para sua API. O corpo da resposta \u00e9 a informa\u00e7\u00e3o que sua API envia para o cliente.</p> <p>Sua API quase sempre ir\u00e1 enviar um corpo na resposta. Mas os clientes n\u00e3o necessariamente precisam enviar um corpo em toda requisi\u00e7\u00e3o.</p> <p>Para declarar um corpo da requisi\u00e7\u00e3o, voc\u00ea utiliza os modelos do Pydantic com todos os seus poderes e benef\u00edcios.</p> <p>Informa\u00e7\u00e3o</p> <p>Para enviar dados, voc\u00ea deve usar utilizar um dos m\u00e9todos: <code>POST</code> (Mais comum), <code>PUT</code>, <code>DELETE</code> ou <code>PATCH</code>.</p> <p>Enviar um corpo em uma requisi\u00e7\u00e3o <code>GET</code> n\u00e3o tem um comportamento definido nas especifica\u00e7\u00f5es, por\u00e9m \u00e9 suportado pelo ReadyAPI, apenas para casos de uso bem complexos/extremos.</p> <p>Como \u00e9 desencorajado, a documenta\u00e7\u00e3o interativa com Swagger UI n\u00e3o ir\u00e1 mostrar a documenta\u00e7\u00e3o para o corpo da requisi\u00e7\u00e3o para um <code>GET</code>, e proxies que intermediarem podem n\u00e3o suportar o corpo da requisi\u00e7\u00e3o.</p>"},{"location":"tutorial/body/#importe-o-basemodel-do-pydantic","title":"Importe o <code>BaseModel</code> do Pydantic","text":"<p>Primeiro, voc\u00ea precisa importar <code>BaseModel</code> do <code>pydantic</code>:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"tutorial/body/#crie-seu-modelo-de-dados","title":"Crie seu modelo de dados","text":"<p>Ent\u00e3o voc\u00ea declara seu modelo de dados como uma classe que herda <code>BaseModel</code>.</p> <p>Utilize os tipos Python padr\u00e3o para todos os atributos:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>Assim como quando declaramos par\u00e2metros de consulta, quando um atributo do modelo possui um valor padr\u00e3o, ele se torna opcional. Caso contr\u00e1rio, se torna obrigat\u00f3rio. Use <code>None</code> para torn\u00e1-lo opcional.</p> <p>Por exemplo, o modelo acima declara um JSON \"<code>object</code>\" (ou <code>dict</code> no Python) como esse:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"Uma descri\u00e7\u00e3o opcional\",\n    \"price\": 45.2,\n    \"tax\": 3.5\n}\n</code></pre> <p>...como <code>description</code> e <code>tax</code> s\u00e3o opcionais (Com um valor padr\u00e3o de <code>None</code>), esse JSON \"<code>object</code>\" tamb\u00e9m \u00e9 v\u00e1lido:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"price\": 45.2\n}\n</code></pre>"},{"location":"tutorial/body/#declare-como-um-parametro","title":"Declare como um par\u00e2metro","text":"<p>Para adicionar o corpo na fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, declare-o da mesma maneira que voc\u00ea declarou par\u00e2metros de rota e consulta:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>...E declare o tipo como o modelo que voc\u00ea criou, <code>Item</code>.</p>"},{"location":"tutorial/body/#resultados","title":"Resultados","text":"<p>Apenas com esse declara\u00e7\u00e3o de tipos do Python, o ReadyAPI ir\u00e1:</p> <ul> <li>Ler o corpo da requisi\u00e7\u00e3o como um JSON.</li> <li>Converter os tipos correspondentes (se necess\u00e1rio).</li> <li>Validar os dados.<ul> <li>Se algum dados for inv\u00e1lido, ir\u00e1 retornar um erro bem claro, indicando exatamente onde e o que est\u00e1 incorreto.</li> </ul> </li> <li>Entregar a voc\u00ea a informa\u00e7\u00e3o recebida no par\u00e2metro <code>item</code>.<ul> <li>Como voc\u00ea o declarou na fun\u00e7\u00e3o como do tipo <code>Item</code>, voc\u00ea tamb\u00e9m ter\u00e1 o suporte do editor (completa\u00e7\u00e3o, etc) para todos os atributos e seus tipos.</li> </ul> </li> <li>Gerar um Esquema JSON com as defini\u00e7\u00f5es do seu modelo, voc\u00ea tamb\u00e9m pode utiliz\u00e1-lo em qualquer lugar que quiser, se fizer sentido para seu projeto.</li> <li>Esses esquemas far\u00e3o parte do esquema OpenAPI, e utilizados nas UIs de documenta\u00e7\u00e3o autom\u00e1tica.</li> </ul>"},{"location":"tutorial/body/#documentacao-automatica","title":"Documenta\u00e7\u00e3o autom\u00e1tica","text":"<p>Os esquemas JSON dos seus modelos far\u00e3o parte do esquema OpenAPI gerado para sua aplica\u00e7\u00e3o, e aparecer\u00e3o na documenta\u00e7\u00e3o interativa da API:</p> <p></p> <p>E tamb\u00e9m ser\u00e3o utilizados em cada fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota que utiliz\u00e1-los:</p> <p></p>"},{"location":"tutorial/body/#suporte-do-editor-de-texto","title":"Suporte do editor de texto:","text":"<p>No seu editor de texto, dentro da fun\u00e7\u00e3o voc\u00ea receber\u00e1 dicas de tipos e completa\u00e7\u00e3o em todo lugar (isso n\u00e3o aconteceria se voc\u00ea recebesse um <code>dict</code> em vez de um modelo Pydantic):</p> <p></p> <p>Voc\u00ea tamb\u00e9m poder\u00e1 receber verifica\u00e7\u00f5es de erros para opera\u00e7\u00f5es de tipos incorretas:</p> <p></p> <p>Isso n\u00e3o \u00e9 por acaso, todo o framework foi constru\u00eddo em volta deste design.</p> <p>E foi imensamente testado na fase de design, antes de qualquer implementa\u00e7\u00e3o, para garantir que funcionaria para todos os editores de texto.</p> <p>Houveram mudan\u00e7as no pr\u00f3prio Pydantic para que isso fosse poss\u00edvel.</p> <p>As capturas de tela anteriores foram capturas no Visual Studio Code.</p> <p>Mas voc\u00ea ter\u00e1 o mesmo suporte do editor no PyCharm e na maioria dos editores Python:</p> <p></p> <p>Dica</p> <p>Se voc\u00ea utiliza o PyCharm como editor, voc\u00ea pode utilizar o Plugin do Pydantic para o PyCharm .</p> <p>Melhora o suporte do editor para seus modelos Pydantic com::</p> <ul> <li>completa\u00e7\u00e3o autom\u00e1tica</li> <li>verifica\u00e7\u00e3o de tipos</li> <li>refatora\u00e7\u00e3o</li> <li>buscas</li> <li>inspe\u00e7\u00f5es</li> </ul>"},{"location":"tutorial/body/#use-o-modelo","title":"Use o modelo","text":"<p>Dentro da fun\u00e7\u00e3o, voc\u00ea pode acessar todos os atributos do objeto do modelo diretamente:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict\n</code></pre>"},{"location":"tutorial/body/#corpo-da-requisicao-parametros-de-rota","title":"Corpo da requisi\u00e7\u00e3o + par\u00e2metros de rota","text":"<p>Voc\u00ea pode declarar par\u00e2metros de rota e corpo da requisi\u00e7\u00e3o ao mesmo tempo.</p> <p>O ReadyAPI ir\u00e1 reconhecer que os par\u00e2metros da fun\u00e7\u00e3o que combinam com par\u00e2metros de rota devem ser retirados da rota, e par\u00e2metros da fun\u00e7\u00e3o que s\u00e3o declarados como modelos Pydantic sejam retirados do corpo da requisi\u00e7\u00e3o.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}\n</code></pre>"},{"location":"tutorial/body/#corpo-da-requisicao-parametros-de-rota-parametros-de-consulta","title":"Corpo da requisi\u00e7\u00e3o + par\u00e2metros de rota + par\u00e2metros de consulta","text":"<p>Voc\u00ea tamb\u00e9m pode declarar par\u00e2metros de corpo, rota e consulta, ao mesmo tempo.</p> <p>O ReadyAPI ir\u00e1 reconhecer cada um deles e retirar a informa\u00e7\u00e3o do local correto.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n</code></pre> <p>Os par\u00e2metros da fun\u00e7\u00e3o ser\u00e3o reconhecidos conforme abaixo:</p> <ul> <li>Se o par\u00e2metro tamb\u00e9m \u00e9 declarado na rota, ser\u00e1 utilizado como um par\u00e2metro de rota.</li> <li>Se o par\u00e2metro \u00e9 de um tipo \u00fanico (como <code>int</code>, <code>float</code>, <code>str</code>, <code>bool</code>, etc) ser\u00e1 interpretado como um par\u00e2metro de consulta.</li> <li>Se o par\u00e2metro \u00e9 declarado como um modelo Pydantic, ser\u00e1 interpretado como o corpo da requisi\u00e7\u00e3o.</li> </ul> <p>Observa\u00e7\u00e3o</p> <p>O ReadyAPI saber\u00e1 que o valor de <code>q</code> n\u00e3o \u00e9 obrigat\u00f3rio por causa do valor padr\u00e3o <code>= None</code>.</p> <p>O <code>Union</code> em <code>Union[str, None]</code> n\u00e3o \u00e9 utilizado pelo ReadyAPI, mas permite ao seu editor de texto lhe dar um suporte melhor e detectar erros.</p>"},{"location":"tutorial/body/#sem-o-pydantic","title":"Sem o Pydantic","text":"<p>Se voc\u00ea n\u00e3o quer utilizar os modelos Pydantic, voc\u00ea tamb\u00e9m pode utilizar o par\u00e2metro Body. Veja a documenta\u00e7\u00e3o para Body - Par\u00e2metros m\u00faltiplos: Valores singulares no body.</p>"},{"location":"tutorial/cookie-params/","title":"Par\u00e2metros de Cookie","text":"<p>Voc\u00ea pode definir par\u00e2metros de Cookie da mesma maneira que define param\u00eatros com <code>Query</code> e <code>Path</code>.</p>"},{"location":"tutorial/cookie-params/#importe-cookie","title":"Importe <code>Cookie</code>","text":"<p>Primeiro importe <code>Cookie</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Union[str, None] = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre>"},{"location":"tutorial/cookie-params/#declare-parametros-de-cookie","title":"Declare par\u00e2metros de <code>Cookie</code>","text":"<p>Ent\u00e3o declare os param\u00eatros de cookie usando a mesma estrutura que em <code>Path</code> e <code>Query</code>.</p> <p>O primeiro valor \u00e9 o valor padr\u00e3o, voc\u00ea pode passar todas as valida\u00e7\u00f5es adicionais ou par\u00e2metros de anota\u00e7\u00e3o:</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Union[str, None] = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Detalhes T\u00e9cnicos</p> <p><code>Cookie</code> \u00e9 uma classe \"irm\u00e3\" de <code>Path</code> e <code>Query</code>. Ela tamb\u00e9m herda da mesma classe em comum <code>Param</code>.</p> <p>Mas lembre-se que quando voc\u00ea importa <code>Query</code>, <code>Path</code>, <code>Cookie</code> e outras de <code>readyapi</code>, elas s\u00e3o na verdade fun\u00e7\u00f5es que retornam classes especiais.</p> <p>Informa\u00e7\u00e3o</p> <p>Para declarar cookies, voc\u00ea precisa usar <code>Cookie</code>, caso contr\u00e1rio, os par\u00e2metros seriam interpretados como par\u00e2metros de consulta.</p>"},{"location":"tutorial/cookie-params/#recapitulando","title":"Recapitulando","text":"<p>Declare cookies com <code>Cookie</code>, usando o mesmo padr\u00e3o comum que utiliza-se em <code>Query</code> e <code>Path</code>.</p>"},{"location":"tutorial/encoder/","title":"Codificador Compat\u00edvel com JSON","text":"<p>Existem alguns casos em que voc\u00ea pode precisar converter um tipo de dados (como um modelo Pydantic) para algo compat\u00edvel com JSON (como um <code>dict</code>, <code>list</code>, etc).</p> <p>Por exemplo, se voc\u00ea precisar armazen\u00e1-lo em um banco de dados.</p> <p>Para isso, ReadyAPI fornece uma fun\u00e7\u00e3o <code>jsonable_encoder()</code>.</p>"},{"location":"tutorial/encoder/#usando-a-funcao-jsonable_encoder","title":"Usando a fun\u00e7\u00e3o <code>jsonable_encoder</code>","text":"<p>Vamos imaginar que voc\u00ea tenha um banco de dados <code>fake_db</code> que recebe apenas dados compat\u00edveis com JSON.</p> <p>Por exemplo, ele n\u00e3o recebe objetos <code>datetime</code>, pois estes objetos n\u00e3o s\u00e3o compat\u00edveis com JSON.</p> <p>Ent\u00e3o, um objeto <code>datetime</code> teria que ser convertido em um <code>str</code> contendo os dados no formato  ISO.</p> <p>Da mesma forma, este banco de dados n\u00e3o receberia um modelo Pydantic (um objeto com atributos), apenas um <code>dict</code>.</p> <p>Voc\u00ea pode usar a fun\u00e7\u00e3o <code>jsonable_encoder</code> para resolver isso.</p> <p>A fun\u00e7\u00e3o recebe um objeto, como um modelo Pydantic e retorna uma vers\u00e3o compat\u00edvel com JSON:</p> Python 3.10+Python 3.8+ <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\nfake_db = {}\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data\n</code></pre> <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\nfake_db = {}\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data\n</code></pre> <p>Neste exemplo, ele converteria o modelo Pydantic em um <code>dict</code>, e o <code>datetime</code> em um <code>str</code>.</p> <p>O resultado de chamar a fun\u00e7\u00e3o \u00e9 algo que pode ser codificado com o padr\u00e3o do Python <code>json.dumps()</code>.</p> <p>A fun\u00e7\u00e3o n\u00e3o retorna um grande <code>str</code> contendo os dados no formato JSON (como uma string). Mas sim, retorna uma estrutura de dados padr\u00e3o do Python (por exemplo, um <code>dict</code>) com valores e subvalores compat\u00edveis com JSON.</p> <p>Nota</p> <p><code>jsonable_encoder</code> \u00e9 realmente usado pelo ReadyAPI internamente para converter dados. Mas tamb\u00e9m \u00e9 \u00fatil em muitos outros cen\u00e1rios.</p>"},{"location":"tutorial/extra-data-types/","title":"Tipos de dados extras","text":"<p>At\u00e9 agora, voc\u00ea tem usado tipos de dados comuns, tais como:</p> <ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>str</code></li> <li><code>bool</code></li> </ul> <p>Mas voc\u00ea tamb\u00e9m pode usar tipos de dados mais complexos.</p> <p>E voc\u00ea ainda ter\u00e1 os mesmos recursos que viu at\u00e9 agora:</p> <ul> <li>\u00d3timo suporte do editor.</li> <li>Convers\u00e3o de dados das requisi\u00e7\u00f5es recebidas.</li> <li>Convers\u00e3o de dados para os dados da resposta.</li> <li>Valida\u00e7\u00e3o de dados.</li> <li>Anota\u00e7\u00e3o e documenta\u00e7\u00e3o autom\u00e1ticas.</li> </ul>"},{"location":"tutorial/extra-data-types/#outros-tipos-de-dados","title":"Outros tipos de dados","text":"<p>Aqui est\u00e3o alguns dos tipos de dados adicionais que voc\u00ea pode usar:</p> <ul> <li><code>UUID</code>:<ul> <li>Um \"Identificador Universalmente \u00danico\" padr\u00e3o, comumente usado como ID em muitos bancos de dados e sistemas.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como uma <code>str</code>.</li> </ul> </li> <li><code>datetime.datetime</code>:<ul> <li>O <code>datetime.datetime</code> do Python.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como uma <code>str</code> no formato ISO 8601, exemplo: <code>2008-09-15T15:53:00+05:00</code>.</li> </ul> </li> <li><code>datetime.date</code>:<ul> <li>O <code>datetime.date</code> do Python.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como uma <code>str</code> no formato ISO 8601, exemplo: <code>2008-09-15</code>.</li> </ul> </li> <li><code>datetime.time</code>:<ul> <li>O <code>datetime.time</code> do Python.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como uma <code>str</code> no formato ISO 8601, exemplo: <code>14:23:55.003</code>.</li> </ul> </li> <li><code>datetime.timedelta</code>:<ul> <li>O <code>datetime.timedelta</code> do Python.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como um <code>float</code> de segundos totais.</li> <li>O Pydantic tamb\u00e9m permite represent\u00e1-lo como uma \"codifica\u00e7\u00e3o ISO 8601 diferen\u00e7a de tempo\", cheque a documenta\u00e7\u00e3o para mais informa\u00e7\u00f5es.</li> </ul> </li> <li><code>frozenset</code>:<ul> <li>Em requisi\u00e7\u00f5es e respostas, ser\u00e1 tratado da mesma forma que um <code>set</code>:<ul> <li>Nas requisi\u00e7\u00f5es, uma lista ser\u00e1 lida, eliminando duplicadas e convertendo-a em um <code>set</code>.</li> <li>Nas respostas, o <code>set</code> ser\u00e1 convertido para uma <code>list</code>.</li> <li>O esquema gerado vai especificar que os valores do <code>set</code> s\u00e3o unicos (usando o <code>uniqueItems</code> do JSON Schema).</li> </ul> </li> </ul> </li> <li><code>bytes</code>:<ul> <li>O <code>bytes</code> padr\u00e3o do Python.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como uma <code>str</code>.</li> <li>O esquema gerado vai especificar que \u00e9 uma <code>str</code> com o \"formato\" <code>binary</code>.</li> </ul> </li> <li><code>Decimal</code>:<ul> <li>O <code>Decimal</code> padr\u00e3o do Python.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como um <code>float</code>.</li> </ul> </li> <li>Voc\u00ea pode checar todos os tipos de dados v\u00e1lidos do Pydantic aqui: Tipos de dados do Pydantic.</li> </ul>"},{"location":"tutorial/extra-data-types/#exemplo","title":"Exemplo","text":"<p>Aqui est\u00e1 um exemplo de opera\u00e7\u00e3o de rota com par\u00e2metros utilizando-se de alguns dos tipos acima.</p> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Union[datetime, None] = Body(default=None),\n    end_datetime: Union[datetime, None] = Body(default=None),\n    repeat_at: Union[time, None] = Body(default=None),\n    process_after: Union[timedelta, None] = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"repeat_at\": repeat_at,\n        \"process_after\": process_after,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Note que os par\u00e2metros dentro da fun\u00e7\u00e3o tem seu tipo de dados natural, e voc\u00ea pode, por exemplo, realizar manipula\u00e7\u00f5es normais de data, como:</p> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Union[datetime, None] = Body(default=None),\n    end_datetime: Union[datetime, None] = Body(default=None),\n    repeat_at: Union[time, None] = Body(default=None),\n    process_after: Union[timedelta, None] = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"repeat_at\": repeat_at,\n        \"process_after\": process_after,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre>"},{"location":"tutorial/extra-models/","title":"Modelos Adicionais","text":"<p>Continuando com o exemplo anterior, ser\u00e1 comum ter mais de um modelo relacionado.</p> <p>Isso \u00e9 especialmente o caso para modelos de usu\u00e1rios, porque:</p> <ul> <li>O modelo de entrada precisa ser capaz de ter uma senha.</li> <li>O modelo de sa\u00edda n\u00e3o deve ter uma senha.</li> <li>O modelo de banco de dados provavelmente precisaria ter uma senha criptografada.</li> </ul> <p>Danger</p> <p>Nunca armazene senhas em texto simples dos usu\u00e1rios. Sempre armazene uma \"hash segura\" que voc\u00ea pode verificar depois.</p> <p>Se n\u00e3o souber, voc\u00ea aprender\u00e1 o que \u00e9 uma \"senha hash\" nos cap\u00edtulos de seguran\u00e7a.</p>"},{"location":"tutorial/extra-models/#multiplos-modelos","title":"M\u00faltiplos modelos","text":"<p>Aqui est\u00e1 uma ideia geral de como os modelos poderiam parecer com seus campos de senha e os lugares onde s\u00e3o usados:</p> Python 3.8 and abovePython 3.10 and above <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre> <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre>"},{"location":"tutorial/extra-models/#sobre-user_indict","title":"Sobre <code>**user_in.dict()</code>","text":""},{"location":"tutorial/extra-models/#o-dict-do-pydantic","title":"O <code>.dict()</code> do Pydantic","text":"<p><code>user_in</code> \u00e9 um modelo Pydantic da classe <code>UserIn</code>.</p> <p>Os modelos Pydantic possuem um m\u00e9todo <code>.dict()</code> que retorna um <code>dict</code> com os dados do modelo.</p> <p>Ent\u00e3o, se criarmos um objeto Pydantic <code>user_in</code> como:</p> <pre><code>user_in = UserIn(username=\"john\", password=\"secret\", email=\"john.doe@example.com\")\n</code></pre> <p>e depois chamarmos:</p> <pre><code>user_dict = user_in.dict()\n</code></pre> <p>agora temos um <code>dict</code> com os dados na vari\u00e1vel <code>user_dict</code> (\u00e9 um <code>dict</code> em vez de um objeto de modelo Pydantic).</p> <p>E se chamarmos:</p> <pre><code>print(user_dict)\n</code></pre> <p>ter\u00edamos um <code>dict</code> Python com:</p> <pre><code>{\n    'username': 'john',\n    'password': 'secret',\n    'email': 'john.doe@example.com',\n    'full_name': None,\n}\n</code></pre>"},{"location":"tutorial/extra-models/#desembrulhando-um-dict","title":"Desembrulhando um <code>dict</code>","text":"<p>Se tomarmos um <code>dict</code> como <code>user_dict</code> e passarmos para uma fun\u00e7\u00e3o (ou classe) com <code>**user_dict</code>, o Python ir\u00e1 \"desembrulh\u00e1-lo\". Ele passar\u00e1 as chaves e valores do <code>user_dict</code> diretamente como argumentos chave-valor.</p> <p>Ent\u00e3o, continuando com o <code>user_dict</code> acima, escrevendo:</p> <pre><code>UserInDB(**user_dict)\n</code></pre> <p>Resultaria em algo equivalente a:</p> <pre><code>UserInDB(\n    username=\"john\",\n    password=\"secret\",\n    email=\"john.doe@example.com\",\n    full_name=None,\n)\n</code></pre> <p>Ou mais exatamente, usando <code>user_dict</code> diretamente, com qualquer conte\u00fado que ele possa ter no futuro:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    password = user_dict[\"password\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n)\n</code></pre>"},{"location":"tutorial/extra-models/#um-modelo-pydantic-a-partir-do-conteudo-de-outro","title":"Um modelo Pydantic a partir do conte\u00fado de outro","text":"<p>Como no exemplo acima, obtivemos o <code>user_dict</code> a partir do <code>user_in.dict()</code>, este c\u00f3digo:</p> <pre><code>user_dict = user_in.dict()\nUserInDB(**user_dict)\n</code></pre> <p>seria equivalente a:</p> <pre><code>UserInDB(**user_in.dict())\n</code></pre> <p>...porque <code>user_in.dict()</code> \u00e9 um <code>dict</code>, e depois fazemos o Python \"desembrulh\u00e1-lo\" passando-o para UserInDB precedido por <code>**</code>.</p> <p>Ent\u00e3o, obtemos um modelo Pydantic a partir dos dados em outro modelo Pydantic.</p>"},{"location":"tutorial/extra-models/#desembrulhando-um-dict-e-palavras-chave-extras","title":"Desembrulhando um <code>dict</code> e palavras-chave extras","text":"<p>E, ent\u00e3o, adicionando o argumento de palavra-chave extra <code>hashed_password=hashed_password</code>, como em:</p> <pre><code>UserInDB(**user_in.dict(), hashed_password=hashed_password)\n</code></pre> <p>...acaba sendo como:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    password = user_dict[\"password\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n    hashed_password = hashed_password,\n)\n</code></pre> <p>Warning</p> <p>As fun\u00e7\u00f5es adicionais de suporte s\u00e3o apenas para demonstra\u00e7\u00e3o de um fluxo poss\u00edvel dos dados, mas \u00e9 claro que elas n\u00e3o fornecem seguran\u00e7a real.</p>"},{"location":"tutorial/extra-models/#reduzir-duplicacao","title":"Reduzir duplica\u00e7\u00e3o","text":"<p>Reduzir a duplica\u00e7\u00e3o de c\u00f3digo \u00e9 uma das ideias principais no ReadyAPI.</p> <p>A duplica\u00e7\u00e3o de c\u00f3digo aumenta as chances de bugs, problemas de seguran\u00e7a, problemas de desincroniza\u00e7\u00e3o de c\u00f3digo (quando voc\u00ea atualiza em um lugar, mas n\u00e3o em outros), etc.</p> <p>E esses modelos est\u00e3o compartilhando muitos dos dados e duplicando nomes e tipos de atributos.</p> <p>N\u00f3s poder\u00edamos fazer melhor.</p> <p>Podemos declarar um modelo <code>UserBase</code> que serve como base para nossos outros modelos. E ent\u00e3o podemos fazer subclasses desse modelo que herdam seus atributos (declara\u00e7\u00f5es de tipo, valida\u00e7\u00e3o, etc.).</p> <p>Toda convers\u00e3o de dados, valida\u00e7\u00e3o, documenta\u00e7\u00e3o, etc. ainda funcionar\u00e1 normalmente.</p> <p>Dessa forma, podemos declarar apenas as diferen\u00e7as entre os modelos (com <code>password</code> em texto claro, com <code>hashed_password</code> e sem senha):</p> Python 3.8 and abovePython 3.10 and above <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre> <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre>"},{"location":"tutorial/extra-models/#union-ou-anyof","title":"<code>Union</code> ou <code>anyOf</code>","text":"<p>Voc\u00ea pode declarar uma resposta como o <code>Union</code> de dois tipos, o que significa que a resposta seria qualquer um dos dois.</p> <p>Isso ser\u00e1 definido no OpenAPI com <code>anyOf</code>.</p> <p>Para fazer isso, use a dica de tipo padr\u00e3o do Python <code>typing.Union</code>:</p> <p>Note</p> <p>Ao definir um <code>Union</code>, inclua o tipo mais espec\u00edfico primeiro, seguido pelo tipo menos espec\u00edfico. No exemplo abaixo, o tipo mais espec\u00edfico <code>PlaneItem</code> vem antes de <code>CarItem</code> em <code>Union[PlaneItem, CarItem]</code>.</p> Python 3.8 and abovePython 3.10 and above <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseItem(BaseModel):\n    description: str\n    type: str\n\n\nclass CarItem(BaseItem):\n    type: str = \"car\"\n\n\nclass PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int\n\n\nitems = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseItem(BaseModel):\n    description: str\n    type: str\n\n\nclass CarItem(BaseItem):\n    type: str = \"car\"\n\n\nclass PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int\n\n\nitems = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre>"},{"location":"tutorial/extra-models/#union-no-python-310","title":"<code>Union</code> no Python 3.10","text":"<p>Neste exemplo, passamos <code>Union[PlaneItem, CarItem]</code> como o valor do argumento <code>response_model</code>.</p> <p>Dado que estamos passando-o como um valor para um argumento em vez de coloc\u00e1-lo em uma anota\u00e7\u00e3o de tipo, precisamos usar <code>Union</code> mesmo no Python 3.10.</p> <p>Se estivesse em uma anota\u00e7\u00e3o de tipo, poder\u00edamos ter usado a barra vertical, como:</p> <pre><code>some_variable: PlaneItem | CarItem\n</code></pre> <p>Mas se colocarmos isso em <code>response_model=PlaneItem | CarItem</code> ter\u00edamos um erro, pois o Python tentaria executar uma opera\u00e7\u00e3o inv\u00e1lida entre <code>PlaneItem</code> e <code>CarItem</code> em vez de interpretar isso como uma anota\u00e7\u00e3o de tipo.</p>"},{"location":"tutorial/extra-models/#lista-de-modelos","title":"Lista de modelos","text":"<p>Da mesma forma, voc\u00ea pode declarar respostas de listas de objetos.</p> <p>Para isso, use o padr\u00e3o Python <code>typing.List</code> (ou simplesmente <code>list</code> no Python 3.9 e superior):</p> Python 3.8 and abovePython 3.9 and above <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\nitems = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def read_items():\n    return items\n</code></pre> <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\nitems = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items():\n    return items\n</code></pre>"},{"location":"tutorial/extra-models/#resposta-com-dict-arbitrario","title":"Resposta com <code>dict</code> arbitr\u00e1rio","text":"<p>Voc\u00ea tamb\u00e9m pode declarar uma resposta usando um simples <code>dict</code> arbitr\u00e1rio, declarando apenas o tipo das chaves e valores, sem usar um modelo Pydantic.</p> <p>Isso \u00e9 \u00fatil se voc\u00ea n\u00e3o souber os nomes de campo / atributo v\u00e1lidos (que seriam necess\u00e1rios para um modelo Pydantic) antecipadamente.</p> <p>Neste caso, voc\u00ea pode usar <code>typing.Dict</code> (ou simplesmente dict no Python 3.9 e superior):</p> Python 3.8 and abovePython 3.9 and above <pre><code>from typing import Dict\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/keyword-weights/\", response_model=Dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}\n</code></pre> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/keyword-weights/\", response_model=dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}\n</code></pre>"},{"location":"tutorial/extra-models/#em-resumo","title":"Em resumo","text":"<p>Use v\u00e1rios modelos Pydantic e herde livremente para cada caso.</p> <p>N\u00e3o \u00e9 necess\u00e1rio ter um \u00fanico modelo de dados por entidade se essa entidade precisar ter diferentes \"estados\". No caso da \"entidade\" de usu\u00e1rio com um estado que inclui <code>password</code>, <code>password_hash</code> e sem senha.</p>"},{"location":"tutorial/first-steps/","title":"Primeiros Passos","text":"<p>O arquivo ReadyAPI mais simples pode se parecer com:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Copie o conte\u00fado para um arquivo <code>main.py</code>.</p> <p>Execute o servidor:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started reloader process [28720]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started server process [28722]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Waiting for application startup.\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Application startup complete.\n</code></pre> <p>Nota</p> <p>O comando <code>uvicorn main:app</code> se refere a:</p> <ul> <li><code>main</code>: o arquivo <code>main.py</code> (o \"m\u00f3dulo\" Python).</li> <li><code>app</code>: o objeto criado no arquivo <code>main.py</code> com a linha <code>app = ReadyAPI()</code>.</li> <li><code>--reload</code>: faz o servidor reiniciar ap\u00f3s mudan\u00e7as de c\u00f3digo. Use apenas para desenvolvimento.</li> </ul> <p>Na sa\u00edda, temos:</p> <pre><code>INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Essa linha mostra a URL onde a sua aplica\u00e7\u00e3o est\u00e1 sendo servida, que nesse caso \u00e9 a sua m\u00e1quina local.</p>"},{"location":"tutorial/first-steps/#confira","title":"Confira","text":"<p>Abra o seu navegador em http://127.0.0.1:8000.</p> <p>Voc\u00ea ver\u00e1 essa resposta em JSON:</p> <pre><code>{\"message\": \"Hello World\"}\n</code></pre>"},{"location":"tutorial/first-steps/#documentacao-interativa-de-apis","title":"Documenta\u00e7\u00e3o Interativa de APIs","text":"<p>Agora v\u00e1 para http://127.0.0.1:8000/docs.</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o interativa autom\u00e1tica da API (fornecida por Swagger UI):</p> <p></p>"},{"location":"tutorial/first-steps/#documentacao-alternativa-de-apis","title":"Documenta\u00e7\u00e3o Alternativa de APIs","text":"<p>E agora, v\u00e1 para http://127.0.0.1:8000/redoc.</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o alternativa autom\u00e1tica (fornecida por ReDoc):</p> <p></p>"},{"location":"tutorial/first-steps/#openapi","title":"OpenAPI","text":"<p>O ReadyAPI gera um \"schema\" com toda a sua API usando o padr\u00e3o OpenAPI para definir APIs.</p>"},{"location":"tutorial/first-steps/#schema","title":"\"Schema\"","text":"<p>Um \"schema\" \u00e9 uma defini\u00e7\u00e3o ou descri\u00e7\u00e3o de algo. N\u00e3o o c\u00f3digo que o implementa, mas apenas uma descri\u00e7\u00e3o abstrata.</p>"},{"location":"tutorial/first-steps/#api-schema","title":"API \"schema\"","text":"<p>Nesse caso, OpenAPI \u00e9 uma especifica\u00e7\u00e3o que determina como definir um schema da sua API.</p> <p>Esta defini\u00e7\u00e3o de schema inclui as rotas da sua API, os par\u00e2metros poss\u00edveis que elas usam, etc.</p>"},{"location":"tutorial/first-steps/#schema-de-dados","title":"\"Schema\" de dados","text":"<p>O termo \"schema\" tamb\u00e9m pode se referir \u00e0 forma de alguns dados, como um conte\u00fado JSON.</p> <p>Nesse caso, significaria os atributos JSON e os tipos de dados que eles possuem, etc.</p>"},{"location":"tutorial/first-steps/#openapi-e-json-schema","title":"OpenAPI e JSON Schema","text":"<p>OpenAPI define um schema de API para sua API. E esse schema inclui defini\u00e7\u00f5es (ou \"schemas\") dos dados enviados e recebidos por sua API usando JSON Schema, o padr\u00e3o para schemas de dados JSON.</p>"},{"location":"tutorial/first-steps/#verifique-o-openapijson","title":"Verifique o <code>openapi.json</code>","text":"<p>Se voc\u00ea est\u00e1 curioso(a) sobre a apar\u00eancia do schema bruto OpenAPI, o ReadyAPI gera automaticamente um JSON (schema) com as descri\u00e7\u00f5es de toda a sua API.</p> <p>Voc\u00ea pode ver isso diretamente em: http://127.0.0.1:8000/openapi.json.</p> <p>Ele mostrar\u00e1 um JSON come\u00e7ando com algo como:</p> <pre><code>{\n    \"openapi\": \"3.0.2\",\n    \"info\": {\n        \"title\": \"ReadyAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"/items/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n\n\n\n...\n</code></pre>"},{"location":"tutorial/first-steps/#para-que-serve-o-openapi","title":"Para que serve o OpenAPI","text":"<p>O schema OpenAPI \u00e9 o que possibilita os dois sistemas de documenta\u00e7\u00e3o interativos mostrados.</p> <p>E existem dezenas de alternativas, todas baseadas em OpenAPI. Voc\u00ea pode facilmente adicionar qualquer uma dessas alternativas \u00e0 sua aplica\u00e7\u00e3o criada com ReadyAPI.</p> <p>Voc\u00ea tamb\u00e9m pode us\u00e1-lo para gerar c\u00f3digo automaticamente para clientes que se comunicam com sua API. Por exemplo, aplicativos front-end, m\u00f3veis ou IoT.</p>"},{"location":"tutorial/first-steps/#recapitulando-passo-a-passo","title":"Recapitulando, passo a passo","text":""},{"location":"tutorial/first-steps/#passo-1-importe-readyapi","title":"Passo 1: importe <code>ReadyAPI</code>","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p><code>ReadyAPI</code> \u00e9 uma classe Python que fornece todas as funcionalidades para sua API.</p> <p>Detalhes t\u00e9cnicos</p> <p><code>ReadyAPI</code> \u00e9 uma classe que herda diretamente de <code>Starlette</code>.</p> <p>Voc\u00ea pode usar todas as funcionalidades do Starlette com <code>ReadyAPI</code> tamb\u00e9m.</p>"},{"location":"tutorial/first-steps/#passo-2-crie-uma-instancia-de-readyapi","title":"Passo 2: crie uma \"inst\u00e2ncia\" de <code>ReadyAPI</code>","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Aqui, a vari\u00e1vel <code>app</code> ser\u00e1 uma \"inst\u00e2ncia\" da classe <code>ReadyAPI</code>.</p> <p>Este ser\u00e1 o principal ponto de intera\u00e7\u00e3o para criar toda a sua API.</p> <p>Este <code>app</code> \u00e9 o mesmo referenciado por <code>uvicorn</code> no comando:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Se voc\u00ea criar a sua aplica\u00e7\u00e3o como:</p> <pre><code>from readyapi import ReadyAPI\n\nmy_awesome_api = ReadyAPI()\n\n\n@my_awesome_api.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>E colocar em um arquivo <code>main.py</code>, voc\u00ea iria chamar o <code>uvicorn</code> assim:</p> <pre><code>$ uvicorn main:my_awesome_api --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"tutorial/first-steps/#passo-3-crie-uma-rota","title":"Passo 3: crie uma rota","text":""},{"location":"tutorial/first-steps/#rota","title":"Rota","text":"<p>\"Rota\" aqui se refere \u00e0 \u00faltima parte da URL, come\u00e7ando do primeiro <code>/</code>.</p> <p>Ent\u00e3o, em uma URL como:</p> <pre><code>https://example.com/items/foo\n</code></pre> <p>...a rota seria:</p> <pre><code>/items/foo\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Uma \"rota\" tamb\u00e9m \u00e9 comumente chamada de \"endpoint\".</p> <p>Ao construir uma API, a \"rota\" \u00e9 a principal forma de separar \"preocupa\u00e7\u00f5es\" e \"recursos\".</p>"},{"location":"tutorial/first-steps/#operacao","title":"Opera\u00e7\u00e3o","text":"<p>\"Opera\u00e7\u00e3o\" aqui se refere a um dos \"m\u00e9todos\" HTTP.</p> <p>Um dos:</p> <ul> <li><code>POST</code></li> <li><code>GET</code></li> <li><code>PUT</code></li> <li><code>DELETE</code></li> </ul> <p>...e os mais ex\u00f3ticos:</p> <ul> <li><code>OPTIONS</code></li> <li><code>HEAD</code></li> <li><code>PATCH</code></li> <li><code>TRACE</code></li> </ul> <p>No protocolo HTTP, voc\u00ea pode se comunicar com cada rota usando um (ou mais) desses \"m\u00e9todos\".</p> <p>Ao construir APIs, voc\u00ea normalmente usa esses m\u00e9todos HTTP para executar uma a\u00e7\u00e3o espec\u00edfica.</p> <p>Normalmente voc\u00ea usa:</p> <ul> <li><code>POST</code>: para criar dados.</li> <li><code>GET</code>: para ler dados.</li> <li><code>PUT</code>: para atualizar dados.</li> <li><code>DELETE</code>: para deletar dados.</li> </ul> <p>Portanto, no OpenAPI, cada um dos m\u00e9todos HTTP \u00e9 chamado de \"opera\u00e7\u00e3o\".</p> <p>Vamos cham\u00e1-los de \"opera\u00e7\u00f5es\" tamb\u00e9m.</p>"},{"location":"tutorial/first-steps/#defina-um-decorador-de-rota","title":"Defina um decorador de rota","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>O <code>@app.get(\"/\")</code> diz ao ReadyAPI que a fun\u00e7\u00e3o logo abaixo \u00e9 respons\u00e1vel por tratar as requisi\u00e7\u00f5es que v\u00e3o para:</p> <ul> <li>a rota <code>/</code></li> <li>usando o  operador <code>get</code></li> </ul> <p><code>@decorador</code></p> <p>Essa sintaxe <code>@alguma_coisa</code> em Python \u00e9 chamada de \"decorador\".</p> <p>Voc\u00ea o coloca em cima de uma fun\u00e7\u00e3o. Como um chap\u00e9u decorativo (acho que \u00e9 da\u00ed que vem o termo).</p> <p>Um \"decorador\" pega a fun\u00e7\u00e3o abaixo e faz algo com ela.</p> <p>Em nosso caso, este decorador informa ao ReadyAPI que a fun\u00e7\u00e3o abaixo corresponde a rota <code>/</code> com uma opera\u00e7\u00e3o <code>get</code>.</p> <p>\u00c9 o \"decorador de rota\".</p> <p>Voc\u00ea tamb\u00e9m pode usar as outras opera\u00e7\u00f5es:</p> <ul> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> </ul> <p>E os mais ex\u00f3ticos:</p> <ul> <li><code>@app.options()</code></li> <li><code>@app.head()</code></li> <li><code>@app.patch()</code></li> <li><code>@app.trace()</code></li> </ul> <p>Dica</p> <p>Voc\u00ea est\u00e1 livre para usar cada opera\u00e7\u00e3o (m\u00e9todo HTTP) como desejar.</p> <p>O ReadyAPI n\u00e3o imp\u00f5e nenhum significado espec\u00edfico.</p> <p>As informa\u00e7\u00f5es aqui s\u00e3o apresentadas como uma orienta\u00e7\u00e3o, n\u00e3o uma exig\u00eancia.</p> <p>Por exemplo, ao usar GraphQL, voc\u00ea normalmente executa todas as a\u00e7\u00f5es usando apenas opera\u00e7\u00f5es <code>POST</code>.</p>"},{"location":"tutorial/first-steps/#passo-4-defina-uma-funcao-de-rota","title":"Passo 4: defina uma fun\u00e7\u00e3o de rota","text":"<p>Esta \u00e9 a nossa \"fun\u00e7\u00e3o de rota\":</p> <ul> <li>rota: \u00e9 <code>/</code>.</li> <li>opera\u00e7\u00e3o: \u00e9 <code>get</code>.</li> <li>fun\u00e7\u00e3o: \u00e9 a fun\u00e7\u00e3o abaixo do \"decorador\" (abaixo do <code>@app.get(\"/\")</code>).</li> </ul> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Esta \u00e9 uma fun\u00e7\u00e3o Python.</p> <p>Ela ser\u00e1 chamada pelo ReadyAPI sempre que receber uma requisi\u00e7\u00e3o para a URL \"<code>/</code>\" usando uma opera\u00e7\u00e3o <code>GET</code>.</p> <p>Neste caso, \u00e9 uma fun\u00e7\u00e3o <code>ass\u00edncrona</code>.</p> <p>Voc\u00ea tamb\u00e9m pode defini-la como uma fun\u00e7\u00e3o normal em vez de <code>async def</code>:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Nota</p> <p>Se voc\u00ea n\u00e3o sabe a diferen\u00e7a, verifique o Async: \"Com pressa?\".</p>"},{"location":"tutorial/first-steps/#passo-5-retorne-o-conteudo","title":"Passo 5: retorne o conte\u00fado","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Voc\u00ea pode retornar um <code>dict</code>, <code>list</code> e valores singulares como <code>str</code>, <code>int</code>, etc.</p> <p>Voc\u00ea tamb\u00e9m pode devolver modelos Pydantic (voc\u00ea ver\u00e1 mais sobre isso mais tarde).</p> <p>Existem muitos outros objetos e modelos que ser\u00e3o convertidos automaticamente para JSON (incluindo ORMs, etc). Tente usar seus favoritos, \u00e9 altamente prov\u00e1vel que j\u00e1 sejam compat\u00edveis.</p>"},{"location":"tutorial/first-steps/#recapitulando","title":"Recapitulando","text":"<ul> <li>Importe <code>ReadyAPI</code>.</li> <li>Crie uma inst\u00e2ncia do <code>app</code>.</li> <li>Coloque o decorador que define a opera\u00e7\u00e3o (como <code>@app.get(\"/\")</code>).</li> <li>Escreva uma fun\u00e7\u00e3o para a opera\u00e7\u00e3o da rota (como <code>def root(): ...</code>) abaixo.</li> <li>Execute o servidor de desenvolvimento (como <code>uvicorn main:app --reload</code>).</li> </ul>"},{"location":"tutorial/handling-errors/","title":"Manipula\u00e7\u00e3o de erros","text":"<p>H\u00e1 diversas situa\u00e7\u00f5es em que voc\u00ea precisa notificar um erro a um cliente que est\u00e1 utilizando a sua API.</p> <p>Esse cliente pode ser um browser com um frontend, o c\u00f3digo de outra pessoa, um dispositivo IoT, etc.</p> <p>Pode ser que voc\u00ea precise comunicar ao cliente que:</p> <ul> <li>O cliente n\u00e3o tem direitos para realizar aquela opera\u00e7\u00e3o.</li> <li>O cliente n\u00e3o tem acesso aquele recurso.</li> <li>O item que o cliente est\u00e1 tentando acessar n\u00e3o existe.</li> <li>etc.</li> </ul> <p>Nesses casos, voc\u00ea normalmente retornaria um HTTP status code pr\u00f3ximo ao status code na faixa do status code 400 (do 400 ao 499).</p> <p>Isso \u00e9 bastante similar ao caso do HTTP status code 200 (do 200 ao 299). Esses \"200\" status codes significam que, de algum modo, houve sucesso na requisi\u00e7\u00e3o.</p> <p>Os status codes na faixa dos 400 significam que houve um erro por parte do cliente.</p> <p>Voc\u00ea se lembra de todos aqueles erros (e piadas) a respeito do \"404 Not Found\"?</p>"},{"location":"tutorial/handling-errors/#use-o-httpexception","title":"Use o <code>HTTPException</code>","text":"<p>Para retornar ao cliente responses HTTP com erros, use o <code>HTTPException</code>.</p>"},{"location":"tutorial/handling-errors/#import-httpexception","title":"Import <code>HTTPException</code>","text":"<pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#lance-o-httpexception-no-seu-codigo","title":"Lance o <code>HTTPException</code> no seu c\u00f3digo.","text":"<p><code>HTTPException</code>, ao fundo, nada mais \u00e9 do que a conjun\u00e7\u00e3o entre uma exce\u00e7\u00e3o comum do Python e informa\u00e7\u00f5es adicionais relevantes para APIs.</p> <p>E porque \u00e9 uma exce\u00e7\u00e3o do Python, voc\u00ea n\u00e3o retorna (return) o <code>HTTPException</code>, voc\u00ea lan\u00e7a o (raise) no seu c\u00f3digo.</p> <p>Isso tamb\u00e9m significa que, se voc\u00ea est\u00e1 escrevendo uma fun\u00e7\u00e3o de utilidade, a qual voc\u00ea est\u00e1 chamando dentro da sua fun\u00e7\u00e3o de opera\u00e7\u00f5es de caminhos, e voc\u00ea lan\u00e7a o <code>HTTPException</code> dentro da fun\u00e7\u00e3o de utilidade, o resto do seu c\u00f3digo n\u00e3o ser\u00e1 executado dentro da fun\u00e7\u00e3o de opera\u00e7\u00f5es de caminhos. Ao contr\u00e1rio, o <code>HTTPException</code> ir\u00e1 finalizar a requisi\u00e7\u00e3o no mesmo instante e enviar\u00e1 o erro HTTP oriundo do <code>HTTPException</code> para o cliente.</p> <p>O benef\u00edcio de lan\u00e7ar uma exce\u00e7\u00e3o em vez de retornar um valor ficar\u00e1 mais evidente na se\u00e7\u00e3o sobre Depend\u00eancias e Seguran\u00e7a.</p> <p>Neste exemplo, quando o cliente pede, na requisi\u00e7\u00e3o, por um item cujo ID n\u00e3o existe, a exce\u00e7\u00e3o com o status code <code>404</code> \u00e9 lan\u00e7ada:</p> <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#a-response-resultante","title":"A response resultante","text":"<p>Se o cliente faz uma requisi\u00e7\u00e3o para <code>http://example.com/items/foo</code> (um <code>item_id</code> <code>\"foo\"</code>), esse cliente receber\u00e1 um HTTP status code 200, e uma resposta JSON:</p> <pre><code>{\n  \"item\": \"The Foo Wrestlers\"\n}\n</code></pre> <p>Mas se o cliente faz uma requisi\u00e7\u00e3o para <code>http://example.com/items/bar</code> (ou seja, um n\u00e3o existente <code>item_id \"bar\"</code>), esse cliente receber\u00e1 um HTTP status code 404 (o erro \"n\u00e3o encontrado\" \u2014 not found error), e uma resposta JSON:</p> <pre><code>{\n  \"detail\": \"Item not found\"\n}\n</code></pre> <p>Dica</p> <p>Quando voc\u00ea lan\u00e7ar um <code>HTTPException</code>, voc\u00ea pode passar qualquer valor convert\u00edvel em JSON como par\u00e2metro de <code>detail</code>, e n\u00e3o apenas <code>str</code>.</p> <p>Voc\u00ea pode passar um <code>dict</code> ou um <code>list</code>, etc. Esses tipos de dados s\u00e3o manipulados automaticamente pelo ReadyAPI e convertidos em JSON.</p>"},{"location":"tutorial/handling-errors/#adicione-headers-customizados","title":"Adicione headers customizados","text":"<p>H\u00e1 certas situa\u00e7\u00f5es em que \u00e9 bastante \u00fatil poder adicionar headers customizados no HTTP error. Exemplo disso seria adicionar headers customizados para tipos de seguran\u00e7a.</p> <p>Voc\u00ea provavelmente n\u00e3o precisar\u00e1 utilizar esses headers diretamente no seu c\u00f3digo.</p> <p>Mas caso voc\u00ea precise, para um cen\u00e1rio mais complexo, voc\u00ea pode adicionar headers customizados:</p> <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items-header/{item_id}\")\nasync def read_item_header(item_id: str):\n    if item_id not in items:\n        raise HTTPException(\n            status_code=404,\n            detail=\"Item not found\",\n            headers={\"X-Error\": \"There goes my error\"},\n        )\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#instalando-manipuladores-de-excecoes-customizados","title":"Instalando manipuladores de exce\u00e7\u00f5es customizados","text":"<p>Voc\u00ea pode adicionar manipuladores de exce\u00e7\u00e3o customizados com a mesma se\u00e7\u00e3o de utilidade de exce\u00e7\u00f5es presentes no Starlette</p> <p>Digamos que voc\u00ea tenha uma exce\u00e7\u00e3o customizada <code>UnicornException</code> que voc\u00ea (ou uma biblioteca que voc\u00ea use) precise lan\u00e7ar (<code>raise</code>).</p> <p>Nesse cen\u00e1rio, se voc\u00ea precisa manipular essa exce\u00e7\u00e3o de modo global com o ReadyAPI, voc\u00ea pode adicionar um manipulador de exce\u00e7\u00e3o customizada com <code>@app.exception_handler()</code>.</p> <pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import JSONResponse\n\n\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n\napp = ReadyAPI()\n\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n\n\n@app.get(\"/unicorns/{name}\")\nasync def read_unicorn(name: str):\n    if name == \"yolo\":\n        raise UnicornException(name=name)\n    return {\"unicorn_name\": name}\n</code></pre> <p>Nesse cen\u00e1rio, se voc\u00ea fizer uma requisi\u00e7\u00e3o para <code>/unicorns/yolo</code>, a opera\u00e7\u00e3o de caminho vai lan\u00e7ar (<code>raise</code>) o <code>UnicornException</code>.</p> <p>Essa exce\u00e7\u00e3o ser\u00e1 manipulada, contudo, pelo <code>unicorn_exception_handler</code>.</p> <p>Dessa forma voc\u00ea receber\u00e1 um erro \"limpo\", com o HTTP status code <code>418</code> e um JSON com o conte\u00fado:</p> <pre><code>{\"message\": \"Oops! yolo did something. There goes a rainbow...\"}\n</code></pre> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode usar <code>from starlette.requests import Request</code> and <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI disponibiliza o mesmo <code>starlette.responses</code> atrav\u00e9s do <code>readyapi.responses</code> por conveni\u00eancia ao desenvolvedor. Contudo, a maior parte das respostas dispon\u00edveis vem diretamente do Starlette. O mesmo acontece com o <code>Request</code>.</p>"},{"location":"tutorial/handling-errors/#sobrescreva-o-manipulador-padrao-de-excecoes","title":"Sobrescreva o manipulador padr\u00e3o de exce\u00e7\u00f5es","text":"<p>ReadyAPI tem alguns manipuladores padr\u00e3o de exce\u00e7\u00f5es.</p> <p>Esses manipuladores s\u00e3o os respons\u00e1veis por retornar o JSON padr\u00e3o de respostas quando voc\u00ea lan\u00e7a (<code>raise</code>) o <code>HTTPException</code> e quando a requisi\u00e7\u00e3o tem dados invalidos.</p> <p>Voc\u00ea pode sobrescrever esses manipuladores de exce\u00e7\u00e3o com os seus pr\u00f3prios manipuladores.</p>"},{"location":"tutorial/handling-errors/#sobrescreva-excecoes-de-validacao-da-requisicao","title":"Sobrescreva exce\u00e7\u00f5es de valida\u00e7\u00e3o da requisi\u00e7\u00e3o","text":"<p>Quando a requisi\u00e7\u00e3o cont\u00e9m dados inv\u00e1lidos, ReadyAPI internamente lan\u00e7a para o <code>RequestValidationError</code>.</p> <p>Para sobrescrev\u00ea-lo, importe o <code>RequestValidationError</code> e use-o com o <code>@app.exception_handler(RequestValidationError)</code> para decorar o manipulador de exce\u00e7\u00f5es.</p> <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>Se voc\u00ea for ao <code>/items/foo</code>, em vez de receber o JSON padr\u00e3o com o erro:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"path\",\n                \"item_id\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> <p>voc\u00ea receber\u00e1 a vers\u00e3o em texto:</p> <pre><code>1 validation error\npath -&gt; item_id\n  value is not a valid integer (type=type_error.integer)\n</code></pre>"},{"location":"tutorial/handling-errors/#requestvalidationerror-vs-validationerror","title":"<code>RequestValidationError</code> vs <code>ValidationError</code>","text":"<p>Aviso</p> <p>Voc\u00ea pode pular estes detalhes t\u00e9cnicos caso eles n\u00e3o sejam importantes para voc\u00ea neste momento.</p> <p><code>RequestValidationError</code> \u00e9 uma subclasse do <code>ValidationError</code> existente no Pydantic.</p> <p>ReadyAPI faz uso dele para que voc\u00ea veja o erro no seu log, caso voc\u00ea utilize um modelo de Pydantic em <code>response_model</code>, e seus dados tenham erro.</p> <p>Contudo, o cliente ou usu\u00e1rio n\u00e3o ter\u00e3o acesso a ele. Ao contr\u00e1rio, o cliente receber\u00e1 um \"Internal Server Error\" com o HTTP status code <code>500</code>.</p> <p>E assim deve ser porque seria um bug no seu c\u00f3digo ter o <code>ValidationError</code> do Pydantic na sua response, ou em qualquer outro lugar do seu c\u00f3digo (que n\u00e3o na requisi\u00e7\u00e3o do cliente).</p> <p>E enquanto voc\u00ea conserta o bug, os clientes / usu\u00e1rios n\u00e3o deveriam ter acesso \u00e0s informa\u00e7\u00f5es internas do erro, porque, desse modo, haveria exposi\u00e7\u00e3o de uma vulnerabilidade de seguran\u00e7a.</p> <p>Do mesmo modo, voc\u00ea pode sobreescrever o <code>HTTPException</code>.</p> <p>Por exemplo, voc\u00ea pode querer retornar uma response em plain text ao inv\u00e9s de um JSON para os seguintes erros:</p> <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea pode usar <code>from starlette.responses import PlainTextResponse</code>.</p> <p>ReadyAPI disponibiliza o mesmo <code>starlette.responses</code> como <code>readyapi.responses</code>, como conveni\u00eancia a voc\u00ea, desenvolvedor. Contudo, a maior parte das respostas dispon\u00edveis vem diretamente do Starlette.</p>"},{"location":"tutorial/handling-errors/#use-o-body-do-requestvalidationerror","title":"Use o body do <code>RequestValidationError</code>.","text":"<p>O <code>RequestValidationError</code> cont\u00e9m o <code>body</code> que ele recebeu de dados inv\u00e1lidos.</p> <p>Voc\u00ea pode utiliz\u00e1-lo enquanto desenvolve seu app para conectar o body e debug\u00e1-lo, e assim retorn\u00e1-lo ao usu\u00e1rio, etc.</p> <p>Tente enviar um item inv\u00e1lido como este:</p> <pre><code>{\n  \"title\": \"towel\",\n  \"size\": \"XL\"\n}\n</code></pre> <p>Voc\u00ea receber\u00e1 uma response informando-o de que a data \u00e9 inv\u00e1lida, e contendo o body recebido:</p> <pre><code>{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"body\",\n        \"size\"\n      ],\n      \"msg\": \"value is not a valid integer\",\n      \"type\": \"type_error.integer\"\n    }\n  ],\n  \"body\": {\n    \"title\": \"towel\",\n    \"size\": \"XL\"\n  }\n}\n</code></pre>"},{"location":"tutorial/handling-errors/#o-httpexception-do-readyapi-vs-o-httpexception-do-starlette","title":"O <code>HTTPException</code> do ReadyAPI vs o <code>HTTPException</code> do Starlette.","text":"<p>O ReadyAPI tem o seu pr\u00f3prio <code>HTTPException</code>.</p> <p>E a classe de erro <code>HTTPException</code> do ReadyAPI herda da classe de erro do <code>HTTPException</code> do Starlette.</p> <p>A diferen\u00e7a entre os dois \u00e9 a de que o <code>HTTPException</code> do ReadyAPI permite que voc\u00ea adicione headers que ser\u00e3o inclu\u00eddos nas responses.</p> <p>Esses headers s\u00e3o necess\u00e1rios/utilizados internamente pelo OAuth 2.0 e tamb\u00e9m por outras utilidades de seguran\u00e7a.</p> <p>Portanto, voc\u00ea pode continuar lan\u00e7ando o <code>HTTPException</code> do ReadyAPI normalmente no seu c\u00f3digo.</p> <p>Por\u00e9m, quando voc\u00ea registrar um manipulador de exce\u00e7\u00e3o, voc\u00ea deve registr\u00e1-lo atrav\u00e9s do <code>HTTPException</code> do Starlette.</p> <p>Dessa forma, se qualquer parte do c\u00f3digo interno, extens\u00e3o ou plug-in do Starlette lan\u00e7ar o <code>HTTPException</code>, o seu manipulador de exce\u00e7\u00e3o poder\u00e1 capturar esse lan\u00e7amento e trat\u00e1-lo.</p> <pre><code>from starlette.exceptions import HTTPException as StarletteHTTPException\n</code></pre>"},{"location":"tutorial/handling-errors/#re-use-os-manipulares-de-excecao-do-readyapi","title":"Re-use os manipulares de exce\u00e7\u00e3o do ReadyAPI","text":"<p>Se voc\u00ea quer usar a exce\u00e7\u00e3o em conjunto com o mesmo manipulador de exce\u00e7\u00e3o default do ReadyAPI, voc\u00ea pode importar e re-usar esses manipuladores de exce\u00e7\u00e3o do <code>readyapi.exception_handlers</code>:</p> <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exception_handlers import (\n    http_exception_handler,\n    request_validation_exception_handler,\n)\nfrom readyapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def custom_http_exception_handler(request, exc):\n    print(f\"OMG! An HTTP error!: {repr(exc)}\")\n    return await http_exception_handler(request, exc)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    print(f\"OMG! The client sent invalid data!: {exc}\")\n    return await request_validation_exception_handler(request, exc)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>Nesse exemplo voc\u00ea apenas imprime (<code>print</code>) o erro com uma mensagem expressiva. Mesmo assim, d\u00e1 para pegar a ideia. Voc\u00ea pode usar a exce\u00e7\u00e3o e ent\u00e3o apenas re-usar o manipulador de exce\u00e7\u00e3o default.</p>"},{"location":"tutorial/header-params/","title":"Par\u00e2metros de Cabe\u00e7alho","text":"<p>Voc\u00ea pode definir par\u00e2metros de Cabe\u00e7alho da mesma maneira que define param\u00eatros com <code>Query</code>, <code>Path</code> e <code>Cookie</code>.</p>"},{"location":"tutorial/header-params/#importe-header","title":"importe <code>Header</code>","text":"<p>Primeiro importe <code>Header</code>:</p> Python 3.10+Python 3.8+ <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: str | None = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre>"},{"location":"tutorial/header-params/#declare-parametros-de-header","title":"Declare par\u00e2metros de <code>Header</code>","text":"<p>Ent\u00e3o declare os param\u00eatros de cabe\u00e7alho usando a mesma estrutura que em <code>Path</code>, <code>Query</code> e <code>Cookie</code>.</p> <p>O primeiro valor \u00e9 o valor padr\u00e3o, voc\u00ea pode passar todas as valida\u00e7\u00f5es adicionais ou par\u00e2metros de anota\u00e7\u00e3o:</p> Python 3.10+Python 3.8+ <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: str | None = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Detalhes T\u00e9cnicos</p> <p><code>Header</code> \u00e9 uma classe \"irm\u00e3\" de <code>Path</code>, <code>Query</code> e <code>Cookie</code>. Ela tamb\u00e9m herda da mesma classe em comum <code>Param</code>.</p> <p>Mas lembre-se que quando voc\u00ea importa <code>Query</code>, <code>Path</code>, <code>Header</code>, e outras de <code>readyapi</code>, elas s\u00e3o na verdade fun\u00e7\u00f5es que retornam classes especiais.</p> <p>Info</p> <p>Para declarar headers, voc\u00ea precisa usar <code>Header</code>, caso contr\u00e1rio, os par\u00e2metros seriam interpretados como par\u00e2metros de consulta.</p>"},{"location":"tutorial/header-params/#conversao-automatica","title":"Convers\u00e3o autom\u00e1tica","text":"<p><code>Header</code> tem algumas funcionalidades a mais em rela\u00e7\u00e3o a <code>Path</code>, <code>Query</code> e <code>Cookie</code>.</p> <p>A maioria dos cabe\u00e7alhos padr\u00e3o s\u00e3o separados pelo caractere \"h\u00edfen\", tamb\u00e9m conhecido como \"sinal de menos\" (<code>-</code>).</p> <p>Mas uma vari\u00e1vel como <code>user-agent</code> \u00e9 inv\u00e1lida em Python.</p> <p>Portanto, por padr\u00e3o, <code>Header</code> converter\u00e1 os caracteres de nomes de par\u00e2metros de sublinhado (<code>_</code>) para h\u00edfen (<code>-</code>) para extrair e documentar os cabe\u00e7alhos.</p> <p>Al\u00e9m disso, os cabe\u00e7alhos HTTP n\u00e3o diferenciam mai\u00fasculas de min\u00fasculas, portanto, voc\u00ea pode declar\u00e1-los com o estilo padr\u00e3o do Python (tamb\u00e9m conhecido como \"snake_case\").</p> <p>Portanto, voc\u00ea pode usar <code>user_agent</code> como faria normalmente no c\u00f3digo Python, em vez de precisar colocar as primeiras letras em mai\u00fasculas como <code>User_Agent</code> ou algo semelhante.</p> <p>Se por algum motivo voc\u00ea precisar desabilitar a convers\u00e3o autom\u00e1tica de sublinhados para h\u00edfens, defina o par\u00e2metro <code>convert_underscores</code> de <code>Header</code> para <code>False</code>:</p> Python 3.10+Python 3.8+ <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: str | None = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Union[str, None] = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <p>Aviso</p> <p>Antes de definir <code>convert_underscores</code> como <code>False</code>, lembre-se de que alguns proxies e servidores HTTP n\u00e3o permitem o uso de cabe\u00e7alhos com sublinhados.</p>"},{"location":"tutorial/header-params/#cabecalhos-duplicados","title":"Cabe\u00e7alhos duplicados","text":"<p>\u00c9 poss\u00edvel receber cabe\u00e7alhos duplicados. Isso significa, o mesmo cabe\u00e7alho com v\u00e1rios valores.</p> <p>Voc\u00ea pode definir esses casos usando uma lista na declara\u00e7\u00e3o de tipo.</p> <p>Voc\u00ea receber\u00e1 todos os valores do cabe\u00e7alho duplicado como uma <code>list</code> Python.</p> <p>Por exemplo, para declarar um cabe\u00e7alho de <code>X-Token</code> que pode aparecer mais de uma vez, voc\u00ea pode escrever:</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: list[str] | None = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[list[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[List[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Se voc\u00ea se comunicar com essa opera\u00e7\u00e3o de caminho enviando dois cabe\u00e7alhos HTTP como:</p> <pre><code>X-Token: foo\nX-Token: bar\n</code></pre> <p>A resposta seria como:</p> <pre><code>{\n    \"X-Token values\": [\n        \"bar\",\n        \"foo\"\n    ]\n}\n</code></pre>"},{"location":"tutorial/header-params/#recapitulando","title":"Recapitulando","text":"<p>Declare cabe\u00e7alhos com <code>Header</code>, usando o mesmo padr\u00e3o comum que utiliza-se em <code>Query</code>, <code>Path</code> e <code>Cookie</code>.</p> <p>E n\u00e3o se preocupe com sublinhados em suas vari\u00e1veis, ReadyAPI cuidar\u00e1 da convers\u00e3o deles.</p>"},{"location":"tutorial/path-operation-configuration/","title":"Configura\u00e7\u00e3o da Opera\u00e7\u00e3o de Rota","text":"<p>Existem v\u00e1rios par\u00e2metros que voc\u00ea pode passar para o seu decorador de opera\u00e7\u00e3o de rota para configur\u00e1-lo.</p> <p>Aviso</p> <p>Observe que esses par\u00e2metros s\u00e3o passados diretamente para o decorador de opera\u00e7\u00e3o de rota, n\u00e3o para a sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</p>"},{"location":"tutorial/path-operation-configuration/#codigo-de-status-da-resposta","title":"C\u00f3digo de Status da Resposta","text":"<p>Voc\u00ea pode definir o <code>status_code</code> (HTTP) para ser usado na resposta da sua opera\u00e7\u00e3o de rota.</p> <p>Voc\u00ea pode passar diretamente o c\u00f3digo <code>int</code>, como <code>404</code>.</p> <p>Mas se voc\u00ea n\u00e3o se lembrar o que cada c\u00f3digo num\u00e9rico significa, pode usar as constantes de atalho em <code>status</code>:</p> Python 3.8 and abovePython 3.9 and abovePython 3.10 and above <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>Esse c\u00f3digo de status ser\u00e1 usado na resposta e ser\u00e1 adicionado ao esquema OpenAPI.</p> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m poderia usar <code>from starlette import status</code>.</p> <p>ReadyAPI fornece o mesmo <code>starlette.status</code> como <code>readyapi.status</code> apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas vem diretamente do Starlette.</p>"},{"location":"tutorial/path-operation-configuration/#tags","title":"Tags","text":"<p>Voc\u00ea pode adicionar tags para sua opera\u00e7\u00e3o de rota, passe o par\u00e2metro <code>tags</code> com uma <code>list</code> de <code>str</code> (comumente apenas um <code>str</code>):</p> Python 3.8 and abovePython 3.9 and abovePython 3.10 and above <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> <p>Eles ser\u00e3o adicionados ao esquema OpenAPI e usados pelas interfaces de documenta\u00e7\u00e3o autom\u00e1tica:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#tags-com-enums","title":"Tags com Enums","text":"<p>Se voc\u00ea tem uma grande aplica\u00e7\u00e3o, voc\u00ea pode acabar acumulando v\u00e1rias tags, e voc\u00ea gostaria de ter certeza de que voc\u00ea sempre usa a mesma tag para opera\u00e7\u00f5es de rota relacionadas.</p> <p>Nestes casos, pode fazer sentido armazenar as tags em um <code>Enum</code>.</p> <p>ReadyAPI suporta isso da mesma maneira que com strings simples:</p> <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Tags(Enum):\n    items = \"items\"\n    users = \"users\"\n\n\n@app.get(\"/items/\", tags=[Tags.items])\nasync def get_items():\n    return [\"Portal gun\", \"Plumbus\"]\n\n\n@app.get(\"/users/\", tags=[Tags.users])\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n</code></pre>"},{"location":"tutorial/path-operation-configuration/#resumo-e-descricao","title":"Resumo e descri\u00e7\u00e3o","text":"<p>Voc\u00ea pode adicionar um <code>summary</code> e uma <code>description</code>:</p> Python 3.8 and abovePython 3.9 and abovePython 3.10 and above <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre> <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"tutorial/path-operation-configuration/#descricao-do-docstring","title":"Descri\u00e7\u00e3o do docstring","text":"<p>Como as descri\u00e7\u00f5es tendem a ser longas e cobrir v\u00e1rias linhas, voc\u00ea pode declarar a descri\u00e7\u00e3o da opera\u00e7\u00e3o de rota na docstring da fun\u00e7\u00e3o e o ReadyAPI ir\u00e1 l\u00ea-la de l\u00e1.</p> <p>Voc\u00ea pode escrever Markdown na docstring, ele ser\u00e1 interpretado e exibido corretamente (levando em conta a indenta\u00e7\u00e3o da docstring).</p> Python 3.8 and abovePython 3.9 and abovePython 3.10 and above <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <p>Ela ser\u00e1 usada nas documenta\u00e7\u00f5es interativas:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#descricao-da-resposta","title":"Descri\u00e7\u00e3o da resposta","text":"<p>Voc\u00ea pode especificar a descri\u00e7\u00e3o da resposta com o par\u00e2metro <code>response_description</code>:</p> Python 3.8 and abovePython 3.9 and abovePython 3.10 and above <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Note que <code>response_description</code> se refere especificamente \u00e0 resposta, a <code>description</code> se refere \u00e0 opera\u00e7\u00e3o de rota em geral.</p> <p>Check</p> <p>OpenAPI especifica que cada opera\u00e7\u00e3o de rota requer uma descri\u00e7\u00e3o de resposta.</p> <p>Ent\u00e3o, se voc\u00ea n\u00e3o fornecer uma, o ReadyAPI ir\u00e1 gerar automaticamente uma de \"Resposta bem-sucedida\".</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#depreciar-uma-operacao-de-rota","title":"Depreciar uma opera\u00e7\u00e3o de rota","text":"<p>Se voc\u00ea precisar marcar uma opera\u00e7\u00e3o de rota como descontinuada, mas sem remov\u00ea-la, passe o par\u00e2metro <code>deprecated</code>:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n\n\n@app.get(\"/elements/\", tags=[\"items\"], deprecated=True)\nasync def read_elements():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Ela ser\u00e1 claramente marcada como descontinuada nas documenta\u00e7\u00f5es interativas:</p> <p></p> <p>Verifique como opera\u00e7\u00f5es de rota descontinuadas e n\u00e3o descontinuadas se parecem:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#resumindo","title":"Resumindo","text":"<p>Voc\u00ea pode configurar e adicionar metadados para suas opera\u00e7\u00f5es de rota facilmente passando par\u00e2metros para os decoradores de opera\u00e7\u00e3o de rota.</p>"},{"location":"tutorial/path-params-numeric-validations/","title":"Par\u00e2metros da Rota e Valida\u00e7\u00f5es Num\u00e9ricas","text":"<p>Do mesmo modo que voc\u00ea pode declarar mais valida\u00e7\u00f5es e metadados para par\u00e2metros de consulta com <code>Query</code>, voc\u00ea pode declarar os mesmos tipos de valida\u00e7\u00f5es e metadados para par\u00e2metros de rota com <code>Path</code>.</p>"},{"location":"tutorial/path-params-numeric-validations/#importe-path","title":"Importe <code>Path</code>","text":"<p>Primeiro, importe <code>Path</code> de <code>readyapi</code>:</p> Python 3.10+Python 3.8+ <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#declare-metadados","title":"Declare metadados","text":"<p>Voc\u00ea pode declarar todos os par\u00e2metros da mesma maneira que na <code>Query</code>.</p> <p>Por exemplo para declarar um valor de metadado <code>title</code> para o par\u00e2metro de rota <code>item_id</code> voc\u00ea pode digitar:</p> Python 3.10+Python 3.8+ <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Nota</p> <p>Um par\u00e2metro de rota \u00e9 sempre obrigat\u00f3rio, como se fizesse parte da rota.</p> <p>Ent\u00e3o, voc\u00ea deve declar\u00e1-lo com <code>...</code> para marc\u00e1-lo como obrigat\u00f3rio.</p> <p>Mesmo que voc\u00ea declare-o como <code>None</code> ou defina um valor padr\u00e3o, isso n\u00e3o teria efeito algum, o par\u00e2metro ainda seria obrigat\u00f3rio.</p>"},{"location":"tutorial/path-params-numeric-validations/#ordene-os-parametros-de-acordo-com-sua-necessidade","title":"Ordene os par\u00e2metros de acordo com sua necessidade","text":"<p>Suponha que voc\u00ea queira declarar o par\u00e2metro de consulta <code>q</code> como uma <code>str</code> obrigat\u00f3ria.</p> <p>E voc\u00ea n\u00e3o precisa declarar mais nada em rela\u00e7\u00e3o a este par\u00e2metro, ent\u00e3o voc\u00ea n\u00e3o precisa necessariamente usar <code>Query</code>.</p> <p>Mas voc\u00ea ainda precisa usar <code>Path</code> para o par\u00e2metro de rota <code>item_id</code>.</p> <p>O Python ir\u00e1 acusar se voc\u00ea colocar um elemento com um valor padr\u00e3o definido antes de outro que n\u00e3o tenha um valor padr\u00e3o.</p> <p>Mas voc\u00ea pode reorden\u00e1-los, colocando primeiro o elemento sem o valor padr\u00e3o (o par\u00e2metro de consulta <code>q</code>).</p> <p>Isso n\u00e3o faz diferen\u00e7a para o ReadyAPI. Ele vai detectar os par\u00e2metros pelos seus nomes, tipos e defini\u00e7\u00f5es padr\u00e3o (<code>Query</code>, <code>Path</code>, etc), sem se importar com a ordem.</p> <p>Ent\u00e3o, voc\u00ea pode declarar sua fun\u00e7\u00e3o assim:</p> <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#ordene-os-parametros-de-a-acordo-com-sua-necessidade-truques","title":"Ordene os par\u00e2metros de a acordo com sua necessidade, truques","text":"<p>Se voc\u00ea quiser declarar o par\u00e2metro de consulta <code>q</code> sem um <code>Query</code> nem um valor padr\u00e3o, e o par\u00e2metro de rota <code>item_id</code> usando <code>Path</code>, e defin\u00ed-los em uma ordem diferente, Python tem um pequeno truque na sintaxe para isso.</p> <p>Passe <code>*</code>, como o primeiro par\u00e2metro da fun\u00e7\u00e3o.</p> <p>O Python n\u00e3o vai fazer nada com esse <code>*</code>, mas ele vai saber que a partir dali os par\u00e2metros seguintes dever\u00e3o ser chamados argumentos nomeados (pares chave-valor), tamb\u00e9m conhecidos como <code>kwargs</code>. Mesmo que eles n\u00e3o possuam um valor padr\u00e3o.</p> <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#validacoes-numericas-maior-que-ou-igual","title":"Valida\u00e7\u00f5es num\u00e9ricas: maior que ou igual","text":"<p>Com <code>Query</code> e <code>Path</code> (e outras que voc\u00ea ver\u00e1 mais tarde) voc\u00ea pode declarar restri\u00e7\u00f5es num\u00e9ricas.</p> <p>Aqui, com <code>ge=1</code>, <code>item_id</code> precisar\u00e1 ser um n\u00famero inteiro maior que (\"<code>g</code>reater than\") ou igual (\"<code>e</code>qual\") a 1.</p> <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#validacoes-numericas-maior-que-e-menor-que-ou-igual","title":"Valida\u00e7\u00f5es num\u00e9ricas: maior que e menor que ou igual","text":"<p>O mesmo se aplica para:</p> <ul> <li><code>gt</code>: maior que (<code>g</code>reater <code>t</code>han)</li> <li><code>le</code>: menor que ou igual (<code>l</code>ess than or <code>e</code>qual)</li> </ul> <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#validacoes-numericas-valores-do-tipo-float-maior-que-e-menor-que","title":"Valida\u00e7\u00f5es num\u00e9ricas: valores do tipo float, maior que e menor que","text":"<p>Valida\u00e7\u00f5es num\u00e9ricas tamb\u00e9m funcionam para valores do tipo <code>float</code>.</p> <p>Aqui \u00e9 onde se torna importante a possibilidade de declarar <code>gt</code> e n\u00e3o apenas <code>ge</code>. Com isso voc\u00ea pode especificar, por exemplo, que um valor deve ser maior que <code>0</code>, ainda que seja menor que <code>1</code>.</p> <p>Assim, <code>0.5</code> seria um valor v\u00e1lido. Mas <code>0.0</code> ou <code>0</code> n\u00e3o seria.</p> <p>E o mesmo para <code>lt</code>.</p> <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#recapitulando","title":"Recapitulando","text":"<p>Com <code>Query</code>, <code>Path</code> (e outras que voc\u00ea ainda n\u00e3o viu) voc\u00ea pode declarar metadados e valida\u00e7\u00f5es de texto do mesmo modo que com Par\u00e2metros de consulta e valida\u00e7\u00f5es de texto.</p> <p>E voc\u00ea tamb\u00e9m pode declarar valida\u00e7\u00f5es num\u00e9ricas:</p> <ul> <li><code>gt</code>: maior que (<code>g</code>reater <code>t</code>han)</li> <li><code>ge</code>: maior que ou igual (<code>g</code>reater than or <code>e</code>qual)</li> <li><code>lt</code>: menor que (<code>l</code>ess <code>t</code>han)</li> <li><code>le</code>: menor que ou igual (<code>l</code>ess than or <code>e</code>qual)</li> </ul> <p>Informa\u00e7\u00e3o</p> <p><code>Query</code>, <code>Path</code> e outras classes que voc\u00ea ver\u00e1 a frente s\u00e3o subclasses de uma classe comum <code>Param</code>.</p> <p>Todas elas compartilham os mesmos par\u00e2metros para valida\u00e7\u00e3o adicional e metadados que voc\u00ea viu.</p> <p>Detalhes T\u00e9cnicos</p> <p>Quando voc\u00ea importa <code>Query</code>, <code>Path</code> e outras de <code>readyapi</code>, elas s\u00e3o na verdade fun\u00e7\u00f5es.</p> <p>Que quando chamadas, retornam inst\u00e2ncias de classes de mesmo nome.</p> <p>Ent\u00e3o, voc\u00ea importa <code>Query</code>, que \u00e9 uma fun\u00e7\u00e3o. E quando voc\u00ea a chama, ela retorna uma inst\u00e2ncia de uma classe tamb\u00e9m chamada <code>Query</code>.</p> <p>Estas fun\u00e7\u00f5es s\u00e3o assim (ao inv\u00e9s de apenas usar as classes diretamente) para que seu editor n\u00e3o acuse erros sobre seus tipos.</p> <p>Dessa maneira voc\u00ea pode user seu editor e ferramentas de desenvolvimento sem precisar adicionar configura\u00e7\u00f5es customizadas para ignorar estes erros.</p>"},{"location":"tutorial/path-params/","title":"Par\u00e2metros da rota da URL","text":"<p>Voc\u00ea pode declarar os \"par\u00e2metros\" ou \"vari\u00e1veis\" com a mesma sintaxe utilizada pelo formato de strings do Python:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id):\n    return {\"item_id\": item_id}\n</code></pre> <p>O valor do par\u00e2metro que foi passado \u00e0 <code>item_id</code> ser\u00e1 passado para a sua fun\u00e7\u00e3o como o argumento <code>item_id</code>.</p> <p>Ent\u00e3o, se voc\u00ea rodar este exemplo e for at\u00e9 http://127.0.0.1:8000/items/foo, voc\u00ea ver\u00e1 a seguinte resposta:</p> <pre><code>{\"item_id\":\"foo\"}\n</code></pre>"},{"location":"tutorial/path-params/#parametros-da-rota-com-tipos","title":"Par\u00e2metros da rota com tipos","text":"<p>Voc\u00ea pode declarar o tipo de um par\u00e2metro na fun\u00e7\u00e3o usando as anota\u00e7\u00f5es padr\u00f5es do Python:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n</code></pre> <p>Nesse caso, <code>item_id</code> est\u00e1 sendo declarado como um <code>int</code>.</p> <p>Verifique</p> <p>Isso vai dar \u00e0 voc\u00ea suporte do seu editor dentro das fun\u00e7\u00f5es, com verifica\u00e7\u00f5es de erros, autocompletar, etc.</p>"},{"location":"tutorial/path-params/#conversao-de-dados","title":"Convers\u00e3o de dados","text":"<p>Se voc\u00ea rodar esse exemplo e abrir o seu navegador em http://127.0.0.1:8000/items/3, voc\u00ea ver\u00e1 a seguinte resposta:</p> <pre><code>{\"item_id\":3}\n</code></pre> <p>Verifique</p> <p>Observe que o valor recebido pela fun\u00e7\u00e3o (e tamb\u00e9m retornado por ela) \u00e9 <code>3</code>, como um Python <code>int</code>, n\u00e3o como uma string <code>\"3\"</code>.</p> <p>Ent\u00e3o, com essa declara\u00e7\u00e3o de tipo, o ReadyAPI d\u00e1 pra voc\u00ea um \"parsing\" autom\u00e1tico no request .</p>"},{"location":"tutorial/path-params/#validacao-de-dados","title":"Valida\u00e7\u00e3o de dados","text":"<p>Mas se voc\u00ea abrir o seu navegador em http://127.0.0.1:8000/items/foo, voc\u00ea ver\u00e1 um belo erro HTTP:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"path\",\n                \"item_id\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> <p>devido ao par\u00e2metro da rota <code>item_id</code> ter um valor <code>\"foo\"</code>, que n\u00e3o \u00e9 um <code>int</code>.</p> <p>O mesmo erro apareceria se voc\u00ea tivesse fornecido um <code>float</code> ao inv\u00e9s de um <code>int</code>, como em: http://127.0.0.1:8000/items/4.2</p> <p>Verifique</p> <p>Ent\u00e3o, com a mesma declara\u00e7\u00e3o de tipo do Python, o ReadyAPI d\u00e1 pra voc\u00ea valida\u00e7\u00e3o de dados.</p> <p>Observe que o erro tamb\u00e9m mostra claramente o ponto exato onde a valida\u00e7\u00e3o n\u00e3o passou.</p> <p>Isso \u00e9 incrivelmente \u00fatil enquanto se desenvolve e debuga o c\u00f3digo que interage com a sua API.</p>"},{"location":"tutorial/path-params/#documentacao","title":"Documenta\u00e7\u00e3o","text":"<p>Quando voc\u00ea abrir o seu navegador em http://127.0.0.1:8000/docs, voc\u00ea ver\u00e1 de forma autom\u00e1tica e interativa a documenta\u00e7\u00e3o da API como:</p> <p></p> <p>Verifique</p> <p>Novamente, apenas com a mesma declara\u00e7\u00e3o de tipo do Python, o ReadyAPI te d\u00e1 de forma autom\u00e1tica e interativa a documenta\u00e7\u00e3o (integrada com o Swagger UI).</p> <p>Veja que o par\u00e2metro de rota est\u00e1 declarado como sendo um inteiro (int).</p>"},{"location":"tutorial/path-params/#beneficios-baseados-em-padroes-documentacao-alternativa","title":"Beneficios baseados em padr\u00f5es, documenta\u00e7\u00e3o alternativa","text":"<p>Devido ao schema gerado ser o padr\u00e3o do OpenAPI, existem muitas ferramentas compat\u00edveis.</p> <p>Por esse motivo, o pr\u00f3prio ReadyAPI fornece uma API alternativa para documenta\u00e7\u00e3o (utilizando ReDoc), que voc\u00ea pode acessar em http://127.0.0.1:8000/redoc:</p> <p></p> <p>Da mesma forma, existem muitas ferramentas compat\u00edveis. Incluindo ferramentas de gera\u00e7\u00e3o de c\u00f3digo para muitas linguagens.</p>"},{"location":"tutorial/path-params/#pydantic","title":"Pydantic","text":"<p>Toda a valida\u00e7\u00e3o de dados \u00e9 feita por baixo dos panos pelo Pydantic, ent\u00e3o voc\u00ea tem todos os benef\u00edcios disso. E assim voc\u00ea sabe que est\u00e1 em boas m\u00e3os.</p> <p>Voc\u00ea pode usar as mesmas declara\u00e7\u00f5es de tipo com <code>str</code>, <code>float</code>, <code>bool</code> e muitos outros tipos complexos de dados.</p> <p>Vamos explorar muitos destes tipos nos pr\u00f3ximos cap\u00edtulos do tutorial.</p>"},{"location":"tutorial/path-params/#a-ordem-importa","title":"A ordem importa","text":"<p>Quando voc\u00ea cria opera\u00e7\u00f5es de rota, voc\u00ea pode se deparar com situa\u00e7\u00f5es onde voc\u00ea pode ter uma rota fixa.</p> <p>Algo como <code>/users/me</code> por exemplo, digamos que essa rota seja utilizada para pegar dados sobre o usu\u00e1rio atual.</p> <p>E ent\u00e3o voc\u00ea pode ter tamb\u00e9m uma rota <code>/users/{user_id}</code> para pegar dados sobre um usu\u00e1rio espec\u00edfico associado a um ID de usu\u00e1rio.</p> <p>Porque as opera\u00e7\u00f5es de rota s\u00e3o avaliadas em ordem, voc\u00ea precisa ter certeza que a rota para <code>/users/me</code> est\u00e1 sendo declarado antes da rota <code>/users/{user_id}</code>:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}\n</code></pre> <p>Caso contr\u00e1rio, a rota para <code>/users/{user_id}</code> coincidiria tamb\u00e9m para <code>/users/me</code>, \"pensando\" que estaria recebendo o par\u00e2metro <code>user_id</code> com o valor de <code>\"me\"</code>.</p>"},{"location":"tutorial/path-params/#valores-predefinidos","title":"Valores predefinidos","text":"<p>Se voc\u00ea tem uma opera\u00e7\u00e3o de rota que recebe um par\u00e2metro da rota, mas que voc\u00ea queira que esses valores poss\u00edveis do par\u00e2metro da rota sejam predefinidos, voc\u00ea pode usar <code>Enum</code> padr\u00e3o do Python.</p>"},{"location":"tutorial/path-params/#criando-uma-classe-enum","title":"Criando uma classe <code>Enum</code>","text":"<p>Importe <code>Enum</code> e crie uma sub-classe que herde de <code>str</code> e de <code>Enum</code>.</p> <p>Por herdar de <code>str</code> a documenta\u00e7\u00e3o da API vai ser capaz de saber que os valores devem ser do tipo <code>string</code> e assim ser capaz de mostrar eles corretamente.</p> <p>Assim, crie atributos de classe com valores fixos, que ser\u00e3o os valores v\u00e1lidos dispon\u00edveis.</p> <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>informa\u00e7\u00e3o</p> <p>Enumerations (ou enums) est\u00e3o dispon\u00edveis no Python desde a vers\u00e3o 3.4.</p> <p>Dica</p> <p>Se voc\u00ea est\u00e1 se perguntando, \"AlexNet\", \"ResNet\", e \"LeNet\" s\u00e3o apenas nomes de modelos de Machine Learning (aprendizado de m\u00e1quina).</p>"},{"location":"tutorial/path-params/#declare-um-parametro-de-rota","title":"Declare um par\u00e2metro de rota","text":"<p>Logo, crie um par\u00e2metro de rota com anota\u00e7\u00f5es de tipo usando a classe enum que voc\u00ea criou (<code>ModelName</code>):</p> <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre>"},{"location":"tutorial/path-params/#revise-a-documentacao","title":"Revise a documenta\u00e7\u00e3o","text":"<p>Visto que os valores dispon\u00edveis para o par\u00e2metro da rota est\u00e3o predefinidos, a documenta\u00e7\u00e3o interativa pode mostrar esses valores de uma forma bem legal:</p> <p></p>"},{"location":"tutorial/path-params/#trabalhando-com-os-enumeration-do-python","title":"Trabalhando com os enumeration do Python","text":"<p>O valor do par\u00e2metro da rota ser\u00e1 um membro de enumeration.</p>"},{"location":"tutorial/path-params/#compare-membros-de-enumeration","title":"Compare membros de enumeration","text":"<p>Voc\u00ea pode comparar eles com o membro de enumeration no enum <code>ModelName</code> que voc\u00ea criou:</p> <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre>"},{"location":"tutorial/path-params/#obtenha-o-valor-de-enumerate","title":"Obtenha o valor de enumerate","text":"<p>Voc\u00ea pode ter o valor exato de enumerate (um <code>str</code> nesse caso) usando <code>model_name.value</code>, ou em geral, <code>your_enum_member.value</code>:</p> <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>Dica</p> <p>Voc\u00ea tamb\u00e9m poderia acessar o valor <code>\"lenet\"</code> com <code>ModelName.lenet.value</code></p>"},{"location":"tutorial/path-params/#retorne-membros-de-enumeration","title":"Retorne membros de enumeration","text":"<p>Voc\u00ea pode retornar membros de enum da sua rota de opera\u00e7\u00e3o, em um corpo JSON aninhado (por exemplo um <code>dict</code>).</p> <p>Eles ser\u00e3o convertidos para o seus valores correspondentes (strings nesse caso) antes de serem retornados ao cliente:</p> <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>No seu cliente voc\u00ea vai obter uma resposta JSON como:</p> <pre><code>{\n  \"model_name\": \"alexnet\",\n  \"message\": \"Deep Learning FTW!\"\n}\n</code></pre>"},{"location":"tutorial/path-params/#parametros-de-rota-que-contem-caminhos","title":"Par\u00e2metros de rota que cont\u00e9m caminhos","text":"<p>Digamos que voc\u00ea tenha uma opera\u00e7\u00e3o de rota com uma rota <code>/files/{file_path}</code>.</p> <p>Mas voc\u00ea precisa que o pr\u00f3prio <code>file_path</code> contenha uma rota, como <code>home/johndoe/myfile.txt</code>.</p> <p>Ent\u00e3o, a URL para este arquivo deveria ser algo como: <code>/files/home/johndoe/myfile.txt</code>.</p>"},{"location":"tutorial/path-params/#suporte-do-openapi","title":"Suporte do OpenAPI","text":"<p>O OpenAPI n\u00e3o suporta uma maneira de declarar um par\u00e2metro de rota que contenha uma rota dentro, dado que isso poderia levar a cen\u00e1rios que s\u00e3o dif\u00edceis de testar e definir.</p> <p>No entanto, voc\u00ea pode fazer isso no ReadyAPI, usando uma das ferramentas internas do Starlette.</p> <p>A documenta\u00e7\u00e3o continuaria funcionando, ainda que n\u00e3o adicionaria nenhuma informa\u00e7\u00e3o dizendo que o par\u00e2metro deveria conter uma rota.</p>"},{"location":"tutorial/path-params/#conversor-de-rota","title":"Conversor de rota","text":"<p>Usando uma op\u00e7\u00e3o direta do Starlette voc\u00ea pode declarar um par\u00e2metro de rota contendo uma rota usando uma URL como:</p> <pre><code>/files/{file_path:path}\n</code></pre> <p>Nesse caso, o nome do par\u00e2metro \u00e9 <code>file_path</code>, e a \u00faltima parte, <code>:path</code>, diz que o par\u00e2metro deveria coincidir com qualquer rota.</p> <p>Ent\u00e3o, voc\u00ea poderia usar ele com:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/files/{file_path:path}\")\nasync def read_file(file_path: str):\n    return {\"file_path\": file_path}\n</code></pre> <p>Dica</p> <p>Voc\u00ea poderia precisar que o par\u00e2metro contivesse <code>/home/johndoe/myfile.txt</code>, com uma barra no inicio (<code>/</code>).</p> <p>Neste caso, a URL deveria ser: <code>/files//home/johndoe/myfile.txt</code>, com barra dupla (<code>//</code>) entre <code>files</code> e <code>home</code>.</p>"},{"location":"tutorial/path-params/#recapitulando","title":"Recapitulando","text":"<p>Com o ReadyAPI, usando as declara\u00e7\u00f5es de tipo do Python, voc\u00ea obt\u00e9m:</p> <ul> <li>Suporte no editor: verifica\u00e7\u00e3o de erros, e op\u00e7\u00e3o de autocompletar, etc.</li> <li>\"Parsing\" de dados</li> <li>Valida\u00e7\u00e3o de dados</li> <li>Anota\u00e7\u00e3o da API e documenta\u00e7\u00e3o autom\u00e1tica</li> </ul> <p>Voc\u00ea apenas tem que declar\u00e1-los uma vez.</p> <p>Essa \u00e9 provavelmente a vantagem mais vis\u00edvel do ReadyAPI se comparado com frameworks alternativos (al\u00e9m do desempenho puro).</p>"},{"location":"tutorial/query-params-str-validations/","title":"Par\u00e2metros de consulta e valida\u00e7\u00f5es de texto","text":"<p>O ReadyAPI permite que voc\u00ea declare informa\u00e7\u00f5es adicionais e valida\u00e7\u00f5es aos seus par\u00e2metros.</p> <p>Vamos utilizar essa aplica\u00e7\u00e3o como exemplo:</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>O par\u00e2metro de consulta <code>q</code> \u00e9 do tipo <code>Union[str, None]</code>, o que significa que \u00e9 do tipo <code>str</code> mas que tamb\u00e9m pode ser <code>None</code>, e de fato, o valor padr\u00e3o \u00e9 <code>None</code>, ent\u00e3o o ReadyAPI saber\u00e1 que n\u00e3o \u00e9 obrigat\u00f3rio.</p> <p>Observa\u00e7\u00e3o</p> <p>O ReadyAPI saber\u00e1 que o valor de <code>q</code> n\u00e3o \u00e9 obrigat\u00f3rio por causa do valor padr\u00e3o <code>= None</code>.</p> <p>O <code>Union</code> em <code>Union[str, None]</code> n\u00e3o \u00e9 usado pelo ReadyAPI, mas permitir\u00e1 que seu editor lhe d\u00ea um melhor suporte e detecte erros.</p>"},{"location":"tutorial/query-params-str-validations/#validacao-adicional","title":"Valida\u00e7\u00e3o adicional","text":"<p>N\u00f3s iremos for\u00e7ar que mesmo o par\u00e2metro <code>q</code> seja opcional, sempre que informado, seu tamanho n\u00e3o exceda 50 caracteres.</p>"},{"location":"tutorial/query-params-str-validations/#importe-query","title":"Importe <code>Query</code>","text":"<p>Para isso, primeiro importe <code>Query</code> de <code>readyapi</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#use-query-como-o-valor-padrao","title":"Use <code>Query</code> como o valor padr\u00e3o","text":"<p>Agora utilize-o como valor padr\u00e3o do seu par\u00e2metro, definindo o par\u00e2metro <code>max_length</code> para 50:</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Note que substitu\u00edmos o valor padr\u00e3o de <code>None</code> para <code>Query(default=None)</code>, o primeiro par\u00e2metro de <code>Query</code> serve para o mesmo prop\u00f3sito: definir o valor padr\u00e3o do par\u00e2metro.</p> <p>Ent\u00e3o:</p> <pre><code>q: Union[str, None] = Query(default=None)\n</code></pre> <p>...Torna o par\u00e2metro opcional, da mesma maneira que:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>Mas o declara explicitamente como um par\u00e2metro de consulta.</p> <p>Informa\u00e7\u00e3o</p> <p>Tenha em mente que o ReadyAPI se preocupa com a parte:</p> <pre><code>= None\n</code></pre> <p>Ou com:</p> <pre><code>= Query(default=None)\n</code></pre> <p>E ir\u00e1 utilizar o <code>None</code> para detectar que o par\u00e2metro de consulta n\u00e3o \u00e9 obrigat\u00f3rio.</p> <p>O <code>Union</code> \u00e9 apenas para permitir que seu editor de texto lhe d\u00ea um melhor suporte.</p> <p>Ent\u00e3o, podemos passar mais par\u00e2metros para <code>Query</code>. Neste caso, o par\u00e2metro <code>max_length</code> que se aplica a textos:</p> <pre><code>q: str = Query(default=None, max_length=50)\n</code></pre> <p>Isso ir\u00e1 validar os dados, mostrar um erro claro quando os dados forem inv\u00e1lidos, e documentar o par\u00e2metro na opera\u00e7\u00e3o de rota do esquema OpenAPI..</p>"},{"location":"tutorial/query-params-str-validations/#adicionando-mais-validacoes","title":"Adicionando mais valida\u00e7\u00f5es","text":"<p>Voc\u00ea tamb\u00e9m pode incluir um par\u00e2metro <code>min_length</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, min_length=3, max_length=50),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#adicionando-expressoes-regulares","title":"Adicionando express\u00f5es regulares","text":"<p>Voc\u00ea pode definir uma express\u00e3o regular que combine com um padr\u00e3o esperado pelo par\u00e2metro:</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Essa express\u00e3o regular espec\u00edfica verifica se o valor recebido no par\u00e2metro:</p> <ul> <li><code>^</code>: Inicia com os seguintes caracteres, ou seja, n\u00e3o cont\u00e9m caracteres anteriores.</li> <li><code>fixedquery</code>: cont\u00e9m o valor exato <code>fixedquery</code>.</li> <li><code>$</code>: termina aqui, n\u00e3o cont\u00e9m nenhum caractere ap\u00f3s <code>fixedquery</code>.</li> </ul> <p>Se voc\u00ea se sente perdido com todo esse assunto de \"express\u00e3o regular\", n\u00e3o se preocupe. Esse \u00e9 um assunto complicado para a maioria das pessoas. Voc\u00ea ainda pode fazer muitas coisas sem utilizar express\u00f5es regulares.</p> <p>Mas assim que voc\u00ea precisar e j\u00e1 tiver aprendido sobre, saiba que voc\u00ea poder\u00e1 us\u00e1-las diretamente no ReadyAPI.</p>"},{"location":"tutorial/query-params-str-validations/#valores-padrao","title":"Valores padr\u00e3o","text":"<p>Da mesma maneira que voc\u00ea utiliza <code>None</code> como o primeiro argumento para ser utilizado como um valor padr\u00e3o, voc\u00ea pode usar outros valores.</p> <p>Vamos dizer que voc\u00ea queira que o par\u00e2metro de consulta <code>q</code> tenha um <code>min_length</code> de <code>3</code>, e um valor padr\u00e3o de <code>\"fixedquery\"</code>, ent\u00e3o declarar\u00edamos assim:</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(default=\"fixedquery\", min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Observa\u00e7\u00e3o</p> <p>O par\u00e2metro torna-se opcional quando possui um valor padr\u00e3o.</p>"},{"location":"tutorial/query-params-str-validations/#torne-o-obrigatorio","title":"Torne-o obrigat\u00f3rio","text":"<p>Quando voc\u00ea n\u00e3o necessita de valida\u00e7\u00f5es ou de metadados adicionais, podemos fazer com que o par\u00e2metro de consulta <code>q</code> seja obrigat\u00f3rio por n\u00e3o declarar um valor padr\u00e3o, dessa forma:</p> <pre><code>q: str\n</code></pre> <p>em vez desta:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>Mas agora n\u00f3s o estamos declarando como <code>Query</code>, conforme abaixo:</p> <pre><code>q: Union[str, None] = Query(default=None, min_length=3)\n</code></pre> <p>Ent\u00e3o, quando voc\u00ea precisa declarar um par\u00e2metro obrigat\u00f3rio utilizando o <code>Query</code>, voc\u00ea pode utilizar <code>...</code> como o primeiro argumento:</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Se voc\u00ea nunca viu os <code>...</code> antes: \u00e9 um valor \u00fanico especial, faz parte do Python e \u00e9 chamado \"Ellipsis\".</p> <p>Dessa forma o ReadyAPI saber\u00e1 que o par\u00e2metro \u00e9 obrigat\u00f3rio.</p>"},{"location":"tutorial/query-params-str-validations/#lista-de-parametros-de-consulta-multiplos-valores","title":"Lista de par\u00e2metros de consulta / m\u00faltiplos valores","text":"<p>Quando voc\u00ea declara explicitamente um par\u00e2metro com <code>Query</code> voc\u00ea pode declar\u00e1-lo para receber uma lista de valores, ou podemos dizer, que ir\u00e1 receber mais de um valor.</p> <p>Por exemplo, para declarar que o par\u00e2metro <code>q</code> pode aparecer diversas vezes na URL, voc\u00ea escreveria:</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[List[str], None] = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Ent\u00e3o, com uma URL assim:</p> <pre><code>http://localhost:8000/items/?q=foo&amp;q=bar\n</code></pre> <p>voc\u00ea receber\u00e1 os m\u00faltiplos par\u00e2metros de consulta <code>q</code> com os valores (<code>foo</code> e <code>bar</code>) em uma lista (<code>list</code>) Python dentro da fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, no par\u00e2metro da fun\u00e7\u00e3o <code>q</code>.</p> <p>Assim, a resposta para essa URL seria:</p> <pre><code>{\n  \"q\": [\n    \"foo\",\n    \"bar\"\n  ]\n}\n</code></pre> <p>Dica</p> <p>Para declarar um par\u00e2metro de consulta com o tipo <code>list</code>, como no exemplo acima, voc\u00ea precisa usar explicitamente o <code>Query</code>, caso contr\u00e1rio ser\u00e1 interpretado como um corpo da requisi\u00e7\u00e3o.</p> <p>A documenta\u00e7\u00e3o interativa da API ir\u00e1 atualizar de acordo, permitindo m\u00faltiplos valores:</p> <p></p>"},{"location":"tutorial/query-params-str-validations/#lista-de-parametros-de-consulta-multiplos-valores-por-padrao","title":"Lista de par\u00e2metros de consulta / m\u00faltiplos valores por padr\u00e3o","text":"<p>E voc\u00ea tamb\u00e9m pode definir uma lista (<code>list</code>) de valores padr\u00e3o caso nenhum seja informado:</p> <pre><code>from typing import List\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: List[str] = Query(default=[\"foo\", \"bar\"])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Se voc\u00ea for at\u00e9:</p> <pre><code>http://localhost:8000/items/\n</code></pre> <p>O valor padr\u00e3o de <code>q</code> ser\u00e1: <code>[\"foo\", \"bar\"]</code> e sua resposta ser\u00e1:</p> <pre><code>{\n  \"q\": [\n    \"foo\",\n    \"bar\"\n  ]\n}\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#usando-list","title":"Usando <code>list</code>","text":"<p>Voc\u00ea tamb\u00e9m pode utilizar o tipo <code>list</code> diretamente em vez de <code>List[str]</code>:</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list = Query(default=[])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Observa\u00e7\u00e3o</p> <p>Tenha em mente que neste caso, o ReadyAPI n\u00e3o ir\u00e1 validar os conte\u00fados da lista.</p> <p>Por exemplo, um <code>List[int]</code> iria validar (e documentar) que os cont\u00e9udos da lista s\u00e3o n\u00fameros inteiros. Mas apenas <code>list</code> n\u00e3o.</p>"},{"location":"tutorial/query-params-str-validations/#declarando-mais-metadados","title":"Declarando mais metadados","text":"<p>Voc\u00ea pode adicionar mais informa\u00e7\u00f5es sobre o par\u00e2metro.</p> <p>Essa informa\u00e7\u00f5es ser\u00e3o inclusas no esquema do OpenAPI e utilizado pela documenta\u00e7\u00e3o interativa e ferramentas externas.</p> <p>Observa\u00e7\u00e3o</p> <p>Tenha em mente que cada ferramenta oferece diferentes n\u00edveis de suporte ao OpenAPI.</p> <p>Algumas delas n\u00e3o exibem todas as informa\u00e7\u00f5es extras que declaramos, ainda que na maioria dos casos, esses recursos est\u00e3o planejados para desenvolvimento.</p> <p>Voc\u00ea pode adicionar um <code>title</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, title=\"Query string\", min_length=3),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>E uma <code>description</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#apelidos-alias-de-parametros","title":"Apelidos (alias) de par\u00e2metros","text":"<p>Imagine que voc\u00ea queira que um par\u00e2metro tenha o nome <code>item-query</code>.</p> <p>Desta maneira:</p> <pre><code>http://127.0.0.1:8000/items/?item-query=foobaritems\n</code></pre> <p>Mas o nome <code>item-query</code> n\u00e3o \u00e9 um nome de v\u00e1riavel v\u00e1lido no Python.</p> <p>O que mais se aproxima \u00e9 <code>item_query</code>.</p> <p>Mas ainda voc\u00ea precisa que o nome seja exatamente <code>item-query</code>...</p> <p>Ent\u00e3o voc\u00ea pode declarar um <code>alias</code>, e esse apelido (alias) que ser\u00e1 utilizado para encontrar o valor do par\u00e2metro:</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#parametros-descontinuados","title":"Par\u00e2metros descontinuados","text":"<p>Agora vamos dizer que voc\u00ea n\u00e3o queria mais utilizar um par\u00e2metro.</p> <p>Voc\u00ea tem que deix\u00e1-lo ativo por um tempo, j\u00e1 que existem clientes o utilizando. Mas voc\u00ea quer que a documenta\u00e7\u00e3o deixe claro que este par\u00e2metro ser\u00e1 descontinuado.</p> <p>Ent\u00e3o voc\u00ea passa o par\u00e2metro <code>deprecated=True</code> para <code>Query</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        alias=\"item-query\",\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^fixedquery$\",\n        deprecated=True,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Na documenta\u00e7\u00e3o aparecer\u00e1 assim:</p> <p></p>"},{"location":"tutorial/query-params-str-validations/#recapitulando","title":"Recapitulando","text":"<p>Voc\u00ea pode adicionar valida\u00e7\u00f5es e metadados adicionais aos seus par\u00e2metros.</p> <p>Valida\u00e7\u00f5es gen\u00e9ricas e metadados:</p> <ul> <li><code>alias</code></li> <li><code>title</code></li> <li><code>description</code></li> <li><code>deprecated</code></li> </ul> <p>Valida\u00e7\u00f5es espec\u00edficas para textos:</p> <ul> <li><code>min_length</code></li> <li><code>max_length</code></li> <li><code>regex</code></li> </ul> <p>Nesses exemplos voc\u00ea viu como declarar valida\u00e7\u00f5es em valores do tipo <code>str</code>.</p> <p>Leia os pr\u00f3ximos cap\u00edtulos para ver como declarar valida\u00e7\u00e3o de outros tipos, como n\u00fameros.</p>"},{"location":"tutorial/query-params/","title":"Par\u00e2metros de Consulta","text":"<p>Quando voc\u00ea declara outros par\u00e2metros na fun\u00e7\u00e3o que n\u00e3o fazem parte dos par\u00e2metros da rota, esses par\u00e2metros s\u00e3o automaticamente interpretados como par\u00e2metros de \"consulta\".</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\n@app.get(\"/items/\")\nasync def read_item(skip: int = 0, limit: int = 10):\n    return fake_items_db[skip : skip + limit]\n</code></pre> <p>A consulta \u00e9 o conjunto de pares chave-valor que vai depois de <code>?</code> na URL, separado pelo caractere <code>&amp;</code>.</p> <p>Por exemplo, na URL:</p> <pre><code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10\n</code></pre> <p>...os par\u00e2metros da consulta s\u00e3o:</p> <ul> <li><code>skip</code>: com o valor <code>0</code></li> <li><code>limit</code>: com o valor <code>10</code></li> </ul> <p>Como eles s\u00e3o parte da URL, eles s\u00e3o \"naturalmente\" strings.</p> <p>Mas quando voc\u00ea declara eles com os tipos do Python (no exemplo acima, como <code>int</code>), eles s\u00e3o convertidos para aquele tipo e validados em rela\u00e7\u00e3o a ele.</p> <p>Todo o processo que era aplicado para par\u00e2metros de rota tamb\u00e9m \u00e9 aplicado para par\u00e2metros de consulta:</p> <ul> <li>Suporte do editor (obviamente)</li> <li>\"Parsing\" de dados</li> <li>Valida\u00e7\u00e3o de dados</li> <li>Documenta\u00e7\u00e3o autom\u00e1tica</li> </ul>"},{"location":"tutorial/query-params/#valores-padrao","title":"Valores padr\u00e3o","text":"<p>Como os par\u00e2metros de consulta n\u00e3o s\u00e3o uma parte fixa da rota, eles podem ser opcionais e podem ter valores padr\u00e3o.</p> <p>No exemplo acima eles tem valores padr\u00e3o de <code>skip=0</code> e <code>limit=10</code>.</p> <p>Ent\u00e3o, se voc\u00ea for at\u00e9 a URL:</p> <pre><code>http://127.0.0.1:8000/items/\n</code></pre> <p>Seria o mesmo que ir para:</p> <pre><code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10\n</code></pre> <p>Mas, se por exemplo voc\u00ea for para:</p> <pre><code>http://127.0.0.1:8000/items/?skip=20\n</code></pre> <p>Os valores dos par\u00e2metros na sua fun\u00e7\u00e3o ser\u00e3o:</p> <ul> <li><code>skip=20</code>: Por que voc\u00ea definiu isso na URL</li> <li><code>limit=10</code>: Por que esse era o valor padr\u00e3o</li> </ul>"},{"location":"tutorial/query-params/#parametros-opcionais","title":"Par\u00e2metros opcionais","text":"<p>Da mesma forma, voc\u00ea pode declarar par\u00e2metros de consulta opcionais, definindo o valor padr\u00e3o para <code>None</code>:</p> Python 3.10+Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n</code></pre> <p>Nesse caso, o par\u00e2metro da fun\u00e7\u00e3o <code>q</code> ser\u00e1 opcional, e <code>None</code> ser\u00e1 o padr\u00e3o.</p> <p>Verificar</p> <p>Voc\u00ea tamb\u00e9m pode notar que o ReadyAPI \u00e9 esperto o suficiente para perceber que o par\u00e2metro da rota <code>item_id</code> \u00e9 um par\u00e2metro da rota, e <code>q</code> n\u00e3o \u00e9, portanto, <code>q</code> \u00e9 o par\u00e2metro de consulta.</p>"},{"location":"tutorial/query-params/#conversao-dos-tipos-de-parametros-de-consulta","title":"Convers\u00e3o dos tipos de par\u00e2metros de consulta","text":"<p>Voc\u00ea tamb\u00e9m pode declarar tipos <code>bool</code>, e eles ser\u00e3o convertidos:</p> Python 3.10+Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> <p>Nesse caso, se voc\u00ea for para:</p> <pre><code>http://127.0.0.1:8000/items/foo?short=1\n</code></pre> <p>ou</p> <pre><code>http://127.0.0.1:8000/items/foo?short=True\n</code></pre> <p>ou</p> <pre><code>http://127.0.0.1:8000/items/foo?short=true\n</code></pre> <p>ou</p> <pre><code>http://127.0.0.1:8000/items/foo?short=on\n</code></pre> <p>ou</p> <pre><code>http://127.0.0.1:8000/items/foo?short=yes\n</code></pre> <p>ou qualquer outra varia\u00e7\u00e3o (tudo em mai\u00fascula, primeira letra em mai\u00fascula, etc), a sua fun\u00e7\u00e3o vai ver o par\u00e2metro <code>short</code> com um valor <code>bool</code> de <code>True</code>. Caso contr\u00e1rio <code>False</code>.</p>"},{"location":"tutorial/query-params/#multiplos-parametros-de-rota-e-consulta","title":"M\u00faltiplos par\u00e2metros de rota e consulta","text":"<p>Voc\u00ea pode declarar m\u00faltiplos par\u00e2metros de rota e par\u00e2metros de consulta ao mesmo tempo, o ReadyAPI vai saber o qu\u00ea \u00e9 o qu\u00ea.</p> <p>E voc\u00ea n\u00e3o precisa declarar eles em nenhuma ordem espec\u00edfica.</p> <p>Eles ser\u00e3o detectados pelo nome:</p> Python 3.10+Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre>"},{"location":"tutorial/query-params/#parametros-de-consulta-obrigatorios","title":"Par\u00e2metros de consulta obrigat\u00f3rios","text":"<p>Quando voc\u00ea declara um valor padr\u00e3o para par\u00e2metros que n\u00e3o s\u00e3o de rota (at\u00e9 agora, n\u00f3s vimos apenas par\u00e2metros de consulta), ent\u00e3o eles n\u00e3o s\u00e3o obrigat\u00f3rios.</p> <p>Caso voc\u00ea n\u00e3o queira adicionar um valor espec\u00edfico mas queira apenas torn\u00e1-lo opcional, defina o valor padr\u00e3o como <code>None</code>.</p> <p>Por\u00e9m, quando voc\u00ea quiser fazer com que o par\u00e2metro de consulta seja obrigat\u00f3rio, voc\u00ea pode simplesmente n\u00e3o declarar nenhum valor como padr\u00e3o.</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(item_id: str, needy: str):\n    item = {\"item_id\": item_id, \"needy\": needy}\n    return item\n</code></pre> <p>Aqui o par\u00e2metro de consulta <code>needy</code> \u00e9 um valor obrigat\u00f3rio, do tipo <code>str</code>.</p> <p>Se voc\u00ea abrir no seu navegador a URL:</p> <pre><code>http://127.0.0.1:8000/items/foo-item\n</code></pre> <p>... sem adicionar o par\u00e2metro obrigat\u00f3rio <code>needy</code>, voc\u00ea ver\u00e1 um erro como:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"needy\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        }\n    ]\n}\n</code></pre> <p>Como <code>needy</code> \u00e9 um par\u00e2metro obrigat\u00f3rio, voc\u00ea precisaria defini-lo na URL:</p> <pre><code>http://127.0.0.1:8000/items/foo-item?needy=sooooneedy\n</code></pre> <p>...isso deve funcionar:</p> <pre><code>{\n    \"item_id\": \"foo-item\",\n    \"needy\": \"sooooneedy\"\n}\n</code></pre> <p>E claro, voc\u00ea pode definir alguns par\u00e2metros como obrigat\u00f3rios, alguns possuindo um valor padr\u00e3o, e outros sendo totalmente opcionais:</p> Python 3.10+Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n</code></pre> <p>Nesse caso, existem 3 par\u00e2metros de consulta:</p> <ul> <li><code>needy</code>, um <code>str</code> obrigat\u00f3rio.</li> <li><code>skip</code>, um <code>int</code> com o valor padr\u00e3o <code>0</code>.</li> <li><code>limit</code>, um <code>int</code> opcional.</li> </ul> <p>Dica</p> <p>Voc\u00ea tamb\u00e9m poderia usar <code>Enum</code> da mesma forma que com Path Parameters.</p>"},{"location":"tutorial/request-forms-and-files/","title":"Formul\u00e1rios e Arquivos da Requisi\u00e7\u00e3o","text":"<p>Voc\u00ea pode definir arquivos e campos de formul\u00e1rio ao mesmo tempo usando <code>File</code> e <code>Form</code>.</p> <p>Informa\u00e7\u00e3o</p> <p>Para receber arquivos carregados e/ou dados de formul\u00e1rio, primeiro instale <code>python-multipart</code>.</p> <p>Por exemplo: <code>pip install python-multipart</code>.</p>"},{"location":"tutorial/request-forms-and-files/#importe-file-e-form","title":"Importe <code>File</code> e <code>Form</code>","text":"<pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre>"},{"location":"tutorial/request-forms-and-files/#defina-parametros-de-file-e-form","title":"Defina par\u00e2metros de <code>File</code> e <code>Form</code>","text":"<p>Crie par\u00e2metros de arquivo e formul\u00e1rio da mesma forma que voc\u00ea faria para <code>Body</code> ou <code>Query</code>:</p> <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> <p>Os arquivos e campos de formul\u00e1rio ser\u00e3o carregados como dados de formul\u00e1rio e voc\u00ea receber\u00e1 os arquivos e campos de formul\u00e1rio.</p> <p>E voc\u00ea pode declarar alguns dos arquivos como <code>bytes</code> e alguns como <code>UploadFile</code>.</p> <p>Aviso</p> <p>Voc\u00ea pode declarar v\u00e1rios par\u00e2metros <code>File</code> e <code>Form</code> em uma opera\u00e7\u00e3o de caminho, mas n\u00e3o \u00e9 poss\u00edvel declarar campos <code>Body</code> para receber como JSON, pois a requisi\u00e7\u00e3o ter\u00e1 o corpo codificado usando <code>multipart/form-data</code> ao inv\u00e9s de <code>application/json</code>.</p> <p>Isso n\u00e3o \u00e9 uma limita\u00e7\u00e3o do ReadyAPI , \u00e9 parte do protocolo HTTP.</p>"},{"location":"tutorial/request-forms-and-files/#recapitulando","title":"Recapitulando","text":"<p>Usar <code>File</code> e <code>Form</code> juntos quando precisar receber dados e arquivos na mesma requisi\u00e7\u00e3o.</p>"},{"location":"tutorial/request-forms/","title":"Dados do formul\u00e1rio","text":"<p>Quando voc\u00ea precisar receber campos de formul\u00e1rio ao inv\u00e9s de JSON, voc\u00ea pode usar <code>Form</code>.</p> <p>Informa\u00e7\u00e3o</p> <p>Para usar formul\u00e1rios, primeiro instale <code>python-multipart</code>.</p> <p>Ex: <code>pip install python-multipart</code>.</p>"},{"location":"tutorial/request-forms/#importe-form","title":"Importe <code>Form</code>","text":"<p>Importe <code>Form</code> de <code>readyapi</code>:</p> <pre><code>from readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: str = Form(), password: str = Form()):\n    return {\"username\": username}\n</code></pre>"},{"location":"tutorial/request-forms/#declare-parametros-de-form","title":"Declare par\u00e2metros de <code>Form</code>","text":"<p>Crie par\u00e2metros de formul\u00e1rio da mesma forma que voc\u00ea faria para <code>Body</code> ou <code>Query</code>:</p> <pre><code>from readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: str = Form(), password: str = Form()):\n    return {\"username\": username}\n</code></pre> <p>Por exemplo, em uma das maneiras que a especifica\u00e7\u00e3o OAuth2 pode ser usada (chamada \"fluxo de senha\"), \u00e9 necess\u00e1rio enviar um <code>username</code> e uma <code>password</code> como campos do formul\u00e1rio.</p> <p>A spec exige que os campos sejam exatamente nomeados como <code>username</code> e <code>password</code> e sejam enviados como campos de formul\u00e1rio, n\u00e3o JSON.</p> <p>Com <code>Form</code> voc\u00ea pode declarar os mesmos metadados e valida\u00e7\u00e3o que com <code>Body</code> (e <code>Query</code>, <code>Path</code>, <code>Cookie</code>).</p> <p>Informa\u00e7\u00e3o</p> <p><code>Form</code> \u00e9 uma classe que herda diretamente de <code>Body</code>.</p> <p>Dica</p> <p>Para declarar corpos de formul\u00e1rio, voc\u00ea precisa usar <code>Form</code> explicitamente, porque sem ele os par\u00e2metros seriam interpretados como par\u00e2metros de consulta ou par\u00e2metros de corpo (JSON).</p>"},{"location":"tutorial/request-forms/#sobre-campos-de-formulario","title":"Sobre \"Campos de formul\u00e1rio\"","text":"<p>A forma como os formul\u00e1rios HTML (<code>&lt;form&gt;&lt;/form&gt;</code>) enviam os dados para o servidor normalmente usa uma codifica\u00e7\u00e3o \"especial\" para esses dados, \u00e9 diferente do JSON.</p> <p>O ReadyAPI far\u00e1 a leitura desses dados no lugar certo em vez de JSON.</p> <p>Detalhes t\u00e9cnicos</p> <p>Os dados dos formul\u00e1rios s\u00e3o normalmente codificados usando o \"tipo de m\u00eddia\" <code>application/x-www-form-urlencoded</code>.</p> <p>Mas quando o formul\u00e1rio inclui arquivos, ele \u00e9 codificado como <code>multipart/form-data</code>. Voc\u00ea ler\u00e1 sobre como lidar com arquivos no pr\u00f3ximo cap\u00edtulo.</p> <p>Se voc\u00ea quiser ler mais sobre essas codifica\u00e7\u00f5es e campos de formul\u00e1rio, v\u00e1 para o MDN web docs para <code>POST</code>.</p> <p>Aviso</p> <p>Voc\u00ea pode declarar v\u00e1rios par\u00e2metros <code>Form</code> em uma opera\u00e7\u00e3o de caminho, mas n\u00e3o pode declarar campos <code>Body</code> que espera receber como JSON, pois a solicita\u00e7\u00e3o ter\u00e1 o corpo codificado usando <code>application/x-www- form-urlencoded</code> em vez de <code>application/json</code>.</p> <p>Esta n\u00e3o \u00e9 uma limita\u00e7\u00e3o do ReadyAPI, \u00e9 parte do protocolo HTTP.</p>"},{"location":"tutorial/request-forms/#recapitulando","title":"Recapitulando","text":"<p>Use <code>Form</code> para declarar os par\u00e2metros de entrada de dados de formul\u00e1rio.</p>"},{"location":"tutorial/response-status-code/","title":"C\u00f3digo de status de resposta","text":"<p>Da mesma forma que voc\u00ea pode especificar um modelo de resposta, voc\u00ea tamb\u00e9m pode declarar o c\u00f3digo de status HTTP usado para a resposta com o par\u00e2metro <code>status_code</code> em qualquer uma das opera\u00e7\u00f5es de caminho:</p> <ul> <li><code>@app.get()</code></li> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> <li>etc.</li> </ul> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=201)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p>Nota</p> <p>Observe que <code>status_code</code> \u00e9 um par\u00e2metro do m\u00e9todo \"decorador\" (get, post, etc). N\u00e3o da sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de caminho, como todos os par\u00e2metros e corpo.</p> <p>O par\u00e2metro <code>status_code</code> recebe um n\u00famero com o c\u00f3digo de status HTTP.</p> <p>Informa\u00e7\u00e3o</p> <p><code>status_code</code> tamb\u00e9m pode receber um <code>IntEnum</code>, como o do Python <code>http.HTTPStatus</code>.</p> <p>Dessa forma:</p> <ul> <li>Este c\u00f3digo de status ser\u00e1 retornado na resposta.</li> <li>Ser\u00e1 documentado como tal no esquema OpenAPI (e, portanto, nas interfaces do usu\u00e1rio):</li> </ul> <p></p> <p>Nota</p> <p>Alguns c\u00f3digos de resposta (consulte a pr\u00f3xima se\u00e7\u00e3o) indicam que a resposta n\u00e3o possui um corpo.</p> <p>O ReadyAPI sabe disso e produzir\u00e1 documentos OpenAPI informando que n\u00e3o h\u00e1 corpo de resposta.</p>"},{"location":"tutorial/response-status-code/#sobre-os-codigos-de-status-http","title":"Sobre os c\u00f3digos de status HTTP","text":"<p>Nota</p> <p>Se voc\u00ea j\u00e1 sabe o que s\u00e3o c\u00f3digos de status HTTP, pule para a pr\u00f3xima se\u00e7\u00e3o.</p> <p>Em HTTP, voc\u00ea envia um c\u00f3digo de status num\u00e9rico de 3 d\u00edgitos como parte da resposta.</p> <p>Esses c\u00f3digos de status t\u00eam um nome associado para reconhec\u00ea-los, mas o importante \u00e9 o n\u00famero.</p> <p>Resumidamente:</p> <ul> <li><code>100</code> e acima s\u00e3o para \"Informa\u00e7\u00f5es\". Voc\u00ea raramente os usa diretamente. As respostas com esses c\u00f3digos de status n\u00e3o podem ter um corpo.</li> <li><code>200</code> e acima s\u00e3o para respostas \"Bem-sucedidas\". Estes s\u00e3o os que voc\u00ea mais usaria.<ul> <li><code>200</code> \u00e9 o c\u00f3digo de status padr\u00e3o, o que significa que tudo estava \"OK\".</li> <li>Outro exemplo seria <code>201</code>, \"Criado\". \u00c9 comumente usado ap\u00f3s a cria\u00e7\u00e3o de um novo registro no banco de dados.</li> <li>Um caso especial \u00e9 <code>204</code>, \"Sem Conte\u00fado\". Essa resposta \u00e9 usada quando n\u00e3o h\u00e1 conte\u00fado para retornar ao cliente e, portanto, a resposta n\u00e3o deve ter um corpo.</li> </ul> </li> <li><code>300</code> e acima s\u00e3o para \"Redirecionamento\". As respostas com esses c\u00f3digos de status podem ou n\u00e3o ter um corpo, exceto <code>304</code>, \"N\u00e3o modificado\", que n\u00e3o deve ter um.</li> <li><code>400</code> e acima s\u00e3o para respostas de \"Erro do cliente\". Este \u00e9 o segundo tipo que voc\u00ea provavelmente mais usaria.<ul> <li>Um exemplo \u00e9 <code>404</code>, para uma resposta \"N\u00e3o encontrado\".</li> <li>Para erros gen\u00e9ricos do cliente, voc\u00ea pode usar apenas <code>400</code>.</li> </ul> </li> <li><code>500</code> e acima s\u00e3o para erros do servidor. Voc\u00ea quase nunca os usa diretamente. Quando algo der errado em alguma parte do c\u00f3digo do seu aplicativo ou servidor, ele retornar\u00e1 automaticamente um desses c\u00f3digos de status.</li> </ul> <p>Dica</p> <p>Para saber mais sobre cada c\u00f3digo de status e qual c\u00f3digo serve para qu\u00ea, verifique o MDN documenta\u00e7\u00e3o sobre c\u00f3digos de status HTTP.</p>"},{"location":"tutorial/response-status-code/#atalho-para-lembrar-os-nomes","title":"Atalho para lembrar os nomes","text":"<p>Vamos ver o exemplo anterior novamente:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=201)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p><code>201</code> \u00e9 o c\u00f3digo de status para \"Criado\".</p> <p>Mas voc\u00ea n\u00e3o precisa memorizar o que cada um desses c\u00f3digos significa.</p> <p>Voc\u00ea pode usar as vari\u00e1veis de conveni\u00eancia de <code>readyapi.status</code>.</p> <pre><code>from readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=status.HTTP_201_CREATED)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p>Eles s\u00e3o apenas uma conveni\u00eancia, eles possuem o mesmo n\u00famero, mas dessa forma voc\u00ea pode usar o autocomplete do editor para encontr\u00e1-los:</p> <p></p> <p>Detalhes t\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode usar <code>from starlette import status</code>.</p> <p>ReadyAPI fornece o mesmo <code>starlette.status</code> como <code>readyapi.status</code> apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas vem diretamente da Starlette.</p>"},{"location":"tutorial/response-status-code/#alterando-o-padrao","title":"Alterando o padr\u00e3o","text":"<p>Mais tarde, no Guia do usu\u00e1rio avan\u00e7ado, voc\u00ea ver\u00e1 como retornar um c\u00f3digo de status diferente do padr\u00e3o que voc\u00ea est\u00e1 declarando aqui.</p>"},{"location":"tutorial/schema-extra-example/","title":"Declare um exemplo dos dados da requisi\u00e7\u00e3o","text":"<p>Voc\u00ea pode declarar exemplos dos dados que a sua aplica\u00e7\u00e3o pode receber.</p> <p>Aqui est\u00e3o v\u00e1rias formas de se fazer isso.</p>"},{"location":"tutorial/schema-extra-example/#schema_extra-do-pydantic","title":"<code>schema_extra</code> do Pydantic","text":"<p>Voc\u00ea pode declarar um <code>example</code> para um modelo Pydantic usando <code>Config</code> e <code>schema_extra</code>, conforme descrito em Documenta\u00e7\u00e3o do Pydantic: Schema customization:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Essas informa\u00e7\u00f5es extras ser\u00e3o adicionadas como se encontram no JSON Schema de resposta desse modelo e ser\u00e3o usadas na documenta\u00e7\u00e3o da API.</p> <p>Dica</p> <p>Voc\u00ea pode usar a mesma t\u00e9cnica para estender o JSON Schema e adicionar suas pr\u00f3prias informa\u00e7\u00f5es extras de forma personalizada.</p> <p>Por exemplo, voc\u00ea pode usar isso para adicionar metadados para uma interface de usu\u00e1rio de front-end, etc.</p>"},{"location":"tutorial/schema-extra-example/#field-de-argumentos-adicionais","title":"<code>Field</code> de argumentos adicionais","text":"<p>Ao usar <code>Field ()</code> com modelos Pydantic, voc\u00ea tamb\u00e9m pode declarar informa\u00e7\u00f5es extras para o JSON Schema passando quaisquer outros argumentos arbitr\u00e1rios para a fun\u00e7\u00e3o.</p> <p>Voc\u00ea pode usar isso para adicionar um <code>example</code> para cada campo:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: Union[str, None] = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: Union[float, None] = Field(default=None, examples=[3.2])\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Aten\u00e7\u00e3o</p> <p>Lembre-se de que esses argumentos extras passados \u200b\u200bn\u00e3o adicionar\u00e3o nenhuma valida\u00e7\u00e3o, apenas informa\u00e7\u00f5es extras, para fins de documenta\u00e7\u00e3o.</p>"},{"location":"tutorial/schema-extra-example/#example-e-examples-no-openapi","title":"<code>example</code> e <code>examples</code> no OpenAPI","text":"<p>Ao usar quaisquer dos:</p> <ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>voc\u00ea tamb\u00e9m pode declarar um dado <code>example</code> ou um grupo de <code>examples</code> com informa\u00e7\u00f5es adicionais que ser\u00e3o adicionadas ao OpenAPI.</p>"},{"location":"tutorial/schema-extra-example/#body-com-example","title":"<code>Body</code> com <code>example</code>","text":"<p>Aqui n\u00f3s passamos um <code>example</code> dos dados esperados por <code>Body()</code>:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            }\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/schema-extra-example/#exemplo-na-ui-da-documentacao","title":"Exemplo na UI da documenta\u00e7\u00e3o","text":"<p>Com qualquer um dos m\u00e9todos acima, os <code>/docs</code> v\u00e3o ficar assim:</p> <p></p>"},{"location":"tutorial/schema-extra-example/#body-com-varios-examples","title":"<code>Body</code> com v\u00e1rios <code>examples</code>","text":"<p>Alternativamente ao \u00fanico <code>example</code>, voc\u00ea pode passar <code>examples</code> usando um <code>dict</code> com v\u00e1rios examples, cada um com informa\u00e7\u00f5es extras que ser\u00e3o adicionadas no OpenAPI tamb\u00e9m.</p> <p>As chaves do <code>dict</code> identificam cada exemplo, e cada valor \u00e9 outro <code>dict</code>.</p> <p>Cada <code>dict</code> de exemplo espec\u00edfico em <code>examples</code> pode conter:</p> <ul> <li><code>summary</code>: Pequena descri\u00e7\u00e3o do exemplo.</li> <li><code>description</code>: Uma descri\u00e7\u00e3o longa que pode conter texto em Markdown.</li> <li><code>value</code>: O pr\u00f3prio exemplo mostrado, ex: um <code>dict</code>.</li> <li><code>externalValue</code>: alternativa ao <code>value</code>, uma URL apontando para o exemplo. Embora isso possa n\u00e3o ser suportado por tantas ferramentas quanto <code>value</code>.</li> </ul> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            },\n            {\n                \"name\": \"Bar\",\n                \"price\": \"35.4\",\n            },\n            {\n                \"name\": \"Baz\",\n                \"price\": \"thirty five point four\",\n            },\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/schema-extra-example/#exemplos-na-ui-da-documentacao","title":"Exemplos na UI da documenta\u00e7\u00e3o","text":"<p>Com <code>examples</code> adicionado a <code>Body()</code>, os <code>/docs</code> v\u00e3o ficar assim:</p> <p></p>"},{"location":"tutorial/schema-extra-example/#detalhes-tecnicos","title":"Detalhes t\u00e9cnicos","text":"<p>Aten\u00e7\u00e3o</p> <p>Esses s\u00e3o detalhes muito t\u00e9cnicos sobre os padr\u00f5es JSON Schema e OpenAPI.</p> <p>Se as ideias explicadas acima j\u00e1 funcionam para voc\u00ea, isso pode ser o suficiente, e voc\u00ea provavelmente n\u00e3o precisa desses detalhes, fique \u00e0 vontade para pular.</p> <p>Quando voc\u00ea adiciona um exemplo dentro de um modelo Pydantic, usando <code>schema_extra</code> ou<code>Field(example=\"something\")</code>esse exemplo \u00e9 adicionado ao JSON Schema para esse modelo Pydantic.</p> <p>E esse JSON Schema do modelo Pydantic est\u00e1 inclu\u00eddo no OpenAPI da sua API e, em seguida, \u00e9 usado na UI da documenta\u00e7\u00e3o.</p> <p>O JSON Schema na verdade n\u00e3o tem um campo <code>example</code> nos padr\u00f5es. Vers\u00f5es recentes do JSON Schema definem um campo <code>examples</code>, mas o OpenAPI 3.0.3 \u00e9 baseado numa vers\u00e3o mais antiga do JSON Schema que n\u00e3o tinha <code>examples</code>.</p> <p>Por isso, o OpenAPI 3.0.3 definiu o seu pr\u00f3prio <code>example</code> para a vers\u00e3o modificada do JSON Schema que \u00e9 usada, para o mesmo pr\u00f3posito (mas \u00e9 apenas <code>example</code> no singular, n\u00e3o <code>examples</code>), e \u00e9 isso que \u00e9 usado pela UI da documenta\u00e7\u00e3o da API(usando o Swagger UI).</p> <p>Portanto, embora <code>example</code> n\u00e3o seja parte do JSON Schema, \u00e9 parte da vers\u00e3o customizada do JSON Schema usada pelo OpenAPI, e \u00e9 isso que vai ser usado dentro da UI de documenta\u00e7\u00e3o.</p> <p>Mas quando voc\u00ea usa <code>example</code> ou <code>examples</code> com qualquer um dos outros utilit\u00e1rios (<code>Query()</code>, <code>Body()</code>, etc.) esses exemplos n\u00e3o s\u00e3o adicionados ao JSON Schema que descreve esses dados (nem mesmo para vers\u00e3o pr\u00f3pria do OpenAPI do JSON Schema), eles s\u00e3o adicionados diretamente \u00e0 declara\u00e7\u00e3o da opera\u00e7\u00e3o de rota no OpenAPI (fora das partes do OpenAPI que usam o JSON Schema).</p> <p>Para <code>Path()</code>, <code>Query()</code>, <code>Header()</code>, e <code>Cookie()</code>, o <code>example</code> e <code>examples</code> s\u00e3o adicionados a defini\u00e7\u00e3o do OpenAPI, dentro do <code>Parameter Object</code> (na especifica\u00e7\u00e3o).</p> <p>E para <code>Body()</code>, <code>File()</code>, e <code>Form()</code>, o <code>example</code> e <code>examples</code> s\u00e3o de maneira equivalente adicionados para a defini\u00e7\u00e3o do OpenAPI, dentro do <code>Request Body Object</code>, no campo <code>content</code>, no <code>Media Type Object</code> (na especifica\u00e7\u00e3o).</p> <p>Por outro lado, h\u00e1 uma vers\u00e3o mais recente do OpenAPI: 3.1.0, lan\u00e7ada recentemente. Baseado no JSON Schema mais recente e a maioria das modifica\u00e7\u00f5es da vers\u00e3o customizada do OpenAPI do JSON Schema s\u00e3o removidas, em troca dos recursos das vers\u00f5es recentes do JSON Schema, portanto, todas essas pequenas diferen\u00e7as s\u00e3o reduzidas. No entanto, a UI do Swagger atualmente n\u00e3o oferece suporte a OpenAPI 3.1.0, ent\u00e3o, por enquanto, \u00e9 melhor continuar usando as op\u00e7\u00f5es acima.</p>"},{"location":"tutorial/static-files/","title":"Arquivos Est\u00e1ticos","text":"<p>Voc\u00ea pode servir arquivos est\u00e1ticos automaticamente de um diret\u00f3rio usando <code>StaticFiles</code>.</p>"},{"location":"tutorial/static-files/#use-staticfiles","title":"Use <code>StaticFiles</code>","text":"<ul> <li>Importe <code>StaticFiles</code>.</li> <li>\"Monte\" uma inst\u00e2ncia de <code>StaticFiles()</code> em um caminho espec\u00edfico.</li> </ul> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n</code></pre> <p>Detalhes t\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode usar <code>from starlette.staticfiles import StaticFiles</code>.</p> <p>O ReadyAPI fornece o mesmo que <code>starlette.staticfiles</code> como <code>readyapi.staticfiles</code> apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas na verdade vem diretamente da Starlette.</p>"},{"location":"tutorial/static-files/#o-que-e-montagem","title":"O que \u00e9 \"Montagem\"","text":"<p>\"Montagem\" significa adicionar um aplicativo completamente \"independente\" em uma rota espec\u00edfica, que ent\u00e3o cuida de todas as subrotas.</p> <p>Isso \u00e9 diferente de usar um <code>APIRouter</code>, pois um aplicativo montado \u00e9 completamente independente. A OpenAPI e a documenta\u00e7\u00e3o do seu aplicativo principal n\u00e3o incluir\u00e3o nada do aplicativo montado, etc.</p> <p>Voc\u00ea pode ler mais sobre isso no Guia Avan\u00e7ado do Usu\u00e1rio.</p>"},{"location":"tutorial/static-files/#detalhes","title":"Detalhes","text":"<p>O primeiro <code>\"/static\"</code> refere-se \u00e0 subrota em que este \"subaplicativo\" ser\u00e1 \"montado\". Portanto, qualquer caminho que comece com <code>\"/static\"</code> ser\u00e1 tratado por ele.</p> <p>O <code>directory=\"static\"</code> refere-se ao nome do diret\u00f3rio que cont\u00e9m seus arquivos est\u00e1ticos.</p> <p>O <code>name=\"static\"</code> d\u00e1 a ela um nome que pode ser usado internamente pelo ReadyAPI.</p> <p>Todos esses par\u00e2metros podem ser diferentes de \"<code>static</code>\", ajuste-os de acordo com as necessidades e detalhes espec\u00edficos de sua pr\u00f3pria aplica\u00e7\u00e3o.</p>"},{"location":"tutorial/static-files/#mais-informacoes","title":"Mais informa\u00e7\u00f5es","text":"<p>Para mais detalhes e op\u00e7\u00f5es, verifique Starlette's docs about Static Files.</p>"},{"location":"tutorial/security/","title":"Seguran\u00e7a","text":"<p>H\u00e1 v\u00e1rias formas de lidar seguran\u00e7a, autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o.</p> <p>E isso normalmente \u00e9 um t\u00f3pico \u201cdif\u00edcil\u201d e complexo.</p> <p>Em muitos frameworks e sistemas, apenas lidar com seguran\u00e7a e autentica\u00e7\u00e3o exige muito esfor\u00e7o e c\u00f3digo (em muitos casos isso pode ser 50% ou mais de todo o c\u00f3digo escrito).</p> <p>ReadyAPI tem muitas ferramentas para ajudar voc\u00ea com a parte de Seguran\u00e7a facilmente, rapidamente, de uma forma padr\u00e3o, sem ter que estudar e aprender tudo sobre especifica\u00e7\u00f5es de seguran\u00e7a.</p> <p>Mas primeiro, vamos verificar alguns pequenos conceitos.</p>"},{"location":"tutorial/security/#esta-com-pressa","title":"Est\u00e1 com pressa?","text":"<p>Se voc\u00ea n\u00e3o se importa com qualquer um desses termos e s\u00f3 precisa adicionar seguran\u00e7a com autentica\u00e7\u00e3o baseada em usu\u00e1rio e senha agora, pule para os pr\u00f3ximos cap\u00edtulos.</p>"},{"location":"tutorial/security/#oauth2","title":"OAuth2","text":"<p>OAuth2 \u00e9 uma especifica\u00e7\u00e3o que define v\u00e1rias formas para lidar com autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o.</p> <p>Ela \u00e9 bastante extensiva na especifica\u00e7\u00e3o e cobre casos de uso muito complexos.</p> <p>Ela inclui uma forma para autentica\u00e7\u00e3o usando \u201cthird party\u201d/aplica\u00e7\u00f5es de terceiros.</p> <p>Isso \u00e9 o que todos os sistemas com \u201cLogin with Facebook, Google, Twitter, GitHub\u201d usam por baixo.</p>"},{"location":"tutorial/security/#oauth-1","title":"OAuth 1","text":"<p>Havia um OAuth 1, que \u00e9 bem diferente do OAuth2, e mais complexo, isso inclu\u00eda diretamente as especifica\u00e7\u00f5es de como criptografar a comunica\u00e7\u00e3o.</p> <p>N\u00e3o \u00e9 muito popular ou usado nos dias atuais.</p> <p>OAuth2 n\u00e3o especifica como criptografar a comunica\u00e7\u00e3o, ele espera que voc\u00ea tenha sua aplica\u00e7\u00e3o em um servidor HTTPS.</p> <p>Dica</p> <p>Na se\u00e7\u00e3o sobre deployment voc\u00ea ir\u00e1 ver como configurar HTTPS de modo gratuito, usando Traefik e Let\u2019s Encrypt.</p>"},{"location":"tutorial/security/#openid-connect","title":"OpenID Connect","text":"<p>OpenID Connect \u00e9 outra especifica\u00e7\u00e3o, baseada em OAuth2.</p> <p>Ela \u00e9 apenas uma extens\u00e3o do OAuth2 especificando algumas coisas que s\u00e3o relativamente amb\u00edguas no OAuth2, para tentar torn\u00e1-lo mais interoper\u00e1vel.</p> <p>Por exemplo, o login do Google usa OpenID Connect (que por baixo dos panos usa OAuth2).</p> <p>Mas o login do Facebook n\u00e3o tem suporte para OpenID Connect. Ele tem a pr\u00f3pria implementa\u00e7\u00e3o do OAuth2.</p>"},{"location":"tutorial/security/#openid-nao-openid-connect","title":"OpenID (n\u00e3o \"OpenID Connect\")","text":"<p>Houve tamb\u00e9m uma especifica\u00e7\u00e3o \u201cOpenID\u201d. Ela tentou resolver a mesma coisa que a OpenID Connect, mas n\u00e3o baseada em OAuth2.</p> <p>Ent\u00e3o, ela foi um sistema adicional completo.</p> <p>Ela n\u00e3o \u00e9 muito popular ou usada nos dias de hoje.</p>"},{"location":"tutorial/security/#openapi","title":"OpenAPI","text":"<p>OpenAPI (anteriormente conhecido como Swagger) \u00e9 a especifica\u00e7\u00e3o aberta para a cria\u00e7\u00e3o de APIs (agora parte da Linux Foundation).</p> <p>ReadyAPI \u00e9 baseado no OpenAPI.</p> <p>Isso \u00e9 o que torna poss\u00edvel ter m\u00faltiplas automa\u00e7\u00f5es interativas de interfaces de documenta\u00e7\u00e3o, gera\u00e7\u00e3o de c\u00f3digo, etc.</p> <p>OpenAPI tem uma forma para definir m\u00faltiplos \u201cesquemas\u201d de seguran\u00e7a.</p> <p>Por us\u00e1-los, voc\u00ea pode ter vantagens de todas essas ferramentas baseadas nos padr\u00f5es, incluindo os sistemas de documenta\u00e7\u00e3o interativa.</p> <p>OpenAPI define os seguintes esquemas de seguran\u00e7a:</p> <ul> <li><code>apiKey</code>: uma chave espec\u00edfica de aplica\u00e7\u00e3o que pode vir de:<ul> <li>Um par\u00e2metro query.</li> <li>Um header.</li> <li>Um cookie.</li> </ul> </li> <li><code>http</code>: padr\u00e3o HTTP de sistemas autentica\u00e7\u00e3o, incluindo:<ul> <li><code>bearer</code>: um header de <code>Authorization</code> com valor de <code>Bearer</code> adicionado de um token. Isso \u00e9 heran\u00e7a do OAuth2.</li> <li>HTTP Basic authentication.</li> <li>HTTP Digest, etc.</li> </ul> </li> <li><code>oauth2</code>: todas as formas do OAuth2 para lidar com seguran\u00e7a (chamados \"fluxos\").<ul> <li>V\u00e1rios desses fluxos s\u00e3o apropriados para construir um provedor de autentica\u00e7\u00e3o OAuth2 (como Google, Facebook, Twitter, GitHub, etc):<ul> <li><code>implicit</code></li> <li><code>clientCredentials</code></li> <li><code>authorizationCode</code></li> </ul> </li> <li>Mas existe um \u201cfluxo\u201d espec\u00edfico que pode ser perfeitamente usado para resolver autentica\u00e7\u00e3o diretamente na mesma aplica\u00e7\u00e3o:<ul> <li><code>password</code>: alguns dos pr\u00f3ximos cap\u00edtulos tratar\u00e3o disso.</li> </ul> </li> </ul> </li> <li><code>openIdConnect</code>: tem uma forma para definir como descobrir automaticamente o dado da autentica\u00e7\u00e3o OAuth2.<ul> <li>Essa descoberta autom\u00e1tica \u00e9 o que \u00e9 definido na especifica\u00e7\u00e3o OpenID Connect.</li> </ul> </li> </ul> <p>Dica</p> <p>Integra\u00e7\u00e3o com outros provedores de autentica\u00e7\u00e3o/autoriza\u00e7\u00e3o como Google, Facebook, Twitter, GitHub, etc. \u00e9 bem poss\u00edvel e relativamente f\u00e1cil.</p> <p>O problema mais complexo \u00e9 criar um provedor de autentica\u00e7\u00e3o/autoriza\u00e7\u00e3o como eles, mas o ReadyAPI d\u00e1 a voc\u00ea ferramentas para fazer isso facilmente, enquanto faz o trabalho pesado para voc\u00ea.</p>"},{"location":"tutorial/security/#readyapi-utilitarios","title":"ReadyAPI utilit\u00e1rios","text":"<p>ReadyAPI fornece v\u00e1rias ferramentas para cada um desses esquemas de seguran\u00e7a no m\u00f3dulo <code>readyapi.security</code> que simplesmente usa esses mecanismos de seguran\u00e7a.</p> <p>Nos pr\u00f3ximos cap\u00edtulos voc\u00ea ir\u00e1 ver como adicionar seguran\u00e7a \u00e0 sua API usando essas ferramentas disponibilizadas pelo ReadyAPI.</p> <p>E voc\u00ea ir\u00e1 ver tamb\u00e9m como isso \u00e9 automaticamente integrado dentro do sistema de documenta\u00e7\u00e3o interativo.</p>"},{"location":"tutorial/security/first-steps/","title":"Seguran\u00e7a - Primeiros Passos","text":"<p>Vamos imaginar que voc\u00ea tem a sua API backend em algum dom\u00ednio.</p> <p>E voc\u00ea tem um frontend em outro dom\u00ednio ou em um path diferente no mesmo dom\u00ednio (ou em uma aplica\u00e7\u00e3o mobile).</p> <p>E voc\u00ea quer uma maneira de o frontend autenticar o backend, usando um username e senha.</p> <p>N\u00f3s podemos usar o OAuth2 junto com o ReadyAPI.</p> <p>Mas, vamos poupar-lhe o tempo de ler toda a especifica\u00e7\u00e3o apenas para achar as pequenas informa\u00e7\u00f5es que voc\u00ea precisa.</p> <p>Vamos usar as ferramentas fornecidas pela ReadyAPI para lidar com seguran\u00e7a.</p>"},{"location":"tutorial/security/first-steps/#como-parece","title":"Como Parece","text":"<p>Vamos primeiro usar o c\u00f3digo e ver como funciona, e depois voltaremos para entender o que est\u00e1 acontecendo.</p>"},{"location":"tutorial/security/first-steps/#crie-um-mainpy","title":"Crie um <code>main.py</code>","text":"<p>Copie o exemplo em um arquivo <code>main.py</code>:</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre>"},{"location":"tutorial/security/first-steps/#execute-o","title":"Execute-o","text":"<p>informa\u00e7\u00e3o</p> <p>Primeiro, instale <code>python-multipart</code>.</p> <p>Ex: <code>pip install python-multipart</code>.</p> <p>Isso ocorre porque o OAuth2 usa \"dados de um formul\u00e1rio\" para mandar o username e senha.</p> <p>Execute esse exemplo com:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"tutorial/security/first-steps/#verifique-o","title":"Verifique-o","text":"<p>V\u00e1 at\u00e9 a documenta\u00e7\u00e3o interativa em: http://127.0.0.1:8000/docs.</p> <p>Voc\u00ea ver\u00e1 algo deste tipo:</p> <p></p> <p>Bot\u00e3o de Autorizar!</p> <p>Voc\u00ea j\u00e1 tem um novo \"bot\u00e3o de autorizar!\".</p> <p>E seu path operation tem um pequeno cadeado no canto superior direito que voc\u00ea pode clicar.</p> <p>E se voc\u00ea clicar, voc\u00ea ter\u00e1 um pequeno formul\u00e1rio de autoriza\u00e7\u00e3o para digitar o <code>username</code> e <code>senha</code> (e outros campos opcionais):</p> <p></p> <p>Nota</p> <p>N\u00e3o importa o que voc\u00ea digita no formul\u00e1rio, n\u00e3o vai funcionar ainda. Mas n\u00f3s vamos chegar l\u00e1.</p> <p>Claro que este n\u00e3o \u00e9 o frontend para os usu\u00e1rios finais, mas \u00e9 uma \u00f3tima ferramenta autom\u00e1tica para documentar interativamente toda sua API.</p> <p>Pode ser usado pelo time de frontend (que pode ser voc\u00ea no caso).</p> <p>Pode ser usado por aplica\u00e7\u00f5es e sistemas third party (de terceiros).</p> <p>E tamb\u00e9m pode ser usada por voc\u00ea mesmo, para debugar, checar e testar a mesma aplica\u00e7\u00e3o.</p>"},{"location":"tutorial/security/first-steps/#o-fluxo-da-senha","title":"O Fluxo da <code>senha</code>","text":"<p>Agora vamos voltar um pouco e entender o que \u00e9 isso tudo.</p> <p>O \"fluxo\" da <code>senha</code> \u00e9 um dos caminhos (\"fluxos\") definidos no OAuth2, para lidar com a seguran\u00e7a e autentica\u00e7\u00e3o.</p> <p>OAuth2 foi projetado para que o backend ou a API pudesse ser independente do servidor que autentica o usu\u00e1rio.</p> <p>Mas nesse caso, a mesma aplica\u00e7\u00e3o ReadyAPI ir\u00e1 lidar com a API e a autentica\u00e7\u00e3o.</p> <p>Ent\u00e3o, vamos rever de um ponto de vista simplificado:</p> <ul> <li>O usu\u00e1rio digita o <code>username</code> e a <code>senha</code> no frontend e aperta <code>Enter</code>.</li> <li>O frontend (rodando no browser do usu\u00e1rio) manda o <code>username</code> e a <code>senha</code> para uma URL espec\u00edfica na sua API (declarada com <code>tokenUrl=\"token\"</code>).</li> <li>A API checa aquele <code>username</code> e <code>senha</code>, e responde com um \"token\" (n\u00f3s n\u00e3o implementamos nada disso ainda).<ul> <li>Um \"token\" \u00e9 apenas uma string com algum conte\u00fado que n\u00f3s podemos utilizar mais tarde para verificar o usu\u00e1rio.</li> <li>Normalmente, um token \u00e9 definido para expirar depois de um tempo.<ul> <li>Ent\u00e3o, o usu\u00e1rio ter\u00e1 que se logar de novo depois de um tempo.</li> <li>E se o token for roubado, o risco \u00e9 menor. N\u00e3o \u00e9 como se fosse uma chave permanente que vai funcionar para sempre (na maioria dos casos).</li> </ul> </li> <li>O frontend armazena aquele token temporariamente em algum lugar.</li> <li>O usu\u00e1rio clica no frontend para ir \u00e0 outra se\u00e7\u00e3o daquele frontend do aplicativo web.</li> <li>O frontend precisa buscar mais dados daquela API.<ul> <li>Mas precisa de autentica\u00e7\u00e3o para aquele endpoint em espec\u00edfico.</li> <li>Ent\u00e3o, para autenticar com nossa API, ele manda um header de <code>Autoriza\u00e7\u00e3o</code> com o valor <code>Bearer</code> mais o token.</li> <li>Se o token cont\u00e9m <code>foobar</code>, o conte\u00fado do header de <code>Autoriza\u00e7\u00e3o</code> ser\u00e1: <code>Bearer foobar</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"tutorial/security/first-steps/#readyapis-oauth2passwordbearer","title":"ReadyAPI's <code>OAuth2PasswordBearer</code>","text":"<p>ReadyAPI fornece v\u00e1rias ferramentas, em diferentes n\u00edveis de abstra\u00e7\u00e3o, para implementar esses recursos de seguran\u00e7a.</p> <p>Neste exemplo, n\u00f3s vamos usar o OAuth2 com o fluxo de Senha, usando um token Bearer. Fazemos isso usando a classe <code>OAuth2PasswordBearer</code>.</p> <p>informa\u00e7\u00e3o</p> <p>Um token \"bearer\" n\u00e3o \u00e9 a \u00fanica op\u00e7\u00e3o.</p> <p>Mas \u00e9 a melhor no nosso caso.</p> <p>E talvez seja a melhor para a maioria dos casos, a n\u00e3o ser que voc\u00ea seja um especialista em OAuth2 e saiba exatamente o porqu\u00ea de existir outras op\u00e7\u00f5es que se adequam melhor \u00e0s suas necessidades.</p> <p>Nesse caso, ReadyAPI tamb\u00e9m fornece as ferramentas para construir.</p> <p>Quando n\u00f3s criamos uma inst\u00e2ncia da classe <code>OAuth2PasswordBearer</code>, n\u00f3s passamos pelo par\u00e2metro <code>tokenUrl</code> Esse par\u00e2metro cont\u00e9m a URL que o client (o frontend rodando no browser do usu\u00e1rio) vai usar para mandar o <code>username</code> e <code>senha</code> para obter um token.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> <p>Dica</p> <p>Esse <code>tokenUrl=\"token\"</code> se refere a uma URL relativa que n\u00f3s n\u00e3o criamos ainda. Como \u00e9 uma URL relativa, \u00e9 equivalente a <code>./token</code>.</p> <p>Porque estamos usando uma URL relativa, se sua API estava localizada em <code>https://example.com/</code>, ent\u00e3o ir\u00e1 referir-se \u00e0 <code>https://example.com/token</code>. Mas se sua API estava localizada em <code>https://example.com/api/v1/</code>, ent\u00e3o ir\u00e1 referir-se \u00e0 <code>https://example.com/api/v1/token</code>.</p> <p>Usar uma URL relativa \u00e9 importante para garantir que sua aplica\u00e7\u00e3o continue funcionando, mesmo em um uso avan\u00e7ado tipo Atr\u00e1s de um Proxy.</p> <p>Esse par\u00e2metro n\u00e3o cria um endpoint / path operation, mas declara que a URL <code>/token</code> vai ser aquela que o client deve usar para obter o token. Essa informa\u00e7\u00e3o \u00e9 usada no OpenAPI, e depois na API Interativa de documenta\u00e7\u00e3o de sistemas.</p> <p>Em breve tamb\u00e9m criaremos o atual path operation.</p> <p>informa\u00e7\u00e3o</p> <p>Se voc\u00ea \u00e9 um \"Pythonista\" muito rigoroso, voc\u00ea pode n\u00e3o gostar do estilo do nome do par\u00e2metro <code>tokenUrl</code> em vez de <code>token_url</code>.</p> <p>Isso ocorre porque est\u00e1 utilizando o mesmo nome que est\u00e1 nas especifica\u00e7\u00f5es do OpenAPI. Ent\u00e3o, se voc\u00ea precisa investigar mais sobre qualquer um desses esquemas de seguran\u00e7a, voc\u00ea pode simplesmente copiar e colar para encontrar mais informa\u00e7\u00f5es sobre isso.</p> <p>A vari\u00e1vel <code>oauth2_scheme</code> \u00e9 um inst\u00e2ncia de <code>OAuth2PasswordBearer</code>, mas tamb\u00e9m \u00e9 um \"callable\".</p> <p>Pode ser chamada de:</p> <pre><code>oauth2_scheme(some, parameters)\n</code></pre> <p>Ent\u00e3o, pode ser usado com <code>Depends</code>.</p>"},{"location":"tutorial/security/first-steps/#use-o","title":"Use-o","text":"<p>Agora voc\u00ea pode passar aquele <code>oauth2_scheme</code> em uma depend\u00eancia com <code>Depends</code>.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> <p>Esse depend\u00eancia vai fornecer uma <code>str</code> que \u00e9 atribu\u00eddo ao par\u00e2metro `token da fun\u00e7\u00e3o do path operation</p> <p>A ReadyAPI saber\u00e1 que pode usar essa depend\u00eancia para definir um \"esquema de seguran\u00e7a\" no esquema da OpenAPI (e na documenta\u00e7\u00e3o da API autom\u00e1tica).</p> <p>Detalhes t\u00e9cnicos</p> <p>ReadyAPI saber\u00e1 que pode usar a classe <code>OAuth2PasswordBearer</code> (declarada na depend\u00eancia) para definir o esquema de seguran\u00e7a na OpenAPI porque herda de <code>readyapi.security.oauth2.OAuth2</code>, que por sua vez herda de <code>readyapi.security.base.Securitybase</code>.</p> <p>Todos os utilit\u00e1rios de seguran\u00e7a que se integram com OpenAPI (e na documenta\u00e7\u00e3o da API autom\u00e1tica) herdam de <code>SecurityBase</code>, \u00e9 assim que ReadyAPI pode saber como integr\u00e1-los no OpenAPI.</p>"},{"location":"tutorial/security/first-steps/#o-que-ele-faz","title":"O que ele faz","text":"<p>Ele ir\u00e1 e olhar\u00e1 na requisi\u00e7\u00e3o para aquele header de <code>Autoriza\u00e7\u00e3o</code>, verificar\u00e1 se o valor \u00e9 <code>Bearer</code> mais algum token, e vai retornar o token como uma <code>str</code></p> <p>Se ele n\u00e3o ver o header de <code>Autoriza\u00e7\u00e3o</code> ou o valor n\u00e3o tem um token <code>Bearer</code>, vai responder com um c\u00f3digo de erro  401 (<code>UNAUTHORIZED</code>) diretamente.</p> <p>Voc\u00ea nem precisa verificar se o token existe para retornar um erro. Voc\u00ea pode ter certeza de que se a sua fun\u00e7\u00e3o for executada, ela ter\u00e1 um <code>str</code> nesse token.</p> <p>Voc\u00ea j\u00e1 pode experimentar na documenta\u00e7\u00e3o interativa:</p> <p></p> <p>N\u00e3o estamos verificando a validade do token ainda, mas isso j\u00e1 \u00e9 um come\u00e7o</p>"},{"location":"tutorial/security/first-steps/#recapitulando","title":"Recapitulando","text":"<p>Ent\u00e3o, em apenas 3 ou 4 linhas extras, voc\u00ea j\u00e1 tem alguma forma primitiva de seguran\u00e7a.</p>"},{"location":"tutorial/response-model/","title":"Response Model - Return Type","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can declare the type used for the response by annotating the path operation function return type.</p> <p>You can use type annotations the same way you would for input data in function parameters, you can use Pydantic models, lists, dictionaries, scalar values like integers, booleans, etc.</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; List[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <p>ReadyAPI will use this return type to:</p> <ul> <li>Validate the returned data.<ul> <li>If the data is invalid (e.g. you are missing a field), it means that your app code is broken, not returning what it should, and it will return a server error instead of returning incorrect data. This way you and your clients can be certain that they will receive the data and the data shape expected.</li> </ul> </li> <li>Add a JSON Schema for the response, in the OpenAPI path operation.<ul> <li>This will be used by the automatic docs.</li> <li>It will also be used by automatic client code generation tools.</li> </ul> </li> </ul> <p>But most importantly:</p> <ul> <li>It will limit and filter the output data to what is defined in the return type.<ul> <li>This is particularly important for security, we'll see more of that below.</li> </ul> </li> </ul>"},{"location":"tutorial/response-model/#response_model-parameter","title":"<code>response_model</code> Parameter","text":"<p>There are some cases where you need or want to return some data that is not exactly what the type declares.</p> <p>For example, you could want to return a dictionary or a database object, but declare it as a Pydantic model. This way the Pydantic model would do all the data documentation, validation, etc. for the object that you returned (e.g. a dictionary or database object).</p> <p>If you added the return type annotation, tools and editors would complain with a (correct) error telling you that your function is returning a type (e.g. a dict) that is different from what you declared (e.g. a Pydantic model).</p> <p>In those cases, you can use the path operation decorator parameter <code>response_model</code> instead of the return type.</p> <p>You can use the <code>response_model</code> parameter in any of the path operations:</p> <ul> <li><code>@app.get()</code></li> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> <li>etc.</li> </ul> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> <pre><code>from typing import Any, List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> <p>Note</p> <p>Notice that <code>response_model</code> is a parameter of the \"decorator\" method (<code>get</code>, <code>post</code>, etc). Not of your path operation function, like all the parameters and body.</p> <p><code>response_model</code> receives the same type you would declare for a Pydantic model field, so, it can be a Pydantic model, but it can also be, e.g. a <code>list</code> of Pydantic models, like <code>List[Item]</code>.</p> <p>ReadyAPI will use this <code>response_model</code> to do all the data documentation, validation, etc. and also to convert and filter the output data to its type declaration.</p> <p>Tip</p> <p>If you have strict type checks in your editor, mypy, etc, you can declare the function return type as <code>Any</code>.</p> <p>That way you tell the editor that you are intentionally returning anything. But ReadyAPI will still do the data documentation, validation, filtering, etc. with the <code>response_model</code>.</p>"},{"location":"tutorial/response-model/#response_model-priority","title":"<code>response_model</code> Priority","text":"<p>If you declare both a return type and a <code>response_model</code>, the <code>response_model</code> will take priority and be used by ReadyAPI.</p> <p>This way you can add correct type annotations to your functions even when you are returning a type different than the response model, to be used by the editor and tools like mypy. And still you can have ReadyAPI do the data validation, documentation, etc. using the <code>response_model</code>.</p> <p>You can also use <code>response_model=None</code> to disable creating a response model for that path operation, you might need to do it if you are adding type annotations for things that are not valid Pydantic fields, you will see an example of that in one of the sections below.</p>"},{"location":"tutorial/response-model/#return-the-same-input-data","title":"Return the same input data","text":"<p>Here we are declaring a <code>UserIn</code> model, it will contain a plaintext password:</p> Python 3.10+Python 3.8+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> <p>Info</p> <p>To use <code>EmailStr</code>, first install <code>email_validator</code>.</p> <p>E.g. <code>pip install email-validator</code> or <code>pip install pydantic[email]</code>.</p> <p>And we are using this model to declare our input and the same model to declare our output:</p> Python 3.10+Python 3.8+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> <p>Now, whenever a browser is creating a user with a password, the API will return the same password in the response.</p> <p>In this case, it might not be a problem, because it's the same user sending the password.</p> <p>But if we use the same model for another path operation, we could be sending our user's passwords to every client.</p> <p>Danger</p> <p>Never store the plain password of a user or send it in a response like this, unless you know all the caveats and you know what you are doing.</p>"},{"location":"tutorial/response-model/#add-an-output-model","title":"Add an output model","text":"<p>We can instead create an input model with the plaintext password and an output model without it:</p> Python 3.10+Python 3.8+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>Here, even though our path operation function is returning the same input user that contains the password:</p> Python 3.10+Python 3.8+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>...we declared the <code>response_model</code> to be our model <code>UserOut</code>, that doesn't include the password:</p> Python 3.10+Python 3.8+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>So, ReadyAPI will take care of filtering out all the data that is not declared in the output model (using Pydantic).</p>"},{"location":"tutorial/response-model/#response_model-or-return-type","title":"<code>response_model</code> or Return Type","text":"<p>In this case, because the two models are different, if we annotated the function return type as <code>UserOut</code>, the editor and tools would complain that we are returning an invalid type, as those are different classes.</p> <p>That's why in this example we have to declare it in the <code>response_model</code> parameter.</p> <p>...but continue reading below to see how to overcome that.</p>"},{"location":"tutorial/response-model/#return-type-and-data-filtering","title":"Return Type and Data Filtering","text":"<p>Let's continue from the previous example. We wanted to annotate the function with one type but return something that includes more data.</p> <p>We want ReadyAPI to keep filtering the data using the response model.</p> <p>In the previous example, because the classes were different, we had to use the <code>response_model</code> parameter. But that also means that we don't get the support from the editor and tools checking the function return type.</p> <p>But in most of the cases where we need to do something like this, we want the model just to filter/remove some of the data as in this example.</p> <p>And in those cases, we can use classes and inheritance to take advantage of function type annotations to get better support in the editor and tools, and still get the ReadyAPI data filtering.</p> Python 3.10+Python 3.8+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; BaseUser:\n    return user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; BaseUser:\n    return user\n</code></pre> <p>With this, we get tooling support, from editors and mypy as this code is correct in terms of types, but we also get the data filtering from ReadyAPI.</p> <p>How does this work? Let's check that out. \ud83e\udd13</p>"},{"location":"tutorial/response-model/#type-annotations-and-tooling","title":"Type Annotations and Tooling","text":"<p>First let's see how editors, mypy and other tools would see this.</p> <p><code>BaseUser</code> has the base fields. Then <code>UserIn</code> inherits from <code>BaseUser</code> and adds the <code>password</code> field, so, it will include all the fields from both models.</p> <p>We annotate the function return type as <code>BaseUser</code>, but we are actually returning a <code>UserIn</code> instance.</p> <p>The editor, mypy, and other tools won't complain about this because, in typing terms, <code>UserIn</code> is a subclass of <code>BaseUser</code>, which means it's a valid type when what is expected is anything that is a <code>BaseUser</code>.</p>"},{"location":"tutorial/response-model/#readyapi-data-filtering","title":"ReadyAPI Data Filtering","text":"<p>Now, for ReadyAPI, it will see the return type and make sure that what you return includes only the fields that are declared in the type.</p> <p>ReadyAPI does several things internally with Pydantic to make sure that those same rules of class inheritance are not used for the returned data filtering, otherwise you could end up returning much more data than what you expected.</p> <p>This way, you can get the best of both worlds: type annotations with tooling support and data filtering.</p>"},{"location":"tutorial/response-model/#see-it-in-the-docs","title":"See it in the docs","text":"<p>When you see the automatic docs, you can check that the input model and output model will both have their own JSON Schema:</p> <p></p> <p>And both models will be used for the interactive API documentation:</p> <p></p>"},{"location":"tutorial/response-model/#other-return-type-annotations","title":"Other Return Type Annotations","text":"<p>There might be cases where you return something that is not a valid Pydantic field and you annotate it in the function, only to get the support provided by tooling (the editor, mypy, etc).</p>"},{"location":"tutorial/response-model/#return-a-response-directly","title":"Return a Response Directly","text":"<p>The most common case would be returning a Response directly as explained later in the advanced docs.</p> <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import JSONResponse, RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Response:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})\n</code></pre> <p>This simple case is handled automatically by ReadyAPI because the return type annotation is the class (or a subclass) of <code>Response</code>.</p> <p>And tools will also be happy because both <code>RedirectResponse</code> and <code>JSONResponse</code> are subclasses of <code>Response</code>, so the type annotation is correct.</p>"},{"location":"tutorial/response-model/#annotate-a-response-subclass","title":"Annotate a Response Subclass","text":"<p>You can also use a subclass of <code>Response</code> in the type annotation:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/teleport\")\nasync def get_teleport() -&gt; RedirectResponse:\n    return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n</code></pre> <p>This will also work because <code>RedirectResponse</code> is a subclass of <code>Response</code>, and ReadyAPI will automatically handle this simple case.</p>"},{"location":"tutorial/response-model/#invalid-return-type-annotations","title":"Invalid Return Type Annotations","text":"<p>But when you return some other arbitrary object that is not a valid Pydantic type (e.g. a database object) and you annotate it like that in the function, ReadyAPI will try to create a Pydantic response model from that type annotation, and will fail.</p> <p>The same would happen if you had something like a union between different types where one or more of them are not valid Pydantic types, for example this would fail \ud83d\udca5:</p> Python 3.10+Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> <p>...this fails because the type annotation is not a Pydantic type and is not just a single <code>Response</code> class or subclass, it's a union (any of the two) between a <code>Response</code> and a <code>dict</code>.</p>"},{"location":"tutorial/response-model/#disable-response-model","title":"Disable Response Model","text":"<p>Continuing from the example above, you might not want to have the default data validation, documentation, filtering, etc. that is performed by ReadyAPI.</p> <p>But you might want to still keep the return type annotation in the function to get the support from tools like editors and type checkers (e.g. mypy).</p> <p>In this case, you can disable the response model generation by setting <code>response_model=None</code>:</p> Python 3.10+Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -&gt; Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -&gt; Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> <p>This will make ReadyAPI skip the response model generation and that way you can have any return type annotations you need without it affecting your ReadyAPI application. \ud83e\udd13</p>"},{"location":"tutorial/response-model/#response-model-encoding-parameters","title":"Response Model encoding parameters","text":"<p>Your response model could have default values, like:</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <ul> <li><code>description: Union[str, None] = None</code> (or <code>str | None = None</code> in Python 3.10) has a default of <code>None</code>.</li> <li><code>tax: float = 10.5</code> has a default of <code>10.5</code>.</li> <li><code>tags: List[str] = []</code> has a default of an empty list: <code>[]</code>.</li> </ul> <p>but you might want to omit them from the result if they were not actually stored.</p> <p>For example, if you have models with many optional attributes in a NoSQL database, but you don't want to send very long JSON responses full of default values.</p>"},{"location":"tutorial/response-model/#use-the-response_model_exclude_unset-parameter","title":"Use the <code>response_model_exclude_unset</code> parameter","text":"<p>You can set the path operation decorator parameter <code>response_model_exclude_unset=True</code>:</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <p>and those default values won't be included in the response, only the values actually set.</p> <p>So, if you send a request to that path operation for the item with ID <code>foo</code>, the response (not including default values) will be:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"price\": 50.2\n}\n</code></pre> <p>Info</p> <p>In Pydantic v1 the method was called <code>.dict()</code>, it was deprecated (but still supported) in Pydantic v2, and renamed to <code>.model_dump()</code>.</p> <p>The examples here use <code>.dict()</code> for compatibility with Pydantic v1, but you should use <code>.model_dump()</code> instead if you can use Pydantic v2.</p> <p>Info</p> <p>ReadyAPI uses Pydantic model's <code>.dict()</code> with its <code>exclude_unset</code> parameter to achieve this.</p> <p>Info</p> <p>You can also use:</p> <ul> <li><code>response_model_exclude_defaults=True</code></li> <li><code>response_model_exclude_none=True</code></li> </ul> <p>as described in the Pydantic docs for <code>exclude_defaults</code> and <code>exclude_none</code>.</p>"},{"location":"tutorial/response-model/#data-with-values-for-fields-with-defaults","title":"Data with values for fields with defaults","text":"<p>But if your data has values for the model's fields with default values, like the item with ID <code>bar</code>:</p> <pre><code>{\n    \"name\": \"Bar\",\n    \"description\": \"The bartenders\",\n    \"price\": 62,\n    \"tax\": 20.2\n}\n</code></pre> <p>they will be included in the response.</p>"},{"location":"tutorial/response-model/#data-with-the-same-values-as-the-defaults","title":"Data with the same values as the defaults","text":"<p>If the data has the same values as the default ones, like the item with ID <code>baz</code>:</p> <pre><code>{\n    \"name\": \"Baz\",\n    \"description\": None,\n    \"price\": 50.2,\n    \"tax\": 10.5,\n    \"tags\": []\n}\n</code></pre> <p>ReadyAPI is smart enough (actually, Pydantic is smart enough) to realize that, even though <code>description</code>, <code>tax</code>, and <code>tags</code> have the same values as the defaults, they were set explicitly (instead of taken from the defaults).</p> <p>So, they will be included in the JSON response.</p> <p>Tip</p> <p>Notice that the default values can be anything, not only <code>None</code>.</p> <p>They can be a list (<code>[]</code>), a <code>float</code> of <code>10.5</code>, etc.</p>"},{"location":"tutorial/response-model/#response_model_include-and-response_model_exclude","title":"<code>response_model_include</code> and <code>response_model_exclude</code>","text":"<p>You can also use the path operation decorator parameters <code>response_model_include</code> and <code>response_model_exclude</code>.</p> <p>They take a <code>set</code> of <code>str</code> with the name of the attributes to include (omitting the rest) or to exclude (including the rest).</p> <p>This can be used as a quick shortcut if you have only one Pydantic model and want to remove some data from the output.</p> <p>Tip</p> <p>But it is still recommended to use the ideas above, using multiple classes, instead of these parameters.</p> <p>This is because the JSON Schema generated in your app's OpenAPI (and the docs) will still be the one for the complete model, even if you use <code>response_model_include</code> or <code>response_model_exclude</code> to omit some attributes.</p> <p>This also applies to <code>response_model_by_alias</code> that works similarly.</p> Python 3.10+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> <p>Tip</p> <p>The syntax <code>{\"name\", \"description\"}</code> creates a <code>set</code> with those two values.</p> <p>It is equivalent to <code>set([\"name\", \"description\"])</code>.</p>"},{"location":"tutorial/response-model/#using-lists-instead-of-sets","title":"Using <code>list</code>s instead of <code>set</code>s","text":"<p>If you forget to use a <code>set</code> and use a <code>list</code> or <code>tuple</code> instead, ReadyAPI will still convert it to a <code>set</code> and it will work correctly:</p> Python 3.10+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre>"},{"location":"tutorial/response-model/#recap","title":"Recap","text":"<p>Use the path operation decorator's parameter <code>response_model</code> to define response models and especially to ensure private data is filtered out.</p> <p>Use <code>response_model_exclude_unset</code> to return only the values explicitly set.</p>"},{"location":"tutorial/request-files/","title":"Request Files","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can define files to be uploaded by the client using <code>File</code>.</p> <p>Info</p> <p>To receive uploaded files, first install <code>python-multipart</code>.</p> <p>E.g. <code>pip install python-multipart</code>.</p> <p>This is because uploaded files are sent as \"form data\".</p>"},{"location":"tutorial/request-files/#import-file","title":"Import <code>File</code>","text":"<p>Import <code>File</code> and <code>UploadFile</code> from <code>readyapi</code>:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#define-file-parameters","title":"Define <code>File</code> Parameters","text":"<p>Create file parameters the same way you would for <code>Body</code> or <code>Form</code>:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Info</p> <p><code>File</code> is a class that inherits directly from <code>Form</code>.</p> <p>But remember that when you import <code>Query</code>, <code>Path</code>, <code>File</code> and others from <code>readyapi</code>, those are actually functions that return special classes.</p> <p>Tip</p> <p>To declare File bodies, you need to use <code>File</code>, because otherwise the parameters would be interpreted as query parameters or body (JSON) parameters.</p> <p>The files will be uploaded as \"form data\".</p> <p>If you declare the type of your path operation function parameter as <code>bytes</code>, ReadyAPI will read the file for you and you will receive the contents as <code>bytes</code>.</p> <p>Keep in mind that this means that the whole contents will be stored in memory. This will work well for small files.</p> <p>But there are several cases in which you might benefit from using <code>UploadFile</code>.</p>"},{"location":"tutorial/request-files/#file-parameters-with-uploadfile","title":"File Parameters with <code>UploadFile</code>","text":"<p>Define a file parameter with a type of <code>UploadFile</code>:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Using <code>UploadFile</code> has several advantages over <code>bytes</code>:</p> <ul> <li>You don't have to use <code>File()</code> in the default value of the parameter.</li> <li>It uses a \"spooled\" file:<ul> <li>A file stored in memory up to a maximum size limit, and after passing this limit it will be stored in disk.</li> </ul> </li> <li>This means that it will work well for large files like images, videos, large binaries, etc. without consuming all the memory.</li> <li>You can get metadata from the uploaded file.</li> <li>It has a file-like <code>async</code> interface.</li> <li>It exposes an actual Python <code>SpooledTemporaryFile</code> object that you can pass directly to other libraries that expect a file-like object.</li> </ul>"},{"location":"tutorial/request-files/#uploadfile","title":"<code>UploadFile</code>","text":"<p><code>UploadFile</code> has the following attributes:</p> <ul> <li><code>filename</code>: A <code>str</code> with the original file name that was uploaded (e.g. <code>myimage.jpg</code>).</li> <li><code>content_type</code>: A <code>str</code> with the content type (MIME type / media type) (e.g. <code>image/jpeg</code>).</li> <li><code>file</code>: A <code>SpooledTemporaryFile</code> (a file-like object). This is the actual Python file that you can pass directly to other functions or libraries that expect a \"file-like\" object.</li> </ul> <p><code>UploadFile</code> has the following <code>async</code> methods. They all call the corresponding file methods underneath (using the internal <code>SpooledTemporaryFile</code>).</p> <ul> <li><code>write(data)</code>: Writes <code>data</code> (<code>str</code> or <code>bytes</code>) to the file.</li> <li><code>read(size)</code>: Reads <code>size</code> (<code>int</code>) bytes/characters of the file.</li> <li><code>seek(offset)</code>: Goes to the byte position <code>offset</code> (<code>int</code>) in the file.<ul> <li>E.g., <code>await myfile.seek(0)</code> would go to the start of the file.</li> <li>This is especially useful if you run <code>await myfile.read()</code> once and then need to read the contents again.</li> </ul> </li> <li><code>close()</code>: Closes the file.</li> </ul> <p>As all these methods are <code>async</code> methods, you need to \"await\" them.</p> <p>For example, inside of an <code>async</code> path operation function you can get the contents with:</p> <pre><code>contents = await myfile.read()\n</code></pre> <p>If you are inside of a normal <code>def</code> path operation function, you can access the <code>UploadFile.file</code> directly, for example:</p> <pre><code>contents = myfile.file.read()\n</code></pre> <p><code>async</code> Technical Details</p> <p>When you use the <code>async</code> methods, ReadyAPI runs the file methods in a threadpool and awaits for them.</p> <p>Starlette Technical Details</p> <p>ReadyAPI's <code>UploadFile</code> inherits directly from Starlette's <code>UploadFile</code>, but adds some necessary parts to make it compatible with Pydantic and the other parts of ReadyAPI.</p>"},{"location":"tutorial/request-files/#what-is-form-data","title":"What is \"Form Data\"","text":"<p>The way HTML forms (<code>&lt;form&gt;&lt;/form&gt;</code>) sends the data to the server normally uses a \"special\" encoding for that data, it's different from JSON.</p> <p>ReadyAPI will make sure to read that data from the right place instead of JSON.</p> <p>Technical Details</p> <p>Data from forms is normally encoded using the \"media type\" <code>application/x-www-form-urlencoded</code> when it doesn't include files.</p> <p>But when the form includes files, it is encoded as <code>multipart/form-data</code>. If you use <code>File</code>, ReadyAPI will know it has to get the files from the correct part of the body.</p> <p>If you want to read more about these encodings and form fields, head to the MDN web docs for <code>POST</code>.</p> <p>Warning</p> <p>You can declare multiple <code>File</code> and <code>Form</code> parameters in a path operation, but you can't also declare <code>Body</code> fields that you expect to receive as JSON, as the request will have the body encoded using <code>multipart/form-data</code> instead of <code>application/json</code>.</p> <p>This is not a limitation of ReadyAPI, it's part of the HTTP protocol.</p>"},{"location":"tutorial/request-files/#optional-file-upload","title":"Optional File Upload","text":"<p>You can make a file optional by using standard type annotations and setting a default value of <code>None</code>:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes | None, File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes | None = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Union[bytes, None] = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#uploadfile-with-additional-metadata","title":"<code>UploadFile</code> with Additional Metadata","text":"<p>You can also use <code>File()</code> with <code>UploadFile</code>, for example, to set additional metadata:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n</code></pre> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File(description=\"A file read as bytes\")):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: UploadFile = File(description=\"A file read as UploadFile\"),\n):\n    return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#multiple-file-uploads","title":"Multiple File Uploads","text":"<p>It's possible to upload several files at the same time.</p> <p>They would be associated to the same \"form field\" sent using \"form data\".</p> <p>To use that, declare a list of <code>bytes</code> or <code>UploadFile</code>:</p> Python 3.9+Python 3.8+Python 3.9+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[list[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[List[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: list[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: List[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>You will receive, as declared, a <code>list</code> of <code>bytes</code> or <code>UploadFile</code>s.</p> <p>Technical Details</p> <p>You could also use <code>from starlette.responses import HTMLResponse</code>.</p> <p>ReadyAPI provides the same <code>starlette.responses</code> as <code>readyapi.responses</code> just as a convenience for you, the developer. But most of the available responses come directly from Starlette.</p>"},{"location":"tutorial/request-files/#multiple-file-uploads-with-additional-metadata","title":"Multiple File Uploads with Additional Metadata","text":"<p>And the same way as before, you can use <code>File()</code> to set additional parameters, even for <code>UploadFile</code>:</p> Python 3.9+Python 3.8+Python 3.9+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[list[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        list[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[List[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        List[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: list[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: list[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: List[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: List[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre>"},{"location":"tutorial/request-files/#recap","title":"Recap","text":"<p>Use <code>File</code>, <code>bytes</code>, and <code>UploadFile</code> to declare files to be uploaded in the request, sent as form data.</p>"},{"location":"tutorial/body-updates/","title":"Body - Updates","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p>"},{"location":"tutorial/body-updates/#update-replacing-with-put","title":"Update replacing with <code>PUT</code>","text":"<p>To update an item you can use the HTTP <code>PUT</code> operation.</p> <p>You can use the <code>jsonable_encoder</code> to convert the input data to data that can be stored as JSON (e.g. with a NoSQL database). For example, converting <code>datetime</code> to <code>str</code>.</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> <p><code>PUT</code> is used to receive data that should replace the existing data.</p>"},{"location":"tutorial/body-updates/#warning-about-replacing","title":"Warning about replacing","text":"<p>That means that if you want to update the item <code>bar</code> using <code>PUT</code> with a body containing:</p> <pre><code>{\n    \"name\": \"Barz\",\n    \"price\": 3,\n    \"description\": None,\n}\n</code></pre> <p>because it doesn't include the already stored attribute <code>\"tax\": 20.2</code>, the input model would take the default value of <code>\"tax\": 10.5</code>.</p> <p>And the data would be saved with that \"new\" <code>tax</code> of <code>10.5</code>.</p>"},{"location":"tutorial/body-updates/#partial-updates-with-patch","title":"Partial updates with <code>PATCH</code>","text":"<p>You can also use the HTTP <code>PATCH</code> operation to partially update data.</p> <p>This means that you can send only the data that you want to update, leaving the rest intact.</p> <p>Note</p> <p><code>PATCH</code> is less commonly used and known than <code>PUT</code>.</p> <p>And many teams use only <code>PUT</code>, even for partial updates.</p> <p>You are free to use them however you want, ReadyAPI doesn't impose any restrictions.</p> <p>But this guide shows you, more or less, how they are intended to be used.</p>"},{"location":"tutorial/body-updates/#using-pydantics-exclude_unset-parameter","title":"Using Pydantic's <code>exclude_unset</code> parameter","text":"<p>If you want to receive partial updates, it's very useful to use the parameter <code>exclude_unset</code> in Pydantic's model's <code>.model_dump()</code>.</p> <p>Like <code>item.model_dump(exclude_unset=True)</code>.</p> <p>Info</p> <p>In Pydantic v1 the method was called <code>.dict()</code>, it was deprecated (but still supported) in Pydantic v2, and renamed to <code>.model_dump()</code>.</p> <p>The examples here use <code>.dict()</code> for compatibility with Pydantic v1, but you should use <code>.model_dump()</code> instead if you can use Pydantic v2.</p> <p>That would generate a <code>dict</code> with only the data that was set when creating the <code>item</code> model, excluding default values.</p> <p>Then you can use this to generate a <code>dict</code> with only the data that was set (sent in the request), omitting default values:</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre>"},{"location":"tutorial/body-updates/#using-pydantics-update-parameter","title":"Using Pydantic's <code>update</code> parameter","text":"<p>Now, you can create a copy of the existing model using <code>.model_copy()</code>, and pass the <code>update</code> parameter with a <code>dict</code> containing the data to update.</p> <p>Info</p> <p>In Pydantic v1 the method was called <code>.copy()</code>, it was deprecated (but still supported) in Pydantic v2, and renamed to <code>.model_copy()</code>.</p> <p>The examples here use <code>.copy()</code> for compatibility with Pydantic v1, but you should use <code>.model_copy()</code> instead if you can use Pydantic v2.</p> <p>Like <code>stored_item_model.model_copy(update=update_data)</code>:</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre>"},{"location":"tutorial/body-updates/#partial-updates-recap","title":"Partial updates recap","text":"<p>In summary, to apply partial updates you would:</p> <ul> <li>(Optionally) use <code>PATCH</code> instead of <code>PUT</code>.</li> <li>Retrieve the stored data.</li> <li>Put that data in a Pydantic model.</li> <li>Generate a <code>dict</code> without default values from the input model (using <code>exclude_unset</code>).<ul> <li>This way you can update only the values actually set by the user, instead of overriding values already stored with default values in your model.</li> </ul> </li> <li>Create a copy of the stored model, updating it's attributes with the received partial updates (using the <code>update</code> parameter).</li> <li>Convert the copied model to something that can be stored in your DB (for example, using the <code>jsonable_encoder</code>).<ul> <li>This is comparable to using the model's <code>.model_dump()</code> method again, but it makes sure (and converts) the values to data types that can be converted to JSON, for example, <code>datetime</code> to <code>str</code>.</li> </ul> </li> <li>Save the data to your DB.</li> <li>Return the updated model.</li> </ul> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <p>Tip</p> <p>You can actually use this same technique with an HTTP <code>PUT</code> operation.</p> <p>But the example here uses <code>PATCH</code> because it was created for these use cases.</p> <p>Note</p> <p>Notice that the input model is still validated.</p> <p>So, if you want to receive partial updates that can omit all the attributes, you need to have a model with all the attributes marked as optional (with default values or <code>None</code>).</p> <p>To distinguish from the models with all optional values for updates and models with required values for creation, you can use the ideas described in Extra Models.</p>"},{"location":"tutorial/dependencies/","title":"Dependencies","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>ReadyAPI has a very powerful but intuitive Dependency Injection system.</p> <p>It is designed to be very simple to use, and to make it very easy for any developer to integrate other components with ReadyAPI.</p>"},{"location":"tutorial/dependencies/#what-is-dependency-injection","title":"What is \"Dependency Injection\"","text":"<p>\"Dependency Injection\" means, in programming, that there is a way for your code (in this case, your path operation functions) to declare things that it requires to work and use: \"dependencies\".</p> <p>And then, that system (in this case ReadyAPI) will take care of doing whatever is needed to provide your code with those needed dependencies (\"inject\" the dependencies).</p> <p>This is very useful when you need to:</p> <ul> <li>Have shared logic (the same code logic again and again).</li> <li>Share database connections.</li> <li>Enforce security, authentication, role requirements, etc.</li> <li>And many other things...</li> </ul> <p>All these, while minimizing code repetition.</p>"},{"location":"tutorial/dependencies/#first-steps","title":"First Steps","text":"<p>Let's see a very simple example. It will be so simple that it is not very useful, for now.</p> <p>But this way we can focus on how the Dependency Injection system works.</p>"},{"location":"tutorial/dependencies/#create-a-dependency-or-dependable","title":"Create a dependency, or \"dependable\"","text":"<p>Let's first focus on the dependency.</p> <p>It is just a function that can take all the same parameters that a path operation function can take:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>That's it.</p> <p>2 lines.</p> <p>And it has the same shape and structure that all your path operation functions have.</p> <p>You can think of it as a path operation function without the \"decorator\" (without the <code>@app.get(\"/some-path\")</code>).</p> <p>And it can return anything you want.</p> <p>In this case, this dependency expects:</p> <ul> <li>An optional query parameter <code>q</code> that is a <code>str</code>.</li> <li>An optional query parameter <code>skip</code> that is an <code>int</code>, and by default is <code>0</code>.</li> <li>An optional query parameter <code>limit</code> that is an <code>int</code>, and by default is <code>100</code>.</li> </ul> <p>And then it just returns a <code>dict</code> containing those values.</p> <p>Info</p> <p>ReadyAPI added support for <code>Annotated</code> (and started recommending it) in version 0.95.0.</p> <p>If you have an older version, you would get errors when trying to use <code>Annotated</code>.</p> <p>Make sure you Upgrade the ReadyAPI version to at least 0.95.1 before using <code>Annotated</code>.</p>"},{"location":"tutorial/dependencies/#import-depends","title":"Import <code>Depends</code>","text":"Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre>"},{"location":"tutorial/dependencies/#declare-the-dependency-in-the-dependant","title":"Declare the dependency, in the \"dependant\"","text":"<p>The same way you use <code>Body</code>, <code>Query</code>, etc. with your path operation function parameters, use <code>Depends</code> with a new parameter:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Although you use <code>Depends</code> in the parameters of your function the same way you use <code>Body</code>, <code>Query</code>, etc, <code>Depends</code> works a bit differently.</p> <p>You only give <code>Depends</code> a single parameter.</p> <p>This parameter must be something like a function.</p> <p>You don't call it directly (don't add the parenthesis at the end), you just pass it as a parameter to <code>Depends()</code>.</p> <p>And that function takes parameters in the same way that path operation functions do.</p> <p>Tip</p> <p>You'll see what other \"things\", apart from functions, can be used as dependencies in the next chapter.</p> <p>Whenever a new request arrives, ReadyAPI will take care of:</p> <ul> <li>Calling your dependency (\"dependable\") function with the correct parameters.</li> <li>Get the result from your function.</li> <li>Assign that result to the parameter in your path operation function.</li> </ul> <pre><code>graph TB\n\ncommon_parameters([\"common_parameters\"])\nread_items[\"/items/\"]\nread_users[\"/users/\"]\n\ncommon_parameters --&gt; read_items\ncommon_parameters --&gt; read_users</code></pre> <p>This way you write shared code once and ReadyAPI takes care of calling it for your path operations.</p> <p>Check</p> <p>Notice that you don't have to create a special class and pass it somewhere to ReadyAPI to \"register\" it or anything similar.</p> <p>You just pass it to <code>Depends</code> and ReadyAPI knows how to do the rest.</p>"},{"location":"tutorial/dependencies/#share-annotated-dependencies","title":"Share <code>Annotated</code> dependencies","text":"<p>In the examples above, you see that there's a tiny bit of code duplication.</p> <p>When you need to use the <code>common_parameters()</code> dependency, you have to write the whole parameter with the type annotation and <code>Depends()</code>:</p> <pre><code>commons: Annotated[dict, Depends(common_parameters)]\n</code></pre> <p>But because we are using <code>Annotated</code>, we can store that <code>Annotated</code> value in a variable and use it in multiple places:</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n</code></pre> <p>Tip</p> <p>This is just standard Python, it's called a \"type alias\", it's actually not specific to ReadyAPI.</p> <p>But because ReadyAPI is based on the Python standards, including <code>Annotated</code>, you can use this trick in your code. \ud83d\ude0e</p> <p>The dependencies will keep working as expected, and the best part is that the type information will be preserved, which means that your editor will be able to keep providing you with autocompletion, inline errors, etc. The same for other tools like <code>mypy</code>.</p> <p>This will be especially useful when you use it in a large code base where you use the same dependencies over and over again in many path operations.</p>"},{"location":"tutorial/dependencies/#to-async-or-not-to-async","title":"To <code>async</code> or not to <code>async</code>","text":"<p>As dependencies will also be called by ReadyAPI (the same as your path operation functions), the same rules apply while defining your functions.</p> <p>You can use <code>async def</code> or normal <code>def</code>.</p> <p>And you can declare dependencies with <code>async def</code> inside of normal <code>def</code> path operation functions, or <code>def</code> dependencies inside of <code>async def</code> path operation functions, etc.</p> <p>It doesn't matter. ReadyAPI will know what to do.</p> <p>Note</p> <p>If you don't know, check the Async: \"In a hurry?\" section about <code>async</code> and <code>await</code> in the docs.</p>"},{"location":"tutorial/dependencies/#integrated-with-openapi","title":"Integrated with OpenAPI","text":"<p>All the request declarations, validations and requirements of your dependencies (and sub-dependencies) will be integrated in the same OpenAPI schema.</p> <p>So, the interactive docs will have all the information from these dependencies too:</p> <p></p>"},{"location":"tutorial/dependencies/#simple-usage","title":"Simple usage","text":"<p>If you look at it, path operation functions are declared to be used whenever a path and operation matches, and then ReadyAPI takes care of calling the function with the correct parameters, extracting the data from the request.</p> <p>Actually, all (or most) of the web frameworks work in this same way.</p> <p>You never call those functions directly. They are called by your framework (in this case, ReadyAPI).</p> <p>With the Dependency Injection system, you can also tell ReadyAPI that your path operation function also \"depends\" on something else that should be executed before your path operation function, and ReadyAPI will take care of executing it and \"injecting\" the results.</p> <p>Other common terms for this same idea of \"dependency injection\" are:</p> <ul> <li>resources</li> <li>providers</li> <li>services</li> <li>injectables</li> <li>components</li> </ul>"},{"location":"tutorial/dependencies/#readyapi-plug-ins","title":"ReadyAPI plug-ins","text":"<p>Integrations and \"plug-ins\" can be built using the Dependency Injection system. But in fact, there is actually no need to create \"plug-ins\", as by using dependencies it's possible to declare an infinite number of integrations and interactions that become available to your path operation functions.</p> <p>And dependencies can be created in a very simple and intuitive way that allows you to just import the Python packages you need, and integrate them with your API functions in a couple of lines of code, literally.</p> <p>You will see examples of this in the next chapters, about relational and NoSQL databases, security, etc.</p>"},{"location":"tutorial/dependencies/#readyapi-compatibility","title":"ReadyAPI compatibility","text":"<p>The simplicity of the dependency injection system makes ReadyAPI compatible with:</p> <ul> <li>all the relational databases</li> <li>NoSQL databases</li> <li>external packages</li> <li>external APIs</li> <li>authentication and authorization systems</li> <li>API usage monitoring systems</li> <li>response data injection systems</li> <li>etc.</li> </ul>"},{"location":"tutorial/dependencies/#simple-and-powerful","title":"Simple and Powerful","text":"<p>Although the hierarchical dependency injection system is very simple to define and use, it's still very powerful.</p> <p>You can define dependencies that in turn can define dependencies themselves.</p> <p>In the end, a hierarchical tree of dependencies is built, and the Dependency Injection system takes care of solving all these dependencies for you (and their sub-dependencies) and providing (injecting) the results at each step.</p> <p>For example, let's say you have 4 API endpoints (path operations):</p> <ul> <li><code>/items/public/</code></li> <li><code>/items/private/</code></li> <li><code>/users/{user_id}/activate</code></li> <li><code>/items/pro/</code></li> </ul> <p>then you could add different permission requirements for each of them just with dependencies and sub-dependencies:</p> <pre><code>graph TB\n\ncurrent_user([\"current_user\"])\nactive_user([\"active_user\"])\nadmin_user([\"admin_user\"])\npaying_user([\"paying_user\"])\n\npublic[\"/items/public/\"]\nprivate[\"/items/private/\"]\nactivate_user[\"/users/{user_id}/activate\"]\npro_items[\"/items/pro/\"]\n\ncurrent_user --&gt; active_user\nactive_user --&gt; admin_user\nactive_user --&gt; paying_user\n\ncurrent_user --&gt; public\nactive_user --&gt; private\nadmin_user --&gt; activate_user\npaying_user --&gt; pro_items</code></pre>"},{"location":"tutorial/dependencies/#integrated-with-openapi_1","title":"Integrated with OpenAPI","text":"<p>All these dependencies, while declaring their requirements, also add parameters, validations, etc. to your path operations.</p> <p>ReadyAPI will take care of adding it all to the OpenAPI schema, so that it is shown in the interactive documentation systems.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/","title":"Classes as Dependencies","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Before diving deeper into the Dependency Injection system, let's upgrade the previous example.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#a-dict-from-the-previous-example","title":"A <code>dict</code> from the previous example","text":"<p>In the previous example, we were returning a <code>dict</code> from our dependency (\"dependable\"):</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>But then we get a <code>dict</code> in the parameter <code>commons</code> of the path operation function.</p> <p>And we know that editors can't provide a lot of support (like completion) for <code>dict</code>s, because they can't know their keys and value types.</p> <p>We can do better...</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#what-makes-a-dependency","title":"What makes a dependency","text":"<p>Up to now you have seen dependencies declared as functions.</p> <p>But that's not the only way to declare dependencies (although it would probably be the more common).</p> <p>The key factor is that a dependency should be a \"callable\".</p> <p>A \"callable\" in Python is anything that Python can \"call\" like a function.</p> <p>So, if you have an object <code>something</code> (that might not be a function) and you can \"call\" it (execute it) like:</p> <pre><code>something()\n</code></pre> <p>or</p> <pre><code>something(some_argument, some_keyword_argument=\"foo\")\n</code></pre> <p>then it is a \"callable\".</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#classes-as-dependencies_1","title":"Classes as dependencies","text":"<p>You might notice that to create an instance of a Python class, you use that same syntax.</p> <p>For example:</p> <pre><code>class Cat:\n    def __init__(self, name: str):\n        self.name = name\n\n\nfluffy = Cat(name=\"Mr Fluffy\")\n</code></pre> <p>In this case, <code>fluffy</code> is an instance of the class <code>Cat</code>.</p> <p>And to create <code>fluffy</code>, you are \"calling\" <code>Cat</code>.</p> <p>So, a Python class is also a callable.</p> <p>Then, in ReadyAPI, you could use a Python class as a dependency.</p> <p>What ReadyAPI actually checks is that it is a \"callable\" (function, class or anything else) and the parameters defined.</p> <p>If you pass a \"callable\" as a dependency in ReadyAPI, it will analyze the parameters for that \"callable\", and process them in the same way as the parameters for a path operation function. Including sub-dependencies.</p> <p>That also applies to callables with no parameters at all. The same as it would be for path operation functions with no parameters.</p> <p>Then, we can change the dependency \"dependable\" <code>common_parameters</code> from above to the class <code>CommonQueryParams</code>:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Pay attention to the <code>__init__</code> method used to create the instance of the class:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>...it has the same parameters as our previous <code>common_parameters</code>:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Those parameters are what ReadyAPI will use to \"solve\" the dependency.</p> <p>In both cases, it will have:</p> <ul> <li>An optional <code>q</code> query parameter that is a <code>str</code>.</li> <li>A <code>skip</code> query parameter that is an <code>int</code>, with a default of <code>0</code>.</li> <li>A <code>limit</code> query parameter that is an <code>int</code>, with a default of <code>100</code>.</li> </ul> <p>In both cases the data will be converted, validated, documented on the OpenAPI schema, etc.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#use-it","title":"Use it","text":"<p>Now you can declare your dependency using this class.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>ReadyAPI calls the <code>CommonQueryParams</code> class. This creates an \"instance\" of that class and the instance will be passed as the parameter <code>commons</code> to your function.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#type-annotation-vs-depends","title":"Type annotation vs <code>Depends</code>","text":"<p>Notice how we write <code>CommonQueryParams</code> twice in the above code:</p> Python 3.8+Python 3.8+ non-Annotated <pre><code>commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>The last <code>CommonQueryParams</code>, in:</p> <pre><code>... Depends(CommonQueryParams)\n</code></pre> <p>...is what ReadyAPI will actually use to know what is the dependency.</p> <p>From it is that ReadyAPI will extract the declared parameters and that is what ReadyAPI will actually call.</p> <p>In this case, the first <code>CommonQueryParams</code>, in:</p> Python 3.8+Python 3.8+ non-Annotated <pre><code>commons: Annotated[CommonQueryParams, ...\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>commons: CommonQueryParams ...\n</code></pre> <p>...doesn't have any special meaning for ReadyAPI. ReadyAPI won't use it for data conversion, validation, etc. (as it is using the <code>Depends(CommonQueryParams)</code> for that).</p> <p>You could actually write just:</p> Python 3.8+Python 3.8+ non-Annotated <pre><code>commons: Annotated[Any, Depends(CommonQueryParams)]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>commons = Depends(CommonQueryParams)\n</code></pre> <p>...as in:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated, Any\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Annotated, Any, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Any, Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>But declaring the type is encouraged as that way your editor will know what will be passed as the parameter <code>commons</code>, and then it can help you with code completion, type checks, etc:</p> <p></p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#shortcut","title":"Shortcut","text":"<p>But you see that we are having some code repetition here, writing <code>CommonQueryParams</code> twice:</p> Python 3.8+Python 3.8+ non-Annotated <pre><code>commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>ReadyAPI provides a shortcut for these cases, in where the dependency is specifically a class that ReadyAPI will \"call\" to create an instance of the class itself.</p> <p>For those specific cases, you can do the following:</p> <p>Instead of writing:</p> Python 3.8+Python 3.8+ non-Annotated <pre><code>commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>...you write:</p> Python 3.8+Python 3.8 non-Annotated <pre><code>commons: Annotated[CommonQueryParams, Depends()]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>commons: CommonQueryParams = Depends()\n</code></pre> <p>You declare the dependency as the type of the parameter, and you use <code>Depends()</code> without any parameter, instead of having to write the full class again inside of <code>Depends(CommonQueryParams)</code>.</p> <p>The same example would then look like:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>...and ReadyAPI will know what to do.</p> <p>Tip</p> <p>If that seems more confusing than helpful, disregard it, you don't need it.</p> <p>It is just a shortcut. Because ReadyAPI cares about helping you minimize code repetition.</p>"},{"location":"tutorial/dependencies/sub-dependencies/","title":"Sub-dependencies","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can create dependencies that have sub-dependencies.</p> <p>They can be as deep as you need them to be.</p> <p>ReadyAPI will take care of solving them.</p>"},{"location":"tutorial/dependencies/sub-dependencies/#first-dependency-dependable","title":"First dependency \"dependable\"","text":"<p>You could create a first dependency (\"dependable\") like:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10 non-AnnotatedPython 3.8 non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>It declares an optional query parameter <code>q</code> as a <code>str</code>, and then it just returns it.</p> <p>This is quite simple (not very useful), but will help us focus on how the sub-dependencies work.</p>"},{"location":"tutorial/dependencies/sub-dependencies/#second-dependency-dependable-and-dependant","title":"Second dependency, \"dependable\" and \"dependant\"","text":"<p>Then you can create another dependency function (a \"dependable\") that at the same time declares a dependency of its own (so it is a \"dependant\" too):</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10 non-AnnotatedPython 3.8 non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Let's focus on the parameters declared:</p> <ul> <li>Even though this function is a dependency (\"dependable\") itself, it also declares another dependency (it \"depends\" on something else).<ul> <li>It depends on the <code>query_extractor</code>, and assigns the value returned by it to the parameter <code>q</code>.</li> </ul> </li> <li>It also declares an optional <code>last_query</code> cookie, as a <code>str</code>.<ul> <li>If the user didn't provide any query <code>q</code>, we use the last query used, which we saved to a cookie before.</li> </ul> </li> </ul>"},{"location":"tutorial/dependencies/sub-dependencies/#use-the-dependency","title":"Use the dependency","text":"<p>Then we can use the dependency with:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10 non-AnnotatedPython 3.8 non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Info</p> <p>Notice that we are only declaring one dependency in the path operation function, the <code>query_or_cookie_extractor</code>.</p> <p>But ReadyAPI will know that it has to solve <code>query_extractor</code> first, to pass the results of that to <code>query_or_cookie_extractor</code> while calling it.</p> <pre><code>graph TB\n\nquery_extractor([\"query_extractor\"])\nquery_or_cookie_extractor([\"query_or_cookie_extractor\"])\n\nread_query[\"/items/\"]\n\nquery_extractor --&gt; query_or_cookie_extractor --&gt; read_query</code></pre>"},{"location":"tutorial/dependencies/sub-dependencies/#using-the-same-dependency-multiple-times","title":"Using the same dependency multiple times","text":"<p>If one of your dependencies is declared multiple times for the same path operation, for example, multiple dependencies have a common sub-dependency, ReadyAPI will know to call that sub-dependency only once per request.</p> <p>And it will save the returned value in a \"cache\" and pass it to all the \"dependants\" that need it in that specific request, instead of calling the dependency multiple times for the same request.</p> <p>In an advanced scenario where you know you need the dependency to be called at every step (possibly multiple times) in the same request instead of using the \"cached\" value, you can set the parameter <code>use_cache=False</code> when using <code>Depends</code>:</p> Python 3.8+Python 3.8+ non-Annotated <pre><code>async def needy_dependency(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):\n    return {\"fresh_value\": fresh_value}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>async def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):\n    return {\"fresh_value\": fresh_value}\n</code></pre>"},{"location":"tutorial/dependencies/sub-dependencies/#recap","title":"Recap","text":"<p>Apart from all the fancy words used here, the Dependency Injection system is quite simple.</p> <p>Just functions that look the same as the path operation functions.</p> <p>But still, it is very powerful, and allows you to declare arbitrarily deeply nested dependency \"graphs\" (trees).</p> <p>Tip</p> <p>All this might not seem as useful with these simple examples.</p> <p>But you will see how useful it is in the chapters about security.</p> <p>And you will also see the amounts of code it will save you.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/","title":"Dependencies in path operation decorators","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>In some cases you don't really need the return value of a dependency inside your path operation function.</p> <p>Or the dependency doesn't return a value.</p> <p>But you still need it to be executed/solved.</p> <p>For those cases, instead of declaring a path operation function parameter with <code>Depends</code>, you can add a <code>list</code> of <code>dependencies</code> to the path operation decorator.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#add-dependencies-to-the-path-operation-decorator","title":"Add <code>dependencies</code> to the path operation decorator","text":"<p>The path operation decorator receives an optional argument <code>dependencies</code>.</p> <p>It should be a <code>list</code> of <code>Depends()</code>:</p> Python 3.9+Python 3.8+Python 3.8 non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>These dependencies will be executed/solved the same way as normal dependencies. But their value (if they return any) won't be passed to your path operation function.</p> <p>Tip</p> <p>Some editors check for unused function parameters, and show them as errors.</p> <p>Using these <code>dependencies</code> in the path operation decorator you can make sure they are executed while avoiding editor/tooling errors.</p> <p>It might also help avoid confusion for new developers that see an unused parameter in your code and could think it's unnecessary.</p> <p>Info</p> <p>In this example we use invented custom headers <code>X-Key</code> and <code>X-Token</code>.</p> <p>But in real cases, when implementing security, you would get more benefits from using the integrated Security utilities (the next chapter).</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencies-errors-and-return-values","title":"Dependencies errors and return values","text":"<p>You can use the same dependency functions you use normally.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependency-requirements","title":"Dependency requirements","text":"<p>They can declare request requirements (like headers) or other sub-dependencies:</p> Python 3.9+Python 3.8+Python 3.8 non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#raise-exceptions","title":"Raise exceptions","text":"<p>These dependencies can <code>raise</code> exceptions, the same as normal dependencies:</p> Python 3.9+Python 3.8+Python 3.8 non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#return-values","title":"Return values","text":"<p>And they can return values or not, the values won't be used.</p> <p>So, you can re-use a normal dependency (that returns a value) you already use somewhere else, and even though the value won't be used, the dependency will be executed:</p> Python 3.9+Python 3.8+Python 3.8 non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencies-for-a-group-of-path-operations","title":"Dependencies for a group of path operations","text":"<p>Later, when reading about how to structure bigger applications (Bigger Applications - Multiple Files), possibly with multiple files, you will learn how to declare a single <code>dependencies</code> parameter for a group of path operations.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#global-dependencies","title":"Global Dependencies","text":"<p>Next we will see how to add dependencies to the whole <code>ReadyAPI</code> application, so that they apply to each path operation.</p>"},{"location":"tutorial/dependencies/global-dependencies/","title":"Global Dependencies","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>For some types of applications you might want to add dependencies to the whole application.</p> <p>Similar to the way you can add <code>dependencies</code> to the path operation decorators, you can add them to the <code>ReadyAPI</code> application.</p> <p>In that case, they will be applied to all the path operations in the application:</p> Python 3.9+Python 3.8+Python 3.8 non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> <p>And all the ideas in the section about adding <code>dependencies</code> to the path operation decorators still apply, but in this case, to all of the path operations in the app.</p>"},{"location":"tutorial/dependencies/global-dependencies/#dependencies-for-groups-of-path-operations","title":"Dependencies for groups of path operations","text":"<p>Later, when reading about how to structure bigger applications (Bigger Applications - Multiple Files), possibly with multiple files, you will learn how to declare a single <code>dependencies</code> parameter for a group of path operations.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/","title":"Dependencies with yield","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>ReadyAPI supports dependencies that do some extra steps after finishing.</p> <p>To do this, use <code>yield</code> instead of <code>return</code>, and write the extra steps (code) after.</p> <p>Tip</p> <p>Make sure to use <code>yield</code> one single time.</p> <p>Technical Details</p> <p>Any function that is valid to use with:</p> <ul> <li><code>@contextlib.contextmanager</code> or</li> <li><code>@contextlib.asynccontextmanager</code></li> </ul> <p>would be valid to use as a ReadyAPI dependency.</p> <p>In fact, ReadyAPI uses those two decorators internally.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#a-database-dependency-with-yield","title":"A database dependency with <code>yield</code>","text":"<p>For example, you could use this to create a database session and close it after finishing.</p> <p>Only the code prior to and including the <code>yield</code> statement is executed before creating a response:</p> <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>The yielded value is what is injected into path operations and other dependencies:</p> <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>The code following the <code>yield</code> statement is executed after the response has been delivered:</p> <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>Tip</p> <p>You can use <code>async</code> or regular functions.</p> <p>ReadyAPI will do the right thing with each, the same as with normal dependencies.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#a-dependency-with-yield-and-try","title":"A dependency with <code>yield</code> and <code>try</code>","text":"<p>If you use a <code>try</code> block in a dependency with <code>yield</code>, you'll receive any exception that was thrown when using the dependency.</p> <p>For example, if some code at some point in the middle, in another dependency or in a path operation, made a database transaction \"rollback\" or create any other error, you will receive the exception in your dependency.</p> <p>So, you can look for that specific exception inside the dependency with <code>except SomeException</code>.</p> <p>In the same way, you can use <code>finally</code> to make sure the exit steps are executed, no matter if there was an exception or not.</p> <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-with-yield/#sub-dependencies-with-yield","title":"Sub-dependencies with <code>yield</code>","text":"<p>You can have sub-dependencies and \"trees\" of sub-dependencies of any size and shape, and any or all of them can use <code>yield</code>.</p> <p>ReadyAPI will make sure that the \"exit code\" in each dependency with <code>yield</code> is run in the correct order.</p> <p>For example, <code>dependency_c</code> can have a dependency on <code>dependency_b</code>, and <code>dependency_b</code> on <code>dependency_a</code>:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <pre><code>from readyapi import Depends\nfrom typing_extensions import Annotated\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>And all of them can use <code>yield</code>.</p> <p>In this case <code>dependency_c</code>, to execute its exit code, needs the value from <code>dependency_b</code> (here named <code>dep_b</code>) to still be available.</p> <p>And, in turn, <code>dependency_b</code> needs the value from <code>dependency_a</code> (here named <code>dep_a</code>) to be available for its exit code.</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <pre><code>from readyapi import Depends\nfrom typing_extensions import Annotated\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>The same way, you could have some dependencies with <code>yield</code> and some other dependencies with <code>return</code>, and have some of those depend on some of the others.</p> <p>And you could have a single dependency that requires several other dependencies with <code>yield</code>, etc.</p> <p>You can have any combinations of dependencies that you want.</p> <p>ReadyAPI will make sure everything is run in the correct order.</p> <p>Technical Details</p> <p>This works thanks to Python's Context Managers.</p> <p>ReadyAPI uses them internally to achieve this.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield-and-httpexception","title":"Dependencies with <code>yield</code> and <code>HTTPException</code>","text":"<p>You saw that you can use dependencies with <code>yield</code> and have <code>try</code> blocks that catch exceptions.</p> <p>The same way, you could raise an <code>HTTPException</code> or similar in the exit code, after the <code>yield</code>.</p> <p>Tip</p> <p>This is a somewhat advanced technique, and in most of the cases you won't really need it, as you can raise exceptions (including <code>HTTPException</code>) from inside of the rest of your application code, for example, in the path operation function.</p> <p>But it's there for you if you need it. \ud83e\udd13</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <p>An alternative you could use to catch exceptions (and possibly also raise another <code>HTTPException</code>) is to create a Custom Exception Handler.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield-and-except","title":"Dependencies with <code>yield</code> and <code>except</code>","text":"<p>If you catch an exception using <code>except</code> in a dependency with <code>yield</code> and you don't raise it again (or raise a new exception), ReadyAPI won't be able to notice there was an exception, the same way that would happen with regular Python:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <p>In this case, the client will see an HTTP 500 Internal Server Error response as it should, given that we are not raising an <code>HTTPException</code> or similar, but the server will not have any logs or any other indication of what was the error. \ud83d\ude31</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#always-raise-in-dependencies-with-yield-and-except","title":"Always <code>raise</code> in Dependencies with <code>yield</code> and <code>except</code>","text":"<p>If you catch an exception in a dependency with <code>yield</code>, unless you are raising another <code>HTTPException</code> or similar, you should re-raise the original exception.</p> <p>You can re-raise the same exception using <code>raise</code>:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <p>Now the client will get the same HTTP 500 Internal Server Error response, but the server will have our custom <code>InternalError</code> in the logs. \ud83d\ude0e</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#execution-of-dependencies-with-yield","title":"Execution of dependencies with <code>yield</code>","text":"<p>The sequence of execution is more or less like this diagram. Time flows from top to bottom. And each column is one of the parts interacting or executing code.</p> <pre><code>sequenceDiagram\n\nparticipant client as Client\nparticipant handler as Exception handler\nparticipant dep as Dep with yield\nparticipant operation as Path Operation\nparticipant tasks as Background tasks\n\n    Note over client,operation: Can raise exceptions, including HTTPException\n    client -&gt;&gt; dep: Start request\n    Note over dep: Run code up to yield\n    opt raise Exception\n        dep --&gt;&gt; handler: Raise Exception\n        handler --&gt;&gt; client: HTTP error response\n    end\n    dep -&gt;&gt; operation: Run dependency, e.g. DB session\n    opt raise\n        operation --&gt;&gt; dep: Raise Exception (e.g. HTTPException)\n        opt handle\n            dep --&gt;&gt; dep: Can catch exception, raise a new HTTPException, raise other exception\n        end\n        handler --&gt;&gt; client: HTTP error response\n    end\n\n    operation -&gt;&gt; client: Return response to client\n    Note over client,operation: Response is already sent, can't change it anymore\n    opt Tasks\n        operation --&gt;&gt; tasks: Send background tasks\n    end\n    opt Raise other exception\n        tasks --&gt;&gt; tasks: Handle exceptions in the background task code\n    end</code></pre> <p>Info</p> <p>Only one response will be sent to the client. It might be one of the error responses or it will be the response from the path operation.</p> <p>After one of those responses is sent, no other response can be sent.</p> <p>Tip</p> <p>This diagram shows <code>HTTPException</code>, but you could also raise any other exception that you catch in a dependency with <code>yield</code> or with a Custom Exception Handler.</p> <p>If you raise any exception, it will be passed to the dependencies with yield, including <code>HTTPException</code>. In most cases you will want to re-raise that same exception or a new one from the dependency with <code>yield</code> to make sure it's properly handled.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield-httpexception-except-and-background-tasks","title":"Dependencies with <code>yield</code>, <code>HTTPException</code>, <code>except</code> and Background Tasks","text":"<p>Warning</p> <p>You most probably don't need these technical details, you can skip this section and continue below.</p> <p>These details are useful mainly if you were using a version of ReadyAPI prior to 0.106.0 and used resources from dependencies with <code>yield</code> in background tasks.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield-and-except-technical-details","title":"Dependencies with <code>yield</code> and <code>except</code>, Technical Details","text":"<p>Before ReadyAPI 0.110.0, if you used a dependency with <code>yield</code>, and then you captured an exception with <code>except</code> in that dependency, and you didn't raise the exception again, the exception would be automatically raised/forwarded to any exception handlers or the internal server error handler.</p> <p>This was changed in version 0.110.0 to fix unhandled memory consumption from forwarded exceptions without a handler (internal server errors), and to make it consistent with the behavior of regular Python code.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#background-tasks-and-dependencies-with-yield-technical-details","title":"Background Tasks and Dependencies with <code>yield</code>, Technical Details","text":"<p>Before ReadyAPI 0.106.0, raising exceptions after <code>yield</code> was not possible, the exit code in dependencies with <code>yield</code> was executed after the response was sent, so Exception Handlers would have already run.</p> <p>This was designed this way mainly to allow using the same objects \"yielded\" by dependencies inside of background tasks, because the exit code would be executed after the background tasks were finished.</p> <p>Nevertheless, as this would mean waiting for the response to travel through the network while unnecessarily holding a resource in a dependency with yield (for example a database connection), this was changed in ReadyAPI 0.106.0.</p> <p>Tip</p> <p>Additionally, a background task is normally an independent set of logic that should be handled separately, with its own resources (e.g. its own database connection).</p> <p>So, this way you will probably have cleaner code.</p> <p>If you used to rely on this behavior, now you should create the resources for background tasks inside the background task itself, and use internally only data that doesn't depend on the resources of dependencies with <code>yield</code>.</p> <p>For example, instead of using the same database session, you would create a new database session inside of the background task, and you would obtain the objects from the database using this new session. And then instead of passing the object from the database as a parameter to the background task function, you would pass the ID of that object and then obtain the object again inside the background task function.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#context-managers","title":"Context Managers","text":""},{"location":"tutorial/dependencies/dependencies-with-yield/#what-are-context-managers","title":"What are \"Context Managers\"","text":"<p>\"Context Managers\" are any of those Python objects that you can use in a <code>with</code> statement.</p> <p>For example, you can use <code>with</code> to read a file:</p> <pre><code>with open(\"./somefile.txt\") as f:\n    contents = f.read()\n    print(contents)\n</code></pre> <p>Underneath, the <code>open(\"./somefile.txt\")</code> creates an object that is called a \"Context Manager\".</p> <p>When the <code>with</code> block finishes, it makes sure to close the file, even if there were exceptions.</p> <p>When you create a dependency with <code>yield</code>, ReadyAPI will internally create a context manager for it, and combine it with some other related tools.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#using-context-managers-in-dependencies-with-yield","title":"Using context managers in dependencies with <code>yield</code>","text":"<p>Warning</p> <p>This is, more or less, an \"advanced\" idea.</p> <p>If you are just starting with ReadyAPI you might want to skip it for now.</p> <p>In Python, you can create Context Managers by creating a class with two methods: <code>__enter__()</code> and <code>__exit__()</code>.</p> <p>You can also use them inside of ReadyAPI dependencies with <code>yield</code> by using <code>with</code> or <code>async with</code> statements inside of the dependency function:</p> <pre><code>class MySuperContextManager:\n    def __init__(self):\n        self.db = DBSession()\n\n    def __enter__(self):\n        return self.db\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.db.close()\n\n\nasync def get_db():\n    with MySuperContextManager() as db:\n        yield db\n</code></pre> <p>Tip</p> <p>Another way to create a context manager is with:</p> <ul> <li><code>@contextlib.contextmanager</code> or</li> <li><code>@contextlib.asynccontextmanager</code></li> </ul> <p>using them to decorate a function with a single <code>yield</code>.</p> <p>That's what ReadyAPI uses internally for dependencies with <code>yield</code>.</p> <p>But you don't have to use the decorators for ReadyAPI dependencies (and you shouldn't).</p> <p>ReadyAPI will do it for you internally.</p>"},{"location":"tutorial/security/get-current-user/","title":"Get Current User","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>In the previous chapter the security system (which is based on the dependency injection system) was giving the path operation function a <code>token</code> as a <code>str</code>:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> <p>But that is still not that useful.</p> <p>Let's make it give us the current user.</p>"},{"location":"tutorial/security/get-current-user/#create-a-user-model","title":"Create a user model","text":"<p>First, let's create a Pydantic user model.</p> <p>The same way we use Pydantic to declare bodies, we can use it anywhere else:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#create-a-get_current_user-dependency","title":"Create a <code>get_current_user</code> dependency","text":"<p>Let's create a dependency <code>get_current_user</code>.</p> <p>Remember that dependencies can have sub-dependencies?</p> <p><code>get_current_user</code> will have a dependency with the same <code>oauth2_scheme</code> we created before.</p> <p>The same as we were doing before in the path operation directly, our new dependency <code>get_current_user</code> will receive a <code>token</code> as a <code>str</code> from the sub-dependency <code>oauth2_scheme</code>:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#get-the-user","title":"Get the user","text":"<p><code>get_current_user</code> will use a (fake) utility function we created, that takes a token as a <code>str</code> and returns our Pydantic <code>User</code> model:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#inject-the-current-user","title":"Inject the current user","text":"<p>So now we can use the same <code>Depends</code> with our <code>get_current_user</code> in the path operation:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Notice that we declare the type of <code>current_user</code> as the Pydantic model <code>User</code>.</p> <p>This will help us inside of the function with all the completion and type checks.</p> <p>Tip</p> <p>You might remember that request bodies are also declared with Pydantic models.</p> <p>Here ReadyAPI won't get confused because you are using <code>Depends</code>.</p> <p>Check</p> <p>The way this dependency system is designed allows us to have different dependencies (different \"dependables\") that all return a <code>User</code> model.</p> <p>We are not restricted to having only one dependency that can return that type of data.</p>"},{"location":"tutorial/security/get-current-user/#other-models","title":"Other models","text":"<p>You can now get the current user directly in the path operation functions and deal with the security mechanisms at the Dependency Injection level, using <code>Depends</code>.</p> <p>And you can use any model or data for the security requirements (in this case, a Pydantic model <code>User</code>).</p> <p>But you are not restricted to using some specific data model, class or type.</p> <p>Do you want to have an <code>id</code> and <code>email</code> and not have any <code>username</code> in your model? Sure. You can use these same tools.</p> <p>Do you want to just have a <code>str</code>? Or just a <code>dict</code>? Or a database class model instance directly? It all works the same way.</p> <p>You actually don't have users that log in to your application but robots, bots, or other systems, that have just an access token? Again, it all works the same.</p> <p>Just use any kind of model, any kind of class, any kind of database that you need for your application. ReadyAPI has you covered with the dependency injection system.</p>"},{"location":"tutorial/security/get-current-user/#code-size","title":"Code size","text":"<p>This example might seem verbose. Keep in mind that we are mixing security, data models, utility functions and path operations in the same file.</p> <p>But here's the key point.</p> <p>The security and dependency injection stuff is written once.</p> <p>And you can make it as complex as you want. And still, have it written only once, in a single place. With all the flexibility.</p> <p>But you can have thousands of endpoints (path operations) using the same security system.</p> <p>And all of them (or any portion of them that you want) can take the advantage of re-using these dependencies or any other dependencies you create.</p> <p>And all these thousands of path operations can be as small as 3 lines:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#recap","title":"Recap","text":"<p>You can now get the current user directly in your path operation function.</p> <p>We are already halfway there.</p> <p>We just need to add a path operation for the user/client to actually send the <code>username</code> and <code>password</code>.</p> <p>That comes next.</p>"},{"location":"tutorial/security/simple-oauth2/","title":"Simple OAuth2 with Password and Bearer","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Now let's build from the previous chapter and add the missing parts to have a complete security flow.</p>"},{"location":"tutorial/security/simple-oauth2/#get-the-username-and-password","title":"Get the <code>username</code> and <code>password</code>","text":"<p>We are going to use ReadyAPI security utilities to get the <code>username</code> and <code>password</code>.</p> <p>OAuth2 specifies that when using the \"password flow\" (that we are using) the client/user must send a <code>username</code> and <code>password</code> fields as form data.</p> <p>And the spec says that the fields have to be named like that. So <code>user-name</code> or <code>email</code> wouldn't work.</p> <p>But don't worry, you can show it as you wish to your final users in the frontend.</p> <p>And your database models can use any other names you want.</p> <p>But for the login path operation, we need to use these names to be compatible with the spec (and be able to, for example, use the integrated API documentation system).</p> <p>The spec also states that the <code>username</code> and <code>password</code> must be sent as form data (so, no JSON here).</p>"},{"location":"tutorial/security/simple-oauth2/#scope","title":"<code>scope</code>","text":"<p>The spec also says that the client can send another form field \"<code>scope</code>\".</p> <p>The form field name is <code>scope</code> (in singular), but it is actually a long string with \"scopes\" separated by spaces.</p> <p>Each \"scope\" is just a string (without spaces).</p> <p>They are normally used to declare specific security permissions, for example:</p> <ul> <li><code>users:read</code> or <code>users:write</code> are common examples.</li> <li><code>instagram_basic</code> is used by Facebook / Instagram.</li> <li><code>https://www.googleapis.com/auth/drive</code> is used by Google.</li> </ul> <p>Info</p> <p>In OAuth2 a \"scope\" is just a string that declares a specific permission required.</p> <p>It doesn't matter if it has other characters like <code>:</code> or if it is a URL.</p> <p>Those details are implementation specific.</p> <p>For OAuth2 they are just strings.</p>"},{"location":"tutorial/security/simple-oauth2/#code-to-get-the-username-and-password","title":"Code to get the <code>username</code> and <code>password</code>","text":"<p>Now let's use the utilities provided by ReadyAPI to handle this.</p>"},{"location":"tutorial/security/simple-oauth2/#oauth2passwordrequestform","title":"<code>OAuth2PasswordRequestForm</code>","text":"<p>First, import <code>OAuth2PasswordRequestForm</code>, and use it as a dependency with <code>Depends</code> in the path operation for <code>/token</code>:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p><code>OAuth2PasswordRequestForm</code> is a class dependency that declares a form body with:</p> <ul> <li>The <code>username</code>.</li> <li>The <code>password</code>.</li> <li>An optional <code>scope</code> field as a big string, composed of strings separated by spaces.</li> <li>An optional <code>grant_type</code>.</li> </ul> <p>Tip</p> <p>The OAuth2 spec actually requires a field <code>grant_type</code> with a fixed value of <code>password</code>, but <code>OAuth2PasswordRequestForm</code> doesn't enforce it.</p> <p>If you need to enforce it, use <code>OAuth2PasswordRequestFormStrict</code> instead of <code>OAuth2PasswordRequestForm</code>.</p> <ul> <li>An optional <code>client_id</code> (we don't need it for our example).</li> <li>An optional <code>client_secret</code> (we don't need it for our example).</li> </ul> <p>Info</p> <p>The <code>OAuth2PasswordRequestForm</code> is not a special class for ReadyAPI as is <code>OAuth2PasswordBearer</code>.</p> <p><code>OAuth2PasswordBearer</code> makes ReadyAPI know that it is a security scheme. So it is added that way to OpenAPI.</p> <p>But <code>OAuth2PasswordRequestForm</code> is just a class dependency that you could have written yourself, or you could have declared <code>Form</code> parameters directly.</p> <p>But as it's a common use case, it is provided by ReadyAPI directly, just to make it easier.</p>"},{"location":"tutorial/security/simple-oauth2/#use-the-form-data","title":"Use the form data","text":"<p>Tip</p> <p>The instance of the dependency class <code>OAuth2PasswordRequestForm</code> won't have an attribute <code>scope</code> with the long string separated by spaces, instead, it will have a <code>scopes</code> attribute with the actual list of strings for each scope sent.</p> <p>We are not using <code>scopes</code> in this example, but the functionality is there if you need it.</p> <p>Now, get the user data from the (fake) database, using the <code>username</code> from the form field.</p> <p>If there is no such user, we return an error saying \"Incorrect username or password\".</p> <p>For the error, we use the exception <code>HTTPException</code>:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#check-the-password","title":"Check the password","text":"<p>At this point we have the user data from our database, but we haven't checked the password.</p> <p>Let's put that data in the Pydantic <code>UserInDB</code> model first.</p> <p>You should never save plaintext passwords, so, we'll use the (fake) password hashing system.</p> <p>If the passwords don't match, we return the same error.</p>"},{"location":"tutorial/security/simple-oauth2/#password-hashing","title":"Password hashing","text":"<p>\"Hashing\" means: converting some content (a password in this case) into a sequence of bytes (just a string) that looks like gibberish.</p> <p>Whenever you pass exactly the same content (exactly the same password) you get exactly the same gibberish.</p> <p>But you cannot convert from the gibberish back to the password.</p>"},{"location":"tutorial/security/simple-oauth2/#why-use-password-hashing","title":"Why use password hashing","text":"<p>If your database is stolen, the thief won't have your users' plaintext passwords, only the hashes.</p> <p>So, the thief won't be able to try to use those same passwords in another system (as many users use the same password everywhere, this would be dangerous).</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#about-user_dict","title":"About <code>**user_dict</code>","text":"<p><code>UserInDB(**user_dict)</code> means:</p> <p>Pass the keys and values of the <code>user_dict</code> directly as key-value arguments, equivalent to:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n    disabled = user_dict[\"disabled\"],\n    hashed_password = user_dict[\"hashed_password\"],\n)\n</code></pre> <p>Info</p> <p>For a more complete explanation of <code>**user_dict</code> check back in the documentation for Extra Models.</p>"},{"location":"tutorial/security/simple-oauth2/#return-the-token","title":"Return the token","text":"<p>The response of the <code>token</code> endpoint must be a JSON object.</p> <p>It should have a <code>token_type</code>. In our case, as we are using \"Bearer\" tokens, the token type should be \"<code>bearer</code>\".</p> <p>And it should have an <code>access_token</code>, with a string containing our access token.</p> <p>For this simple example, we are going to just be completely insecure and return the same <code>username</code> as the token.</p> <p>Tip</p> <p>In the next chapter, you will see a real secure implementation, with password hashing and JWT tokens.</p> <p>But for now, let's focus on the specific details we need.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>By the spec, you should return a JSON with an <code>access_token</code> and a <code>token_type</code>, the same as in this example.</p> <p>This is something that you have to do yourself in your code, and make sure you use those JSON keys.</p> <p>It's almost the only thing that you have to remember to do correctly yourself, to be compliant with the specifications.</p> <p>For the rest, ReadyAPI handles it for you.</p>"},{"location":"tutorial/security/simple-oauth2/#update-the-dependencies","title":"Update the dependencies","text":"<p>Now we are going to update our dependencies.</p> <p>We want to get the <code>current_user</code> only if this user is active.</p> <p>So, we create an additional dependency <code>get_current_active_user</code> that in turn uses <code>get_current_user</code> as a dependency.</p> <p>Both of these dependencies will just return an HTTP error if the user doesn't exist, or if is inactive.</p> <p>So, in our endpoint, we will only get a user if the user exists, was correctly authenticated, and is active:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Info</p> <p>The additional header <code>WWW-Authenticate</code> with value <code>Bearer</code> we are returning here is also part of the spec.</p> <p>Any HTTP (error) status code 401 \"UNAUTHORIZED\" is supposed to also return a <code>WWW-Authenticate</code> header.</p> <p>In the case of bearer tokens (our case), the value of that header should be <code>Bearer</code>.</p> <p>You can actually skip that extra header and it would still work.</p> <p>But it's provided here to be compliant with the specifications.</p> <p>Also, there might be tools that expect and use it (now or in the future) and that might be useful for you or your users, now or in the future.</p> <p>That's the benefit of standards...</p>"},{"location":"tutorial/security/simple-oauth2/#see-it-in-action","title":"See it in action","text":"<p>Open the interactive docs: http://127.0.0.1:8000/docs.</p>"},{"location":"tutorial/security/simple-oauth2/#authenticate","title":"Authenticate","text":"<p>Click the \"Authorize\" button.</p> <p>Use the credentials:</p> <p>User: <code>johndoe</code></p> <p>Password: <code>secret</code></p> <p></p> <p>After authenticating in the system, you will see it like:</p> <p></p>"},{"location":"tutorial/security/simple-oauth2/#get-your-own-user-data","title":"Get your own user data","text":"<p>Now use the operation <code>GET</code> with the path <code>/users/me</code>.</p> <p>You will get your user's data, like:</p> <pre><code>{\n  \"username\": \"johndoe\",\n  \"email\": \"johndoe@example.com\",\n  \"full_name\": \"John Doe\",\n  \"disabled\": false,\n  \"hashed_password\": \"fakehashedsecret\"\n}\n</code></pre> <p></p> <p>If you click the lock icon and logout, and then try the same operation again, you will get an HTTP 401 error of:</p> <pre><code>{\n  \"detail\": \"Not authenticated\"\n}\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#inactive-user","title":"Inactive user","text":"<p>Now try with an inactive user, authenticate with:</p> <p>User: <code>alice</code></p> <p>Password: <code>secret2</code></p> <p>And try to use the operation <code>GET</code> with the path <code>/users/me</code>.</p> <p>You will get an \"Inactive user\" error, like:</p> <pre><code>{\n  \"detail\": \"Inactive user\"\n}\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#recap","title":"Recap","text":"<p>You now have the tools to implement a complete security system based on <code>username</code> and <code>password</code> for your API.</p> <p>Using these tools, you can make the security system compatible with any database and with any user or data model.</p> <p>The only detail missing is that it is not actually \"secure\" yet.</p> <p>In the next chapter you'll see how to use a secure password hashing library and JWT tokens.</p>"},{"location":"tutorial/security/oauth2-jwt/","title":"OAuth2 with Password (and hashing), Bearer with JWT tokens","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Now that we have all the security flow, let's make the application actually secure, using JWT tokens and secure password hashing.</p> <p>This code is something you can actually use in your application, save the password hashes in your database, etc.</p> <p>We are going to start from where we left in the previous chapter and increment it.</p>"},{"location":"tutorial/security/oauth2-jwt/#about-jwt","title":"About JWT","text":"<p>JWT means \"JSON Web Tokens\".</p> <p>It's a standard to codify a JSON object in a long dense string without spaces. It looks like this:</p> <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n</code></pre> <p>It is not encrypted, so, anyone could recover the information from the contents.</p> <p>But it's signed. So, when you receive a token that you emitted, you can verify that you actually emitted it.</p> <p>That way, you can create a token with an expiration of, let's say, 1 week. And then when the user comes back the next day with the token, you know that user is still logged in to your system.</p> <p>After a week, the token will be expired and the user will not be authorized and will have to sign in again to get a new token. And if the user (or a third party) tried to modify the token to change the expiration, you would be able to discover it, because the signatures would not match.</p> <p>If you want to play with JWT tokens and see how they work, check https://jwt.io.</p>"},{"location":"tutorial/security/oauth2-jwt/#install-python-jose","title":"Install <code>python-jose</code>","text":"<p>We need to install <code>python-jose</code> to generate and verify the JWT tokens in Python:</p> <pre><code>$ pip install \"python-jose[cryptography]\"\n\n---&gt; 100%\n</code></pre> <p>Python-jose requires a cryptographic backend as an extra.</p> <p>Here we are using the recommended one: pyca/cryptography.</p> <p>Tip</p> <p>This tutorial previously used PyJWT.</p> <p>But it was updated to use Python-jose instead as it provides all the features from PyJWT plus some extras that you might need later when building integrations with other tools.</p>"},{"location":"tutorial/security/oauth2-jwt/#password-hashing","title":"Password hashing","text":"<p>\"Hashing\" means converting some content (a password in this case) into a sequence of bytes (just a string) that looks like gibberish.</p> <p>Whenever you pass exactly the same content (exactly the same password) you get exactly the same gibberish.</p> <p>But you cannot convert from the gibberish back to the password.</p>"},{"location":"tutorial/security/oauth2-jwt/#why-use-password-hashing","title":"Why use password hashing","text":"<p>If your database is stolen, the thief won't have your users' plaintext passwords, only the hashes.</p> <p>So, the thief won't be able to try to use that password in another system (as many users use the same password everywhere, this would be dangerous).</p>"},{"location":"tutorial/security/oauth2-jwt/#install-passlib","title":"Install <code>passlib</code>","text":"<p>PassLib is a great Python package to handle password hashes.</p> <p>It supports many secure hashing algorithms and utilities to work with them.</p> <p>The recommended algorithm is \"Bcrypt\".</p> <p>So, install PassLib with Bcrypt:</p> <pre><code>$ pip install \"passlib[bcrypt]\"\n\n---&gt; 100%\n</code></pre> <p>Tip</p> <p>With <code>passlib</code>, you could even configure it to be able to read passwords created by Django, a Flask security plug-in or many others.</p> <p>So, you would be able to, for example, share the same data from a Django application in a database with a ReadyAPI application. Or gradually migrate a Django application using the same database.</p> <p>And your users would be able to login from your Django app or from your ReadyAPI app, at the same time.</p>"},{"location":"tutorial/security/oauth2-jwt/#hash-and-verify-the-passwords","title":"Hash and verify the passwords","text":"<p>Import the tools we need from <code>passlib</code>.</p> <p>Create a PassLib \"context\". This is what will be used to hash and verify passwords.</p> <p>Tip</p> <p>The PassLib context also has functionality to use different hashing algorithms, including deprecated old ones only to allow verifying them, etc.</p> <p>For example, you could use it to read and verify passwords generated by another system (like Django) but hash any new passwords with a different algorithm like Bcrypt.</p> <p>And be compatible with all of them at the same time.</p> <p>Create a utility function to hash a password coming from the user.</p> <p>And another utility to verify if a received password matches the hash stored.</p> <p>And another one to authenticate and return a user.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Note</p> <p>If you check the new (fake) database <code>fake_users_db</code>, you will see how the hashed password looks like now: <code>\"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\"</code>.</p>"},{"location":"tutorial/security/oauth2-jwt/#handle-jwt-tokens","title":"Handle JWT tokens","text":"<p>Import the modules installed.</p> <p>Create a random secret key that will be used to sign the JWT tokens.</p> <p>To generate a secure random secret key use the command:</p> <pre><code>$ openssl rand -hex 32\n\n09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\n</code></pre> <p>And copy the output to the variable <code>SECRET_KEY</code> (don't use the one in the example).</p> <p>Create a variable <code>ALGORITHM</code> with the algorithm used to sign the JWT token and set it to <code>\"HS256\"</code>.</p> <p>Create a variable for the expiration of the token.</p> <p>Define a Pydantic Model that will be used in the token endpoint for the response.</p> <p>Create a utility function to generate a new access token.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#update-the-dependencies","title":"Update the dependencies","text":"<p>Update <code>get_current_user</code> to receive the same token as before, but this time, using JWT tokens.</p> <p>Decode the received token, verify it, and return the current user.</p> <p>If the token is invalid, return an HTTP error right away.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#update-the-token-path-operation","title":"Update the <code>/token</code> path operation","text":"<p>Create a <code>timedelta</code> with the expiration time of the token.</p> <p>Create a real JWT access token and return it.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#technical-details-about-the-jwt-subject-sub","title":"Technical details about the JWT \"subject\" <code>sub</code>","text":"<p>The JWT specification says that there's a key <code>sub</code>, with the subject of the token.</p> <p>It's optional to use it, but that's where you would put the user's identification, so we are using it here.</p> <p>JWT might be used for other things apart from identifying a user and allowing them to perform operations directly on your API.</p> <p>For example, you could identify a \"car\" or a \"blog post\".</p> <p>Then you could add permissions about that entity, like \"drive\" (for the car) or \"edit\" (for the blog).</p> <p>And then, you could give that JWT token to a user (or bot), and they could use it to perform those actions (drive the car, or edit the blog post) without even needing to have an account, just with the JWT token your API generated for that.</p> <p>Using these ideas, JWT can be used for way more sophisticated scenarios.</p> <p>In those cases, several of those entities could have the same ID, let's say <code>foo</code> (a user <code>foo</code>, a car <code>foo</code>, and a blog post <code>foo</code>).</p> <p>So, to avoid ID collisions, when creating the JWT token for the user, you could prefix the value of the <code>sub</code> key, e.g. with <code>username:</code>. So, in this example, the value of <code>sub</code> could have been: <code>username:johndoe</code>.</p> <p>The important thing to keep in mind is that the <code>sub</code> key should have a unique identifier across the entire application, and it should be a string.</p>"},{"location":"tutorial/security/oauth2-jwt/#check-it","title":"Check it","text":"<p>Run the server and go to the docs: http://127.0.0.1:8000/docs.</p> <p>You'll see the user interface like:</p> <p></p> <p>Authorize the application the same way as before.</p> <p>Using the credentials:</p> <p>Username: <code>johndoe</code> Password: <code>secret</code></p> <p>Check</p> <p>Notice that nowhere in the code is the plaintext password \"<code>secret</code>\", we only have the hashed version.</p> <p></p> <p>Call the endpoint <code>/users/me/</code>, you will get the response as:</p> <pre><code>{\n  \"username\": \"johndoe\",\n  \"email\": \"johndoe@example.com\",\n  \"full_name\": \"John Doe\",\n  \"disabled\": false\n}\n</code></pre> <p></p> <p>If you open the developer tools, you could see how the data sent only includes the token, the password is only sent in the first request to authenticate the user and get that access token, but not afterwards:</p> <p></p> <p>Note</p> <p>Notice the header <code>Authorization</code>, with a value that starts with <code>Bearer</code>.</p>"},{"location":"tutorial/security/oauth2-jwt/#advanced-usage-with-scopes","title":"Advanced usage with <code>scopes</code>","text":"<p>OAuth2 has the notion of \"scopes\".</p> <p>You can use them to add a specific set of permissions to a JWT token.</p> <p>Then you can give this token to a user directly or a third party, to interact with your API with a set of restrictions.</p> <p>You can learn how to use them and how they are integrated into ReadyAPI later in the Advanced User Guide.</p>"},{"location":"tutorial/security/oauth2-jwt/#recap","title":"Recap","text":"<p>With what you have seen up to now, you can set up a secure ReadyAPI application using standards like OAuth2 and JWT.</p> <p>In almost any framework handling the security becomes a rather complex subject quite quickly.</p> <p>Many packages that simplify it a lot have to make many compromises with the data model, database, and available features. And some of these packages that simplify things too much actually have security flaws underneath.</p> <p>ReadyAPI doesn't make any compromise with any database, data model or tool.</p> <p>It gives you all the flexibility to choose the ones that fit your project the best.</p> <p>And you can use directly many well maintained and widely used packages like <code>passlib</code> and <code>python-jose</code>, because ReadyAPI doesn't require any complex mechanisms to integrate external packages.</p> <p>But it provides you the tools to simplify the process as much as possible without compromising flexibility, robustness, or security.</p> <p>And you can use and implement secure, standard protocols, like OAuth2 in a relatively simple way.</p> <p>You can learn more in the Advanced User Guide about how to use OAuth2 \"scopes\", for a more fine-grained permission system, following these same standards. OAuth2 with scopes is the mechanism used by many big authentication providers, like Facebook, Google, GitHub, Microsoft, Twitter, etc. to authorize third party applications to interact with their APIs on behalf of their users.</p>"},{"location":"tutorial/middleware/","title":"Middleware","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can add middleware to ReadyAPI applications.</p> <p>A \"middleware\" is a function that works with every request before it is processed by any specific path operation. And also with every response before returning it.</p> <ul> <li>It takes each request that comes to your application.</li> <li>It can then do something to that request or run any needed code.</li> <li>Then it passes the request to be processed by the rest of the application (by some path operation).</li> <li>It then takes the response generated by the application (by some path operation).</li> <li>It can do something to that response or run any needed code.</li> <li>Then it returns the response.</li> </ul> <p>Technical Details</p> <p>If you have dependencies with <code>yield</code>, the exit code will run after the middleware.</p> <p>If there were any background tasks (documented later), they will run after all the middleware.</p>"},{"location":"tutorial/middleware/#create-a-middleware","title":"Create a middleware","text":"<p>To create a middleware you use the decorator <code>@app.middleware(\"http\")</code> on top of a function.</p> <p>The middleware function receives:</p> <ul> <li>The <code>request</code>.</li> <li>A function <code>call_next</code> that will receive the <code>request</code> as a parameter.<ul> <li>This function will pass the <code>request</code> to the corresponding path operation.</li> <li>Then it returns the <code>response</code> generated by the corresponding path operation.</li> </ul> </li> <li>You can then modify further the <code>response</code> before returning it.</li> </ul> <pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre> <p>Tip</p> <p>Keep in mind that custom proprietary headers can be added using the 'X-' prefix.</p> <p>But if you have custom headers that you want a client in a browser to be able to see, you need to add them to your CORS configurations (CORS (Cross-Origin Resource Sharing)) using the parameter <code>expose_headers</code> documented in Starlette's CORS docs.</p> <p>Technical Details</p> <p>You could also use <code>from starlette.requests import Request</code>.</p> <p>ReadyAPI provides it as a convenience for you, the developer. But it comes directly from Starlette.</p>"},{"location":"tutorial/middleware/#before-and-after-the-response","title":"Before and after the <code>response</code>","text":"<p>You can add code to be run with the <code>request</code>,  before any path operation receives it.</p> <p>And also after the <code>response</code> is generated, before returning it.</p> <p>For example, you could add a custom header <code>X-Process-Time</code> containing the time in seconds that it took to process the request and generate a response:</p> <pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre>"},{"location":"tutorial/middleware/#other-middlewares","title":"Other middlewares","text":"<p>You can later read more about other middlewares in the Advanced User Guide: Advanced Middleware.</p> <p>You will read about how to handle CORS with a middleware in the next section.</p>"},{"location":"tutorial/cors/","title":"CORS (Cross-Origin Resource Sharing)","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>CORS or \"Cross-Origin Resource Sharing\" refers to the situations when a frontend running in a browser has JavaScript code that communicates with a backend, and the backend is in a different \"origin\" than the frontend.</p>"},{"location":"tutorial/cors/#origin","title":"Origin","text":"<p>An origin is the combination of protocol (<code>http</code>, <code>https</code>), domain (<code>myapp.com</code>, <code>localhost</code>, <code>localhost.khulnasoft.com</code>), and port (<code>80</code>, <code>443</code>, <code>8080</code>).</p> <p>So, all these are different origins:</p> <ul> <li><code>http://localhost</code></li> <li><code>https://localhost</code></li> <li><code>http://localhost:8080</code></li> </ul> <p>Even if they are all in <code>localhost</code>, they use different protocols or ports, so, they are different \"origins\".</p>"},{"location":"tutorial/cors/#steps","title":"Steps","text":"<p>So, let's say you have a frontend running in your browser at <code>http://localhost:8080</code>, and its JavaScript is trying to communicate with a backend running at <code>http://localhost</code> (because we don't specify a port, the browser will assume the default port <code>80</code>).</p> <p>Then, the browser will send an HTTP <code>OPTIONS</code> request to the backend, and if the backend sends the appropriate headers authorizing the communication from this different origin (<code>http://localhost:8080</code>) then the browser will let the JavaScript in the frontend send its request to the backend.</p> <p>To achieve this, the backend must have a list of \"allowed origins\".</p> <p>In this case, it would have to include <code>http://localhost:8080</code> for the frontend to work correctly.</p>"},{"location":"tutorial/cors/#wildcards","title":"Wildcards","text":"<p>It's also possible to declare the list as <code>\"*\"</code> (a \"wildcard\") to say that all are allowed.</p> <p>But that will only allow certain types of communication, excluding everything that involves credentials: Cookies, Authorization headers like those used with Bearer Tokens, etc.</p> <p>So, for everything to work correctly, it's better to specify explicitly the allowed origins.</p>"},{"location":"tutorial/cors/#use-corsmiddleware","title":"Use <code>CORSMiddleware</code>","text":"<p>You can configure it in your ReadyAPI application using the <code>CORSMiddleware</code>.</p> <ul> <li>Import <code>CORSMiddleware</code>.</li> <li>Create a list of allowed origins (as strings).</li> <li>Add it as a \"middleware\" to your ReadyAPI application.</li> </ul> <p>You can also specify if your backend allows:</p> <ul> <li>Credentials (Authorization headers, Cookies, etc).</li> <li>Specific HTTP methods (<code>POST</code>, <code>PUT</code>) or all of them with the wildcard <code>\"*\"</code>.</li> <li>Specific HTTP headers or all of them with the wildcard <code>\"*\"</code>.</li> </ul> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.cors import CORSMiddleware\n\napp = ReadyAPI()\n\norigins = [\n    \"http://localhost.khulnasoft.com\",\n    \"https://localhost.khulnasoft.com\",\n    \"http://localhost\",\n    \"http://localhost:8080\",\n]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>The default parameters used by the <code>CORSMiddleware</code> implementation are restrictive by default, so you'll need to explicitly enable particular origins, methods, or headers, in order for browsers to be permitted to use them in a Cross-Domain context.</p> <p>The following arguments are supported:</p> <ul> <li><code>allow_origins</code> - A list of origins that should be permitted to make cross-origin requests. E.g. <code>['https://example.org', 'https://www.example.org']</code>. You can use <code>['*']</code> to allow any origin.</li> <li><code>allow_origin_regex</code> - A regex string to match against origins that should be permitted to make cross-origin requests. e.g. <code>'https://.*\\.example\\.org'</code>.</li> <li><code>allow_methods</code> - A list of HTTP methods that should be allowed for cross-origin requests. Defaults to <code>['GET']</code>. You can use <code>['*']</code> to allow all standard methods.</li> <li><code>allow_headers</code> - A list of HTTP request headers that should be supported for cross-origin requests. Defaults to <code>[]</code>. You can use <code>['*']</code> to allow all headers. The <code>Accept</code>, <code>Accept-Language</code>, <code>Content-Language</code> and <code>Content-Type</code> headers are always allowed for simple CORS requests.</li> <li><code>allow_credentials</code> - Indicate that cookies should be supported for cross-origin requests. Defaults to <code>False</code>. Also, <code>allow_origins</code> cannot be set to <code>['*']</code> for credentials to be allowed, origins must be specified.</li> <li><code>expose_headers</code> - Indicate any response headers that should be made accessible to the browser. Defaults to <code>[]</code>.</li> <li><code>max_age</code> - Sets a maximum time in seconds for browsers to cache CORS responses. Defaults to <code>600</code>.</li> </ul> <p>The middleware responds to two particular types of HTTP request...</p>"},{"location":"tutorial/cors/#cors-preflight-requests","title":"CORS preflight requests","text":"<p>These are any <code>OPTIONS</code> request with <code>Origin</code> and <code>Access-Control-Request-Method</code> headers.</p> <p>In this case the middleware will intercept the incoming request and respond with appropriate CORS headers, and either a <code>200</code> or <code>400</code> response for informational purposes.</p>"},{"location":"tutorial/cors/#simple-requests","title":"Simple requests","text":"<p>Any request with an <code>Origin</code> header. In this case the middleware will pass the request through as normal, but will include appropriate CORS headers on the response.</p>"},{"location":"tutorial/cors/#more-info","title":"More info","text":"<p>For more info about CORS, check the Mozilla CORS documentation.</p> <p>Technical Details</p> <p>You could also use <code>from starlette.middleware.cors import CORSMiddleware</code>.</p> <p>ReadyAPI provides several middlewares in <code>readyapi.middleware</code> just as a convenience for you, the developer. But most of the available middlewares come directly from Starlette.</p>"},{"location":"tutorial/sql-databases/","title":"SQL (Relational) Databases","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Info</p> <p>These docs are about to be updated. \ud83c\udf89</p> <p>The current version assumes Pydantic v1, and SQLAlchemy versions less than 2.0.</p> <p>The new docs will include Pydantic v2 and will use SQLModel (which is also based on SQLAlchemy) once it is updated to use Pydantic v2 as well.</p> <p>ReadyAPI doesn't require you to use a SQL (relational) database.</p> <p>But you can use any relational database that you want.</p> <p>Here we'll see an example using SQLAlchemy.</p> <p>You can easily adapt it to any database supported by SQLAlchemy, like:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>SQLite</li> <li>Oracle</li> <li>Microsoft SQL Server, etc.</li> </ul> <p>In this example, we'll use SQLite, because it uses a single file and Python has integrated support. So, you can copy this example and run it as is.</p> <p>Later, for your production application, you might want to use a database server like PostgreSQL.</p> <p>Tip</p> <p>There is an official project generator with ReadyAPI and PostgreSQL, all based on Docker, including a frontend and more tools: https://github.com/khulnasoft/full-stack-readyapi-postgresql</p> <p>Note</p> <p>Notice that most of the code is the standard <code>SQLAlchemy</code> code you would use with any framework.</p> <p>The ReadyAPI specific code is as small as always.</p>"},{"location":"tutorial/sql-databases/#orms","title":"ORMs","text":"<p>ReadyAPI works with any database and any style of library to talk to the database.</p> <p>A common pattern is to use an \"ORM\": an \"object-relational mapping\" library.</p> <p>An ORM has tools to convert (\"map\") between objects in code and database tables (\"relations\").</p> <p>With an ORM, you normally create a class that represents a table in a SQL database, each attribute of the class represents a column, with a name and a type.</p> <p>For example a class <code>Pet</code> could represent a SQL table <code>pets</code>.</p> <p>And each instance object of that class represents a row in the database.</p> <p>For example an object <code>orion_cat</code> (an instance of <code>Pet</code>) could have an attribute <code>orion_cat.type</code>, for the column <code>type</code>. And the value of that attribute could be, e.g. <code>\"cat\"</code>.</p> <p>These ORMs also have tools to make the connections or relations between tables or entities.</p> <p>This way, you could also have an attribute <code>orion_cat.owner</code> and the owner would contain the data for this pet's owner, taken from the table owners.</p> <p>So, <code>orion_cat.owner.name</code> could be the name (from the <code>name</code> column in the <code>owners</code> table) of this pet's owner.</p> <p>It could have a value like <code>\"Arquilian\"</code>.</p> <p>And the ORM will do all the work to get the information from the corresponding table owners when you try to access it from your pet object.</p> <p>Common ORMs are for example: Django-ORM (part of the Django framework), SQLAlchemy ORM (part of SQLAlchemy, independent of framework) and Peewee (independent of framework), among others.</p> <p>Here we will see how to work with SQLAlchemy ORM.</p> <p>In a similar way you could use any other ORM.</p> <p>Tip</p> <p>There's an equivalent article using Peewee here in the docs.</p>"},{"location":"tutorial/sql-databases/#file-structure","title":"File structure","text":"<p>For these examples, let's say you have a directory named <code>my_super_project</code> that contains a sub-directory called <code>sql_app</code> with a structure like this:</p> <pre><code>.\n\u2514\u2500\u2500 sql_app\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 crud.py\n    \u251c\u2500\u2500 database.py\n    \u251c\u2500\u2500 main.py\n    \u251c\u2500\u2500 models.py\n    \u2514\u2500\u2500 schemas.py\n</code></pre> <p>The file <code>__init__.py</code> is just an empty file, but it tells Python that <code>sql_app</code> with all its modules (Python files) is a package.</p> <p>Now let's see what each file/module does.</p>"},{"location":"tutorial/sql-databases/#install-sqlalchemy","title":"Install <code>SQLAlchemy</code>","text":"<p>First you need to install <code>SQLAlchemy</code>:</p> <pre><code>$ pip install sqlalchemy\n\n---&gt; 100%\n</code></pre>"},{"location":"tutorial/sql-databases/#create-the-sqlalchemy-parts","title":"Create the SQLAlchemy parts","text":"<p>Let's refer to the file <code>sql_app/database.py</code>.</p>"},{"location":"tutorial/sql-databases/#import-the-sqlalchemy-parts","title":"Import the SQLAlchemy parts","text":"<pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n</code></pre>"},{"location":"tutorial/sql-databases/#create-a-database-url-for-sqlalchemy","title":"Create a database URL for SQLAlchemy","text":"<pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n</code></pre> <p>In this example, we are \"connecting\" to a SQLite database (opening a file with the SQLite database).</p> <p>The file will be located at the same directory in the file <code>sql_app.db</code>.</p> <p>That's why the last part is <code>./sql_app.db</code>.</p> <p>If you were using a PostgreSQL database instead, you would just have to uncomment the line:</p> <pre><code>SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n</code></pre> <p>...and adapt it with your database data and credentials (equivalently for MySQL, MariaDB or any other).</p> <p>Tip</p> <p>This is the main line that you would have to modify if you wanted to use a different database.</p>"},{"location":"tutorial/sql-databases/#create-the-sqlalchemy-engine","title":"Create the SQLAlchemy <code>engine</code>","text":"<p>The first step is to create a SQLAlchemy \"engine\".</p> <p>We will later use this <code>engine</code> in other places.</p> <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n</code></pre>"},{"location":"tutorial/sql-databases/#note","title":"Note","text":"<p>The argument:</p> <pre><code>connect_args={\"check_same_thread\": False}\n</code></pre> <p>...is needed only for <code>SQLite</code>. It's not needed for other databases.</p> <p>Technical Details</p> <p>By default SQLite will only allow one thread to communicate with it, assuming that each thread would handle an independent request.</p> <p>This is to prevent accidentally sharing the same connection for different things (for different requests).</p> <p>But in ReadyAPI, using normal functions (<code>def</code>) more than one thread could interact with the database for the same request, so we need to make SQLite know that it should allow that with <code>connect_args={\"check_same_thread\": False}</code>.</p> <p>Also, we will make sure each request gets its own database connection session in a dependency, so there's no need for that default mechanism.</p>"},{"location":"tutorial/sql-databases/#create-a-sessionlocal-class","title":"Create a <code>SessionLocal</code> class","text":"<p>Each instance of the <code>SessionLocal</code> class will be a database session. The class itself is not a database session yet.</p> <p>But once we create an instance of the <code>SessionLocal</code> class, this instance will be the actual database session.</p> <p>We name it <code>SessionLocal</code> to distinguish it from the <code>Session</code> we are importing from SQLAlchemy.</p> <p>We will use <code>Session</code> (the one imported from SQLAlchemy) later.</p> <p>To create the <code>SessionLocal</code> class, use the function <code>sessionmaker</code>:</p> <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n</code></pre>"},{"location":"tutorial/sql-databases/#create-a-base-class","title":"Create a <code>Base</code> class","text":"<p>Now we will use the function <code>declarative_base()</code> that returns a class.</p> <p>Later we will inherit from this class to create each of the database models or classes (the ORM models):</p> <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n</code></pre>"},{"location":"tutorial/sql-databases/#create-the-database-models","title":"Create the database models","text":"<p>Let's now see the file <code>sql_app/models.py</code>.</p>"},{"location":"tutorial/sql-databases/#create-sqlalchemy-models-from-the-base-class","title":"Create SQLAlchemy models from the <code>Base</code> class","text":"<p>We will use this <code>Base</code> class we created before to create the SQLAlchemy models.</p> <p>Tip</p> <p>SQLAlchemy uses the term \"model\" to refer to these classes and instances that interact with the database.</p> <p>But Pydantic also uses the term \"model\" to refer to something different, the data validation, conversion, and documentation classes and instances.</p> <p>Import <code>Base</code> from <code>database</code> (the file <code>database.py</code> from above).</p> <p>Create classes that inherit from it.</p> <p>These classes are the SQLAlchemy models.</p> <pre><code>from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import relationship\n\nfrom .database import Base\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n\n    items = relationship(\"Item\", back_populates=\"owner\")\n\n\nclass Item(Base):\n    __tablename__ = \"items\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String, index=True)\n    description = Column(String, index=True)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n    owner = relationship(\"User\", back_populates=\"items\")\n</code></pre> <p>The <code>__tablename__</code> attribute tells SQLAlchemy the name of the table to use in the database for each of these models.</p>"},{"location":"tutorial/sql-databases/#create-model-attributescolumns","title":"Create model attributes/columns","text":"<p>Now create all the model (class) attributes.</p> <p>Each of these attributes represents a column in its corresponding database table.</p> <p>We use <code>Column</code> from SQLAlchemy as the default value.</p> <p>And we pass a SQLAlchemy class \"type\", as <code>Integer</code>, <code>String</code>, and <code>Boolean</code>, that defines the type in the database, as an argument.</p> <pre><code>from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import relationship\n\nfrom .database import Base\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n\n    items = relationship(\"Item\", back_populates=\"owner\")\n\n\nclass Item(Base):\n    __tablename__ = \"items\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String, index=True)\n    description = Column(String, index=True)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n    owner = relationship(\"User\", back_populates=\"items\")\n</code></pre>"},{"location":"tutorial/sql-databases/#create-the-relationships","title":"Create the relationships","text":"<p>Now create the relationships.</p> <p>For this, we use <code>relationship</code> provided by SQLAlchemy ORM.</p> <p>This will become, more or less, a \"magic\" attribute that will contain the values from other tables related to this one.</p> <pre><code>from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import relationship\n\nfrom .database import Base\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n\n    items = relationship(\"Item\", back_populates=\"owner\")\n\n\nclass Item(Base):\n    __tablename__ = \"items\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String, index=True)\n    description = Column(String, index=True)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n    owner = relationship(\"User\", back_populates=\"items\")\n</code></pre> <p>When accessing the attribute <code>items</code> in a <code>User</code>, as in <code>my_user.items</code>, it will have a list of <code>Item</code> SQLAlchemy models (from the <code>items</code> table) that have a foreign key pointing to this record in the <code>users</code> table.</p> <p>When you access <code>my_user.items</code>, SQLAlchemy will actually go and fetch the items from the database in the <code>items</code> table and populate them here.</p> <p>And when accessing the attribute <code>owner</code> in an <code>Item</code>, it will contain a <code>User</code> SQLAlchemy model from the <code>users</code> table. It will use the <code>owner_id</code> attribute/column with its foreign key to know which record to get from the <code>users</code> table.</p>"},{"location":"tutorial/sql-databases/#create-the-pydantic-models","title":"Create the Pydantic models","text":"<p>Now let's check the file <code>sql_app/schemas.py</code>.</p> <p>Tip</p> <p>To avoid confusion between the SQLAlchemy models and the Pydantic models, we will have the file <code>models.py</code> with the SQLAlchemy models, and the file <code>schemas.py</code> with the Pydantic models.</p> <p>These Pydantic models define more or less a \"schema\" (a valid data shape).</p> <p>So this will help us avoiding confusion while using both.</p>"},{"location":"tutorial/sql-databases/#create-initial-pydantic-models-schemas","title":"Create initial Pydantic models / schemas","text":"<p>Create an <code>ItemBase</code> and <code>UserBase</code> Pydantic models (or let's say \"schemas\") to have common attributes while creating or reading data.</p> <p>And create an <code>ItemCreate</code> and <code>UserCreate</code> that inherit from them (so they will have the same attributes), plus any additional data (attributes) needed for creation.</p> <p>So, the user will also have a <code>password</code> when creating it.</p> <p>But for security, the <code>password</code> won't be in other Pydantic models, for example, it won't be sent from the API when reading a user.</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: str | None = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: list[Item] = []\n\n    class Config:\n        orm_mode = True\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: list[Item] = []\n\n    class Config:\n        orm_mode = True\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: List[Item] = []\n\n    class Config:\n        orm_mode = True\n</code></pre>"},{"location":"tutorial/sql-databases/#sqlalchemy-style-and-pydantic-style","title":"SQLAlchemy style and Pydantic style","text":"<p>Notice that SQLAlchemy models define attributes using <code>=</code>, and pass the type as a parameter to <code>Column</code>, like in:</p> <pre><code>name = Column(String)\n</code></pre> <p>while Pydantic models declare the types using <code>:</code>, the new type annotation syntax/type hints:</p> <pre><code>name: str\n</code></pre> <p>Keep these in mind, so you don't get confused when using <code>=</code> and <code>:</code> with them.</p>"},{"location":"tutorial/sql-databases/#create-pydantic-models-schemas-for-reading-returning","title":"Create Pydantic models / schemas for reading / returning","text":"<p>Now create Pydantic models (schemas) that will be used when reading data, when returning it from the API.</p> <p>For example, before creating an item, we don't know what will be the ID assigned to it, but when reading it (when returning it from the API) we will already know its ID.</p> <p>The same way, when reading a user, we can now declare that <code>items</code> will contain the items that belong to this user.</p> <p>Not only the IDs of those items, but all the data that we defined in the Pydantic model for reading items: <code>Item</code>.</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: str | None = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: list[Item] = []\n\n    class Config:\n        orm_mode = True\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: list[Item] = []\n\n    class Config:\n        orm_mode = True\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: List[Item] = []\n\n    class Config:\n        orm_mode = True\n</code></pre> <p>Tip</p> <p>Notice that the <code>User</code>, the Pydantic model that will be used when reading a user (returning it from the API) doesn't include the <code>password</code>.</p>"},{"location":"tutorial/sql-databases/#use-pydantics-orm_mode","title":"Use Pydantic's <code>orm_mode</code>","text":"<p>Now, in the Pydantic models for reading, <code>Item</code> and <code>User</code>, add an internal <code>Config</code> class.</p> <p>This <code>Config</code> class is used to provide configurations to Pydantic.</p> <p>In the <code>Config</code> class, set the attribute <code>orm_mode = True</code>.</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: str | None = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: list[Item] = []\n\n    class Config:\n        orm_mode = True\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: list[Item] = []\n\n    class Config:\n        orm_mode = True\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: List[Item] = []\n\n    class Config:\n        orm_mode = True\n</code></pre> <p>Tip</p> <p>Notice it's assigning a value with <code>=</code>, like:</p> <p><code>orm_mode = True</code></p> <p>It doesn't use <code>:</code> as for the type declarations before.</p> <p>This is setting a config value, not declaring a type.</p> <p>Pydantic's <code>orm_mode</code> will tell the Pydantic model to read the data even if it is not a <code>dict</code>, but an ORM model (or any other arbitrary object with attributes).</p> <p>This way, instead of only trying to get the <code>id</code> value from a <code>dict</code>, as in:</p> <pre><code>id = data[\"id\"]\n</code></pre> <p>it will also try to get it from an attribute, as in:</p> <pre><code>id = data.id\n</code></pre> <p>And with this, the Pydantic model is compatible with ORMs, and you can just declare it in the <code>response_model</code> argument in your path operations.</p> <p>You will be able to return a database model and it will read the data from it.</p>"},{"location":"tutorial/sql-databases/#technical-details-about-orm-mode","title":"Technical Details about ORM mode","text":"<p>SQLAlchemy and many others are by default \"lazy loading\".</p> <p>That means, for example, that they don't fetch the data for relationships from the database unless you try to access the attribute that would contain that data.</p> <p>For example, accessing the attribute <code>items</code>:</p> <pre><code>current_user.items\n</code></pre> <p>would make SQLAlchemy go to the <code>items</code> table and get the items for this user, but not before.</p> <p>Without <code>orm_mode</code>, if you returned a SQLAlchemy model from your path operation, it wouldn't include the relationship data.</p> <p>Even if you declared those relationships in your Pydantic models.</p> <p>But with ORM mode, as Pydantic itself will try to access the data it needs from attributes (instead of assuming a <code>dict</code>), you can declare the specific data you want to return and it will be able to go and get it, even from ORMs.</p>"},{"location":"tutorial/sql-databases/#crud-utils","title":"CRUD utils","text":"<p>Now let's see the file <code>sql_app/crud.py</code>.</p> <p>In this file we will have reusable functions to interact with the data in the database.</p> <p>CRUD comes from: Create, Read, Update, and Delete.</p> <p>...although in this example we are only creating and reading.</p>"},{"location":"tutorial/sql-databases/#read-data","title":"Read data","text":"<p>Import <code>Session</code> from <code>sqlalchemy.orm</code>, this will allow you to declare the type of the <code>db</code> parameters and have better type checks and completion in your functions.</p> <p>Import <code>models</code> (the SQLAlchemy models) and <code>schemas</code> (the Pydantic models / schemas).</p> <p>Create utility functions to:</p> <ul> <li>Read a single user by ID and by email.</li> <li>Read multiple users.</li> <li>Read multiple items.</li> </ul> <pre><code>from sqlalchemy.orm import Session\n\nfrom . import models, schemas\n\n\ndef get_user(db: Session, user_id: int):\n    return db.query(models.User).filter(models.User.id == user_id).first()\n\n\ndef get_user_by_email(db: Session, email: str):\n    return db.query(models.User).filter(models.User.email == email).first()\n\n\ndef get_users(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.User).offset(skip).limit(limit).all()\n\n\ndef create_user(db: Session, user: schemas.UserCreate):\n    fake_hashed_password = user.password + \"notreallyhashed\"\n    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n\ndef get_items(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.Item).offset(skip).limit(limit).all()\n\n\ndef create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n    db_item = models.Item(**item.dict(), owner_id=user_id)\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n</code></pre> <p>Tip</p> <p>By creating functions that are only dedicated to interacting with the database (get a user or an item) independent of your path operation function, you can more easily reuse them in multiple parts and also add unit tests for them.</p>"},{"location":"tutorial/sql-databases/#create-data","title":"Create data","text":"<p>Now create utility functions to create data.</p> <p>The steps are:</p> <ul> <li>Create a SQLAlchemy model instance with your data.</li> <li><code>add</code> that instance object to your database session.</li> <li><code>commit</code> the changes to the database (so that they are saved).</li> <li><code>refresh</code> your instance (so that it contains any new data from the database, like the generated ID).</li> </ul> <pre><code>from sqlalchemy.orm import Session\n\nfrom . import models, schemas\n\n\ndef get_user(db: Session, user_id: int):\n    return db.query(models.User).filter(models.User.id == user_id).first()\n\n\ndef get_user_by_email(db: Session, email: str):\n    return db.query(models.User).filter(models.User.email == email).first()\n\n\ndef get_users(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.User).offset(skip).limit(limit).all()\n\n\ndef create_user(db: Session, user: schemas.UserCreate):\n    fake_hashed_password = user.password + \"notreallyhashed\"\n    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n\ndef get_items(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.Item).offset(skip).limit(limit).all()\n\n\ndef create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n    db_item = models.Item(**item.dict(), owner_id=user_id)\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n</code></pre> <p>Info</p> <p>In Pydantic v1 the method was called <code>.dict()</code>, it was deprecated (but still supported) in Pydantic v2, and renamed to <code>.model_dump()</code>.</p> <p>The examples here use <code>.dict()</code> for compatibility with Pydantic v1, but you should use <code>.model_dump()</code> instead if you can use Pydantic v2.</p> <p>Tip</p> <p>The SQLAlchemy model for <code>User</code> contains a <code>hashed_password</code> that should contain a secure hashed version of the password.</p> <p>But as what the API client provides is the original password, you need to extract it and generate the hashed password in your application.</p> <p>And then pass the <code>hashed_password</code> argument with the value to save.</p> <p>Warning</p> <p>This example is not secure, the password is not hashed.</p> <p>In a real life application you would need to hash the password and never save them in plaintext.</p> <p>For more details, go back to the Security section in the tutorial.</p> <p>Here we are focusing only on the tools and mechanics of databases.</p> <p>Tip</p> <p>Instead of passing each of the keyword arguments to <code>Item</code> and reading each one of them from the Pydantic model, we are generating a <code>dict</code> with the Pydantic model's data with:</p> <p><code>item.dict()</code></p> <p>and then we are passing the <code>dict</code>'s key-value pairs as the keyword arguments to the SQLAlchemy <code>Item</code>, with:</p> <p><code>Item(**item.dict())</code></p> <p>And then we pass the extra keyword argument <code>owner_id</code> that is not provided by the Pydantic model, with:</p> <p><code>Item(**item.dict(), owner_id=user_id)</code></p>"},{"location":"tutorial/sql-databases/#main-readyapi-app","title":"Main ReadyAPI app","text":"<p>And now in the file <code>sql_app/main.py</code> let's integrate and use all the other parts we created before.</p>"},{"location":"tutorial/sql-databases/#create-the-database-tables","title":"Create the database tables","text":"<p>In a very simplistic way create the database tables:</p> Python 3.9+Python 3.8+ <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = ReadyAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=list[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=list[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n</code></pre> <pre><code>from typing import List\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = ReadyAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n</code></pre>"},{"location":"tutorial/sql-databases/#alembic-note","title":"Alembic Note","text":"<p>Normally you would probably initialize your database (create tables, etc) with Alembic.</p> <p>And you would also use Alembic for \"migrations\" (that's its main job).</p> <p>A \"migration\" is the set of steps needed whenever you change the structure of your SQLAlchemy models, add a new attribute, etc. to replicate those changes in the database, add a new column, a new table, etc.</p> <p>You can find an example of Alembic in a ReadyAPI project in the templates from Project Generation - Template. Specifically in the <code>alembic</code> directory in the source code.</p>"},{"location":"tutorial/sql-databases/#create-a-dependency","title":"Create a dependency","text":"<p>Now use the <code>SessionLocal</code> class we created in the <code>sql_app/database.py</code> file to create a dependency.</p> <p>We need to have an independent database session/connection (<code>SessionLocal</code>) per request, use the same session through all the request and then close it after the request is finished.</p> <p>And then a new session will be created for the next request.</p> <p>For that, we will create a new dependency with <code>yield</code>, as explained before in the section about Dependencies with <code>yield</code>.</p> <p>Our dependency will create a new SQLAlchemy <code>SessionLocal</code> that will be used in a single request, and then close it once the request is finished.</p> Python 3.9+Python 3.8+ <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = ReadyAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=list[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=list[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n</code></pre> <pre><code>from typing import List\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = ReadyAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n</code></pre> <p>Info</p> <p>We put the creation of the <code>SessionLocal()</code> and handling of the requests in a <code>try</code> block.</p> <p>And then we close it in the <code>finally</code> block.</p> <p>This way we make sure the database session is always closed after the request. Even if there was an exception while processing the request.</p> <p>But you can't raise another exception from the exit code (after <code>yield</code>). See more in Dependencies with <code>yield</code> and <code>HTTPException</code></p> <p>And then, when using the dependency in a path operation function, we declare it with the type <code>Session</code> we imported directly from SQLAlchemy.</p> <p>This will then give us better editor support inside the path operation function, because the editor will know that the <code>db</code> parameter is of type <code>Session</code>:</p> Python 3.9+Python 3.8+ <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = ReadyAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=list[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=list[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n</code></pre> <pre><code>from typing import List\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = ReadyAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n</code></pre> <p>Technical Details</p> <p>The parameter <code>db</code> is actually of type <code>SessionLocal</code>, but this class (created with <code>sessionmaker()</code>) is a \"proxy\" of a SQLAlchemy <code>Session</code>, so, the editor doesn't really know what methods are provided.</p> <p>But by declaring the type as <code>Session</code>, the editor now can know the available methods (<code>.add()</code>, <code>.query()</code>, <code>.commit()</code>, etc) and can provide better support (like completion). The type declaration doesn't affect the actual object.</p>"},{"location":"tutorial/sql-databases/#create-your-readyapi-path-operations","title":"Create your ReadyAPI path operations","text":"<p>Now, finally, here's the standard ReadyAPI path operations code.</p> Python 3.9+Python 3.8+ <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = ReadyAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=list[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=list[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n</code></pre> <pre><code>from typing import List\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = ReadyAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n</code></pre> <p>We are creating the database session before each request in the dependency with <code>yield</code>, and then closing it afterwards.</p> <p>And then we can create the required dependency in the path operation function, to get that session directly.</p> <p>With that, we can just call <code>crud.get_user</code> directly from inside of the path operation function and use that session.</p> <p>Tip</p> <p>Notice that the values you return are SQLAlchemy models, or lists of SQLAlchemy models.</p> <p>But as all the path operations have a <code>response_model</code> with Pydantic models / schemas using <code>orm_mode</code>, the data declared in your Pydantic models will be extracted from them and returned to the client, with all the normal filtering and validation.</p> <p>Tip</p> <p>Also notice that there are <code>response_models</code> that have standard Python types like <code>List[schemas.Item]</code>.</p> <p>But as the content/parameter of that <code>List</code> is a Pydantic model with <code>orm_mode</code>, the data will be retrieved and returned to the client as normally, without problems.</p>"},{"location":"tutorial/sql-databases/#about-def-vs-async-def","title":"About <code>def</code> vs <code>async def</code>","text":"<p>Here we are using SQLAlchemy code inside of the path operation function and in the dependency, and, in turn, it will go and communicate with an external database.</p> <p>That could potentially require some \"waiting\".</p> <p>But as SQLAlchemy doesn't have compatibility for using <code>await</code> directly, as would be with something like:</p> <pre><code>user = await db.query(User).first()\n</code></pre> <p>...and instead we are using:</p> <pre><code>user = db.query(User).first()\n</code></pre> <p>Then we should declare the path operation functions and the dependency without <code>async def</code>, just with a normal <code>def</code>, as:</p> <pre><code>@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    ...\n</code></pre> <p>Info</p> <p>If you need to connect to your relational database asynchronously, see Async SQL (Relational) Databases.</p> <p>Very Technical Details</p> <p>If you are curious and have a deep technical knowledge, you can check the very technical details of how this <code>async def</code> vs <code>def</code> is handled in the Async docs.</p>"},{"location":"tutorial/sql-databases/#migrations","title":"Migrations","text":"<p>Because we are using SQLAlchemy directly and we don't require any kind of plug-in for it to work with ReadyAPI, we could integrate database migrations with Alembic directly.</p> <p>And as the code related to SQLAlchemy and the SQLAlchemy models lives in separate independent files, you would even be able to perform the migrations with Alembic without having to install ReadyAPI, Pydantic, or anything else.</p> <p>The same way, you would be able to use the same SQLAlchemy models and utilities in other parts of your code that are not related to ReadyAPI.</p> <p>For example, in a background task worker with Celery, RQ, or ARQ.</p>"},{"location":"tutorial/sql-databases/#review-all-the-files","title":"Review all the files","text":"<p>Remember you should have a directory named <code>my_super_project</code> that contains a sub-directory called <code>sql_app</code>.</p> <p><code>sql_app</code> should have the following files:</p> <ul> <li> <p><code>sql_app/__init__.py</code>: is an empty file.</p> </li> <li> <p><code>sql_app/database.py</code>:</p> </li> </ul> <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n</code></pre> <ul> <li><code>sql_app/models.py</code>:</li> </ul> <pre><code>from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import relationship\n\nfrom .database import Base\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n\n    items = relationship(\"Item\", back_populates=\"owner\")\n\n\nclass Item(Base):\n    __tablename__ = \"items\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String, index=True)\n    description = Column(String, index=True)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n    owner = relationship(\"User\", back_populates=\"items\")\n</code></pre> <ul> <li><code>sql_app/schemas.py</code>:</li> </ul> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: str | None = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: list[Item] = []\n\n    class Config:\n        orm_mode = True\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: list[Item] = []\n\n    class Config:\n        orm_mode = True\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: List[Item] = []\n\n    class Config:\n        orm_mode = True\n</code></pre> <ul> <li><code>sql_app/crud.py</code>:</li> </ul> <pre><code>from sqlalchemy.orm import Session\n\nfrom . import models, schemas\n\n\ndef get_user(db: Session, user_id: int):\n    return db.query(models.User).filter(models.User.id == user_id).first()\n\n\ndef get_user_by_email(db: Session, email: str):\n    return db.query(models.User).filter(models.User.email == email).first()\n\n\ndef get_users(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.User).offset(skip).limit(limit).all()\n\n\ndef create_user(db: Session, user: schemas.UserCreate):\n    fake_hashed_password = user.password + \"notreallyhashed\"\n    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n\ndef get_items(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.Item).offset(skip).limit(limit).all()\n\n\ndef create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n    db_item = models.Item(**item.dict(), owner_id=user_id)\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n</code></pre> <ul> <li><code>sql_app/main.py</code>:</li> </ul> Python 3.9+Python 3.8+ <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = ReadyAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=list[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=list[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n</code></pre> <pre><code>from typing import List\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = ReadyAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n</code></pre>"},{"location":"tutorial/sql-databases/#check-it","title":"Check it","text":"<p>You can copy this code and use it as is.</p> <p>Info</p> <p>In fact, the code shown here is part of the tests. As most of the code in these docs.</p> <p>Then you can run it with Uvicorn:</p> <pre><code>$ uvicorn sql_app.main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>And then, you can open your browser at http://127.0.0.1:8000/docs.</p> <p>And you will be able to interact with your ReadyAPI application, reading data from a real database:</p> <p></p>"},{"location":"tutorial/sql-databases/#interact-with-the-database-directly","title":"Interact with the database directly","text":"<p>If you want to explore the SQLite database (file) directly, independently of ReadyAPI, to debug its contents, add tables, columns, records, modify data, etc. you can use DB Browser for SQLite.</p> <p>It will look like this:</p> <p></p> <p>You can also use an online SQLite browser like SQLite Viewer or ExtendsClass.</p>"},{"location":"tutorial/sql-databases/#alternative-db-session-with-middleware","title":"Alternative DB session with middleware","text":"<p>If you can't use dependencies with <code>yield</code> -- for example, if you are not using Python 3.7 and can't install the \"backports\" mentioned above for Python 3.6 -- you can set up the session in a \"middleware\" in a similar way.</p> <p>A \"middleware\" is basically a function that is always executed for each request, with some code executed before, and some code executed after the endpoint function.</p>"},{"location":"tutorial/sql-databases/#create-a-middleware","title":"Create a middleware","text":"<p>The middleware we'll add (just a function) will create a new SQLAlchemy <code>SessionLocal</code> for each request, add it to the request and then close it once the request is finished.</p> Python 3.9+Python 3.8+ <pre><code>from readyapi import Depends, HTTPException, ReadyAPI, Request, Response\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def db_session_middleware(request: Request, call_next):\n    response = Response(\"Internal server error\", status_code=500)\n    try:\n        request.state.db = SessionLocal()\n        response = await call_next(request)\n    finally:\n        request.state.db.close()\n    return response\n\n\n# Dependency\ndef get_db(request: Request):\n    return request.state.db\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=list[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=list[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n</code></pre> <pre><code>from typing import List\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, Request, Response\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def db_session_middleware(request: Request, call_next):\n    response = Response(\"Internal server error\", status_code=500)\n    try:\n        request.state.db = SessionLocal()\n        response = await call_next(request)\n    finally:\n        request.state.db.close()\n    return response\n\n\n# Dependency\ndef get_db(request: Request):\n    return request.state.db\n\n\n@app.post(\"/users/\", response_model=schemas.User)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db=db, user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = crud.get_users(db, skip=skip, limit=limit)\n    return users\n\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\ndef create_item_for_user(\n    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n):\n    return crud.create_user_item(db=db, item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = crud.get_items(db, skip=skip, limit=limit)\n    return items\n</code></pre> <p>Info</p> <p>We put the creation of the <code>SessionLocal()</code> and handling of the requests in a <code>try</code> block.</p> <p>And then we close it in the <code>finally</code> block.</p> <p>This way we make sure the database session is always closed after the request. Even if there was an exception while processing the request.</p>"},{"location":"tutorial/sql-databases/#about-requeststate","title":"About <code>request.state</code>","text":"<p><code>request.state</code> is a property of each <code>Request</code> object. It is there to store arbitrary objects attached to the request itself, like the database session in this case. You can read more about it in Starlette's docs about <code>Request</code> state.</p> <p>For us in this case, it helps us ensure a single database session is used through all the request, and then closed afterwards (in the middleware).</p>"},{"location":"tutorial/sql-databases/#dependencies-with-yield-or-middleware","title":"Dependencies with <code>yield</code> or middleware","text":"<p>Adding a middleware here is similar to what a dependency with <code>yield</code> does, with some differences:</p> <ul> <li>It requires more code and is a bit more complex.</li> <li>The middleware has to be an <code>async</code> function.<ul> <li>If there is code in it that has to \"wait\" for the network, it could \"block\" your application there and degrade performance a bit.</li> <li>Although it's probably not very problematic here with the way <code>SQLAlchemy</code> works.</li> <li>But if you added more code to the middleware that had a lot of I/O waiting, it could then be problematic.</li> </ul> </li> <li>A middleware is run for every request.<ul> <li>So, a connection will be created for every request.</li> <li>Even when the path operation that handles that request didn't need the DB.</li> </ul> </li> </ul> <p>Tip</p> <p>It's probably better to use dependencies with <code>yield</code> when they are enough for the use case.</p> <p>Info</p> <p>Dependencies with <code>yield</code> were added recently to ReadyAPI.</p> <p>A previous version of this tutorial only had the examples with a middleware and there are probably several applications using the middleware for database session management.</p>"},{"location":"tutorial/bigger-applications/","title":"Bigger Applications - Multiple Files","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>If you are building an application or a web API, it's rarely the case that you can put everything on a single file.</p> <p>ReadyAPI provides a convenience tool to structure your application while keeping all the flexibility.</p> <p>Info</p> <p>If you come from Flask, this would be the equivalent of Flask's Blueprints.</p>"},{"location":"tutorial/bigger-applications/#an-example-file-structure","title":"An example file structure","text":"<p>Let's say you have a file structure like this:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dependencies.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 routers\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 items.py\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 users.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internal\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 admin.py\n</code></pre> <p>Tip</p> <p>There are several <code>__init__.py</code> files: one in each directory or subdirectory.</p> <p>This is what allows importing code from one file into another.</p> <p>For example, in <code>app/main.py</code> you could have a line like:</p> <pre><code>from app.routers import items\n</code></pre> <ul> <li>The <code>app</code> directory contains everything. And it has an empty file <code>app/__init__.py</code>, so it is a \"Python package\" (a collection of \"Python modules\"): <code>app</code>.</li> <li>It contains an <code>app/main.py</code> file. As it is inside a Python package (a directory with a file <code>__init__.py</code>), it is a \"module\" of that package: <code>app.main</code>.</li> <li>There's also an <code>app/dependencies.py</code> file, just like <code>app/main.py</code>, it is a \"module\": <code>app.dependencies</code>.</li> <li>There's a subdirectory <code>app/routers/</code> with another file <code>__init__.py</code>, so it's a \"Python subpackage\": <code>app.routers</code>.</li> <li>The file <code>app/routers/items.py</code> is inside a package, <code>app/routers/</code>, so, it's a submodule: <code>app.routers.items</code>.</li> <li>The same with <code>app/routers/users.py</code>, it's another submodule: <code>app.routers.users</code>.</li> <li>There's also a subdirectory <code>app/internal/</code> with another file <code>__init__.py</code>, so it's another \"Python subpackage\": <code>app.internal</code>.</li> <li>And the file <code>app/internal/admin.py</code> is another submodule: <code>app.internal.admin</code>.</li> </ul> <p></p> <p>The same file structure with comments:</p> <pre><code>.\n\u251c\u2500\u2500 app                  # \"app\" is a Python package\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py      # this file makes \"app\" a \"Python package\"\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py          # \"main\" module, e.g. import app.main\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dependencies.py  # \"dependencies\" module, e.g. import app.dependencies\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 routers          # \"routers\" is a \"Python subpackage\"\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 __init__.py  # makes \"routers\" a \"Python subpackage\"\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 items.py     # \"items\" submodule, e.g. import app.routers.items\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 users.py     # \"users\" submodule, e.g. import app.routers.users\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internal         # \"internal\" is a \"Python subpackage\"\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py  # makes \"internal\" a \"Python subpackage\"\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 admin.py     # \"admin\" submodule, e.g. import app.internal.admin\n</code></pre>"},{"location":"tutorial/bigger-applications/#apirouter","title":"<code>APIRouter</code>","text":"<p>Let's say the file dedicated to handling just users is the submodule at <code>/app/routers/users.py</code>.</p> <p>You want to have the path operations related to your users separated from the rest of the code, to keep it organized.</p> <p>But it's still part of the same ReadyAPI application/web API (it's part of the same \"Python Package\").</p> <p>You can create the path operations for that module using <code>APIRouter</code>.</p>"},{"location":"tutorial/bigger-applications/#import-apirouter","title":"Import <code>APIRouter</code>","text":"<p>You import it and create an \"instance\" the same way you would with the class <code>ReadyAPI</code>:</p> app/routers/users.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n</code></pre>"},{"location":"tutorial/bigger-applications/#path-operations-with-apirouter","title":"Path operations with <code>APIRouter</code>","text":"<p>And then you use it to declare your path operations.</p> <p>Use it the same way you would use the <code>ReadyAPI</code> class:</p> app/routers/users.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n</code></pre> <p>You can think of <code>APIRouter</code> as a \"mini <code>ReadyAPI</code>\" class.</p> <p>All the same options are supported.</p> <p>All the same <code>parameters</code>, <code>responses</code>, <code>dependencies</code>, <code>tags</code>, etc.</p> <p>Tip</p> <p>In this example, the variable is called <code>router</code>, but you can name it however you want.</p> <p>We are going to include this <code>APIRouter</code> in the main <code>ReadyAPI</code> app, but first, let's check the dependencies and another <code>APIRouter</code>.</p>"},{"location":"tutorial/bigger-applications/#dependencies","title":"Dependencies","text":"<p>We see that we are going to need some dependencies used in several places of the application.</p> <p>So we put them in their own <code>dependencies</code> module (<code>app/dependencies.py</code>).</p> <p>We will now use a simple dependency to read a custom <code>X-Token</code> header:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated app/dependencies.py<pre><code>from typing import Annotated\n\nfrom readyapi import Header, HTTPException\n\n\nasync def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n</code></pre> app/dependencies.py<pre><code>from readyapi import Header, HTTPException\nfrom typing_extensions import Annotated\n\n\nasync def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> app/dependencies.py<pre><code>from readyapi import Header, HTTPException\n\n\nasync def get_token_header(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n</code></pre> <p>Tip</p> <p>We are using an invented header to simplify this example.</p> <p>But in real cases you will get better results using the integrated Security utilities.</p>"},{"location":"tutorial/bigger-applications/#another-module-with-apirouter","title":"Another module with <code>APIRouter</code>","text":"<p>Let's say you also have the endpoints dedicated to handling \"items\" from your application in the module at <code>app/routers/items.py</code>.</p> <p>You have path operations for:</p> <ul> <li><code>/items/</code></li> <li><code>/items/{item_id}</code></li> </ul> <p>It's all the same structure as with <code>app/routers/users.py</code>.</p> <p>But we want to be smarter and simplify the code a bit.</p> <p>We know all the path operations in this module have the same:</p> <ul> <li>Path <code>prefix</code>: <code>/items</code>.</li> <li><code>tags</code>: (just one tag: <code>items</code>).</li> <li>Extra <code>responses</code>.</li> <li><code>dependencies</code>: they all need that <code>X-Token</code> dependency we created.</li> </ul> <p>So, instead of adding all that to each path operation, we can add it to the <code>APIRouter</code>.</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre> <p>As the path of each path operation has to start with <code>/</code>, like in:</p> <pre><code>@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    ...\n</code></pre> <p>...the prefix must not include a final <code>/</code>.</p> <p>So, the prefix in this case is <code>/items</code>.</p> <p>We can also add a list of <code>tags</code> and extra <code>responses</code> that will be applied to all the path operations included in this router.</p> <p>And we can add a list of <code>dependencies</code> that will be added to all the path operations in the router and will be executed/solved for each request made to them.</p> <p>Tip</p> <p>Note that, much like dependencies in path operation decorators, no value will be passed to your path operation function.</p> <p>The end result is that the item paths are now:</p> <ul> <li><code>/items/</code></li> <li><code>/items/{item_id}</code></li> </ul> <p>...as we intended.</p> <ul> <li>They will be marked with a list of tags that contain a single string <code>\"items\"</code>.<ul> <li>These \"tags\" are especially useful for the automatic interactive documentation systems (using OpenAPI).</li> </ul> </li> <li>All of them will include the predefined <code>responses</code>.</li> <li>All these path operations will have the list of <code>dependencies</code> evaluated/executed before them.<ul> <li>If you also declare dependencies in a specific path operation, they will be executed too.</li> <li>The router dependencies are executed first, then the <code>dependencies</code> in the decorator, and then the normal parameter dependencies.</li> <li>You can also add <code>Security</code> dependencies with <code>scopes</code>.</li> </ul> </li> </ul> <p>Tip</p> <p>Having <code>dependencies</code> in the <code>APIRouter</code> can be used, for example, to require authentication for a whole group of path operations. Even if the dependencies are not added individually to each one of them.</p> <p>Check</p> <p>The <code>prefix</code>, <code>tags</code>, <code>responses</code>, and <code>dependencies</code> parameters are (as in many other cases) just a feature from ReadyAPI to help you avoid code duplication.</p>"},{"location":"tutorial/bigger-applications/#import-the-dependencies","title":"Import the dependencies","text":"<p>This code lives in the module <code>app.routers.items</code>, the file <code>app/routers/items.py</code>.</p> <p>And we need to get the dependency function from the module <code>app.dependencies</code>, the file <code>app/dependencies.py</code>.</p> <p>So we use a relative import with <code>..</code> for the dependencies:</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#how-relative-imports-work","title":"How relative imports work","text":"<p>Tip</p> <p>If you know perfectly how imports work, continue to the next section below.</p> <p>A single dot <code>.</code>, like in:</p> <pre><code>from .dependencies import get_token_header\n</code></pre> <p>would mean:</p> <ul> <li>Starting in the same package that this module (the file <code>app/routers/items.py</code>) lives in (the directory <code>app/routers/</code>)...</li> <li>find the module <code>dependencies</code> (an imaginary file at <code>app/routers/dependencies.py</code>)...</li> <li>and from it, import the function <code>get_token_header</code>.</li> </ul> <p>But that file doesn't exist, our dependencies are in a file at <code>app/dependencies.py</code>.</p> <p>Remember how our app/file structure looks like:</p> <p></p> <p>The two dots <code>..</code>, like in:</p> <pre><code>from ..dependencies import get_token_header\n</code></pre> <p>mean:</p> <ul> <li>Starting in the same package that this module (the file <code>app/routers/items.py</code>) lives in (the directory <code>app/routers/</code>)...</li> <li>go to the parent package (the directory <code>app/</code>)...</li> <li>and in there, find the module <code>dependencies</code> (the file at <code>app/dependencies.py</code>)...</li> <li>and from it, import the function <code>get_token_header</code>.</li> </ul> <p>That works correctly! \ud83c\udf89</p> <p>The same way, if we had used three dots <code>...</code>, like in:</p> <pre><code>from ...dependencies import get_token_header\n</code></pre> <p>that would mean:</p> <ul> <li>Starting in the same package that this module (the file <code>app/routers/items.py</code>) lives in (the directory <code>app/routers/</code>)...</li> <li>go to the parent package (the directory <code>app/</code>)...</li> <li>then go to the parent of that package (there's no parent package, <code>app</code> is the top level \ud83d\ude31)...</li> <li>and in there, find the module <code>dependencies</code> (the file at <code>app/dependencies.py</code>)...</li> <li>and from it, import the function <code>get_token_header</code>.</li> </ul> <p>That would refer to some package above <code>app/</code>, with its own file <code>__init__.py</code>, etc. But we don't have that. So, that would throw an error in our example. \ud83d\udea8</p> <p>But now you know how it works, so you can use relative imports in your own apps no matter how complex they are. \ud83e\udd13</p>"},{"location":"tutorial/bigger-applications/#add-some-custom-tags-responses-and-dependencies","title":"Add some custom <code>tags</code>, <code>responses</code>, and <code>dependencies</code>","text":"<p>We are not adding the prefix <code>/items</code> nor the <code>tags=[\"items\"]</code> to each path operation because we added them to the <code>APIRouter</code>.</p> <p>But we can still add more <code>tags</code> that will be applied to a specific path operation, and also some extra <code>responses</code> specific to that path operation:</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre> <p>Tip</p> <p>This last path operation will have the combination of tags: <code>[\"items\", \"custom\"]</code>.</p> <p>And it will also have both responses in the documentation, one for <code>404</code> and one for <code>403</code>.</p>"},{"location":"tutorial/bigger-applications/#the-main-readyapi","title":"The main <code>ReadyAPI</code>","text":"<p>Now, let's see the module at <code>app/main.py</code>.</p> <p>Here's where you import and use the class <code>ReadyAPI</code>.</p> <p>This will be the main file in your application that ties everything together.</p> <p>And as most of your logic will now live in its own specific module, the main file will be quite simple.</p>"},{"location":"tutorial/bigger-applications/#import-readyapi","title":"Import <code>ReadyAPI</code>","text":"<p>You import and create a <code>ReadyAPI</code> class as normally.</p> <p>And we can even declare global dependencies that will be combined with the dependencies for each <code>APIRouter</code>:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#import-the-apirouter","title":"Import the <code>APIRouter</code>","text":"<p>Now we import the other submodules that have <code>APIRouter</code>s:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>As the files <code>app/routers/users.py</code> and <code>app/routers/items.py</code> are submodules that are part of the same Python package <code>app</code>, we can use a single dot <code>.</code> to import them using \"relative imports\".</p>"},{"location":"tutorial/bigger-applications/#how-the-importing-works","title":"How the importing works","text":"<p>The section:</p> <pre><code>from .routers import items, users\n</code></pre> <p>means:</p> <ul> <li>Starting in the same package that this module (the file <code>app/main.py</code>) lives in (the directory <code>app/</code>)...</li> <li>look for the subpackage <code>routers</code> (the directory at <code>app/routers/</code>)...</li> <li>and from it, import the submodule <code>items</code> (the file at <code>app/routers/items.py</code>) and <code>users</code> (the file at <code>app/routers/users.py</code>)...</li> </ul> <p>The module <code>items</code> will have a variable <code>router</code> (<code>items.router</code>). This is the same one we created in the file <code>app/routers/items.py</code>, it's an <code>APIRouter</code> object.</p> <p>And then we do the same for the module <code>users</code>.</p> <p>We could also import them like:</p> <pre><code>from app.routers import items, users\n</code></pre> <p>Info</p> <p>The first version is a \"relative import\":</p> <pre><code>from .routers import items, users\n</code></pre> <p>The second version is an \"absolute import\":</p> <pre><code>from app.routers import items, users\n</code></pre> <p>To learn more about Python Packages and Modules, read the official Python documentation about Modules.</p>"},{"location":"tutorial/bigger-applications/#avoid-name-collisions","title":"Avoid name collisions","text":"<p>We are importing the submodule <code>items</code> directly, instead of importing just its variable <code>router</code>.</p> <p>This is because we also have another variable named <code>router</code> in the submodule <code>users</code>.</p> <p>If we had imported one after the other, like:</p> <pre><code>from .routers.items import router\nfrom .routers.users import router\n</code></pre> <p>the <code>router</code> from <code>users</code> would overwrite the one from <code>items</code> and we wouldn't be able to use them at the same time.</p> <p>So, to be able to use both of them in the same file, we import the submodules directly:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#include-the-apirouters-for-users-and-items","title":"Include the <code>APIRouter</code>s for <code>users</code> and <code>items</code>","text":"<p>Now, let's include the <code>router</code>s from the submodules <code>users</code> and <code>items</code>:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>Info</p> <p><code>users.router</code> contains the <code>APIRouter</code> inside of the file <code>app/routers/users.py</code>.</p> <p>And <code>items.router</code> contains the <code>APIRouter</code> inside of the file <code>app/routers/items.py</code>.</p> <p>With <code>app.include_router()</code> we can add each <code>APIRouter</code> to the main <code>ReadyAPI</code> application.</p> <p>It will include all the routes from that router as part of it.</p> <p>Technical Details</p> <p>It will actually internally create a path operation for each path operation that was declared in the <code>APIRouter</code>.</p> <p>So, behind the scenes, it will actually work as if everything was the same single app.</p> <p>Check</p> <p>You don't have to worry about performance when including routers.</p> <p>This will take microseconds and will only happen at startup.</p> <p>So it won't affect performance. \u26a1</p>"},{"location":"tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies","title":"Include an <code>APIRouter</code> with a custom <code>prefix</code>, <code>tags</code>, <code>responses</code>, and <code>dependencies</code>","text":"<p>Now, let's imagine your organization gave you the <code>app/internal/admin.py</code> file.</p> <p>It contains an <code>APIRouter</code> with some admin path operations that your organization shares between several projects.</p> <p>For this example it will be super simple. But let's say that because it is shared with other projects in the organization, we cannot modify it and add a <code>prefix</code>, <code>dependencies</code>, <code>tags</code>, etc. directly to the <code>APIRouter</code>:</p> app/internal/admin.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/\")\nasync def update_admin():\n    return {\"message\": \"Admin getting schwifty\"}\n</code></pre> <p>But we still want to set a custom <code>prefix</code> when including the <code>APIRouter</code> so that all its path operations start with <code>/admin</code>, we want to secure it with the <code>dependencies</code> we already have for this project, and we want to include <code>tags</code> and <code>responses</code>.</p> <p>We can declare all that without having to modify the original <code>APIRouter</code> by passing those parameters to <code>app.include_router()</code>:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>That way, the original <code>APIRouter</code> will keep unmodified, so we can still share that same <code>app/internal/admin.py</code> file with other projects in the organization.</p> <p>The result is that in our app, each of the path operations from the <code>admin</code> module will have:</p> <ul> <li>The prefix <code>/admin</code>.</li> <li>The tag <code>admin</code>.</li> <li>The dependency <code>get_token_header</code>.</li> <li>The response <code>418</code>. \ud83c\udf75</li> </ul> <p>But that will only affect that <code>APIRouter</code> in our app, not in any other code that uses it.</p> <p>So, for example, other projects could use the same <code>APIRouter</code> with a different authentication method.</p>"},{"location":"tutorial/bigger-applications/#include-a-path-operation","title":"Include a path operation","text":"<p>We can also add path operations directly to the <code>ReadyAPI</code> app.</p> <p>Here we do it... just to show that we can \ud83e\udd37:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>and it will work correctly, together with all the other path operations added with <code>app.include_router()</code>.</p> <p>Very Technical Details</p> <p>Note: this is a very technical detail that you probably can just skip.</p> <p>The <code>APIRouter</code>s are not \"mounted\", they are not isolated from the rest of the application.</p> <p>This is because we want to include their path operations in the OpenAPI schema and the user interfaces.</p> <p>As we cannot just isolate them and \"mount\" them independently of the rest, the path operations are \"cloned\" (re-created), not included directly.</p>"},{"location":"tutorial/bigger-applications/#check-the-automatic-api-docs","title":"Check the automatic API docs","text":"<p>Now, run <code>uvicorn</code>, using the module <code>app.main</code> and the variable <code>app</code>:</p> <pre><code>$ uvicorn app.main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>And open the docs at http://127.0.0.1:8000/docs.</p> <p>You will see the automatic API docs, including the paths from all the submodules, using the correct paths (and prefixes) and the correct tags:</p> <p></p>"},{"location":"tutorial/bigger-applications/#include-the-same-router-multiple-times-with-different-prefix","title":"Include the same router multiple times with different <code>prefix</code>","text":"<p>You can also use <code>.include_router()</code> multiple times with the same router using different prefixes.</p> <p>This could be useful, for example, to expose the same API under different prefixes, e.g. <code>/api/v1</code> and <code>/api/latest</code>.</p> <p>This is an advanced usage that you might not really need, but it's there in case you do.</p>"},{"location":"tutorial/bigger-applications/#include-an-apirouter-in-another","title":"Include an <code>APIRouter</code> in another","text":"<p>The same way you can include an <code>APIRouter</code> in a <code>ReadyAPI</code> application, you can include an <code>APIRouter</code> in another <code>APIRouter</code> using:</p> <pre><code>router.include_router(other_router)\n</code></pre> <p>Make sure you do it before including <code>router</code> in the <code>ReadyAPI</code> app, so that the path operations from <code>other_router</code> are also included.</p>"},{"location":"tutorial/metadata/","title":"Metadata and Docs URLs","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can customize several metadata configurations in your ReadyAPI application.</p>"},{"location":"tutorial/metadata/#metadata-for-api","title":"Metadata for API","text":"<p>You can set the following fields that are used in the OpenAPI specification and the automatic API docs UIs:</p> Parameter Type Description <code>title</code> <code>str</code> The title of the API. <code>summary</code> <code>str</code> A short summary of the API. Available since OpenAPI 3.1.0, ReadyAPI 0.99.0. <code>description</code> <code>str</code> A short description of the API. It can use Markdown. <code>version</code> <code>string</code> The version of the API. This is the version of your own application, not of OpenAPI. For example <code>2.5.0</code>. <code>terms_of_service</code> <code>str</code> A URL to the Terms of Service for the API. If provided, this has to be a URL. <code>contact</code> <code>dict</code> The contact information for the exposed API. It can contain several fields. <code>contact</code> fieldsParameterTypeDescription<code>name</code><code>str</code>The identifying name of the contact person/organization.<code>url</code><code>str</code>The URL pointing to the contact information. MUST be in the format of a URL.<code>email</code><code>str</code>The email address of the contact person/organization. MUST be in the format of an email address. <code>license_info</code> <code>dict</code> The license information for the exposed API. It can contain several fields. <code>license_info</code> fieldsParameterTypeDescription<code>name</code><code>str</code>REQUIRED (if a <code>license_info</code> is set). The license name used for the API.<code>identifier</code><code>str</code>An SPDX license expression for the API. The <code>identifier</code> field is mutually exclusive of the <code>url</code> field. Available since OpenAPI 3.1.0, ReadyAPI 0.99.0.<code>url</code><code>str</code>A URL to the license used for the API. MUST be in the format of a URL. <p>You can set them as follows:</p> <pre><code>from readyapi import ReadyAPI\n\ndescription = \"\"\"\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_).\n* **Read users** (_not implemented_).\n\"\"\"\n\napp = ReadyAPI(\n    title=\"ChimichangApp\",\n    description=description,\n    summary=\"Deadpool's favorite app. Nuff said.\",\n    version=\"0.0.1\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    },\n)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n</code></pre> <p>Tip</p> <p>You can write Markdown in the <code>description</code> field and it will be rendered in the output.</p> <p>With this configuration, the automatic API docs would look like:</p> <p></p>"},{"location":"tutorial/metadata/#license-identifier","title":"License identifier","text":"<p>Since OpenAPI 3.1.0 and ReadyAPI 0.99.0, you can also set the <code>license_info</code> with an <code>identifier</code> instead of a <code>url</code>.</p> <p>For example:</p> <pre><code>from readyapi import ReadyAPI\n\ndescription = \"\"\"\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_).\n* **Read users** (_not implemented_).\n\"\"\"\n\napp = ReadyAPI(\n    title=\"ChimichangApp\",\n    description=description,\n    summary=\"Deadpool's favorite app. Nuff said.\",\n    version=\"0.0.1\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"identifier\": \"MIT\",\n    },\n)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n</code></pre>"},{"location":"tutorial/metadata/#metadata-for-tags","title":"Metadata for tags","text":"<p>You can also add additional metadata for the different tags used to group your path operations with the parameter <code>openapi_tags</code>.</p> <p>It takes a list containing one dictionary for each tag.</p> <p>Each dictionary can contain:</p> <ul> <li><code>name</code> (required): a <code>str</code> with the same tag name you use in the <code>tags</code> parameter in your path operations and <code>APIRouter</code>s.</li> <li><code>description</code>: a <code>str</code> with a short description for the tag. It can have Markdown and will be shown in the docs UI.</li> <li><code>externalDocs</code>: a <code>dict</code> describing external documentation with:<ul> <li><code>description</code>: a <code>str</code> with a short description for the external docs.</li> <li><code>url</code> (required): a <code>str</code> with the URL for the external documentation.</li> </ul> </li> </ul>"},{"location":"tutorial/metadata/#create-metadata-for-tags","title":"Create metadata for tags","text":"<p>Let's try that in an example with tags for <code>users</code> and <code>items</code>.</p> <p>Create metadata for your tags and pass it to the <code>openapi_tags</code> parameter:</p> <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.khulnasoft.com/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n</code></pre> <p>Notice that you can use Markdown inside of the descriptions, for example \"login\" will be shown in bold (login) and \"fancy\" will be shown in italics (fancy).</p> <p>Tip</p> <p>You don't have to add metadata for all the tags that you use.</p>"},{"location":"tutorial/metadata/#use-your-tags","title":"Use your tags","text":"<p>Use the <code>tags</code> parameter with your path operations (and <code>APIRouter</code>s) to assign them to different tags:</p> <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.khulnasoft.com/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n</code></pre> <p>Info</p> <p>Read more about tags in Path Operation Configuration.</p>"},{"location":"tutorial/metadata/#check-the-docs","title":"Check the docs","text":"<p>Now, if you check the docs, they will show all the additional metadata:</p> <p></p>"},{"location":"tutorial/metadata/#order-of-tags","title":"Order of tags","text":"<p>The order of each tag metadata dictionary also defines the order shown in the docs UI.</p> <p>For example, even though <code>users</code> would go after <code>items</code> in alphabetical order, it is shown before them, because we added their metadata as the first dictionary in the list.</p>"},{"location":"tutorial/metadata/#openapi-url","title":"OpenAPI URL","text":"<p>By default, the OpenAPI schema is served at <code>/openapi.json</code>.</p> <p>But you can configure it with the parameter <code>openapi_url</code>.</p> <p>For example, to set it to be served at <code>/api/v1/openapi.json</code>:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre> <p>If you want to disable the OpenAPI schema completely you can set <code>openapi_url=None</code>, that will also disable the documentation user interfaces that use it.</p>"},{"location":"tutorial/metadata/#docs-urls","title":"Docs URLs","text":"<p>You can configure the two documentation user interfaces included:</p> <ul> <li>Swagger UI: served at <code>/docs</code>.<ul> <li>You can set its URL with the parameter <code>docs_url</code>.</li> <li>You can disable it by setting <code>docs_url=None</code>.</li> </ul> </li> <li>ReDoc: served at <code>/redoc</code>.<ul> <li>You can set its URL with the parameter <code>redoc_url</code>.</li> <li>You can disable it by setting <code>redoc_url=None</code>.</li> </ul> </li> </ul> <p>For example, to set Swagger UI to be served at <code>/documentation</code> and disable ReDoc:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre>"},{"location":"tutorial/testing/","title":"Testing","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Thanks to Starlette, testing ReadyAPI applications is easy and enjoyable.</p> <p>It is based on HTTPX, which in turn is designed based on Requests, so it's very familiar and intuitive.</p> <p>With it, you can use pytest directly with ReadyAPI.</p>"},{"location":"tutorial/testing/#using-testclient","title":"Using <code>TestClient</code>","text":"<p>Info</p> <p>To use <code>TestClient</code>, first install <code>httpx</code>.</p> <p>E.g. <code>pip install httpx</code>.</p> <p>Import <code>TestClient</code>.</p> <p>Create a <code>TestClient</code> by passing your ReadyAPI application to it.</p> <p>Create functions with a name that starts with <code>test_</code> (this is standard <code>pytest</code> conventions).</p> <p>Use the <code>TestClient</code> object the same way as you do with <code>httpx</code>.</p> <p>Write simple <code>assert</code> statements with the standard Python expressions that you need to check (again, standard <code>pytest</code>).</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n</code></pre> <p>Tip</p> <p>Notice that the testing functions are normal <code>def</code>, not <code>async def</code>.</p> <p>And the calls to the client are also normal calls, not using <code>await</code>.</p> <p>This allows you to use <code>pytest</code> directly without complications.</p> <p>Technical Details</p> <p>You could also use <code>from starlette.testclient import TestClient</code>.</p> <p>ReadyAPI provides the same <code>starlette.testclient</code> as <code>readyapi.testclient</code> just as a convenience for you, the developer. But it comes directly from Starlette.</p> <p>Tip</p> <p>If you want to call <code>async</code> functions in your tests apart from sending requests to your ReadyAPI application (e.g. asynchronous database functions), have a look at the Async Tests in the advanced tutorial.</p>"},{"location":"tutorial/testing/#separating-tests","title":"Separating tests","text":"<p>In a real application, you probably would have your tests in a different file.</p> <p>And your ReadyAPI application might also be composed of several files/modules, etc.</p>"},{"location":"tutorial/testing/#readyapi-app-file","title":"ReadyAPI app file","text":"<p>Let's say you have a file structure as described in Bigger Applications:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.py\n</code></pre> <p>In the file <code>main.py</code> you have your ReadyAPI app:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n</code></pre>"},{"location":"tutorial/testing/#testing-file","title":"Testing file","text":"<p>Then you could have a file <code>test_main.py</code> with your tests. It could live on the same Python package (the same directory with a <code>__init__.py</code> file):</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>Because this file is in the same package, you can use relative imports to import the object <code>app</code> from the <code>main</code> module (<code>main.py</code>):</p> <pre><code>from readyapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n</code></pre> <p>...and have the code for the tests just like before.</p>"},{"location":"tutorial/testing/#testing-extended-example","title":"Testing: extended example","text":"<p>Now let's extend this example and add more details to see how to test different parts.</p>"},{"location":"tutorial/testing/#extended-readyapi-app-file","title":"Extended ReadyAPI app file","text":"<p>Let's continue with the same file structure as before:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>Let's say that now the file <code>main.py</code> with your ReadyAPI app has some other path operations.</p> <p>It has a <code>GET</code> operation that could return an error.</p> <p>It has a <code>POST</code> operation that could return several errors.</p> <p>Both path operations require an <code>X-Token</code> header.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=400, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=400, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=400, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre>"},{"location":"tutorial/testing/#extended-testing-file","title":"Extended testing file","text":"<p>You could then update <code>test_main.py</code> with the extended tests:</p> <pre><code>from readyapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }\n\n\ndef test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }\n\n\ndef test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}\n</code></pre> <p>Whenever you need the client to pass information in the request and you don't know how to, you can search (Google) how to do it in <code>httpx</code>, or even how to do it with <code>requests</code>, as HTTPX's design is based on Requests' design.</p> <p>Then you just do the same in your tests.</p> <p>E.g.:</p> <ul> <li>To pass a path or query parameter, add it to the URL itself.</li> <li>To pass a JSON body, pass a Python object (e.g. a <code>dict</code>) to the parameter <code>json</code>.</li> <li>If you need to send Form Data instead of JSON, use the <code>data</code> parameter instead.</li> <li>To pass headers, use a <code>dict</code> in the <code>headers</code> parameter.</li> <li>For cookies, a <code>dict</code> in the <code>cookies</code> parameter.</li> </ul> <p>For more information about how to pass data to the backend (using <code>httpx</code> or the <code>TestClient</code>) check the HTTPX documentation.</p> <p>Info</p> <p>Note that the <code>TestClient</code> receives data that can be converted to JSON, not Pydantic models.</p> <p>If you have a Pydantic model in your test and you want to send its data to the application during testing, you can use the <code>jsonable_encoder</code> described in JSON Compatible Encoder.</p>"},{"location":"tutorial/testing/#run-it","title":"Run it","text":"<p>After that, you just need to install <code>pytest</code>:</p> <pre><code>$ pip install pytest\n\n---&gt; 100%\n</code></pre> <p>It will detect the files and tests automatically, execute them, and report the results back to you.</p> <p>Run the tests with:</p> <pre><code>$ pytest\n\n================ test session starts ================\nplatform linux -- Python 3.6.9, pytest-5.3.5, py-1.8.1, pluggy-0.13.1\nrootdir: /home/user/code/superawesome-cli/app\nplugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1\ncollected 6 items\n\n---&gt; 100%\n\ntest_main.py &lt;span style=\"color: green; white-space: pre;\"&gt;......                            [100%]&lt;/span&gt;\n\n&lt;span style=\"color: green;\"&gt;================= 1 passed in 0.03s =================&lt;/span&gt;\n</code></pre>"},{"location":"tutorial/debugging/","title":"Debugging","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can connect the debugger in your editor, for example with Visual Studio Code or PyCharm.</p>"},{"location":"tutorial/debugging/#call-uvicorn","title":"Call <code>uvicorn</code>","text":"<p>In your ReadyAPI application, import and run <code>uvicorn</code> directly:</p> <pre><code>import uvicorn\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef root():\n    a = \"a\"\n    b = \"b\" + a\n    return {\"hello world\": b}\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"tutorial/debugging/#about-__name__-__main__","title":"About <code>__name__ == \"__main__\"</code>","text":"<p>The main purpose of the <code>__name__ == \"__main__\"</code> is to have some code that is executed when your file is called with:</p> <pre><code>$ python myapp.py\n</code></pre> <p>but is not called when another file imports it, like in:</p> <pre><code>from myapp import app\n</code></pre>"},{"location":"tutorial/debugging/#more-details","title":"More details","text":"<p>Let's say your file is named <code>myapp.py</code>.</p> <p>If you run it with:</p> <pre><code>$ python myapp.py\n</code></pre> <p>then the internal variable <code>__name__</code> in your file, created automatically by Python, will have as value the string <code>\"__main__\"</code>.</p> <p>So, the section:</p> <pre><code>    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>will run.</p> <p>This won't happen if you import that module (file).</p> <p>So, if you have another file <code>importer.py</code> with:</p> <pre><code>from myapp import app\n\n# Some more code\n</code></pre> <p>in that case, the automatically created variable inside of <code>myapp.py</code> will not have the variable <code>__name__</code> with a value of <code>\"__main__\"</code>.</p> <p>So, the line:</p> <pre><code>    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>will not be executed.</p> <p>Info</p> <p>For more information, check the official Python docs.</p>"},{"location":"tutorial/debugging/#run-your-code-with-your-debugger","title":"Run your code with your debugger","text":"<p>Because you are running the Uvicorn server directly from your code, you can call your Python program (your ReadyAPI application) directly from the debugger.</p> <p>For example, in Visual Studio Code, you can:</p> <ul> <li>Go to the \"Debug\" panel.</li> <li>\"Add configuration...\".</li> <li>Select \"Python\"</li> <li>Run the debugger with the option \"<code>Python: Current File (Integrated Terminal)</code>\".</li> </ul> <p>It will then start the server with your ReadyAPI code, stop at your breakpoints, etc.</p> <p>Here's how it might look:</p> <p></p> <p>If you use Pycharm, you can:</p> <ul> <li>Open the \"Run\" menu.</li> <li>Select the option \"Debug...\".</li> <li>Then a context menu shows up.</li> <li>Select the file to debug (in this case, <code>main.py</code>).</li> </ul> <p>It will then start the server with your ReadyAPI code, stop at your breakpoints, etc.</p> <p>Here's how it might look:</p> <p></p>"},{"location":"advanced/path-operation-advanced-configuration/","title":"Path Operation Advanced Configuration","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p>"},{"location":"advanced/path-operation-advanced-configuration/#openapi-operationid","title":"OpenAPI operationId","text":"<p>Warning</p> <p>If you are not an \"expert\" in OpenAPI, you probably don't need this.</p> <p>You can set the OpenAPI <code>operationId</code> to be used in your path operation with the parameter <code>operation_id</code>.</p> <p>You would have to make sure that it is unique for each operation.</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", operation_id=\"some_specific_id_you_define\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#using-the-path-operation-function-name-as-the-operationid","title":"Using the path operation function name as the operationId","text":"<p>If you want to use your APIs' function names as <code>operationId</code>s, you can iterate over all of them and override each path operation's <code>operation_id</code> using their <code>APIRoute.name</code>.</p> <p>You should do it after adding all your path operations.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n\n\ndef use_route_names_as_operation_ids(app: ReadyAPI) -&gt; None:\n    \"\"\"\n    Simplify operation IDs so that generated API clients have simpler function\n    names.\n\n    Should be called only after all routes have been added.\n    \"\"\"\n    for route in app.routes:\n        if isinstance(route, APIRoute):\n            route.operation_id = route.name  # in this case, 'read_items'\n\n\nuse_route_names_as_operation_ids(app)\n</code></pre> <p>Tip</p> <p>If you manually call <code>app.openapi()</code>, you should update the <code>operationId</code>s before that.</p> <p>Warning</p> <p>If you do this, you have to make sure each one of your path operation functions has a unique name.</p> <p>Even if they are in different modules (Python files).</p>"},{"location":"advanced/path-operation-advanced-configuration/#exclude-from-openapi","title":"Exclude from OpenAPI","text":"<p>To exclude a path operation from the generated OpenAPI schema (and thus, from the automatic documentation systems), use the parameter <code>include_in_schema</code> and set it to <code>False</code>:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", include_in_schema=False)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#advanced-description-from-docstring","title":"Advanced description from docstring","text":"<p>You can limit the lines used from the docstring of a path operation function for OpenAPI.</p> <p>Adding an <code>\\f</code> (an escaped \"form feed\" character) causes ReadyAPI to truncate the output used for OpenAPI at this point.</p> <p>It won't show up in the documentation, but other tools (such as Sphinx) will be able to use the rest.</p> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \\f\n    :param item: User input.\n    \"\"\"\n    return item\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#additional-responses","title":"Additional Responses","text":"<p>You probably have seen how to declare the <code>response_model</code> and <code>status_code</code> for a path operation.</p> <p>That defines the metadata about the main response of a path operation.</p> <p>You can also declare additional responses with their models, status codes, etc.</p> <p>There's a whole chapter here in the documentation about it, you can read it at Additional Responses in OpenAPI.</p>"},{"location":"advanced/path-operation-advanced-configuration/#openapi-extra","title":"OpenAPI Extra","text":"<p>When you declare a path operation in your application, ReadyAPI automatically generates the relevant metadata about that path operation to be included in the OpenAPI schema.</p> <p>Technical details</p> <p>In the OpenAPI specification it is called the Operation Object.</p> <p>It has all the information about the path operation and is used to generate the automatic documentation.</p> <p>It includes the <code>tags</code>, <code>parameters</code>, <code>requestBody</code>, <code>responses</code>, etc.</p> <p>This path operation-specific OpenAPI schema is normally generated automatically by ReadyAPI, but you can also extend it.</p> <p>Tip</p> <p>This is a low level extension point.</p> <p>If you only need to declare additional responses, a more convenient way to do it is with Additional Responses in OpenAPI.</p> <p>You can extend the OpenAPI schema for a path operation using the parameter <code>openapi_extra</code>.</p>"},{"location":"advanced/path-operation-advanced-configuration/#openapi-extensions","title":"OpenAPI Extensions","text":"<p>This <code>openapi_extra</code> can be helpful, for example, to declare OpenAPI Extensions:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", openapi_extra={\"x-aperture-labs-portal\": \"blue\"})\nasync def read_items():\n    return [{\"item_id\": \"portal-gun\"}]\n</code></pre> <p>If you open the automatic API docs, your extension will show up at the bottom of the specific path operation.</p> <p></p> <p>And if you see the resulting OpenAPI (at <code>/openapi.json</code> in your API), you will see your extension as part of the specific path operation too:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"ReadyAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"/items/\": {\n            \"get\": {\n                \"summary\": \"Read Items\",\n                \"operationId\": \"read_items_items__get\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        }\n                    }\n                },\n                \"x-aperture-labs-portal\": \"blue\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema","title":"Custom OpenAPI path operation schema","text":"<p>The dictionary in <code>openapi_extra</code> will be deeply merged with the automatically generated OpenAPI schema for the path operation.</p> <p>So, you could add additional data to the automatically generated schema.</p> <p>For example, you could decide to read and validate the request with your own code, without using the automatic features of ReadyAPI with Pydantic, but you could still want to define the request in the OpenAPI schema.</p> <p>You could do that with <code>openapi_extra</code>:</p> <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\ndef magic_data_reader(raw_body: bytes):\n    return {\n        \"size\": len(raw_body),\n        \"content\": {\n            \"name\": \"Maaaagic\",\n            \"price\": 42,\n            \"description\": \"Just kiddin', no magic here. \u2728\",\n        },\n    }\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"required\": [\"name\", \"price\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\"type\": \"string\"},\n                            \"price\": {\"type\": \"number\"},\n                            \"description\": {\"type\": \"string\"},\n                        },\n                    }\n                }\n            },\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    data = magic_data_reader(raw_body)\n    return data\n</code></pre> <p>In this example, we didn't declare any Pydantic model. In fact, the request body is not even parsed as JSON, it is read directly as <code>bytes</code>, and the function <code>magic_data_reader()</code> would be in charge of parsing it in some way.</p> <p>Nevertheless, we can declare the expected schema for the request body.</p>"},{"location":"advanced/path-operation-advanced-configuration/#custom-openapi-content-type","title":"Custom OpenAPI content type","text":"<p>Using this same trick, you could use a Pydantic model to define the JSON Schema that is then included in the custom OpenAPI schema section for the path operation.</p> <p>And you could do this even if the data type in the request is not JSON.</p> <p>For example, in this application we don't use ReadyAPI's integrated functionality to extract the JSON Schema from Pydantic models nor the automatic validation for JSON. In fact, we are declaring the request content type as YAML, not JSON:</p> Pydantic v2Pydantic v1 <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.model_json_schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.model_validate(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors(include_url=False))\n    return item\n</code></pre> <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.parse_obj(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors())\n    return item\n</code></pre> <p>Info</p> <p>In Pydantic version 1 the method to get the JSON Schema for a model was called <code>Item.schema()</code>, in Pydantic version 2, the method is called <code>Item.model_json_schema()</code>.</p> <p>Nevertheless, although we are not using the default integrated functionality, we are still using a Pydantic model to manually generate the JSON Schema for the data that we want to receive in YAML.</p> <p>Then we use the request directly, and extract the body as <code>bytes</code>. This means that ReadyAPI won't even try to parse the request payload as JSON.</p> <p>And then in our code, we parse that YAML content directly, and then we are again using the same Pydantic model to validate the YAML content:</p> Pydantic v2Pydantic v1 <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.model_json_schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.model_validate(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors(include_url=False))\n    return item\n</code></pre> <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.parse_obj(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors())\n    return item\n</code></pre> <p>Info</p> <p>In Pydantic version 1 the method to parse and validate an object was <code>Item.parse_obj()</code>, in Pydantic version 2, the method is called <code>Item.model_validate()</code>.</p> <p>Tip</p> <p>Here we re-use the same Pydantic model.</p> <p>But the same way, we could have validated it in some other way.</p>"},{"location":"advanced/additional-status-codes/","title":"Additional Status Codes","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>By default, ReadyAPI will return the responses using a <code>JSONResponse</code>, putting the content you return from your path operation inside of that <code>JSONResponse</code>.</p> <p>It will use the default status code or the one you set in your path operation.</p>"},{"location":"advanced/additional-status-codes/#additional-status-codes_1","title":"Additional status codes","text":"<p>If you want to return additional status codes apart from the main one, you can do that by returning a <code>Response</code> directly, like a <code>JSONResponse</code>, and set the additional status code directly.</p> <p>For example, let's say that you want to have a path operation that allows to update items, and returns HTTP status codes of 200 \"OK\" when successful.</p> <p>But you also want it to accept new items. And when the items didn't exist before, it creates them, and returns an HTTP status code of 201 \"Created\".</p> <p>To achieve that, import <code>JSONResponse</code>, and return your content there directly, setting the <code>status_code</code> that you want:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[str | None, Body()] = None,\n    size: Annotated[int | None, Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: str | None = Body(default=None),\n    size: int | None = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Union[str, None] = Body(default=None),\n    size: Union[int, None] = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Warning</p> <p>When you return a <code>Response</code> directly, like in the example above, it will be returned directly.</p> <p>It won't be serialized with a model, etc.</p> <p>Make sure it has the data you want it to have, and that the values are valid JSON (if you are using <code>JSONResponse</code>).</p> <p>Technical Details</p> <p>You could also use <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI provides the same <code>starlette.responses</code> as <code>readyapi.responses</code> just as a convenience for you, the developer. But most of the available responses come directly from Starlette. The same with <code>status</code>.</p>"},{"location":"advanced/additional-status-codes/#openapi-and-api-docs","title":"OpenAPI and API docs","text":"<p>If you return additional status codes and responses directly, they won't be included in the OpenAPI schema (the API docs), because ReadyAPI doesn't have a way to know beforehand what you are going to return.</p> <p>But you can document that in your code, using: Additional Responses.</p>"},{"location":"advanced/response-directly/","title":"Return a Response Directly","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>When you create a ReadyAPI path operation you can normally return any data from it: a <code>dict</code>, a <code>list</code>, a Pydantic model, a database model, etc.</p> <p>By default, ReadyAPI would automatically convert that return value to JSON using the <code>jsonable_encoder</code> explained in JSON Compatible Encoder.</p> <p>Then, behind the scenes, it would put that JSON-compatible data (e.g. a <code>dict</code>) inside of a <code>JSONResponse</code> that would be used to send the response to the client.</p> <p>But you can return a <code>JSONResponse</code> directly from your path operations.</p> <p>It might be useful, for example, to return custom headers or cookies.</p>"},{"location":"advanced/response-directly/#return-a-response","title":"Return a <code>Response</code>","text":"<p>In fact, you can return any <code>Response</code> or any sub-class of it.</p> <p>Tip</p> <p><code>JSONResponse</code> itself is a sub-class of <code>Response</code>.</p> <p>And when you return a <code>Response</code>, ReadyAPI will pass it directly.</p> <p>It won't do any data conversion with Pydantic models, it won't convert the contents to any type, etc.</p> <p>This gives you a lot of flexibility. You can return any data type, override any data declaration or validation, etc.</p>"},{"location":"advanced/response-directly/#using-the-jsonable_encoder-in-a-response","title":"Using the <code>jsonable_encoder</code> in a <code>Response</code>","text":"<p>Because ReadyAPI doesn't do any change to a <code>Response</code> you return, you have to make sure it's contents are ready for it.</p> <p>For example, you cannot put a Pydantic model in a <code>JSONResponse</code> without first converting it to a <code>dict</code> with all the data types (like <code>datetime</code>, <code>UUID</code>, etc) converted to JSON-compatible types.</p> <p>For those cases, you can use the <code>jsonable_encoder</code> to convert your data before passing it to a response:</p> <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    return JSONResponse(content=json_compatible_item_data)\n</code></pre> <p>Technical Details</p> <p>You could also use <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI provides the same <code>starlette.responses</code> as <code>readyapi.responses</code> just as a convenience for you, the developer. But most of the available responses come directly from Starlette.</p>"},{"location":"advanced/response-directly/#returning-a-custom-response","title":"Returning a custom <code>Response</code>","text":"<p>The example above shows all the parts you need, but it's not very useful yet, as you could have just returned the <code>item</code> directly, and ReadyAPI would put it in a <code>JSONResponse</code> for you, converting it to a <code>dict</code>, etc. All that by default.</p> <p>Now, let's see how you could use that to return a custom response.</p> <p>Let's say that you want to return an XML response.</p> <p>You could put your XML content in a string, put it in a <code>Response</code>, and return it:</p> <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"&lt;?xml version=\"1.0\"?&gt;\n    &lt;shampoo&gt;\n    &lt;Header&gt;\n        Apply shampoo here.\n    &lt;/Header&gt;\n    &lt;Body&gt;\n        You'll have to use soap here.\n    &lt;/Body&gt;\n    &lt;/shampoo&gt;\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n</code></pre>"},{"location":"advanced/response-directly/#notes","title":"Notes","text":"<p>When you return a <code>Response</code> directly its data is not validated, converted (serialized), nor documented automatically.</p> <p>But you can still document it as described in Additional Responses in OpenAPI.</p> <p>You can see in later sections how to use/declare these custom <code>Response</code>s while still having automatic data conversion, documentation, etc.</p>"},{"location":"advanced/custom-response/","title":"Custom Response - HTML, Stream, File, others","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>By default, ReadyAPI will return the responses using <code>JSONResponse</code>.</p> <p>You can override it by returning a <code>Response</code> directly as seen in Return a Response directly.</p> <p>But if you return a <code>Response</code> directly, the data won't be automatically converted, and the documentation won't be automatically generated (for example, including the specific \"media type\", in the HTTP header <code>Content-Type</code> as part of the generated OpenAPI).</p> <p>But you can also declare the <code>Response</code> that you want to be used, in the path operation decorator.</p> <p>The contents that you return from your path operation function will be put inside of that <code>Response</code>.</p> <p>And if that <code>Response</code> has a JSON media type (<code>application/json</code>), like is the case with the <code>JSONResponse</code> and <code>UJSONResponse</code>, the data you return will be automatically converted (and filtered) with any Pydantic <code>response_model</code> that you declared in the path operation decorator.</p> <p>Note</p> <p>If you use a response class with no media type, ReadyAPI will expect your response to have no content, so it will not document the response format in its generated OpenAPI docs.</p>"},{"location":"advanced/custom-response/#use-orjsonresponse","title":"Use <code>ORJSONResponse</code>","text":"<p>For example, if you are squeezing performance, you can install and use <code>orjson</code> and set the response to be <code>ORJSONResponse</code>.</p> <p>Import the <code>Response</code> class (sub-class) you want to use and declare it in the path operation decorator.</p> <p>For large responses, returning a <code>Response</code> directly is much faster than returning a dictionary.</p> <p>This is because by default, ReadyAPI will inspect every item inside and make sure it is serializable as JSON, using the same JSON Compatible Encoder explained in the tutorial. This is what allows you to return arbitrary objects, for example database models.</p> <p>But if you are certain that the content that you are returning is serializable with JSON, you can pass it directly to the response class and avoid the extra overhead that ReadyAPI would have by passing your return content through the <code>jsonable_encoder</code> before passing it to the response class.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=ORJSONResponse)\nasync def read_items():\n    return ORJSONResponse([{\"item_id\": \"Foo\"}])\n</code></pre> <p>Info</p> <p>The parameter <code>response_class</code> will also be used to define the \"media type\" of the response.</p> <p>In this case, the HTTP header <code>Content-Type</code> will be set to <code>application/json</code>.</p> <p>And it will be documented as such in OpenAPI.</p> <p>Tip</p> <p>The <code>ORJSONResponse</code> is currently only available in ReadyAPI, not in Starlette.</p>"},{"location":"advanced/custom-response/#html-response","title":"HTML Response","text":"<p>To return a response with HTML directly from ReadyAPI, use <code>HTMLResponse</code>.</p> <ul> <li>Import <code>HTMLResponse</code>.</li> <li>Pass <code>HTMLResponse</code> as the parameter <code>response_class</code> of your path operation decorator.</li> </ul> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n</code></pre> <p>Info</p> <p>The parameter <code>response_class</code> will also be used to define the \"media type\" of the response.</p> <p>In this case, the HTTP header <code>Content-Type</code> will be set to <code>text/html</code>.</p> <p>And it will be documented as such in OpenAPI.</p>"},{"location":"advanced/custom-response/#return-a-response","title":"Return a <code>Response</code>","text":"<p>As seen in Return a Response directly, you can also override the response directly in your path operation, by returning it.</p> <p>The same example from above, returning an <code>HTMLResponse</code>, could look like:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    html_content = \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n</code></pre> <p>Warning</p> <p>A <code>Response</code> returned directly by your path operation function won't be documented in OpenAPI (for example, the <code>Content-Type</code> won't be documented) and won't be visible in the automatic interactive docs.</p> <p>Info</p> <p>Of course, the actual <code>Content-Type</code> header, status code, etc, will come from the <code>Response</code> object you returned.</p>"},{"location":"advanced/custom-response/#document-in-openapi-and-override-response","title":"Document in OpenAPI and override <code>Response</code>","text":"<p>If you want to override the response from inside of the function but at the same time document the \"media type\" in OpenAPI, you can use the <code>response_class</code> parameter AND return a <code>Response</code> object.</p> <p>The <code>response_class</code> will then be used only to document the OpenAPI path operation, but your <code>Response</code> will be used as is.</p>"},{"location":"advanced/custom-response/#return-an-htmlresponse-directly","title":"Return an <code>HTMLResponse</code> directly","text":"<p>For example, it could be something like:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\ndef generate_html_response():\n    html_content = \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return generate_html_response()\n</code></pre> <p>In this example, the function <code>generate_html_response()</code> already generates and returns a <code>Response</code> instead of returning the HTML in a <code>str</code>.</p> <p>By returning the result of calling <code>generate_html_response()</code>, you are already returning a <code>Response</code> that will override the default ReadyAPI behavior.</p> <p>But as you passed the <code>HTMLResponse</code> in the <code>response_class</code> too, ReadyAPI will know how to document it in OpenAPI and the interactive docs as HTML with <code>text/html</code>:</p> <p></p>"},{"location":"advanced/custom-response/#available-responses","title":"Available responses","text":"<p>Here are some of the available responses.</p> <p>Keep in mind that you can use <code>Response</code> to return anything else, or even create a custom sub-class.</p> <p>Technical Details</p> <p>You could also use <code>from starlette.responses import HTMLResponse</code>.</p> <p>ReadyAPI provides the same <code>starlette.responses</code> as <code>readyapi.responses</code> just as a convenience for you, the developer. But most of the available responses come directly from Starlette.</p>"},{"location":"advanced/custom-response/#response","title":"<code>Response</code>","text":"<p>The main <code>Response</code> class, all the other responses inherit from it.</p> <p>You can return it directly.</p> <p>It accepts the following parameters:</p> <ul> <li><code>content</code> - A <code>str</code> or <code>bytes</code>.</li> <li><code>status_code</code> - An <code>int</code> HTTP status code.</li> <li><code>headers</code> - A <code>dict</code> of strings.</li> <li><code>media_type</code> - A <code>str</code> giving the media type. E.g. <code>\"text/html\"</code>.</li> </ul> <p>ReadyAPI (actually Starlette) will automatically include a Content-Length header. It will also include a Content-Type header, based on the media_type and appending a charset for text types.</p> <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"&lt;?xml version=\"1.0\"?&gt;\n    &lt;shampoo&gt;\n    &lt;Header&gt;\n        Apply shampoo here.\n    &lt;/Header&gt;\n    &lt;Body&gt;\n        You'll have to use soap here.\n    &lt;/Body&gt;\n    &lt;/shampoo&gt;\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n</code></pre>"},{"location":"advanced/custom-response/#htmlresponse","title":"<code>HTMLResponse</code>","text":"<p>Takes some text or bytes and returns an HTML response, as you read above.</p>"},{"location":"advanced/custom-response/#plaintextresponse","title":"<code>PlainTextResponse</code>","text":"<p>Takes some text or bytes and returns an plain text response.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import PlainTextResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/\", response_class=PlainTextResponse)\nasync def main():\n    return \"Hello World\"\n</code></pre>"},{"location":"advanced/custom-response/#jsonresponse","title":"<code>JSONResponse</code>","text":"<p>Takes some data and returns an <code>application/json</code> encoded response.</p> <p>This is the default response used in ReadyAPI, as you read above.</p>"},{"location":"advanced/custom-response/#orjsonresponse","title":"<code>ORJSONResponse</code>","text":"<p>A fast alternative JSON response using <code>orjson</code>, as you read above.</p>"},{"location":"advanced/custom-response/#ujsonresponse","title":"<code>UJSONResponse</code>","text":"<p>An alternative JSON response using <code>ujson</code>.</p> <p>Warning</p> <p><code>ujson</code> is less careful than Python's built-in implementation in how it handles some edge-cases.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import UJSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=UJSONResponse)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Tip</p> <p>It's possible that <code>ORJSONResponse</code> might be a faster alternative.</p>"},{"location":"advanced/custom-response/#redirectresponse","title":"<code>RedirectResponse</code>","text":"<p>Returns an HTTP redirect. Uses a 307 status code (Temporary Redirect) by default.</p> <p>You can return a <code>RedirectResponse</code> directly:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/typer\")\nasync def redirect_typer():\n    return RedirectResponse(\"https://typer.tiangolo.com\")\n</code></pre> <p>Or you can use it in the <code>response_class</code> parameter:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/readyapi\", response_class=RedirectResponse)\nasync def redirect_readyapi():\n    return \"https://readyapi.khulnasoft.com\"\n</code></pre> <p>If you do that, then you can return the URL directly from your path operation function.</p> <p>In this case, the <code>status_code</code> used will be the default one for the <code>RedirectResponse</code>, which is <code>307</code>.</p> <p>You can also use the <code>status_code</code> parameter combined with the <code>response_class</code> parameter:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/pydantic\", response_class=RedirectResponse, status_code=302)\nasync def redirect_pydantic():\n    return \"https://docs.pydantic.dev/\"\n</code></pre>"},{"location":"advanced/custom-response/#streamingresponse","title":"<code>StreamingResponse</code>","text":"<p>Takes an async generator or a normal generator/iterator and streams the response body.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import StreamingResponse\n\napp = ReadyAPI()\n\n\nasync def fake_video_streamer():\n    for i in range(10):\n        yield b\"some fake video bytes\"\n\n\n@app.get(\"/\")\nasync def main():\n    return StreamingResponse(fake_video_streamer())\n</code></pre>"},{"location":"advanced/custom-response/#using-streamingresponse-with-file-like-objects","title":"Using <code>StreamingResponse</code> with file-like objects","text":"<p>If you have a file-like object (e.g. the object returned by <code>open()</code>), you can create a generator function to iterate over that file-like object.</p> <p>That way, you don't have to read it all first in memory, and you can pass that generator function to the <code>StreamingResponse</code>, and return it.</p> <p>This includes many libraries to interact with cloud storage, video processing, and others.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import StreamingResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef main():\n    def iterfile():  # (1)\n        with open(some_file_path, mode=\"rb\") as file_like:  # (2)\n            yield from file_like  # (3)\n\n    return StreamingResponse(iterfile(), media_type=\"video/mp4\")\n</code></pre> <ol> <li>This is the generator function. It's a \"generator function\" because it contains <code>yield</code> statements inside.</li> <li>By using a <code>with</code> block, we make sure that the file-like object is closed after the generator function is done. So, after it finishes sending the response.</li> <li> <p>This <code>yield from</code> tells the function to iterate over that thing named <code>file_like</code>. And then, for each part iterated, yield that part as coming from this generator function.</p> <p>So, it is a generator function that transfers the \"generating\" work to something else internally.</p> <p>By doing it this way, we can put it in a <code>with</code> block, and that way, ensure that it is closed after finishing.</p> </li> </ol> <p>Tip</p> <p>Notice that here as we are using standard <code>open()</code> that doesn't support <code>async</code> and <code>await</code>, we declare the path operation with normal <code>def</code>.</p>"},{"location":"advanced/custom-response/#fileresponse","title":"<code>FileResponse</code>","text":"<p>Asynchronously streams a file as the response.</p> <p>Takes a different set of arguments to instantiate than the other response types:</p> <ul> <li><code>path</code> - The filepath to the file to stream.</li> <li><code>headers</code> - Any custom headers to include, as a dictionary.</li> <li><code>media_type</code> - A string giving the media type. If unset, the filename or path will be used to infer a media type.</li> <li><code>filename</code> - If set, this will be included in the response <code>Content-Disposition</code>.</li> </ul> <p>File responses will include appropriate <code>Content-Length</code>, <code>Last-Modified</code> and <code>ETag</code> headers.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def main():\n    return FileResponse(some_file_path)\n</code></pre> <p>You can also use the <code>response_class</code> parameter:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\", response_class=FileResponse)\nasync def main():\n    return some_file_path\n</code></pre> <p>In this case, you can return the file path directly from your path operation function.</p>"},{"location":"advanced/custom-response/#custom-response-class","title":"Custom response class","text":"<p>You can create your own custom response class, inheriting from <code>Response</code> and using it.</p> <p>For example, let's say that you want to use <code>orjson</code>, but with some custom settings not used in the included <code>ORJSONResponse</code> class.</p> <p>Let's say you want it to return indented and formatted JSON, so you want to use the orjson option <code>orjson.OPT_INDENT_2</code>.</p> <p>You could create a <code>CustomORJSONResponse</code>. The main thing you have to do is create a <code>Response.render(content)</code> method that returns the content as <code>bytes</code>:</p> <pre><code>from typing import Any\n\nimport orjson\nfrom readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\nclass CustomORJSONResponse(Response):\n    media_type = \"application/json\"\n\n    def render(self, content: Any) -&gt; bytes:\n        assert orjson is not None, \"orjson must be installed\"\n        return orjson.dumps(content, option=orjson.OPT_INDENT_2)\n\n\n@app.get(\"/\", response_class=CustomORJSONResponse)\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Now instead of returning:</p> <pre><code>{\"message\": \"Hello World\"}\n</code></pre> <p>...this response will return:</p> <pre><code>{\n  \"message\": \"Hello World\"\n}\n</code></pre> <p>Of course, you will probably find much better ways to take advantage of this than formatting JSON. \ud83d\ude09</p>"},{"location":"advanced/custom-response/#default-response-class","title":"Default response class","text":"<p>When creating a ReadyAPI class instance or an <code>APIRouter</code> you can specify which response class to use by default.</p> <p>The parameter that defines this is <code>default_response_class</code>.</p> <p>In the example below, ReadyAPI will use <code>ORJSONResponse</code> by default, in all path operations, instead of <code>JSONResponse</code>.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI(default_response_class=ORJSONResponse)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Tip</p> <p>You can still override <code>response_class</code> in path operations as before.</p>"},{"location":"advanced/custom-response/#additional-documentation","title":"Additional documentation","text":"<p>You can also declare the media type and many other details in OpenAPI using <code>responses</code>: Additional Responses in OpenAPI.</p>"},{"location":"advanced/additional-responses/","title":"Additional Responses in OpenAPI","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Warning</p> <p>This is a rather advanced topic.</p> <p>If you are starting with ReadyAPI, you might not need this.</p> <p>You can declare additional responses, with additional status codes, media types, descriptions, etc.</p> <p>Those additional responses will be included in the OpenAPI schema, so they will also appear in the API docs.</p> <p>But for those additional responses you have to make sure you return a <code>Response</code> like <code>JSONResponse</code> directly, with your status code and content.</p>"},{"location":"advanced/additional-responses/#additional-response-with-model","title":"Additional Response with <code>model</code>","text":"<p>You can pass to your path operation decorators a parameter <code>responses</code>.</p> <p>It receives a <code>dict</code>, the keys are status codes for each response, like <code>200</code>, and the values are other <code>dict</code>s with the information for each of them.</p> <p>Each of those response <code>dict</code>s can have a key <code>model</code>, containing a Pydantic model, just like <code>response_model</code>.</p> <p>ReadyAPI will take that model, generate its JSON Schema and include it in the correct place in OpenAPI.</p> <p>For example, to declare another response with a status code <code>404</code> and a Pydantic model <code>Message</code>, you can write:</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nclass Message(BaseModel):\n    message: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, responses={404: {\"model\": Message}})\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n</code></pre> <p>Note</p> <p>Keep in mind that you have to return the <code>JSONResponse</code> directly.</p> <p>Info</p> <p>The <code>model</code> key is not part of OpenAPI.</p> <p>ReadyAPI will take the Pydantic model from there, generate the <code>JSON Schema</code>, and put it in the correct place.</p> <p>The correct place is:</p> <ul> <li>In the key <code>content</code>, that has as value another JSON object (<code>dict</code>) that contains:<ul> <li>A key with the media type, e.g. <code>application/json</code>, that contains as value another JSON object, that contains:<ul> <li>A key <code>schema</code>, that has as the value the JSON Schema from the model, here's the correct place.<ul> <li>ReadyAPI adds a reference here to the global JSON Schemas in another place in your OpenAPI instead of including it directly. This way, other applications and clients can use those JSON Schemas directly, provide better code generation tools, etc.</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>The generated responses in the OpenAPI for this path operation will be:</p> <pre><code>{\n    \"responses\": {\n        \"404\": {\n            \"description\": \"Additional Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Message\"\n                    }\n                }\n            }\n        },\n        \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Item\"\n                    }\n                }\n            }\n        },\n        \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>The schemas are referenced to another place inside the OpenAPI schema:</p> <pre><code>{\n    \"components\": {\n        \"schemas\": {\n            \"Message\": {\n                \"title\": \"Message\",\n                \"required\": [\n                    \"message\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"message\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"Item\": {\n                \"title\": \"Item\",\n                \"required\": [\n                    \"id\",\n                    \"value\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"title\": \"Id\",\n                        \"type\": \"string\"\n                    },\n                    \"value\": {\n                        \"title\": \"Value\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"ValidationError\": {\n                \"title\": \"ValidationError\",\n                \"required\": [\n                    \"loc\",\n                    \"msg\",\n                    \"type\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"loc\": {\n                        \"title\": \"Location\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"msg\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"title\": \"Error Type\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"HTTPValidationError\": {\n                \"title\": \"HTTPValidationError\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"detail\": {\n                        \"title\": \"Detail\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/ValidationError\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/additional-responses/#additional-media-types-for-the-main-response","title":"Additional media types for the main response","text":"<p>You can use this same <code>responses</code> parameter to add different media types for the same main response.</p> <p>For example, you can add an additional media type of <code>image/png</code>, declaring that your path operation can return a JSON object (with media type <code>application/json</code>) or a PNG image:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        200: {\n            \"content\": {\"image/png\": {}},\n            \"description\": \"Return the JSON item or an image.\",\n        }\n    },\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n</code></pre> <p>Note</p> <p>Notice that you have to return the image using a <code>FileResponse</code> directly.</p> <p>Info</p> <p>Unless you specify a different media type explicitly in your <code>responses</code> parameter, ReadyAPI will assume the response has the same media type as the main response class (default <code>application/json</code>).</p> <p>But if you have specified a custom response class with <code>None</code> as its media type, ReadyAPI will use <code>application/json</code> for any additional response that has an associated model.</p>"},{"location":"advanced/additional-responses/#combining-information","title":"Combining information","text":"<p>You can also combine response information from multiple places, including the <code>response_model</code>, <code>status_code</code>, and <code>responses</code> parameters.</p> <p>You can declare a <code>response_model</code>, using the default status code <code>200</code> (or a custom one if you need), and then declare additional information for that same response in <code>responses</code>, directly in the OpenAPI schema.</p> <p>ReadyAPI will keep the additional information from <code>responses</code>, and combine it with the JSON Schema from your model.</p> <p>For example, you can declare a response with a status code <code>404</code> that uses a Pydantic model and has a custom <code>description</code>.</p> <p>And a response with a status code <code>200</code> that uses your <code>response_model</code>, but includes a custom <code>example</code>:</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nclass Message(BaseModel):\n    message: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        404: {\"model\": Message, \"description\": \"The item was not found\"},\n        200: {\n            \"description\": \"Item requested by ID\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"id\": \"bar\", \"value\": \"The bar tenders\"}\n                }\n            },\n        },\n    },\n)\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    else:\n        return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n</code></pre> <p>It will all be combined and included in your OpenAPI, and shown in the API docs:</p> <p></p>"},{"location":"advanced/additional-responses/#combine-predefined-responses-and-custom-ones","title":"Combine predefined responses and custom ones","text":"<p>You might want to have some predefined responses that apply to many path operations, but you want to combine them with custom responses needed by each path operation.</p> <p>For those cases, you can use the Python technique of \"unpacking\" a <code>dict</code> with <code>**dict_to_unpack</code>:</p> <pre><code>old_dict = {\n    \"old key\": \"old value\",\n    \"second old key\": \"second old value\",\n}\nnew_dict = {**old_dict, \"new key\": \"new value\"}\n</code></pre> <p>Here, <code>new_dict</code> will contain all the key-value pairs from <code>old_dict</code> plus the new key-value pair:</p> <pre><code>{\n    \"old key\": \"old value\",\n    \"second old key\": \"second old value\",\n    \"new key\": \"new value\",\n}\n</code></pre> <p>You can use that technique to re-use some predefined responses in your path operations and combine them with additional custom ones.</p> <p>For example:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nresponses = {\n    404: {\"description\": \"Item not found\"},\n    302: {\"description\": \"The item was moved\"},\n    403: {\"description\": \"Not enough privileges\"},\n}\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={**responses, 200: {\"content\": {\"image/png\": {}}}},\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n</code></pre>"},{"location":"advanced/additional-responses/#more-information-about-openapi-responses","title":"More information about OpenAPI responses","text":"<p>To see what exactly you can include in the responses, you can check these sections in the OpenAPI specification:</p> <ul> <li>OpenAPI Responses Object, it includes the <code>Response Object</code>.</li> <li>OpenAPI Response Object, you can include anything from this directly in each response inside your <code>responses</code> parameter. Including <code>description</code>, <code>headers</code>, <code>content</code> (inside of this is that you declare different media types and JSON Schemas), and <code>links</code>.</li> </ul>"},{"location":"advanced/response-cookies/","title":"Response Cookies","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p>"},{"location":"advanced/response-cookies/#use-a-response-parameter","title":"Use a <code>Response</code> parameter","text":"<p>You can declare a parameter of type <code>Response</code> in your path operation function.</p> <p>And then you can set cookies in that temporal response object.</p> <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.post(\"/cookie-and-object/\")\ndef create_cookie(response: Response):\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return {\"message\": \"Come to the dark side, we have cookies\"}\n</code></pre> <p>And then you can return any object you need, as you normally would (a <code>dict</code>, a database model, etc).</p> <p>And if you declared a <code>response_model</code>, it will still be used to filter and convert the object you returned.</p> <p>ReadyAPI will use that temporal response to extract the cookies (also headers and status code), and will put them in the final response that contains the value you returned, filtered by any <code>response_model</code>.</p> <p>You can also declare the <code>Response</code> parameter in dependencies, and set cookies (and headers) in them.</p>"},{"location":"advanced/response-cookies/#return-a-response-directly","title":"Return a <code>Response</code> directly","text":"<p>You can also create cookies when returning a <code>Response</code> directly in your code.</p> <p>To do that, you can create a response as described in Return a Response Directly.</p> <p>Then set Cookies in it, and then return it:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/cookie/\")\ndef create_cookie():\n    content = {\"message\": \"Come to the dark side, we have cookies\"}\n    response = JSONResponse(content=content)\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return response\n</code></pre> <p>Tip</p> <p>Keep in mind that if you return a response directly instead of using the <code>Response</code> parameter, ReadyAPI will return it directly.</p> <p>So, you will have to make sure your data is of the correct type. E.g. it is compatible with JSON, if you are returning a <code>JSONResponse</code>.</p> <p>And also that you are not sending any data that should have been filtered by a <code>response_model</code>.</p>"},{"location":"advanced/response-cookies/#more-info","title":"More info","text":"<p>Technical Details</p> <p>You could also use <code>from starlette.responses import Response</code> or <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI provides the same <code>starlette.responses</code> as <code>readyapi.responses</code> just as a convenience for you, the developer. But most of the available responses come directly from Starlette.</p> <p>And as the <code>Response</code> can be used frequently to set headers and cookies, ReadyAPI also provides it at <code>readyapi.Response</code>.</p> <p>To see all the available parameters and options, check the documentation in Starlette.</p>"},{"location":"advanced/response-headers/","title":"Response Headers","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p>"},{"location":"advanced/response-headers/#use-a-response-parameter","title":"Use a <code>Response</code> parameter","text":"<p>You can declare a parameter of type <code>Response</code> in your path operation function (as you can do for cookies).</p> <p>And then you can set headers in that temporal response object.</p> <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/headers-and-object/\")\ndef get_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"alone in the world\"\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>And then you can return any object you need, as you normally would (a <code>dict</code>, a database model, etc).</p> <p>And if you declared a <code>response_model</code>, it will still be used to filter and convert the object you returned.</p> <p>ReadyAPI will use that temporal response to extract the headers (also cookies and status code), and will put them in the final response that contains the value you returned, filtered by any <code>response_model</code>.</p> <p>You can also declare the <code>Response</code> parameter in dependencies, and set headers (and cookies) in them.</p>"},{"location":"advanced/response-headers/#return-a-response-directly","title":"Return a <code>Response</code> directly","text":"<p>You can also add headers when you return a <code>Response</code> directly.</p> <p>Create a response as described in Return a Response Directly and pass the headers as an additional parameter:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/headers/\")\ndef get_headers():\n    content = {\"message\": \"Hello World\"}\n    headers = {\"X-Cat-Dog\": \"alone in the world\", \"Content-Language\": \"en-US\"}\n    return JSONResponse(content=content, headers=headers)\n</code></pre> <p>Technical Details</p> <p>You could also use <code>from starlette.responses import Response</code> or <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI provides the same <code>starlette.responses</code> as <code>readyapi.responses</code> just as a convenience for you, the developer. But most of the available responses come directly from Starlette.</p> <p>And as the <code>Response</code> can be used frequently to set headers and cookies, ReadyAPI also provides it at <code>readyapi.Response</code>.</p>"},{"location":"advanced/response-headers/#custom-headers","title":"Custom Headers","text":"<p>Keep in mind that custom proprietary headers can be added using the 'X-' prefix.</p> <p>But if you have custom headers that you want a client in a browser to be able to see, you need to add them to your CORS configurations (read more in CORS (Cross-Origin Resource Sharing)), using the parameter <code>expose_headers</code> documented in Starlette's CORS docs.</p>"},{"location":"advanced/response-change-status-code/","title":"Response - Change Status Code","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You probably read before that you can set a default Response Status Code.</p> <p>But in some cases you need to return a different status code than the default.</p>"},{"location":"advanced/response-change-status-code/#use-case","title":"Use case","text":"<p>For example, imagine that you want to return an HTTP status code of \"OK\" <code>200</code> by default.</p> <p>But if the data didn't exist, you want to create it, and return an HTTP status code of \"CREATED\" <code>201</code>.</p> <p>But you still want to be able to filter and convert the data you return with a <code>response_model</code>.</p> <p>For those cases, you can use a <code>Response</code> parameter.</p>"},{"location":"advanced/response-change-status-code/#use-a-response-parameter","title":"Use a <code>Response</code> parameter","text":"<p>You can declare a parameter of type <code>Response</code> in your path operation function (as you can do for cookies and headers).</p> <p>And then you can set the <code>status_code</code> in that temporal response object.</p> <pre><code>from readyapi import ReadyAPI, Response, status\n\napp = ReadyAPI()\n\ntasks = {\"foo\": \"Listen to the Bar Fighters\"}\n\n\n@app.put(\"/get-or-create-task/{task_id}\", status_code=200)\ndef get_or_create_task(task_id: str, response: Response):\n    if task_id not in tasks:\n        tasks[task_id] = \"This didn't exist before\"\n        response.status_code = status.HTTP_201_CREATED\n    return tasks[task_id]\n</code></pre> <p>And then you can return any object you need, as you normally would (a <code>dict</code>, a database model, etc).</p> <p>And if you declared a <code>response_model</code>, it will still be used to filter and convert the object you returned.</p> <p>ReadyAPI will use that temporal response to extract the status code (also cookies and headers), and will put them in the final response that contains the value you returned, filtered by any <code>response_model</code>.</p> <p>You can also declare the <code>Response</code> parameter in dependencies, and set the status code in them. But keep in mind that the last one to be set will win.</p>"},{"location":"advanced/advanced-dependencies/","title":"Advanced Dependencies","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p>"},{"location":"advanced/advanced-dependencies/#parameterized-dependencies","title":"Parameterized dependencies","text":"<p>All the dependencies we have seen are a fixed function or class.</p> <p>But there could be cases where you want to be able to set parameters on the dependency, without having to declare many different functions or classes.</p> <p>Let's imagine that we want to have a dependency that checks if the query parameter <code>q</code> contains some fixed content.</p> <p>But we want to be able to parameterize that fixed content.</p>"},{"location":"advanced/advanced-dependencies/#a-callable-instance","title":"A \"callable\" instance","text":"<p>In Python there's a way to make an instance of a class a \"callable\".</p> <p>Not the class itself (which is already a callable), but an instance of that class.</p> <p>To do that, we declare a method <code>__call__</code>:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>In this case, this <code>__call__</code> is what ReadyAPI will use to check for additional parameters and sub-dependencies, and this is what will be called to pass a value to the parameter in your path operation function later.</p>"},{"location":"advanced/advanced-dependencies/#parameterize-the-instance","title":"Parameterize the instance","text":"<p>And now, we can use <code>__init__</code> to declare the parameters of the instance that we can use to \"parameterize\" the dependency:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>In this case, ReadyAPI won't ever touch or care about <code>__init__</code>, we will use it directly in our code.</p>"},{"location":"advanced/advanced-dependencies/#create-an-instance","title":"Create an instance","text":"<p>We could create an instance of this class with:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>And that way we are able to \"parameterize\" our dependency, that now has <code>\"bar\"</code> inside of it, as the attribute <code>checker.fixed_content</code>.</p>"},{"location":"advanced/advanced-dependencies/#use-the-instance-as-a-dependency","title":"Use the instance as a dependency","text":"<p>Then, we could use this <code>checker</code> in a <code>Depends(checker)</code>, instead of <code>Depends(FixedContentQueryChecker)</code>, because the dependency is the instance, <code>checker</code>, not the class itself.</p> <p>And when solving the dependency, ReadyAPI will call this <code>checker</code> like:</p> <pre><code>checker(q=\"somequery\")\n</code></pre> <p>...and pass whatever that returns as the value of the dependency in our path operation function as the parameter <code>fixed_content_included</code>:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>All this might seem contrived. And it might not be very clear how is it useful yet.</p> <p>These examples are intentionally simple, but show how it all works.</p> <p>In the chapters about security, there are utility functions that are implemented in this same way.</p> <p>If you understood all this, you already know how those utility tools for security work underneath.</p>"},{"location":"advanced/security/","title":"Advanced Security","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p>"},{"location":"advanced/security/#additional-features","title":"Additional Features","text":"<p>There are some extra features to handle security apart from the ones covered in the Tutorial - User Guide: Security.</p> <p>Tip</p> <p>The next sections are not necessarily \"advanced\".</p> <p>And it's possible that for your use case, the solution is in one of them.</p>"},{"location":"advanced/security/#read-the-tutorial-first","title":"Read the Tutorial first","text":"<p>The next sections assume you already read the main Tutorial - User Guide: Security.</p> <p>They are all based on the same concepts, but allow some extra functionalities.</p>"},{"location":"advanced/security/oauth2-scopes/","title":"OAuth2 scopes","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can use OAuth2 scopes directly with ReadyAPI, they are integrated to work seamlessly.</p> <p>This would allow you to have a more fine-grained permission system, following the OAuth2 standard, integrated into your OpenAPI application (and the API docs).</p> <p>OAuth2 with scopes is the mechanism used by many big authentication providers, like Facebook, Google, GitHub, Microsoft, Twitter, etc. They use it to provide specific permissions to users and applications.</p> <p>Every time you \"log in with\" Facebook, Google, GitHub, Microsoft, Twitter, that application is using OAuth2 with scopes.</p> <p>In this section you will see how to manage authentication and authorization with the same OAuth2 with scopes in your ReadyAPI application.</p> <p>Warning</p> <p>This is a more or less advanced section. If you are just starting, you can skip it.</p> <p>You don't necessarily need OAuth2 scopes, and you can handle authentication and authorization however you want.</p> <p>But OAuth2 with scopes can be nicely integrated into your API (with OpenAPI) and your API docs.</p> <p>Nevertheless, you still enforce those scopes, or any other security/authorization requirement, however you need, in your code.</p> <p>In many cases, OAuth2 with scopes can be an overkill.</p> <p>But if you know you need it, or you are curious, keep reading.</p>"},{"location":"advanced/security/oauth2-scopes/#oauth2-scopes-and-openapi","title":"OAuth2 scopes and OpenAPI","text":"<p>The OAuth2 specification defines \"scopes\" as a list of strings separated by spaces.</p> <p>The content of each of these strings can have any format, but should not contain spaces.</p> <p>These scopes represent \"permissions\".</p> <p>In OpenAPI (e.g. the API docs), you can define \"security schemes\".</p> <p>When one of these security schemes uses OAuth2, you can also declare and use scopes.</p> <p>Each \"scope\" is just a string (without spaces).</p> <p>They are normally used to declare specific security permissions, for example:</p> <ul> <li><code>users:read</code> or <code>users:write</code> are common examples.</li> <li><code>instagram_basic</code> is used by Facebook / Instagram.</li> <li><code>https://www.googleapis.com/auth/drive</code> is used by Google.</li> </ul> <p>Info</p> <p>In OAuth2 a \"scope\" is just a string that declares a specific permission required.</p> <p>It doesn't matter if it has other characters like <code>:</code> or if it is a URL.</p> <p>Those details are implementation specific.</p> <p>For OAuth2 they are just strings.</p>"},{"location":"advanced/security/oauth2-scopes/#global-view","title":"Global view","text":"<p>First, let's quickly see the parts that change from the examples in the main Tutorial - User Guide for OAuth2 with Password (and hashing), Bearer with JWT tokens. Now using OAuth2 scopes:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.9+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Now let's review those changes step by step.</p>"},{"location":"advanced/security/oauth2-scopes/#oauth2-security-scheme","title":"OAuth2 Security scheme","text":"<p>The first change is that now we are declaring the OAuth2 security scheme with two available scopes, <code>me</code> and <code>items</code>.</p> <p>The <code>scopes</code> parameter receives a <code>dict</code> with each scope as a key and the description as the value:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.9+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Because we are now declaring those scopes, they will show up in the API docs when you log-in/authorize.</p> <p>And you will be able to select which scopes you want to give access to: <code>me</code> and <code>items</code>.</p> <p>This is the same mechanism used when you give permissions while logging in with Facebook, Google, GitHub, etc:</p> <p></p>"},{"location":"advanced/security/oauth2-scopes/#jwt-token-with-scopes","title":"JWT token with scopes","text":"<p>Now, modify the token path operation to return the scopes requested.</p> <p>We are still using the same <code>OAuth2PasswordRequestForm</code>. It includes a property <code>scopes</code> with a <code>list</code> of <code>str</code>, with each scope it received in the request.</p> <p>And we return the scopes as part of the JWT token.</p> <p>Danger</p> <p>For simplicity, here we are just adding the scopes received directly to the token.</p> <p>But in your application, for security, you should make sure you only add the scopes that the user is actually able to have, or the ones you have predefined.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.9+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#declare-scopes-in-path-operations-and-dependencies","title":"Declare scopes in path operations and dependencies","text":"<p>Now we declare that the path operation for <code>/users/me/items/</code> requires the scope <code>items</code>.</p> <p>For this, we import and use <code>Security</code> from <code>readyapi</code>.</p> <p>You can use <code>Security</code> to declare dependencies (just like <code>Depends</code>), but <code>Security</code> also receives a parameter <code>scopes</code> with a list of scopes (strings).</p> <p>In this case, we pass a dependency function <code>get_current_active_user</code> to <code>Security</code> (the same way we would do with <code>Depends</code>).</p> <p>But we also pass a <code>list</code> of scopes, in this case with just one scope: <code>items</code> (it could have more).</p> <p>And the dependency function <code>get_current_active_user</code> can also declare sub-dependencies, not only with <code>Depends</code> but also with <code>Security</code>. Declaring its own sub-dependency function (<code>get_current_user</code>), and more scope requirements.</p> <p>In this case, it requires the scope <code>me</code> (it could require more than one scope).</p> <p>Note</p> <p>You don't necessarily need to add different scopes in different places.</p> <p>We are doing it here to demonstrate how ReadyAPI handles scopes declared at different levels.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.9+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Technical Details</p> <p><code>Security</code> is actually a subclass of <code>Depends</code>, and it has just one extra parameter that we'll see later.</p> <p>But by using <code>Security</code> instead of <code>Depends</code>, ReadyAPI will know that it can declare security scopes, use them internally, and document the API with OpenAPI.</p> <p>But when you import <code>Query</code>, <code>Path</code>, <code>Depends</code>, <code>Security</code> and others from <code>readyapi</code>, those are actually functions that return special classes.</p>"},{"location":"advanced/security/oauth2-scopes/#use-securityscopes","title":"Use <code>SecurityScopes</code>","text":"<p>Now update the dependency <code>get_current_user</code>.</p> <p>This is the one used by the dependencies above.</p> <p>Here's were we are using the same OAuth2 scheme we created before, declaring it as a dependency: <code>oauth2_scheme</code>.</p> <p>Because this dependency function doesn't have any scope requirements itself, we can use <code>Depends</code> with <code>oauth2_scheme</code>, we don't have to use <code>Security</code> when we don't need to specify security scopes.</p> <p>We also declare a special parameter of type <code>SecurityScopes</code>, imported from <code>readyapi.security</code>.</p> <p>This <code>SecurityScopes</code> class is similar to <code>Request</code> (<code>Request</code> was used to get the request object directly).</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.9+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#use-the-scopes","title":"Use the <code>scopes</code>","text":"<p>The parameter <code>security_scopes</code> will be of type <code>SecurityScopes</code>.</p> <p>It will have a property <code>scopes</code> with a list containing all the scopes required by itself and all the dependencies that use this as a sub-dependency. That means, all the \"dependants\"... this might sound confusing, it is explained again later below.</p> <p>The <code>security_scopes</code> object (of class <code>SecurityScopes</code>) also provides a <code>scope_str</code> attribute with a single string, containing those scopes separated by spaces (we are going to use it).</p> <p>We create an <code>HTTPException</code> that we can re-use (<code>raise</code>) later at several points.</p> <p>In this exception, we include the scopes required (if any) as a string separated by spaces (using <code>scope_str</code>). We put that string containing the scopes in the <code>WWW-Authenticate</code> header (this is part of the spec).</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.9+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#verify-the-username-and-data-shape","title":"Verify the <code>username</code> and data shape","text":"<p>We verify that we get a <code>username</code>, and extract the scopes.</p> <p>And then we validate that data with the Pydantic model (catching the <code>ValidationError</code> exception), and if we get an error reading the JWT token or validating the data with Pydantic, we raise the <code>HTTPException</code> we created before.</p> <p>For that, we update the Pydantic model <code>TokenData</code> with a new property <code>scopes</code>.</p> <p>By validating the data with Pydantic we can make sure that we have, for example, exactly a <code>list</code> of <code>str</code> with the scopes and a <code>str</code> with the <code>username</code>.</p> <p>Instead of, for example, a <code>dict</code>, or something else, as it could break the application at some point later, making it a security risk.</p> <p>We also verify that we have a user with that username, and if not, we raise that same exception we created before.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.9+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#verify-the-scopes","title":"Verify the <code>scopes</code>","text":"<p>We now verify that all the scopes required, by this dependency and all the dependants (including path operations), are included in the scopes provided in the token received, otherwise raise an <code>HTTPException</code>.</p> <p>For this, we use <code>security_scopes.scopes</code>, that contains a <code>list</code> with all these scopes as <code>str</code>.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.9+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (JWTError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#dependency-tree-and-scopes","title":"Dependency tree and scopes","text":"<p>Let's review again this dependency tree and the scopes.</p> <p>As the <code>get_current_active_user</code> dependency has as a sub-dependency on <code>get_current_user</code>, the scope <code>\"me\"</code> declared at <code>get_current_active_user</code> will be included in the list of required scopes in the <code>security_scopes.scopes</code> passed to <code>get_current_user</code>.</p> <p>The path operation itself also declares a scope, <code>\"items\"</code>, so this will also be in the list of <code>security_scopes.scopes</code> passed to <code>get_current_user</code>.</p> <p>Here's how the hierarchy of dependencies and scopes looks like:</p> <ul> <li>The path operation <code>read_own_items</code> has:<ul> <li>Required scopes <code>[\"items\"]</code> with the dependency:</li> <li><code>get_current_active_user</code>:<ul> <li>The dependency function <code>get_current_active_user</code> has:<ul> <li>Required scopes <code>[\"me\"]</code> with the dependency:</li> <li><code>get_current_user</code>:<ul> <li>The dependency function <code>get_current_user</code> has:<ul> <li>No scopes required by itself.</li> <li>A dependency using <code>oauth2_scheme</code>.</li> <li>A <code>security_scopes</code> parameter of type <code>SecurityScopes</code>:<ul> <li>This <code>security_scopes</code> parameter has a property <code>scopes</code> with a <code>list</code> containing all these scopes declared above, so:<ul> <li><code>security_scopes.scopes</code> will contain <code>[\"me\", \"items\"]</code> for the path operation <code>read_own_items</code>.</li> <li><code>security_scopes.scopes</code> will contain <code>[\"me\"]</code> for the path operation <code>read_users_me</code>, because it is declared in the dependency <code>get_current_active_user</code>.</li> <li><code>security_scopes.scopes</code> will contain <code>[]</code> (nothing) for the path operation <code>read_system_status</code>, because it didn't declare any <code>Security</code> with <code>scopes</code>, and its dependency, <code>get_current_user</code>, doesn't declare any <code>scope</code> either.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Tip</p> <p>The important and \"magic\" thing here is that <code>get_current_user</code> will have a different list of <code>scopes</code> to check for each path operation.</p> <p>All depending on the <code>scopes</code> declared in each path operation and each dependency in the dependency tree for that specific path operation.</p>"},{"location":"advanced/security/oauth2-scopes/#more-details-about-securityscopes","title":"More details about <code>SecurityScopes</code>","text":"<p>You can use <code>SecurityScopes</code> at any point, and in multiple places, it doesn't have to be at the \"root\" dependency.</p> <p>It will always have the security scopes declared in the current <code>Security</code> dependencies and all the dependants for that specific path operation and that specific dependency tree.</p> <p>Because the <code>SecurityScopes</code> will have all the scopes declared by dependants, you can use it to verify that a token has the required scopes in a central dependency function, and then declare different scope requirements in different path operations.</p> <p>They will be checked independently for each path operation.</p>"},{"location":"advanced/security/oauth2-scopes/#check-it","title":"Check it","text":"<p>If you open the API docs, you can authenticate and specify which scopes you want to authorize.</p> <p></p> <p>If you don't select any scope, you will be \"authenticated\", but when you try to access <code>/users/me/</code> or <code>/users/me/items/</code> you will get an error saying that you don't have enough permissions. You will still be able to access <code>/status/</code>.</p> <p>And if you select the scope <code>me</code> but not the scope <code>items</code>, you will be able to access <code>/users/me/</code> but not <code>/users/me/items/</code>.</p> <p>That's what would happen to a third party application that tried to access one of these path operations with a token provided by a user, depending on how many permissions the user gave the application.</p>"},{"location":"advanced/security/oauth2-scopes/#about-third-party-integrations","title":"About third party integrations","text":"<p>In this example we are using the OAuth2 \"password\" flow.</p> <p>This is appropriate when we are logging in to our own application, probably with our own frontend.</p> <p>Because we can trust it to receive the <code>username</code> and <code>password</code>, as we control it.</p> <p>But if you are building an OAuth2 application that others would connect to (i.e., if you are building an authentication provider equivalent to Facebook, Google, GitHub, etc.) you should use one of the other flows.</p> <p>The most common is the implicit flow.</p> <p>The most secure is the code flow, but is more complex to implement as it requires more steps. As it is more complex, many providers end up suggesting the implicit flow.</p> <p>Note</p> <p>It's common that each authentication provider names their flows in a different way, to make it part of their brand.</p> <p>But in the end, they are implementing the same OAuth2 standard.</p> <p>ReadyAPI includes utilities for all these OAuth2 authentication flows in <code>readyapi.security.oauth2</code>.</p>"},{"location":"advanced/security/oauth2-scopes/#security-in-decorator-dependencies","title":"<code>Security</code> in decorator <code>dependencies</code>","text":"<p>The same way you can define a <code>list</code> of <code>Depends</code> in the decorator's <code>dependencies</code> parameter (as explained in Dependencies in path operation decorators), you could also use <code>Security</code> with <code>scopes</code> there.</p>"},{"location":"advanced/security/http-basic-auth/","title":"HTTP Basic Auth","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>For the simplest cases, you can use HTTP Basic Auth.</p> <p>In HTTP Basic Auth, the application expects a header that contains a username and a password.</p> <p>If it doesn't receive it, it returns an HTTP 401 \"Unauthorized\" error.</p> <p>And returns a header <code>WWW-Authenticate</code> with a value of <code>Basic</code>, and an optional <code>realm</code> parameter.</p> <p>That tells the browser to show the integrated prompt for a username and password.</p> <p>Then, when you type that username and password, the browser sends them in the header automatically.</p>"},{"location":"advanced/security/http-basic-auth/#simple-http-basic-auth","title":"Simple HTTP Basic Auth","text":"<ul> <li>Import <code>HTTPBasic</code> and <code>HTTPBasicCredentials</code>.</li> <li>Create a \"<code>security</code> scheme\" using <code>HTTPBasic</code>.</li> <li>Use that <code>security</code> with a dependency in your path operation.</li> <li>It returns an object of type <code>HTTPBasicCredentials</code>:<ul> <li>It contains the <code>username</code> and <code>password</code> sent.</li> </ul> </li> </ul> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> <p>When you try to open the URL for the first time (or click the \"Execute\" button in the docs) the browser will ask you for your username and password:</p> <p></p>"},{"location":"advanced/security/http-basic-auth/#check-the-username","title":"Check the username","text":"<p>Here's a more complete example.</p> <p>Use a dependency to check if the username and password are correct.</p> <p>For this, use the Python standard module <code>secrets</code> to check the username and password.</p> <p><code>secrets.compare_digest()</code> needs to take <code>bytes</code> or a <code>str</code> that only contains ASCII characters (the ones in English), this means it wouldn't work with characters like <code>\u00e1</code>, as in <code>KhulnaSoft</code>.</p> <p>To handle that, we first convert the <code>username</code> and <code>password</code> to <code>bytes</code> encoding them with UTF-8.</p> <p>Then we can use <code>secrets.compare_digest()</code> to ensure that <code>credentials.username</code> is <code>\"stanleyjobson\"</code>, and that <code>credentials.password</code> is <code>\"swordfish\"</code>.</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>import secrets\nfrom typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}\n</code></pre> <p>This would be similar to:</p> <pre><code>if not (credentials.username == \"stanleyjobson\") or not (credentials.password == \"swordfish\"):\n    # Return some error\n    ...\n</code></pre> <p>But by using the <code>secrets.compare_digest()</code> it will be secure against a type of attacks called \"timing attacks\".</p>"},{"location":"advanced/security/http-basic-auth/#timing-attacks","title":"Timing Attacks","text":"<p>But what's a \"timing attack\"?</p> <p>Let's imagine some attackers are trying to guess the username and password.</p> <p>And they send a request with a username <code>johndoe</code> and a password <code>love123</code>.</p> <p>Then the Python code in your application would be equivalent to something like:</p> <pre><code>if \"johndoe\" == \"stanleyjobson\" and \"love123\" == \"swordfish\":\n    ...\n</code></pre> <p>But right at the moment Python compares the first <code>j</code> in <code>johndoe</code> to the first <code>s</code> in <code>stanleyjobson</code>, it will return <code>False</code>, because it already knows that those two strings are not the same, thinking that \"there's no need to waste more computation comparing the rest of the letters\". And your application will say \"Incorrect username or password\".</p> <p>But then the attackers try with username <code>stanleyjobsox</code> and password <code>love123</code>.</p> <p>And your application code does something like:</p> <pre><code>if \"stanleyjobsox\" == \"stanleyjobson\" and \"love123\" == \"swordfish\":\n    ...\n</code></pre> <p>Python will have to compare the whole <code>stanleyjobso</code> in both <code>stanleyjobsox</code> and <code>stanleyjobson</code> before realizing that both strings are not the same. So it will take some extra microseconds to reply back \"Incorrect username or password\".</p>"},{"location":"advanced/security/http-basic-auth/#the-time-to-answer-helps-the-attackers","title":"The time to answer helps the attackers","text":"<p>At that point, by noticing that the server took some microseconds longer to send the \"Incorrect username or password\" response, the attackers will know that they got something right, some of the initial letters were right.</p> <p>And then they can try again knowing that it's probably something more similar to <code>stanleyjobsox</code> than to <code>johndoe</code>.</p>"},{"location":"advanced/security/http-basic-auth/#a-professional-attack","title":"A \"professional\" attack","text":"<p>Of course, the attackers would not try all this by hand, they would write a program to do it, possibly with thousands or millions of tests per second. And would get just one extra correct letter at a time.</p> <p>But doing that, in some minutes or hours the attackers would have guessed the correct username and password, with the \"help\" of our application, just using the time taken to answer.</p>"},{"location":"advanced/security/http-basic-auth/#fix-it-with-secretscompare_digest","title":"Fix it with <code>secrets.compare_digest()</code>","text":"<p>But in our code we are actually using <code>secrets.compare_digest()</code>.</p> <p>In short, it will take the same time to compare <code>stanleyjobsox</code> to <code>stanleyjobson</code> than it takes to compare <code>johndoe</code> to <code>stanleyjobson</code>. And the same for the password.</p> <p>That way, using <code>secrets.compare_digest()</code> in your application code, it will be safe against this whole range of security attacks.</p>"},{"location":"advanced/security/http-basic-auth/#return-the-error","title":"Return the error","text":"<p>After detecting that the credentials are incorrect, return an <code>HTTPException</code> with a status code 401 (the same returned when no credentials are provided) and add the header <code>WWW-Authenticate</code> to make the browser show the login prompt again:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>import secrets\nfrom typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}\n</code></pre>"},{"location":"advanced/using-request-directly/","title":"Using the Request Directly","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Up to now, you have been declaring the parts of the request that you need with their types.</p> <p>Taking data from:</p> <ul> <li>The path as parameters.</li> <li>Headers.</li> <li>Cookies.</li> <li>etc.</li> </ul> <p>And by doing so, ReadyAPI is validating that data, converting it and generating documentation for your API automatically.</p> <p>But there are situations where you might need to access the <code>Request</code> object directly.</p>"},{"location":"advanced/using-request-directly/#details-about-the-request-object","title":"Details about the <code>Request</code> object","text":"<p>As ReadyAPI is actually Starlette underneath, with a layer of several tools on top, you can use Starlette's <code>Request</code> object directly when you need to.</p> <p>It would also mean that if you get data from the <code>Request</code> object directly (for example, read the body) it won't be validated, converted or documented (with OpenAPI, for the automatic API user interface) by ReadyAPI.</p> <p>Although any other parameter declared normally (for example, the body with a Pydantic model) would still be validated, converted, annotated, etc.</p> <p>But there are specific cases where it's useful to get the <code>Request</code> object.</p>"},{"location":"advanced/using-request-directly/#use-the-request-object-directly","title":"Use the <code>Request</code> object directly","text":"<p>Let's imagine you want to get the client's IP address/host inside of your path operation function.</p> <p>For that you need to access the request directly.</p> <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef read_root(item_id: str, request: Request):\n    client_host = request.client.host\n    return {\"client_host\": client_host, \"item_id\": item_id}\n</code></pre> <p>By declaring a path operation function parameter with the type being the <code>Request</code> ReadyAPI will know to pass the <code>Request</code> in that parameter.</p> <p>Tip</p> <p>Note that in this case, we are declaring a path parameter beside the request parameter.</p> <p>So, the path parameter will be extracted, validated, converted to the specified type and annotated with OpenAPI.</p> <p>The same way, you can declare any other parameter as normally, and additionally, get the <code>Request</code> too.</p>"},{"location":"advanced/using-request-directly/#request-documentation","title":"<code>Request</code> documentation","text":"<p>You can read more details about the <code>Request</code> object in the official Starlette documentation site.</p> <p>Technical Details</p> <p>You could also use <code>from starlette.requests import Request</code>.</p> <p>ReadyAPI provides it directly just as a convenience for you, the developer. But it comes directly from Starlette.</p>"},{"location":"advanced/dataclasses/","title":"Using Dataclasses","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>ReadyAPI is built on top of Pydantic, and I have been showing you how to use Pydantic models to declare requests and responses.</p> <p>But ReadyAPI also supports using <code>dataclasses</code> the same way:</p> <pre><code>from dataclasses import dataclass\nfrom typing import Union\n\nfrom readyapi import ReadyAPI\n\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n    description: Union[str, None] = None\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>This is still supported thanks to Pydantic, as it has internal support for <code>dataclasses</code>.</p> <p>So, even with the code above that doesn't use Pydantic explicitly, ReadyAPI is using Pydantic to convert those standard dataclasses to Pydantic's own flavor of dataclasses.</p> <p>And of course, it supports the same:</p> <ul> <li>data validation</li> <li>data serialization</li> <li>data documentation, etc.</li> </ul> <p>This works the same way as with Pydantic models. And it is actually achieved in the same way underneath, using Pydantic.</p> <p>Info</p> <p>Keep in mind that dataclasses can't do everything Pydantic models can do.</p> <p>So, you might still need to use Pydantic models.</p> <p>But if you have a bunch of dataclasses laying around, this is a nice trick to use them to power a web API using ReadyAPI. \ud83e\udd13</p>"},{"location":"advanced/dataclasses/#dataclasses-in-response_model","title":"Dataclasses in <code>response_model</code>","text":"<p>You can also use <code>dataclasses</code> in the <code>response_model</code> parameter:</p> <pre><code>from dataclasses import dataclass, field\nfrom typing import List, Union\n\nfrom readyapi import ReadyAPI\n\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n    tags: List[str] = field(default_factory=list)\n    description: Union[str, None] = None\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/next\", response_model=Item)\nasync def read_next_item():\n    return {\n        \"name\": \"Island In The Moon\",\n        \"price\": 12.99,\n        \"description\": \"A place to be be playin' and havin' fun\",\n        \"tags\": [\"breater\"],\n    }\n</code></pre> <p>The dataclass will be automatically converted to a Pydantic dataclass.</p> <p>This way, its schema will show up in the API docs user interface:</p> <p></p>"},{"location":"advanced/dataclasses/#dataclasses-in-nested-data-structures","title":"Dataclasses in Nested Data Structures","text":"<p>You can also combine <code>dataclasses</code> with other type annotations to make nested data structures.</p> <p>In some cases, you might still have to use Pydantic's version of <code>dataclasses</code>. For example, if you have errors with the automatically generated API documentation.</p> <p>In that case, you can simply swap the standard <code>dataclasses</code> with <code>pydantic.dataclasses</code>, which is a drop-in replacement:</p> <pre><code>from dataclasses import field  # (1)\nfrom typing import List, Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic.dataclasses import dataclass  # (2)\n\n\n@dataclass\nclass Item:\n    name: str\n    description: Union[str, None] = None\n\n\n@dataclass\nclass Author:\n    name: str\n    items: List[Item] = field(default_factory=list)  # (3)\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/authors/{author_id}/items/\", response_model=Author)  # (4)\nasync def create_author_items(author_id: str, items: List[Item]):  # (5)\n    return {\"name\": author_id, \"items\": items}  # (6)\n\n\n@app.get(\"/authors/\", response_model=List[Author])  # (7)\ndef get_authors():  # (8)\n    return [  # (9)\n        {\n            \"name\": \"Breaters\",\n            \"items\": [\n                {\n                    \"name\": \"Island In The Moon\",\n                    \"description\": \"A place to be be playin' and havin' fun\",\n                },\n                {\"name\": \"Holy Buddies\"},\n            ],\n        },\n        {\n            \"name\": \"System of an Up\",\n            \"items\": [\n                {\n                    \"name\": \"Salt\",\n                    \"description\": \"The kombucha mushroom people's favorite\",\n                },\n                {\"name\": \"Pad Thai\"},\n                {\n                    \"name\": \"Lonely Night\",\n                    \"description\": \"The mostests lonliest nightiest of allest\",\n                },\n            ],\n        },\n    ]\n</code></pre> <ol> <li> <p>We still import <code>field</code> from standard <code>dataclasses</code>.</p> </li> <li> <p><code>pydantic.dataclasses</code> is a drop-in replacement for <code>dataclasses</code>.</p> </li> <li> <p>The <code>Author</code> dataclass includes a list of <code>Item</code> dataclasses.</p> </li> <li> <p>The <code>Author</code> dataclass is used as the <code>response_model</code> parameter.</p> </li> <li> <p>You can use other standard type annotations with dataclasses as the request body.</p> <p>In this case, it's a list of <code>Item</code> dataclasses.</p> </li> <li> <p>Here we are returning a dictionary that contains <code>items</code> which is a list of dataclasses.</p> <p>ReadyAPI is still capable of serializing the data to JSON.</p> </li> <li> <p>Here the <code>response_model</code> is using a type annotation of a list of <code>Author</code> dataclasses.</p> <p>Again, you can combine <code>dataclasses</code> with standard type annotations.</p> </li> <li> <p>Notice that this path operation function uses regular <code>def</code> instead of <code>async def</code>.</p> <p>As always, in ReadyAPI you can combine <code>def</code> and <code>async def</code> as needed.</p> <p>If you need a refresher about when to use which, check out the section \"In a hurry?\" in the docs about <code>async</code> and <code>await</code>.</p> </li> <li> <p>This path operation function is not returning dataclasses (although it could), but a list of dictionaries with internal data.</p> <p>ReadyAPI will use the <code>response_model</code> parameter (that includes dataclasses) to convert the response.</p> </li> </ol> <p>You can combine <code>dataclasses</code> with other type annotations in many different combinations to form complex data structures.</p> <p>Check the in-code annotation tips above to see more specific details.</p>"},{"location":"advanced/dataclasses/#learn-more","title":"Learn More","text":"<p>You can also combine <code>dataclasses</code> with other Pydantic models, inherit from them, include them in your own models, etc.</p> <p>To learn more, check the Pydantic docs about dataclasses.</p>"},{"location":"advanced/dataclasses/#version","title":"Version","text":"<p>This is available since ReadyAPI version <code>0.67.0</code>. \ud83d\udd16</p>"},{"location":"advanced/middleware/","title":"Advanced Middleware","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>In the main tutorial you read how to add Custom Middleware to your application.</p> <p>And then you also read how to handle CORS with the <code>CORSMiddleware</code>.</p> <p>In this section we'll see how to use other middlewares.</p>"},{"location":"advanced/middleware/#adding-asgi-middlewares","title":"Adding ASGI middlewares","text":"<p>As ReadyAPI is based on Starlette and implements the ASGI specification, you can use any ASGI middleware.</p> <p>A middleware doesn't have to be made for ReadyAPI or Starlette to work, as long as it follows the ASGI spec.</p> <p>In general, ASGI middlewares are classes that expect to receive an ASGI app as the first argument.</p> <p>So, in the documentation for third-party ASGI middlewares they will probably tell you to do something like:</p> <pre><code>from unicorn import UnicornMiddleware\n\napp = SomeASGIApp()\n\nnew_app = UnicornMiddleware(app, some_config=\"rainbow\")\n</code></pre> <p>But ReadyAPI (actually Starlette) provides a simpler way to do it that makes sure that the internal middlewares to handle server errors and custom exception handlers work properly.</p> <p>For that, you use <code>app.add_middleware()</code> (as in the example for CORS).</p> <pre><code>from readyapi import ReadyAPI\nfrom unicorn import UnicornMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(UnicornMiddleware, some_config=\"rainbow\")\n</code></pre> <p><code>app.add_middleware()</code> receives a middleware class as the first argument and any additional arguments to be passed to the middleware.</p>"},{"location":"advanced/middleware/#integrated-middlewares","title":"Integrated middlewares","text":"<p>ReadyAPI includes several middlewares for common use cases, we'll see next how to use them.</p> <p>Technical Details</p> <p>For the next examples, you could also use <code>from starlette.middleware.something import SomethingMiddleware</code>.</p> <p>ReadyAPI provides several middlewares in <code>readyapi.middleware</code> just as a convenience for you, the developer. But most of the available middlewares come directly from Starlette.</p>"},{"location":"advanced/middleware/#httpsredirectmiddleware","title":"<code>HTTPSRedirectMiddleware</code>","text":"<p>Enforces that all incoming requests must either be <code>https</code> or <code>wss</code>.</p> <p>Any incoming requests to <code>http</code> or <code>ws</code> will be redirected to the secure scheme instead.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.httpsredirect import HTTPSRedirectMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(HTTPSRedirectMiddleware)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"advanced/middleware/#trustedhostmiddleware","title":"<code>TrustedHostMiddleware</code>","text":"<p>Enforces that all incoming requests have a correctly set <code>Host</code> header, in order to guard against HTTP Host Header attacks.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.trustedhost import TrustedHostMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(\n    TrustedHostMiddleware, allowed_hosts=[\"example.com\", \"*.example.com\"]\n)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>The following arguments are supported:</p> <ul> <li><code>allowed_hosts</code> - A list of domain names that should be allowed as hostnames. Wildcard domains such as <code>*.example.com</code> are supported for matching subdomains. To allow any hostname either use <code>allowed_hosts=[\"*\"]</code> or omit the middleware.</li> </ul> <p>If an incoming request does not validate correctly then a <code>400</code> response will be sent.</p>"},{"location":"advanced/middleware/#gzipmiddleware","title":"<code>GZipMiddleware</code>","text":"<p>Handles GZip responses for any request that includes <code>\"gzip\"</code> in the <code>Accept-Encoding</code> header.</p> <p>The middleware will handle both standard and streaming responses.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.gzip import GZipMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(GZipMiddleware, minimum_size=1000)\n\n\n@app.get(\"/\")\nasync def main():\n    return \"somebigcontent\"\n</code></pre> <p>The following arguments are supported:</p> <ul> <li><code>minimum_size</code> - Do not GZip responses that are smaller than this minimum size in bytes. Defaults to <code>500</code>.</li> </ul>"},{"location":"advanced/middleware/#other-middlewares","title":"Other middlewares","text":"<p>There are many other ASGI middlewares.</p> <p>For example:</p> <ul> <li>Sentry</li> <li>Uvicorn's <code>ProxyHeadersMiddleware</code></li> <li>MessagePack</li> </ul> <p>To see other available middlewares check Starlette's Middleware docs and the ASGI Awesome List.</p>"},{"location":"advanced/sub-applications/","title":"Sub Applications - Mounts","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>If you need to have two independent ReadyAPI applications, with their own independent OpenAPI and their own docs UIs, you can have a main app and \"mount\" one (or more) sub-application(s).</p>"},{"location":"advanced/sub-applications/#mounting-a-readyapi-application","title":"Mounting a ReadyAPI application","text":"<p>\"Mounting\" means adding a completely \"independent\" application in a specific path, that then takes care of handling everything under that path, with the path operations declared in that sub-application.</p>"},{"location":"advanced/sub-applications/#top-level-application","title":"Top-level application","text":"<p>First, create the main, top-level, ReadyAPI application, and its path operations:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#sub-application","title":"Sub-application","text":"<p>Then, create your sub-application, and its path operations.</p> <p>This sub-application is just another standard ReadyAPI application, but this is the one that will be \"mounted\":</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#mount-the-sub-application","title":"Mount the sub-application","text":"<p>In your top-level application, <code>app</code>, mount the sub-application, <code>subapi</code>.</p> <p>In this case, it will be mounted at the path <code>/subapi</code>:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#check-the-automatic-api-docs","title":"Check the automatic API docs","text":"<p>Now, run <code>uvicorn</code> with the main app, if your file is <code>main.py</code>, it would be:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>And open the docs at http://127.0.0.1:8000/docs.</p> <p>You will see the automatic API docs for the main app, including only its own path operations:</p> <p></p> <p>And then, open the docs for the sub-application, at http://127.0.0.1:8000/subapi/docs.</p> <p>You will see the automatic API docs for the sub-application, including only its own path operations, all under the correct sub-path prefix <code>/subapi</code>:</p> <p></p> <p>If you try interacting with any of the two user interfaces, they will work correctly, because the browser will be able to talk to each specific app or sub-app.</p>"},{"location":"advanced/sub-applications/#technical-details-root_path","title":"Technical Details: <code>root_path</code>","text":"<p>When you mount a sub-application as described above, ReadyAPI will take care of communicating the mount path for the sub-application using a mechanism from the ASGI specification called a <code>root_path</code>.</p> <p>That way, the sub-application will know to use that path prefix for the docs UI.</p> <p>And the sub-application could also have its own mounted sub-applications and everything would work correctly, because ReadyAPI handles all these <code>root_path</code>s automatically.</p> <p>You will learn more about the <code>root_path</code> and how to use it explicitly in the section about Behind a Proxy.</p>"},{"location":"advanced/behind-a-proxy/","title":"Behind a Proxy","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>In some situations, you might need to use a proxy server like Traefik or Nginx with a configuration that adds an extra path prefix that is not seen by your application.</p> <p>In these cases you can use <code>root_path</code> to configure your application.</p> <p>The <code>root_path</code> is a mechanism provided by the ASGI specification (that ReadyAPI is built on, through Starlette).</p> <p>The <code>root_path</code> is used to handle these specific cases.</p> <p>And it's also used internally when mounting sub-applications.</p>"},{"location":"advanced/behind-a-proxy/#proxy-with-a-stripped-path-prefix","title":"Proxy with a stripped path prefix","text":"<p>Having a proxy with a stripped path prefix, in this case, means that you could declare a path at <code>/app</code> in your code, but then, you add a layer on top (the proxy) that would put your ReadyAPI application under a path like <code>/api/v1</code>.</p> <p>In this case, the original path <code>/app</code> would actually be served at <code>/api/v1/app</code>.</p> <p>Even though all your code is written assuming there's just <code>/app</code>.</p> <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>And the proxy would be \"stripping\" the path prefix on the fly before transmitting the request to Uvicorn, keeping your application convinced that it is being served at <code>/app</code>, so that you don't have to update all your code to include the prefix <code>/api/v1</code>.</p> <p>Up to here, everything would work as normally.</p> <p>But then, when you open the integrated docs UI (the frontend), it would expect to get the OpenAPI schema at <code>/openapi.json</code>, instead of <code>/api/v1/openapi.json</code>.</p> <p>So, the frontend (that runs in the browser) would try to reach <code>/openapi.json</code> and wouldn't be able to get the OpenAPI schema.</p> <p>Because we have a proxy with a path prefix of <code>/api/v1</code> for our app, the frontend needs to fetch the OpenAPI schema at <code>/api/v1/openapi.json</code>.</p> <pre><code>graph LR\n\nbrowser(\"Browser\")\nproxy[\"Proxy on http://0.0.0.0:9999/api/v1/app\"]\nserver[\"Server on http://127.0.0.1:8000/app\"]\n\nbrowser --&gt; proxy\nproxy --&gt; server</code></pre> <p>Tip</p> <p>The IP <code>0.0.0.0</code> is commonly used to mean that the program listens on all the IPs available in that machine/server.</p> <p>The docs UI would also need the OpenAPI schema to declare that this API <code>server</code> is located at <code>/api/v1</code> (behind the proxy). For example:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    // More stuff here\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        }\n    ],\n    \"paths\": {\n            // More stuff here\n    }\n}\n</code></pre> <p>In this example, the \"Proxy\" could be something like Traefik. And the server would be something like Uvicorn, running your ReadyAPI application.</p>"},{"location":"advanced/behind-a-proxy/#providing-the-root_path","title":"Providing the <code>root_path</code>","text":"<p>To achieve this, you can use the command line option <code>--root-path</code> like:</p> <pre><code>$ uvicorn main:app --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>If you use Hypercorn, it also has the option <code>--root-path</code>.</p> <p>Technical Details</p> <p>The ASGI specification defines a <code>root_path</code> for this use case.</p> <p>And the <code>--root-path</code> command line option provides that <code>root_path</code>.</p>"},{"location":"advanced/behind-a-proxy/#checking-the-current-root_path","title":"Checking the current <code>root_path</code>","text":"<p>You can get the current <code>root_path</code> used by your application for each request, it is part of the <code>scope</code> dictionary (that's part of the ASGI spec).</p> <p>Here we are including it in the message just for demonstration purposes.</p> <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Then, if you start Uvicorn with:</p> <pre><code>$ uvicorn main:app --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>The response would be something like:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre>"},{"location":"advanced/behind-a-proxy/#setting-the-root_path-in-the-readyapi-app","title":"Setting the <code>root_path</code> in the ReadyAPI app","text":"<p>Alternatively, if you don't have a way to provide a command line option like <code>--root-path</code> or equivalent, you can set the <code>root_path</code> parameter when creating your ReadyAPI app:</p> <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(root_path=\"/api/v1\")\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Passing the <code>root_path</code> to <code>ReadyAPI</code> would be the equivalent of passing the <code>--root-path</code> command line option to Uvicorn or Hypercorn.</p>"},{"location":"advanced/behind-a-proxy/#about-root_path","title":"About <code>root_path</code>","text":"<p>Keep in mind that the server (Uvicorn) won't use that <code>root_path</code> for anything else than passing it to the app.</p> <p>But if you go with your browser to http://127.0.0.1:8000/app you will see the normal response:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>So, it won't expect to be accessed at <code>http://127.0.0.1:8000/api/v1/app</code>.</p> <p>Uvicorn will expect the proxy to access Uvicorn at <code>http://127.0.0.1:8000/app</code>, and then it would be the proxy's responsibility to add the extra <code>/api/v1</code> prefix on top.</p>"},{"location":"advanced/behind-a-proxy/#about-proxies-with-a-stripped-path-prefix","title":"About proxies with a stripped path prefix","text":"<p>Keep in mind that a proxy with stripped path prefix is only one of the ways to configure it.</p> <p>Probably in many cases the default will be that the proxy doesn't have a stripped path prefix.</p> <p>In a case like that (without a stripped path prefix), the proxy would listen on something like <code>https://myawesomeapp.com</code>, and then if the browser goes to <code>https://myawesomeapp.com/api/v1/app</code> and your server (e.g. Uvicorn) listens on <code>http://127.0.0.1:8000</code> the proxy (without a stripped path prefix) would access Uvicorn at the same path: <code>http://127.0.0.1:8000/api/v1/app</code>.</p>"},{"location":"advanced/behind-a-proxy/#testing-locally-with-traefik","title":"Testing locally with Traefik","text":"<p>You can easily run the experiment locally with a stripped path prefix using Traefik.</p> <p>Download Traefik, it's a single binary, you can extract the compressed file and run it directly from the terminal.</p> <p>Then create a file <code>traefik.toml</code> with:</p> <pre><code>[entryPoints]\n  [entryPoints.http]\n    address = \":9999\"\n\n[providers]\n  [providers.file]\n    filename = \"routes.toml\"\n</code></pre> <p>This tells Traefik to listen on port 9999 and to use another file <code>routes.toml</code>.</p> <p>Tip</p> <p>We are using port 9999 instead of the standard HTTP port 80 so that you don't have to run it with admin (<code>sudo</code>) privileges.</p> <p>Now create that other file <code>routes.toml</code>:</p> <pre><code>[http]\n  [http.middlewares]\n\n    [http.middlewares.api-stripprefix.stripPrefix]\n      prefixes = [\"/api/v1\"]\n\n  [http.routers]\n\n    [http.routers.app-http]\n      entryPoints = [\"http\"]\n      service = \"app\"\n      rule = \"PathPrefix(`/api/v1`)\"\n      middlewares = [\"api-stripprefix\"]\n\n  [http.services]\n\n    [http.services.app]\n      [http.services.app.loadBalancer]\n        [[http.services.app.loadBalancer.servers]]\n          url = \"http://127.0.0.1:8000\"\n</code></pre> <p>This file configures Traefik to use the path prefix <code>/api/v1</code>.</p> <p>And then it will redirect its requests to your Uvicorn running on <code>http://127.0.0.1:8000</code>.</p> <p>Now start Traefik:</p> <pre><code>$ ./traefik --configFile=traefik.toml\n\nINFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml\n</code></pre> <p>And now start your app with Uvicorn, using the <code>--root-path</code> option:</p> <pre><code>$ uvicorn main:app --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"advanced/behind-a-proxy/#check-the-responses","title":"Check the responses","text":"<p>Now, if you go to the URL with the port for Uvicorn: http://127.0.0.1:8000/app, you will see the normal response:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>Tip</p> <p>Notice that even though you are accessing it at <code>http://127.0.0.1:8000/app</code> it shows the <code>root_path</code> of <code>/api/v1</code>, taken from the option <code>--root-path</code>.</p> <p>And now open the URL with the port for Traefik, including the path prefix: http://127.0.0.1:9999/api/v1/app.</p> <p>We get the same response:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>but this time at the URL with the prefix path provided by the proxy: <code>/api/v1</code>.</p> <p>Of course, the idea here is that everyone would access the app through the proxy, so the version with the path prefix <code>/api/v1</code> is the \"correct\" one.</p> <p>And the version without the path prefix (<code>http://127.0.0.1:8000/app</code>), provided by Uvicorn directly, would be exclusively for the proxy (Traefik) to access it.</p> <p>That demonstrates how the Proxy (Traefik) uses the path prefix and how the server (Uvicorn) uses the <code>root_path</code> from the option <code>--root-path</code>.</p>"},{"location":"advanced/behind-a-proxy/#check-the-docs-ui","title":"Check the docs UI","text":"<p>But here's the fun part. \u2728</p> <p>The \"official\" way to access the app would be through the proxy with the path prefix that we defined. So, as we would expect, if you try the docs UI served by Uvicorn directly, without the path prefix in the URL, it won't work, because it expects to be accessed through the proxy.</p> <p>You can check it at http://127.0.0.1:8000/docs:</p> <p></p> <p>But if we access the docs UI at the \"official\" URL using the proxy with port <code>9999</code>, at <code>/api/v1/docs</code>, it works correctly! \ud83c\udf89</p> <p>You can check it at http://127.0.0.1:9999/api/v1/docs:</p> <p></p> <p>Right as we wanted it. \u2714\ufe0f</p> <p>This is because ReadyAPI uses this <code>root_path</code> to create the default <code>server</code> in OpenAPI with the URL provided by <code>root_path</code>.</p>"},{"location":"advanced/behind-a-proxy/#additional-servers","title":"Additional servers","text":"<p>Warning</p> <p>This is a more advanced use case. Feel free to skip it.</p> <p>By default, ReadyAPI will create a <code>server</code> in the OpenAPI schema with the URL for the <code>root_path</code>.</p> <p>But you can also provide other alternative <code>servers</code>, for example if you want the same docs UI to interact with a staging and production environments.</p> <p>If you pass a custom list of <code>servers</code> and there's a <code>root_path</code> (because your API lives behind a proxy), ReadyAPI will insert a \"server\" with this <code>root_path</code> at the beginning of the list.</p> <p>For example:</p> <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n)\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Will generate an OpenAPI schema like:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    // More stuff here\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        },\n        {\n            \"url\": \"https://stag.example.com\",\n            \"description\": \"Staging environment\"\n        },\n        {\n            \"url\": \"https://prod.example.com\",\n            \"description\": \"Production environment\"\n        }\n    ],\n    \"paths\": {\n            // More stuff here\n    }\n}\n</code></pre> <p>Tip</p> <p>Notice the auto-generated server with a <code>url</code> value of <code>/api/v1</code>, taken from the <code>root_path</code>.</p> <p>In the docs UI at http://127.0.0.1:9999/api/v1/docs it would look like:</p> <p></p> <p>Tip</p> <p>The docs UI will interact with the server that you select.</p>"},{"location":"advanced/behind-a-proxy/#disable-automatic-server-from-root_path","title":"Disable automatic server from <code>root_path</code>","text":"<p>If you don't want ReadyAPI to include an automatic server using the <code>root_path</code>, you can use the parameter <code>root_path_in_servers=False</code>:</p> <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n    root_path_in_servers=False,\n)\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>and then it won't include it in the OpenAPI schema.</p>"},{"location":"advanced/behind-a-proxy/#mounting-a-sub-application","title":"Mounting a sub-application","text":"<p>If you need to mount a sub-application (as described in Sub Applications - Mounts) while also using a proxy with <code>root_path</code>, you can do it normally, as you would expect.</p> <p>ReadyAPI will internally use the <code>root_path</code> smartly, so it will just work. \u2728</p>"},{"location":"advanced/websockets/","title":"WebSockets","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can use WebSockets with ReadyAPI.</p>"},{"location":"advanced/websockets/#install-websockets","title":"Install <code>WebSockets</code>","text":"<p>First you need to install <code>WebSockets</code>:</p> <pre><code>$ pip install websockets\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/websockets/#websockets-client","title":"WebSockets client","text":""},{"location":"advanced/websockets/#in-production","title":"In production","text":"<p>In your production system, you probably have a frontend created with a modern framework like React, Vue.js or Angular.</p> <p>And to communicate using WebSockets with your backend you would probably use your frontend's utilities.</p> <p>Or you might have a native mobile application that communicates with your WebSocket backend directly, in native code.</p> <p>Or you might have any other way to communicate with the WebSocket endpoint.</p> <p>But for this example, we'll use a very simple HTML document with some JavaScript, all inside a long string.</p> <p>This, of course, is not optimal and you wouldn't use it for production.</p> <p>In production you would have one of the options above.</p> <p>But it's the simplest way to focus on the server-side of WebSockets and have a working example:</p> <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre>"},{"location":"advanced/websockets/#create-a-websocket","title":"Create a <code>websocket</code>","text":"<p>In your ReadyAPI application, create a <code>websocket</code>:</p> <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> <p>Technical Details</p> <p>You could also use <code>from starlette.websockets import WebSocket</code>.</p> <p>ReadyAPI provides the same <code>WebSocket</code> directly just as a convenience for you, the developer. But it comes directly from Starlette.</p>"},{"location":"advanced/websockets/#await-for-messages-and-send-messages","title":"Await for messages and send messages","text":"<p>In your WebSocket route you can <code>await</code> for messages and send messages.</p> <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> <p>You can receive and send binary, text, and JSON data.</p>"},{"location":"advanced/websockets/#try-it","title":"Try it","text":"<p>If your file is named <code>main.py</code>, run your application with:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Open your browser at http://127.0.0.1:8000.</p> <p>You will see a simple page like:</p> <p></p> <p>You can type messages in the input box, and send them:</p> <p></p> <p>And your ReadyAPI application with WebSockets will respond back:</p> <p></p> <p>You can send (and receive) many messages:</p> <p></p> <p>And all of them will use the same WebSocket connection.</p>"},{"location":"advanced/websockets/#using-depends-and-others","title":"Using <code>Depends</code> and others","text":"<p>In WebSocket endpoints you can import from <code>readyapi</code> and use:</p> <ul> <li><code>Depends</code></li> <li><code>Security</code></li> <li><code>Cookie</code></li> <li><code>Header</code></li> <li><code>Path</code></li> <li><code>Query</code></li> </ul> <p>They work the same way as for other ReadyAPI endpoints/path operations:</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[str | None, Cookie()] = None,\n    token: Annotated[str | None, Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: str | None = Cookie(default=None),\n    token: str | None = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Union[str, None] = Cookie(default=None),\n    token: Union[str, None] = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Info</p> <p>As this is a WebSocket it doesn't really make sense to raise an <code>HTTPException</code>, instead we raise a <code>WebSocketException</code>.</p> <p>You can use a closing code from the valid codes defined in the specification.</p>"},{"location":"advanced/websockets/#try-the-websockets-with-dependencies","title":"Try the WebSockets with dependencies","text":"<p>If your file is named <code>main.py</code>, run your application with:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Open your browser at http://127.0.0.1:8000.</p> <p>There you can set:</p> <ul> <li>The \"Item ID\", used in the path.</li> <li>The \"Token\" used as a query parameter.</li> </ul> <p>Tip</p> <p>Notice that the query <code>token</code> will be handled by a dependency.</p> <p>With that you can connect the WebSocket and then send and receive messages:</p> <p></p>"},{"location":"advanced/websockets/#handling-disconnections-and-multiple-clients","title":"Handling disconnections and multiple clients","text":"<p>When a WebSocket connection is closed, the <code>await websocket.receive_text()</code> will raise a <code>WebSocketDisconnect</code> exception, which you can then catch and handle like in this example.</p> Python 3.9+Python 3.8+ <pre><code>from readyapi import ReadyAPI, WebSocket, WebSocketDisconnect\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;h2&gt;Your ID: &lt;span id=\"ws-id\"&gt;&lt;/span&gt;&lt;/h2&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: list[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\n\nmanager = ConnectionManager()\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n</code></pre> <pre><code>from typing import List\n\nfrom readyapi import ReadyAPI, WebSocket, WebSocketDisconnect\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;h2&gt;Your ID: &lt;span id=\"ws-id\"&gt;&lt;/span&gt;&lt;/h2&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\n\nmanager = ConnectionManager()\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n</code></pre> <p>To try it out:</p> <ul> <li>Open the app with several browser tabs.</li> <li>Write messages from them.</li> <li>Then close one of the tabs.</li> </ul> <p>That will raise the <code>WebSocketDisconnect</code> exception, and all the other clients will receive a message like:</p> <pre><code>Client #1596980209979 left the chat\n</code></pre> <p>Tip</p> <p>The app above is a minimal and simple example to demonstrate how to handle and broadcast messages to several WebSocket connections.</p> <p>But keep in mind that, as everything is handled in memory, in a single list, it will only work while the process is running, and will only work with a single process.</p> <p>If you need something easy to integrate with ReadyAPI but that is more robust, supported by Redis, PostgreSQL or others, check encode/broadcaster.</p>"},{"location":"advanced/websockets/#more-info","title":"More info","text":"<p>To learn more about the options, check Starlette's documentation for:</p> <ul> <li>The <code>WebSocket</code> class.</li> <li>Class-based WebSocket handling.</li> </ul>"},{"location":"advanced/testing-websockets/","title":"Testing WebSockets","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can use the same <code>TestClient</code> to test WebSockets.</p> <p>For this, you use the <code>TestClient</code> in a <code>with</code> statement, connecting to the WebSocket:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\nfrom readyapi.websockets import WebSocket\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n\n\n@app.websocket(\"/ws\")\nasync def websocket(websocket: WebSocket):\n    await websocket.accept()\n    await websocket.send_json({\"msg\": \"Hello WebSocket\"})\n    await websocket.close()\n\n\ndef test_read_main():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n\n\ndef test_websocket():\n    client = TestClient(app)\n    with client.websocket_connect(\"/ws\") as websocket:\n        data = websocket.receive_json()\n        assert data == {\"msg\": \"Hello WebSocket\"}\n</code></pre> <p>Note</p> <p>For more details, check Starlette's documentation for testing WebSockets.</p>"},{"location":"advanced/testing-events/","title":"Testing Events: startup - shutdown","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>When you need your event handlers (<code>startup</code> and <code>shutdown</code>) to run in your tests, you can use the <code>TestClient</code> with a <code>with</code> statement:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\nitems = {}\n\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]\n\n\ndef test_read_items():\n    with TestClient(app) as client:\n        response = client.get(\"/items/foo\")\n        assert response.status_code == 200\n        assert response.json() == {\"name\": \"Fighters\"}\n</code></pre>"},{"location":"advanced/testing-dependencies/","title":"Testing Dependencies with Overrides","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p>"},{"location":"advanced/testing-dependencies/#overriding-dependencies-during-testing","title":"Overriding dependencies during testing","text":"<p>There are some scenarios where you might want to override a dependency during testing.</p> <p>You don't want the original dependency to run (nor any of the sub-dependencies it might have).</p> <p>Instead, you want to provide a different dependency that will be used only during tests (possibly only some specific tests), and will provide a value that can be used where the value of the original dependency was used.</p>"},{"location":"advanced/testing-dependencies/#use-cases-external-service","title":"Use cases: external service","text":"<p>An example could be that you have an external authentication provider that you need to call.</p> <p>You send it a token and it returns an authenticated user.</p> <p>This provider might be charging you per request, and calling it might take some extra time than if you had a fixed mock user for tests.</p> <p>You probably want to test the external provider once, but not necessarily call it for every test that runs.</p> <p>In this case, you can override the dependency that calls that provider, and use a custom dependency that returns a mock user, only for your tests.</p>"},{"location":"advanced/testing-dependencies/#use-the-appdependency_overrides-attribute","title":"Use the <code>app.dependency_overrides</code> attribute","text":"<p>For these cases, your ReadyAPI application has an attribute <code>app.dependency_overrides</code>, it is a simple <code>dict</code>.</p> <p>To override a dependency for testing, you put as a key the original dependency (a function), and as the value, your dependency override (another function).</p> <p>And then ReadyAPI will call that override instead of the original dependency.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Tip</p> <p>You can set a dependency override for a dependency used anywhere in your ReadyAPI application.</p> <p>The original dependency could be used in a path operation function, a path operation decorator (when you don't use the return value), a <code>.include_router()</code> call, etc.</p> <p>ReadyAPI will still be able to override it.</p> <p>Then you can reset your overrides (remove them) by setting <code>app.dependency_overrides</code> to be an empty <code>dict</code>:</p> <pre><code>app.dependency_overrides = {}\n</code></pre> <p>Tip</p> <p>If you want to override a dependency only during some tests, you can set the override at the beginning of the test (inside the test function) and reset it at the end (at the end of the test function).</p>"},{"location":"advanced/testing-database/","title":"Testing a Database","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Info</p> <p>These docs are about to be updated. \ud83c\udf89</p> <p>The current version assumes Pydantic v1, and SQLAlchemy versions less than 2.0.</p> <p>The new docs will include Pydantic v2 and will use SQLModel (which is also based on SQLAlchemy) once it is updated to use Pydantic v2 as well.</p> <p>You can use the same dependency overrides from Testing Dependencies with Overrides to alter a database for testing.</p> <p>You could want to set up a different database for testing, rollback the data after the tests, pre-fill it with some testing data, etc.</p> <p>The main idea is exactly the same you saw in that previous chapter.</p>"},{"location":"advanced/testing-database/#add-tests-for-the-sql-app","title":"Add tests for the SQL app","text":"<p>Let's update the example from SQL (Relational) Databases to use a testing database.</p> <p>All the app code is the same, you can go back to that chapter check how it was.</p> <p>The only changes here are in the new testing file.</p> <p>Your normal dependency <code>get_db()</code> would return a database session.</p> <p>In the test, you could use a dependency override to return your custom database session instead of the one that would be used normally.</p> <p>In this example we'll create a temporary database only for the tests.</p>"},{"location":"advanced/testing-database/#file-structure","title":"File structure","text":"<p>We create a new file at <code>sql_app/tests/test_sql_app.py</code>.</p> <p>So the new file structure looks like:</p> <pre><code>.\n\u2514\u2500\u2500 sql_app\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 crud.py\n    \u251c\u2500\u2500 database.py\n    \u251c\u2500\u2500 main.py\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 schemas.py\n    \u2514\u2500\u2500 tests\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 test_sql_app.py\n</code></pre>"},{"location":"advanced/testing-database/#create-the-new-database-session","title":"Create the new database session","text":"<p>First, we create a new database session with the new database.</p> <p>We'll use an in-memory database that persists during the tests instead of the local file <code>sql_app.db</code>.</p> <p>But the rest of the session code is more or less the same, we just copy it.</p> <pre><code>from readyapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import StaticPool\n\nfrom ..database import Base\nfrom ..main import app, get_db\n\nSQLALCHEMY_DATABASE_URL = \"sqlite://\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={\"check_same_thread\": False},\n    poolclass=StaticPool,\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n\nBase.metadata.create_all(bind=engine)\n\n\ndef override_get_db():\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n\n\napp.dependency_overrides[get_db] = override_get_db\n\nclient = TestClient(app)\n\n\ndef test_create_user():\n    response = client.post(\n        \"/users/\",\n        json={\"email\": \"deadpool@example.com\", \"password\": \"chimichangas4life\"},\n    )\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert \"id\" in data\n    user_id = data[\"id\"]\n\n    response = client.get(f\"/users/{user_id}\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert data[\"id\"] == user_id\n</code></pre> <p>Tip</p> <p>You could reduce duplication in that code by putting it in a function and using it from both <code>database.py</code> and <code>tests/test_sql_app.py</code>.</p> <p>For simplicity and to focus on the specific testing code, we are just copying it.</p>"},{"location":"advanced/testing-database/#create-the-database","title":"Create the database","text":"<p>Because now we are going to use a new database in a new file, we need to make sure we create the database with:</p> <pre><code>Base.metadata.create_all(bind=engine)\n</code></pre> <p>That is normally called in <code>main.py</code>, but the line in <code>main.py</code> uses the database file <code>sql_app.db</code>, and we need to make sure we create <code>test.db</code> for the tests.</p> <p>So we add that line here, with the new file.</p> <pre><code>from readyapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import StaticPool\n\nfrom ..database import Base\nfrom ..main import app, get_db\n\nSQLALCHEMY_DATABASE_URL = \"sqlite://\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={\"check_same_thread\": False},\n    poolclass=StaticPool,\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n\nBase.metadata.create_all(bind=engine)\n\n\ndef override_get_db():\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n\n\napp.dependency_overrides[get_db] = override_get_db\n\nclient = TestClient(app)\n\n\ndef test_create_user():\n    response = client.post(\n        \"/users/\",\n        json={\"email\": \"deadpool@example.com\", \"password\": \"chimichangas4life\"},\n    )\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert \"id\" in data\n    user_id = data[\"id\"]\n\n    response = client.get(f\"/users/{user_id}\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert data[\"id\"] == user_id\n</code></pre>"},{"location":"advanced/testing-database/#dependency-override","title":"Dependency override","text":"<p>Now we create the dependency override and add it to the overrides for our app.</p> <pre><code>from readyapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import StaticPool\n\nfrom ..database import Base\nfrom ..main import app, get_db\n\nSQLALCHEMY_DATABASE_URL = \"sqlite://\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={\"check_same_thread\": False},\n    poolclass=StaticPool,\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n\nBase.metadata.create_all(bind=engine)\n\n\ndef override_get_db():\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n\n\napp.dependency_overrides[get_db] = override_get_db\n\nclient = TestClient(app)\n\n\ndef test_create_user():\n    response = client.post(\n        \"/users/\",\n        json={\"email\": \"deadpool@example.com\", \"password\": \"chimichangas4life\"},\n    )\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert \"id\" in data\n    user_id = data[\"id\"]\n\n    response = client.get(f\"/users/{user_id}\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert data[\"id\"] == user_id\n</code></pre> <p>Tip</p> <p>The code for <code>override_get_db()</code> is almost exactly the same as for <code>get_db()</code>, but in <code>override_get_db()</code> we use the <code>TestingSessionLocal</code> for the testing database instead.</p>"},{"location":"advanced/testing-database/#test-the-app","title":"Test the app","text":"<p>Then we can just test the app as normally.</p> <pre><code>from readyapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import StaticPool\n\nfrom ..database import Base\nfrom ..main import app, get_db\n\nSQLALCHEMY_DATABASE_URL = \"sqlite://\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={\"check_same_thread\": False},\n    poolclass=StaticPool,\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n\nBase.metadata.create_all(bind=engine)\n\n\ndef override_get_db():\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n\n\napp.dependency_overrides[get_db] = override_get_db\n\nclient = TestClient(app)\n\n\ndef test_create_user():\n    response = client.post(\n        \"/users/\",\n        json={\"email\": \"deadpool@example.com\", \"password\": \"chimichangas4life\"},\n    )\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert \"id\" in data\n    user_id = data[\"id\"]\n\n    response = client.get(f\"/users/{user_id}\")\n    assert response.status_code == 200, response.text\n    data = response.json()\n    assert data[\"email\"] == \"deadpool@example.com\"\n    assert data[\"id\"] == user_id\n</code></pre> <p>And all the modifications we made in the database during the tests will be in the <code>test.db</code> database instead of the main <code>sql_app.db</code>.</p>"},{"location":"advanced/async-tests/","title":"Async Tests","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You have already seen how to test your ReadyAPI applications using the provided <code>TestClient</code>. Up to now, you have only seen how to write synchronous tests, without using <code>async</code> functions.</p> <p>Being able to use asynchronous functions in your tests could be useful, for example, when you're querying your database asynchronously. Imagine you want to test sending requests to your ReadyAPI application and then verify that your backend successfully wrote the correct data in the database, while using an async database library.</p> <p>Let's look at how we can make that work.</p>"},{"location":"advanced/async-tests/#pytestmarkanyio","title":"pytest.mark.anyio","text":"<p>If we want to call asynchronous functions in our tests, our test functions have to be asynchronous. AnyIO provides a neat plugin for this, that allows us to specify that some test functions are to be called asynchronously.</p>"},{"location":"advanced/async-tests/#httpx","title":"HTTPX","text":"<p>Even if your ReadyAPI application uses normal <code>def</code> functions instead of <code>async def</code>, it is still an <code>async</code> application underneath.</p> <p>The <code>TestClient</code> does some magic inside to call the asynchronous ReadyAPI application in your normal <code>def</code> test functions, using standard pytest. But that magic doesn't work anymore when we're using it inside asynchronous functions. By running our tests asynchronously, we can no longer use the <code>TestClient</code> inside our test functions.</p> <p>The <code>TestClient</code> is based on HTTPX, and luckily, we can use it directly to test the API.</p>"},{"location":"advanced/async-tests/#example","title":"Example","text":"<p>For a simple example, let's consider a file structure similar to the one described in Bigger Applications and Testing:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>The file <code>main.py</code> would have:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Tomato\"}\n</code></pre> <p>The file <code>test_main.py</code> would have the tests for <code>main.py</code>, it could look like this now:</p> <pre><code>import pytest\nfrom httpx import AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre>"},{"location":"advanced/async-tests/#run-it","title":"Run it","text":"<p>You can run your tests as usual via:</p> <pre><code>$ pytest\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/async-tests/#in-detail","title":"In Detail","text":"<p>The marker <code>@pytest.mark.anyio</code> tells pytest that this test function should be called asynchronously:</p> <pre><code>import pytest\nfrom httpx import AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre> <p>Tip</p> <p>Note that the test function is now <code>async def</code> instead of just <code>def</code> as before when using the <code>TestClient</code>.</p> <p>Then we can create an <code>AsyncClient</code> with the app, and send async requests to it, using <code>await</code>.</p> <pre><code>import pytest\nfrom httpx import AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre> <p>This is the equivalent to:</p> <pre><code>response = client.get('/')\n</code></pre> <p>...that we used to make our requests with the <code>TestClient</code>.</p> <p>Tip</p> <p>Note that we're using async/await with the new <code>AsyncClient</code> - the request is asynchronous.</p> <p>Warning</p> <p>If your application relies on lifespan events, the <code>AsyncClient</code> won't trigger these events. To ensure they are triggered, use <code>LifespanManager</code> from florimondmanca/asgi-lifespan.</p>"},{"location":"advanced/async-tests/#other-asynchronous-function-calls","title":"Other Asynchronous Function Calls","text":"<p>As the testing function is now asynchronous, you can now also call (and <code>await</code>) other <code>async</code> functions apart from sending requests to your ReadyAPI application in your tests, exactly as you would call them anywhere else in your code.</p> <p>Tip</p> <p>If you encounter a <code>RuntimeError: Task attached to a different loop</code> when integrating asynchronous function calls in your tests (e.g. when using MongoDB's MotorClient) Remember to instantiate objects that need an event loop only within async functions, e.g. an <code>'@app.on_event(\"startup\")</code> callback.</p>"},{"location":"advanced/settings/","title":"Settings and Environment Variables","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>In many cases your application could need some external settings or configurations, for example secret keys, database credentials, credentials for email services, etc.</p> <p>Most of these settings are variable (can change), like database URLs. And many could be sensitive, like secrets.</p> <p>For this reason it's common to provide them in environment variables that are read by the application.</p>"},{"location":"advanced/settings/#environment-variables","title":"Environment Variables","text":"<p>Tip</p> <p>If you already know what \"environment variables\" are and how to use them, feel free to skip to the next section below.</p> <p>An environment variable (also known as \"env var\") is a variable that lives outside of the Python code, in the operating system, and could be read by your Python code (or by other programs as well).</p> <p>You can create and use environment variables in the shell, without needing Python:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// You could create an env var MY_NAME with\n$ export MY_NAME=\"Wade Wilson\"\n\n// Then you could use it with other programs, like\n$ echo \"Hello $MY_NAME\"\n\nHello Wade Wilson\n</code></pre> <pre><code>// Create an env var MY_NAME\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// Use it with other programs, like\n$ echo \"Hello $Env:MY_NAME\"\n\nHello Wade Wilson\n</code></pre>"},{"location":"advanced/settings/#read-env-vars-in-python","title":"Read env vars in Python","text":"<p>You could also create environment variables outside of Python, in the terminal (or with any other method), and then read them in Python.</p> <p>For example you could have a file <code>main.py</code> with:</p> <pre><code>import os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n</code></pre> <p>Tip</p> <p>The second argument to <code>os.getenv()</code> is the default value to return.</p> <p>If not provided, it's <code>None</code> by default, here we provide <code>\"World\"</code> as the default value to use.</p> <p>Then you could call that Python program:</p> <pre><code>// Here we don't set the env var yet\n$ python main.py\n\n// As we didn't set the env var, we get the default value\n\nHello World from Python\n\n// But if we create an environment variable first\n$ export MY_NAME=\"Wade Wilson\"\n\n// And then call the program again\n$ python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n</code></pre> <p>As environment variables can be set outside of the code, but can be read by the code, and don't have to be stored (committed to <code>git</code>) with the rest of the files, it's common to use them for configurations or settings.</p> <p>You can also create an environment variable only for a specific program invocation, that is only available to that program, and only for its duration.</p> <p>To do that, create it right before the program itself, on the same line:</p> <pre><code>// Create an env var MY_NAME in line for this program call\n$ MY_NAME=\"Wade Wilson\" python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n\n// The env var no longer exists afterwards\n$ python main.py\n\nHello World from Python\n</code></pre> <p>Tip</p> <p>You can read more about it at The Twelve-Factor App: Config.</p>"},{"location":"advanced/settings/#types-and-validation","title":"Types and validation","text":"<p>These environment variables can only handle text strings, as they are external to Python and have to be compatible with other programs and the rest of the system (and even with different operating systems, as Linux, Windows, macOS).</p> <p>That means that any value read in Python from an environment variable will be a <code>str</code>, and any conversion to a different type or validation has to be done in code.</p>"},{"location":"advanced/settings/#pydantic-settings","title":"Pydantic <code>Settings</code>","text":"<p>Fortunately, Pydantic provides a great utility to handle these settings coming from environment variables with Pydantic: Settings management.</p>"},{"location":"advanced/settings/#install-pydantic-settings","title":"Install <code>pydantic-settings</code>","text":"<p>First, install the <code>pydantic-settings</code> package:</p> <pre><code>$ pip install pydantic-settings\n---&gt; 100%\n</code></pre> <p>It also comes included when you install the <code>all</code> extras with:</p> <pre><code>$ pip install \"readyapi[all]\"\n---&gt; 100%\n</code></pre> <p>Info</p> <p>In Pydantic v1 it came included with the main package. Now it is distributed as this independent package so that you can choose to install it or not if you don't need that functionality.</p>"},{"location":"advanced/settings/#create-the-settings-object","title":"Create the <code>Settings</code> object","text":"<p>Import <code>BaseSettings</code> from Pydantic and create a sub-class, very much like with a Pydantic model.</p> <p>The same way as with Pydantic models, you declare class attributes with type annotations, and possibly default values.</p> <p>You can use all the same validation features and tools you use for Pydantic models, like different data types and additional validations with <code>Field()</code>.</p> Pydantic v2Pydantic v1 <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Info</p> <p>In Pydantic v1 you would import <code>BaseSettings</code> directly from <code>pydantic</code> instead of from <code>pydantic_settings</code>.</p> <pre><code>from pydantic import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Tip</p> <p>If you want something quick to copy and paste, don't use this example, use the last one below.</p> <p>Then, when you create an instance of that <code>Settings</code> class (in this case, in the <code>settings</code> object), Pydantic will read the environment variables in a case-insensitive way, so, an upper-case variable <code>APP_NAME</code> will still be read for the attribute <code>app_name</code>.</p> <p>Next it will convert and validate the data. So, when you use that <code>settings</code> object, you will have data of the types you declared (e.g. <code>items_per_user</code> will be an <code>int</code>).</p>"},{"location":"advanced/settings/#use-the-settings","title":"Use the <code>settings</code>","text":"<p>Then you can use the new <code>settings</code> object in your application:</p> <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre>"},{"location":"advanced/settings/#run-the-server","title":"Run the server","text":"<p>Next, you would run the server passing the configurations as environment variables, for example you could set an <code>ADMIN_EMAIL</code> and <code>APP_NAME</code> with:</p> <pre><code>$ ADMIN_EMAIL=\"deadpool@example.com\" APP_NAME=\"ChimichangApp\" uvicorn main:app\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Tip</p> <p>To set multiple env vars for a single command just separate them with a space, and put them all before the command.</p> <p>And then the <code>admin_email</code> setting would be set to <code>\"deadpool@example.com\"</code>.</p> <p>The <code>app_name</code> would be <code>\"ChimichangApp\"</code>.</p> <p>And the <code>items_per_user</code> would keep its default value of <code>50</code>.</p>"},{"location":"advanced/settings/#settings-in-another-module","title":"Settings in another module","text":"<p>You could put those settings in another module file as you saw in Bigger Applications - Multiple Files.</p> <p>For example, you could have a file <code>config.py</code> with:</p> <pre><code>from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\n</code></pre> <p>And then use it in a file <code>main.py</code>:</p> <pre><code>from readyapi import ReadyAPI\n\nfrom .config import settings\n\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Tip</p> <p>You would also need a file <code>__init__.py</code> as you saw in Bigger Applications - Multiple Files.</p>"},{"location":"advanced/settings/#settings-in-a-dependency","title":"Settings in a dependency","text":"<p>In some occasions it might be useful to provide the settings from a dependency, instead of having a global object with <code>settings</code> that is used everywhere.</p> <p>This could be especially useful during testing, as it's very easy to override a dependency with your own custom settings.</p>"},{"location":"advanced/settings/#the-config-file","title":"The config file","text":"<p>Coming from the previous example, your <code>config.py</code> file could look like:</p> <pre><code>from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n</code></pre> <p>Notice that now we don't create a default instance <code>settings = Settings()</code>.</p>"},{"location":"advanced/settings/#the-main-app-file","title":"The main app file","text":"<p>Now we create a dependency that returns a new <code>config.Settings()</code>.</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from functools import lru_cache\nfrom typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <pre><code>from functools import lru_cache\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from functools import lru_cache\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Settings = Depends(get_settings)):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Tip</p> <p>We'll discuss the <code>@lru_cache</code> in a bit.</p> <p>For now you can assume <code>get_settings()</code> is a normal function.</p> <p>And then we can require it from the path operation function as a dependency and use it anywhere we need it.</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from functools import lru_cache\nfrom typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <pre><code>from functools import lru_cache\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from functools import lru_cache\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Settings = Depends(get_settings)):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre>"},{"location":"advanced/settings/#settings-and-testing","title":"Settings and testing","text":"<p>Then it would be very easy to provide a different settings object during testing by creating a dependency override for <code>get_settings</code>:</p> <pre><code>from readyapi.testclient import TestClient\n\nfrom .config import Settings\nfrom .main import app, get_settings\n\nclient = TestClient(app)\n\n\ndef get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")\n\n\napp.dependency_overrides[get_settings] = get_settings_override\n\n\ndef test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }\n</code></pre> <p>In the dependency override we set a new value for the <code>admin_email</code> when creating the new <code>Settings</code> object, and then we return that new object.</p> <p>Then we can test that it is used.</p>"},{"location":"advanced/settings/#reading-a-env-file","title":"Reading a <code>.env</code> file","text":"<p>If you have many settings that possibly change a lot, maybe in different environments, it might be useful to put them on a file and then read them from it as if they were environment variables.</p> <p>This practice is common enough that it has a name, these environment variables are commonly placed in a file <code>.env</code>, and the file is called a \"dotenv\".</p> <p>Tip</p> <p>A file starting with a dot (<code>.</code>) is a hidden file in Unix-like systems, like Linux and macOS.</p> <p>But a dotenv file doesn't really have to have that exact filename.</p> <p>Pydantic has support for reading from these types of files using an external library. You can read more at Pydantic Settings: Dotenv (.env) support.</p> <p>Tip</p> <p>For this to work, you need to <code>pip install python-dotenv</code>.</p>"},{"location":"advanced/settings/#the-env-file","title":"The <code>.env</code> file","text":"<p>You could have a <code>.env</code> file with:</p> <pre><code>ADMIN_EMAIL=\"deadpool@example.com\"\nAPP_NAME=\"ChimichangApp\"\n</code></pre>"},{"location":"advanced/settings/#read-settings-from-env","title":"Read settings from <code>.env</code>","text":"<p>And then update your <code>config.py</code> with:</p> Pydantic v2Pydantic v1 <pre><code>from pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    model_config = SettingsConfigDict(env_file=\".env\")\n</code></pre> <p>Tip</p> <p>The <code>model_config</code> attribute is used just for Pydantic configuration. You can read more at Pydantic Model Config.</p> <pre><code>from pydantic import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\"\n</code></pre> <p>Tip</p> <p>The <code>Config</code> class is used just for Pydantic configuration. You can read more at Pydantic Model Config.</p> <p>Info</p> <p>In Pydantic version 1 the configuration was done in an internal class <code>Config</code>, in Pydantic version 2 it's done in an attribute <code>model_config</code>. This attribute takes a <code>dict</code>, and to get autocompletion and inline errors you can import and use <code>SettingsConfigDict</code> to define that <code>dict</code>.</p> <p>Here we define the config <code>env_file</code> inside of your Pydantic <code>Settings</code> class, and set the value to the filename with the dotenv file we want to use.</p>"},{"location":"advanced/settings/#creating-the-settings-only-once-with-lru_cache","title":"Creating the <code>Settings</code> only once with <code>lru_cache</code>","text":"<p>Reading a file from disk is normally a costly (slow) operation, so you probably want to do it only once and then re-use the same settings object, instead of reading it for each request.</p> <p>But every time we do:</p> <pre><code>Settings()\n</code></pre> <p>a new <code>Settings</code> object would be created, and at creation it would read the <code>.env</code> file again.</p> <p>If the dependency function was just like:</p> <pre><code>def get_settings():\n    return Settings()\n</code></pre> <p>we would create that object for each request, and we would be reading the <code>.env</code> file for each request. \u26a0\ufe0f</p> <p>But as we are using the <code>@lru_cache</code> decorator on top, the <code>Settings</code> object will be created only once, the first time it's called. \u2714\ufe0f</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated <pre><code>from functools import lru_cache\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\nfrom . import config\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return config.Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[config.Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <pre><code>from functools import lru_cache\nfrom typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom . import config\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return config.Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[config.Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from functools import lru_cache\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom . import config\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return config.Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: config.Settings = Depends(get_settings)):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Then for any subsequent calls of <code>get_settings()</code> in the dependencies for the next requests, instead of executing the internal code of <code>get_settings()</code> and creating a new <code>Settings</code> object, it will return the same object that was returned on the first call, again and again.</p>"},{"location":"advanced/settings/#lru_cache-technical-details","title":"<code>lru_cache</code> Technical Details","text":"<p><code>@lru_cache</code> modifies the function it decorates to return the same value that was returned the first time, instead of computing it again, executing the code of the function every time.</p> <p>So, the function below it will be executed once for each combination of arguments. And then the values returned by each of those combinations of arguments will be used again and again whenever the function is called with exactly the same combination of arguments.</p> <p>For example, if you have a function:</p> <pre><code>@lru_cache\ndef say_hi(name: str, salutation: str = \"Ms.\"):\n    return f\"Hello {salutation} {name}\"\n</code></pre> <p>your program could execute like this:</p> <pre><code>sequenceDiagram\n\nparticipant code as Code\nparticipant function as say_hi()\nparticipant execute as Execute function\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; execute: execute function code\n        execute -&gt;&gt; code: return the result\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; code: return stored result\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\")\n        function -&gt;&gt; execute: execute function code\n        execute -&gt;&gt; code: return the result\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\", salutation=\"Mr.\")\n        function -&gt;&gt; execute: execute function code\n        execute -&gt;&gt; code: return the result\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\")\n        function -&gt;&gt; code: return stored result\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; code: return stored result\n    end</code></pre> <p>In the case of our dependency <code>get_settings()</code>, the function doesn't even take any arguments, so it always returns the same value.</p> <p>That way, it behaves almost as if it was just a global variable. But as it uses a dependency function, then we can override it easily for testing.</p> <p><code>@lru_cache</code> is part of <code>functools</code> which is part of Python's standard library, you can read more about it in the Python docs for <code>@lru_cache</code>.</p>"},{"location":"advanced/settings/#recap","title":"Recap","text":"<p>You can use Pydantic Settings to handle the settings or configurations for your application, with all the power of Pydantic models.</p> <ul> <li>By using a dependency you can simplify testing.</li> <li>You can use <code>.env</code> files with it.</li> <li>Using <code>@lru_cache</code> lets you avoid reading the dotenv file again and again for each request, while allowing you to override it during testing.</li> </ul>"},{"location":"advanced/openapi-callbacks/","title":"OpenAPI Callbacks","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You could create an API with a path operation that could trigger a request to an external API created by someone else (probably the same developer that would be using your API).</p> <p>The process that happens when your API app calls the external API is named a \"callback\". Because the software that the external developer wrote sends a request to your API and then your API calls back, sending a request to an external API (that was probably created by the same developer).</p> <p>In this case, you could want to document how that external API should look like. What path operation it should have, what body it should expect, what response it should return, etc.</p>"},{"location":"advanced/openapi-callbacks/#an-app-with-callbacks","title":"An app with callbacks","text":"<p>Let's see all this with an example.</p> <p>Imagine you develop an app that allows creating invoices.</p> <p>These invoices will have an <code>id</code>, <code>title</code> (optional), <code>customer</code>, and <code>total</code>.</p> <p>The user of your API (an external developer) will create an invoice in your API with a POST request.</p> <p>Then your API will (let's imagine):</p> <ul> <li>Send the invoice to some customer of the external developer.</li> <li>Collect the money.</li> <li>Send a notification back to the API user (the external developer).<ul> <li>This will be done by sending a POST request (from your API) to some external API provided by that external developer (this is the \"callback\").</li> </ul> </li> </ul>"},{"location":"advanced/openapi-callbacks/#the-normal-readyapi-app","title":"The normal ReadyAPI app","text":"<p>Let's first see how the normal API app would look like before adding the callback.</p> <p>It will have a path operation that will receive an <code>Invoice</code> body, and a query parameter <code>callback_url</code> that will contain the URL for the callback.</p> <p>This part is pretty normal, most of the code is probably already familiar to you:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>Tip</p> <p>The <code>callback_url</code> query parameter uses a Pydantic URL type.</p> <p>The only new thing is the <code>callbacks=invoices_callback_router.routes</code> as an argument to the path operation decorator. We'll see what that is next.</p>"},{"location":"advanced/openapi-callbacks/#documenting-the-callback","title":"Documenting the callback","text":"<p>The actual callback code will depend heavily on your own API app.</p> <p>And it will probably vary a lot from one app to the next.</p> <p>It could be just one or two lines of code, like:</p> <pre><code>callback_url = \"https://example.com/api/v1/invoices/events/\"\nhttpx.post(callback_url, json={\"description\": \"Invoice paid\", \"paid\": True})\n</code></pre> <p>But possibly the most important part of the callback is making sure that your API user (the external developer) implements the external API correctly, according to the data that your API is going to send in the request body of the callback, etc.</p> <p>So, what we will do next is add the code to document how that external API should look like to receive the callback from your API.</p> <p>That documentation will show up in the Swagger UI at <code>/docs</code> in your API, and it will let external developers know how to build the external API.</p> <p>This example doesn't implement the callback itself (that could be just a line of code), only the documentation part.</p> <p>Tip</p> <p>The actual callback is just an HTTP request.</p> <p>When implementing the callback yourself, you could use something like HTTPX or Requests.</p>"},{"location":"advanced/openapi-callbacks/#write-the-callback-documentation-code","title":"Write the callback documentation code","text":"<p>This code won't be executed in your app, we only need it to document how that external API should look like.</p> <p>But, you already know how to easily create automatic documentation for an API with ReadyAPI.</p> <p>So we are going to use that same knowledge to document how the external API should look like... by creating the path operation(s) that the external API should implement (the ones your API will call).</p> <p>Tip</p> <p>When writing the code to document a callback, it might be useful to imagine that you are that external developer. And that you are currently implementing the external API, not your API.</p> <p>Temporarily adopting this point of view (of the external developer) can help you feel like it's more obvious where to put the parameters, the Pydantic model for the body, for the response, etc. for that external API.</p>"},{"location":"advanced/openapi-callbacks/#create-a-callback-apirouter","title":"Create a callback <code>APIRouter</code>","text":"<p>First create a new <code>APIRouter</code> that will contain one or more callbacks.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre>"},{"location":"advanced/openapi-callbacks/#create-the-callback-path-operation","title":"Create the callback path operation","text":"<p>To create the callback path operation use the same <code>APIRouter</code> you created above.</p> <p>It should look just like a normal ReadyAPI path operation:</p> <ul> <li>It should probably have a declaration of the body it should receive, e.g. <code>body: InvoiceEvent</code>.</li> <li>And it could also have a declaration of the response it should return, e.g. <code>response_model=InvoiceEventReceived</code>.</li> </ul> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>There are 2 main differences from a normal path operation:</p> <ul> <li>It doesn't need to have any actual code, because your app will never call this code. It's only used to document the external API. So, the function could just have <code>pass</code>.</li> <li>The path can contain an OpenAPI 3 expression (see more below) where it can use variables with parameters and parts of the original request sent to your API.</li> </ul>"},{"location":"advanced/openapi-callbacks/#the-callback-path-expression","title":"The callback path expression","text":"<p>The callback path can have an OpenAPI 3 expression that can contain parts of the original request sent to your API.</p> <p>In this case, it's the <code>str</code>:</p> <pre><code>\"{$callback_url}/invoices/{$request.body.id}\"\n</code></pre> <p>So, if your API user (the external developer) sends a request to your API to:</p> <pre><code>https://yourapi.com/invoices/?callback_url=https://www.external.org/events\n</code></pre> <p>with a JSON body of:</p> <pre><code>{\n    \"id\": \"2expen51ve\",\n    \"customer\": \"Mr. Richie Rich\",\n    \"total\": \"9999\"\n}\n</code></pre> <p>then your API will process the invoice, and at some point later, send a callback request to the <code>callback_url</code> (the external API):</p> <pre><code>https://www.external.org/events/invoices/2expen51ve\n</code></pre> <p>with a JSON body containing something like:</p> <pre><code>{\n    \"description\": \"Payment celebration\",\n    \"paid\": true\n}\n</code></pre> <p>and it would expect a response from that external API with a JSON body like:</p> <pre><code>{\n    \"ok\": true\n}\n</code></pre> <p>Tip</p> <p>Notice how the callback URL used contains the URL received as a query parameter in <code>callback_url</code> (<code>https://www.external.org/events</code>) and also the invoice <code>id</code> from inside of the JSON body (<code>2expen51ve</code>).</p>"},{"location":"advanced/openapi-callbacks/#add-the-callback-router","title":"Add the callback router","text":"<p>At this point you have the callback path operation(s) needed (the one(s) that the external developer  should implement in the external API) in the callback router you created above.</p> <p>Now use the parameter <code>callbacks</code> in your API's path operation decorator to pass the attribute <code>.routes</code> (that's actually just a <code>list</code> of routes/path operations) from that callback router:</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>Tip</p> <p>Notice that you are not passing the router itself (<code>invoices_callback_router</code>) to <code>callback=</code>, but the attribute <code>.routes</code>, as in <code>invoices_callback_router.routes</code>.</p>"},{"location":"advanced/openapi-callbacks/#check-the-docs","title":"Check the docs","text":"<p>Now you can start your app with Uvicorn and go to http://127.0.0.1:8000/docs.</p> <p>You will see your docs including a \"Callbacks\" section for your path operation that shows how the external API should look like:</p> <p></p>"},{"location":"advanced/openapi-webhooks/","title":"OpenAPI Webhooks","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>There are cases where you want to tell your API users that your app could call their app (sending a request) with some data, normally to notify of some type of event.</p> <p>This means that instead of the normal process of your users sending requests to your API, it's your API (or your app) that could send requests to their system (to their API, their app).</p> <p>This is normally called a webhook.</p>"},{"location":"advanced/openapi-webhooks/#webhooks-steps","title":"Webhooks steps","text":"<p>The process normally is that you define in your code what is the message that you will send, the body of the request.</p> <p>You also define in some way at which moments your app will send those requests or events.</p> <p>And your users define in some way (for example in a web dashboard somewhere) the URL where your app should send those requests.</p> <p>All the logic about how to register the URLs for webhooks and the code to actually send those requests is up to you. You write it however you want to in your own code.</p>"},{"location":"advanced/openapi-webhooks/#documenting-webhooks-with-readyapi-and-openapi","title":"Documenting webhooks with ReadyAPI and OpenAPI","text":"<p>With ReadyAPI, using OpenAPI, you can define the names of these webhooks, the types of HTTP operations that your app can send (e.g. <code>POST</code>, <code>PUT</code>, etc.) and the request bodies that your app would send.</p> <p>This can make it a lot easier for your users to implement their APIs to receive your webhook requests, they might even be able to autogenerate some of their own API code.</p> <p>Info</p> <p>Webhooks are available in OpenAPI 3.1.0 and above, supported by ReadyAPI <code>0.99.0</code> and above.</p>"},{"location":"advanced/openapi-webhooks/#an-app-with-webhooks","title":"An app with webhooks","text":"<p>When you create a ReadyAPI application, there is a <code>webhooks</code> attribute that you can use to define webhooks, the same way you would define path operations, for example with <code>@app.webhooks.post()</code>.</p> <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Subscription(BaseModel):\n    username: str\n    monthly_fee: float\n    start_date: datetime\n\n\n@app.webhooks.post(\"new-subscription\")\ndef new_subscription(body: Subscription):\n    \"\"\"\n    When a new user subscribes to your service we'll send you a POST request with this\n    data to the URL that you register for the event `new-subscription` in the dashboard.\n    \"\"\"\n\n\n@app.get(\"/users/\")\ndef read_users():\n    return [\"Rick\", \"Morty\"]\n</code></pre> <p>The webhooks that you define will end up in the OpenAPI schema and the automatic docs UI.</p> <p>Info</p> <p>The <code>app.webhooks</code> object is actually just an <code>APIRouter</code>, the same type you would use when structuring your app with multiple files.</p> <p>Notice that with webhooks you are actually not declaring a path (like <code>/items/</code>), the text you pass there is just an identifier of the webhook (the name of the event), for example in <code>@app.webhooks.post(\"new-subscription\")</code>, the webhook name is <code>new-subscription</code>.</p> <p>This is because it is expected that your users would define the actual URL path where they want to receive the webhook request in some other way (e.g. a web dashboard).</p>"},{"location":"advanced/openapi-webhooks/#check-the-docs","title":"Check the docs","text":"<p>Now you can start your app with Uvicorn and go to http://127.0.0.1:8000/docs.</p> <p>You will see your docs have the normal path operations and now also some webhooks:</p> <p></p>"},{"location":"advanced/wsgi/","title":"Including WSGI - Flask, Django, others","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can mount WSGI applications as you saw with Sub Applications - Mounts, Behind a Proxy.</p> <p>For that, you can use the <code>WSGIMiddleware</code> and use it to wrap your WSGI application, for example, Flask, Django, etc.</p>"},{"location":"advanced/wsgi/#using-wsgimiddleware","title":"Using <code>WSGIMiddleware</code>","text":"<p>You need to import <code>WSGIMiddleware</code>.</p> <p>Then wrap the WSGI (e.g. Flask) app with the middleware.</p> <p>And then mount that under a path.</p> <pre><code>from flask import Flask, request\nfrom markupsafe import escape\nfrom readyapi import ReadyAPI\nfrom readyapi.middleware.wsgi import WSGIMiddleware\n\nflask_app = Flask(__name__)\n\n\n@flask_app.route(\"/\")\ndef flask_main():\n    name = request.args.get(\"name\", \"World\")\n    return f\"Hello, {escape(name)} from Flask!\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/v2\")\ndef read_main():\n    return {\"message\": \"Hello World\"}\n\n\napp.mount(\"/v1\", WSGIMiddleware(flask_app))\n</code></pre>"},{"location":"advanced/wsgi/#check-it","title":"Check it","text":"<p>Now, every request under the path <code>/v1/</code> will be handled by the Flask application.</p> <p>And the rest will be handled by ReadyAPI.</p> <p>If you run it with Uvicorn and go to http://localhost:8000/v1/ you will see the response from Flask:</p> <pre><code>Hello, World from Flask!\n</code></pre> <p>And if you go to http://localhost:8000/v2 you will see the response from ReadyAPI:</p> <pre><code>{\n    \"message\": \"Hello World\"\n}\n</code></pre>"},{"location":"advanced/generate-clients/","title":"Generate Clients","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>As ReadyAPI is based on the OpenAPI specification, you get automatic compatibility with many tools, including the automatic API docs (provided by Swagger UI).</p> <p>One particular advantage that is not necessarily obvious is that you can generate clients (sometimes called SDKs ) for your API, for many different programming languages.</p>"},{"location":"advanced/generate-clients/#openapi-client-generators","title":"OpenAPI Client Generators","text":"<p>There are many tools to generate clients from OpenAPI.</p> <p>A common tool is OpenAPI Generator.</p> <p>If you are building a frontend, a very interesting alternative is openapi-ts.</p>"},{"location":"advanced/generate-clients/#client-and-sdk-generators-sponsor","title":"Client and SDK Generators - Sponsor","text":"<p>There are also some company-backed Client and SDK generators based on OpenAPI (ReadyAPI), in some cases they can offer you additional features on top of high-quality generated SDKs/clients.</p> <p>Some of them also \u2728 sponsor ReadyAPI \u2728, this ensures the continued and healthy development of ReadyAPI and its ecosystem.</p> <p>And it shows their true commitment to ReadyAPI and its community (you), as they not only want to provide you a good service but also want to make sure you have a good and healthy framework, ReadyAPI. \ud83d\ude47</p> <p>For example, you might want to try Speakeasy.</p> <p>There are also several other companies offering similar services that you can search and find online. \ud83e\udd13</p>"},{"location":"advanced/generate-clients/#generate-a-typescript-frontend-client","title":"Generate a TypeScript Frontend Client","text":"<p>Let's start with a simple ReadyAPI application:</p> Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n</code></pre> <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n</code></pre> <p>Notice that the path operations define the models they use for request payload and response payload, using the models <code>Item</code> and <code>ResponseMessage</code>.</p>"},{"location":"advanced/generate-clients/#api-docs","title":"API Docs","text":"<p>If you go to the API docs, you will see that it has the schemas for the data to be sent in requests and received in responses:</p> <p></p> <p>You can see those schemas because they were declared with the models in the app.</p> <p>That information is available in the app's OpenAPI schema, and then shown in the API docs (by Swagger UI).</p> <p>And that same information from the models that is included in OpenAPI is what can be used to generate the client code.</p>"},{"location":"advanced/generate-clients/#generate-a-typescript-client","title":"Generate a TypeScript Client","text":"<p>Now that we have the app with the models, we can generate the client code for the frontend.</p>"},{"location":"advanced/generate-clients/#install-openapi-ts","title":"Install <code>openapi-ts</code>","text":"<p>You can install <code>openapi-ts</code> in your frontend code with:</p> <pre><code>$ npm install @hey-api/openapi-ts --save-dev\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/generate-clients/#generate-client-code","title":"Generate Client Code","text":"<p>To generate the client code you can use the command line application <code>openapi-ts</code> that would now be installed.</p> <p>Because it is installed in the local project, you probably wouldn't be able to call that command directly, but you would put it on your <code>package.json</code> file.</p> <p>It could look like this:</p> <pre><code>{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n</code></pre> <p>After having that NPM <code>generate-client</code> script there, you can run it with:</p> <pre><code>$ npm run generate-client\n\nfrontend-app@1.0.0 generate-client /home/user/code/frontend-app\n&gt; openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\n</code></pre> <p>That command will generate code in <code>./src/client</code> and will use <code>axios</code> (the frontend HTTP library) internally.</p>"},{"location":"advanced/generate-clients/#try-out-the-client-code","title":"Try Out the Client Code","text":"<p>Now you can import and use the client code, it could look like this, notice that you get autocompletion for the methods:</p> <p></p> <p>You will also get autocompletion for the payload to send:</p> <p></p> <p>Tip</p> <p>Notice the autocompletion for <code>name</code> and <code>price</code>, that was defined in the ReadyAPI application, in the <code>Item</code> model.</p> <p>You will have inline errors for the data that you send:</p> <p></p> <p>The response object will also have autocompletion:</p> <p></p>"},{"location":"advanced/generate-clients/#readyapi-app-with-tags","title":"ReadyAPI App with Tags","text":"<p>In many cases your ReadyAPI app will be bigger, and you will probably use tags to separate different groups of path operations.</p> <p>For example, you could have a section for items and another section for users, and they could be separated by tags:</p> Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre> <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre>"},{"location":"advanced/generate-clients/#generate-a-typescript-client-with-tags","title":"Generate a TypeScript Client with Tags","text":"<p>If you generate a client for a ReadyAPI app using tags, it will normally also separate the client code based on the tags.</p> <p>This way you will be able to have things ordered and grouped correctly for the client code:</p> <p></p> <p>In this case you have:</p> <ul> <li><code>ItemsService</code></li> <li><code>UsersService</code></li> </ul>"},{"location":"advanced/generate-clients/#client-method-names","title":"Client Method Names","text":"<p>Right now the generated method names like <code>createItemItemsPost</code> don't look very clean:</p> <pre><code>ItemsService.createItemItemsPost({name: \"Plumbus\", price: 5})\n</code></pre> <p>...that's because the client generator uses the OpenAPI internal operation ID for each path operation.</p> <p>OpenAPI requires that each operation ID is unique across all the path operations, so ReadyAPI uses the function name, the path, and the HTTP method/operation to generate that operation ID, because that way it can make sure that the operation IDs are unique.</p> <p>But I'll show you how to improve that next. \ud83e\udd13</p>"},{"location":"advanced/generate-clients/#custom-operation-ids-and-better-method-names","title":"Custom Operation IDs and Better Method Names","text":"<p>You can modify the way these operation IDs are generated to make them simpler and have simpler method names in the clients.</p> <p>In this case you will have to ensure that each operation ID is unique in some other way.</p> <p>For example, you could make sure that each path operation has a tag, and then generate the operation ID based on the tag and the path operation name (the function name).</p>"},{"location":"advanced/generate-clients/#custom-generate-unique-id-function","title":"Custom Generate Unique ID Function","text":"<p>ReadyAPI uses a unique ID for each path operation, it is used for the operation ID and also for the names of any needed custom models, for requests or responses.</p> <p>You can customize that function. It takes an <code>APIRoute</code> and outputs a string.</p> <p>For example, here it is using the first tag (you will probably have only one tag) and the path operation name (the function name).</p> <p>You can then pass that custom function to ReadyAPI as the <code>generate_unique_id_function</code> parameter:</p> Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = ReadyAPI(generate_unique_id_function=custom_generate_unique_id)\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre> <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = ReadyAPI(generate_unique_id_function=custom_generate_unique_id)\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre>"},{"location":"advanced/generate-clients/#generate-a-typescript-client-with-custom-operation-ids","title":"Generate a TypeScript Client with Custom Operation IDs","text":"<p>Now if you generate the client again, you will see that it has the improved method names:</p> <p></p> <p>As you see, the method names now have the tag and then the function name, now they don't include information from the URL path and the HTTP operation.</p>"},{"location":"advanced/generate-clients/#preprocess-the-openapi-specification-for-the-client-generator","title":"Preprocess the OpenAPI Specification for the Client Generator","text":"<p>The generated code still has some duplicated information.</p> <p>We already know that this method is related to the items because that word is in the <code>ItemsService</code> (taken from the tag), but we still have the tag name prefixed in the method name too. \ud83d\ude15</p> <p>We will probably still want to keep it for OpenAPI in general, as that will ensure that the operation IDs are unique.</p> <p>But for the generated client we could modify the OpenAPI operation IDs right before generating the clients, just to make those method names nicer and cleaner.</p> <p>We could download the OpenAPI JSON to a file <code>openapi.json</code> and then we could remove that prefixed tag with a script like this:</p> PythonNode.js <pre><code>import json\nfrom pathlib import Path\n\nfile_path = Path(\"./openapi.json\")\nopenapi_content = json.loads(file_path.read_text())\n\nfor path_data in openapi_content[\"paths\"].values():\n    for operation in path_data.values():\n        tag = operation[\"tags\"][0]\n        operation_id = operation[\"operationId\"]\n        to_remove = f\"{tag}-\"\n        new_operation_id = operation_id[len(to_remove) :]\n        operation[\"operationId\"] = new_operation_id\n\nfile_path.write_text(json.dumps(openapi_content))\n</code></pre> <pre><code>import * as fs from 'fs'\n\nasync function modifyOpenAPIFile(filePath) {\n  try {\n    const data = await fs.promises.readFile(filePath)\n    const openapiContent = JSON.parse(data)\n\n    const paths = openapiContent.paths\n    for (const pathKey of Object.keys(paths)) {\n      const pathData = paths[pathKey]\n      for (const method of Object.keys(pathData)) {\n        const operation = pathData[method]\n        if (operation.tags &amp;&amp; operation.tags.length &gt; 0) {\n          const tag = operation.tags[0]\n          const operationId = operation.operationId\n          const toRemove = `${tag}-`\n          if (operationId.startsWith(toRemove)) {\n            const newOperationId = operationId.substring(toRemove.length)\n            operation.operationId = newOperationId\n          }\n        }\n      }\n    }\n\n    await fs.promises.writeFile(\n      filePath,\n      JSON.stringify(openapiContent, null, 2),\n    )\n    console.log('File successfully modified')\n  } catch (err) {\n    console.error('Error:', err)\n  }\n}\n\nconst filePath = './openapi.json'\nmodifyOpenAPIFile(filePath)\n</code></pre> <p>With that, the operation IDs would be renamed from things like <code>items-get_items</code> to just <code>get_items</code>, that way the client generator can generate simpler method names.</p>"},{"location":"advanced/generate-clients/#generate-a-typescript-client-with-the-preprocessed-openapi","title":"Generate a TypeScript Client with the Preprocessed OpenAPI","text":"<p>Now as the end result is in a file <code>openapi.json</code>, you would modify the <code>package.json</code> to use that local file, for example:</p> <pre><code>{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input ./openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n</code></pre> <p>After generating the new client, you would now have clean method names, with all the autocompletion, inline errors, etc:</p> <p></p>"},{"location":"advanced/generate-clients/#benefits","title":"Benefits","text":"<p>When using the automatically generated clients you would get autocompletion for:</p> <ul> <li>Methods.</li> <li>Request payloads in the body, query parameters, etc.</li> <li>Response payloads.</li> </ul> <p>You would also have inline errors for everything.</p> <p>And whenever you update the backend code, and regenerate the frontend, it would have any new path operations available as methods, the old ones removed, and any other change would be reflected on the generated code. \ud83e\udd13</p> <p>This also means that if something changed it will be reflected on the client code automatically. And if you build the client it will error out if you have any mismatch in the data used.</p> <p>So, you would detect many errors very early in the development cycle instead of having to wait for the errors to show up to your final users in production and then trying to debug where the problem is. \u2728</p>"},{"location":"deployment/manually/","title":"Run a Server Manually - Uvicorn","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>The main thing you need to run a ReadyAPI application in a remote server machine is an ASGI server program like Uvicorn.</p> <p>There are 3 main alternatives:</p> <ul> <li>Uvicorn: a high performance ASGI server.</li> <li>Hypercorn: an ASGI server compatible with HTTP/2 and Trio among other features.</li> <li>Daphne: the ASGI server built for Django Channels.</li> </ul>"},{"location":"deployment/manually/#server-machine-and-server-program","title":"Server Machine and Server Program","text":"<p>There's a small detail about names to keep in mind. \ud83d\udca1</p> <p>The word \"server\" is commonly used to refer to both the remote/cloud computer (the physical or virtual machine) and also the program that is running on that machine (e.g. Uvicorn).</p> <p>Just keep in mind that when you read \"server\" in general, it could refer to one of those two things.</p> <p>When referring to the remote machine, it's common to call it server, but also machine, VM (virtual machine), node. Those all refer to some type of remote machine, normally running Linux, where you run programs.</p>"},{"location":"deployment/manually/#install-the-server-program","title":"Install the Server Program","text":"<p>You can install an ASGI compatible server with:</p> UvicornHypercorn <ul> <li>Uvicorn, a lightning-fast ASGI server, built on uvloop and httptools.</li> </ul> <pre><code>$ pip install \"uvicorn[standard]\"\n\n---&gt; 100%\n</code></pre> <p>Tip</p> <p>By adding the <code>standard</code>, Uvicorn will install and use some recommended extra dependencies.</p> <p>That including <code>uvloop</code>, the high-performance drop-in replacement for <code>asyncio</code>, that provides the big concurrency performance boost.</p> <ul> <li>Hypercorn, an ASGI server also compatible with HTTP/2.</li> </ul> <pre><code>$ pip install hypercorn\n\n---&gt; 100%\n</code></pre> <p>...or any other ASGI server.</p>"},{"location":"deployment/manually/#run-the-server-program","title":"Run the Server Program","text":"<p>You can then run your application the same way you have done in the tutorials, but without the <code>--reload</code> option, e.g.:</p> UvicornHypercorn <pre><code>$ uvicorn main:app --host 0.0.0.0 --port 80\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)\n</code></pre> <pre><code>$ hypercorn main:app --bind 0.0.0.0:80\n\nRunning on 0.0.0.0:8080 over http (CTRL + C to quit)\n</code></pre> <p>Warning</p> <p>Remember to remove the <code>--reload</code> option if you were using it.</p> <p>The <code>--reload</code> option consumes much more resources, is more unstable, etc.</p> <p>It helps a lot during development, but you shouldn't use it in production.</p>"},{"location":"deployment/manually/#hypercorn-with-trio","title":"Hypercorn with Trio","text":"<p>Starlette and ReadyAPI are based on AnyIO, which makes them compatible with both Python's standard library asyncio and Trio.</p> <p>Nevertheless, Uvicorn is currently only compatible with asyncio, and it normally uses <code>uvloop</code>, the high-performance drop-in replacement for <code>asyncio</code>.</p> <p>But if you want to directly use Trio, then you can use Hypercorn as it supports it. \u2728</p>"},{"location":"deployment/manually/#install-hypercorn-with-trio","title":"Install Hypercorn with Trio","text":"<p>First you need to install Hypercorn with Trio support:</p> <pre><code>$ pip install \"hypercorn[trio]\"\n---&gt; 100%\n</code></pre>"},{"location":"deployment/manually/#run-with-trio","title":"Run with Trio","text":"<p>Then you can pass the command line option <code>--worker-class</code> with the value <code>trio</code>:</p> <pre><code>$ hypercorn main:app --worker-class trio\n</code></pre> <p>And that will start Hypercorn with your app using Trio as the backend.</p> <p>Now you can use Trio internally in your app. Or even better, you can use AnyIO, to keep your code compatible with both Trio and asyncio. \ud83c\udf89</p>"},{"location":"deployment/manually/#deployment-concepts","title":"Deployment Concepts","text":"<p>These examples run the server program (e.g Uvicorn), starting a single process, listening on all the IPs (<code>0.0.0.0</code>) on a predefined port (e.g. <code>80</code>).</p> <p>This is the basic idea. But you will probably want to take care of some additional things, like:</p> <ul> <li>Security - HTTPS</li> <li>Running on startup</li> <li>Restarts</li> <li>Replication (the number of processes running)</li> <li>Memory</li> <li>Previous steps before starting</li> </ul> <p>I'll tell you more about each of these concepts, how to think about them, and some concrete examples with strategies to handle them in the next chapters. \ud83d\ude80</p>"},{"location":"deployment/concepts/","title":"Deployments Concepts","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>When deploying a ReadyAPI application, or actually, any type of web API, there are several concepts that you probably care about, and using them you can find the most appropriate way to deploy your application.</p> <p>Some of the important concepts are:</p> <ul> <li>Security - HTTPS</li> <li>Running on startup</li> <li>Restarts</li> <li>Replication (the number of processes running)</li> <li>Memory</li> <li>Previous steps before starting</li> </ul> <p>We'll see how they would affect deployments.</p> <p>In the end, the ultimate objective is to be able to serve your API clients in a way that is secure, to avoid disruptions, and to use the compute resources (for example remote servers/virtual machines) as efficiently as possible. \ud83d\ude80</p> <p>I'll tell you a bit more about these concepts here, and that would hopefully give you the intuition you would need to decide how to deploy your API in very different environments, possibly even in future ones that don't exist yet.</p> <p>By considering these concepts, you will be able to evaluate and design the best way to deploy your own APIs.</p> <p>In the next chapters, I'll give you more concrete recipes to deploy ReadyAPI applications.</p> <p>But for now, let's check these important conceptual ideas. These concepts also apply to any other type of web API. \ud83d\udca1</p>"},{"location":"deployment/concepts/#security-https","title":"Security - HTTPS","text":"<p>In the previous chapter about HTTPS we learned about how HTTPS provides encryption for your API.</p> <p>We also saw that HTTPS is normally provided by a component external to your application server, a TLS Termination Proxy.</p> <p>And there has to be something in charge of renewing the HTTPS certificates, it could be the same component or it could be something different.</p>"},{"location":"deployment/concepts/#example-tools-for-https","title":"Example Tools for HTTPS","text":"<p>Some of the tools you could use as a TLS Termination Proxy are:</p> <ul> <li>Traefik<ul> <li>Automatically handles certificates renewals \u2728</li> </ul> </li> <li>Caddy<ul> <li>Automatically handles certificates renewals \u2728</li> </ul> </li> <li>Nginx<ul> <li>With an external component like Certbot for certificate renewals</li> </ul> </li> <li>HAProxy<ul> <li>With an external component like Certbot for certificate renewals</li> </ul> </li> <li>Kubernetes with an Ingress Controller like Nginx<ul> <li>With an external component like cert-manager for certificate renewals</li> </ul> </li> <li>Handled internally by a cloud provider as part of their services (read below \ud83d\udc47)</li> </ul> <p>Another option is that you could use a cloud service that does more of the work including setting up HTTPS. It could have some restrictions or charge you more, etc. But in that case, you wouldn't have to set up a TLS Termination Proxy yourself.</p> <p>I'll show you some concrete examples in the next chapters.</p> <p>Then the next concepts to consider are all about the program running your actual API (e.g. Uvicorn).</p>"},{"location":"deployment/concepts/#program-and-process","title":"Program and Process","text":"<p>We will talk a lot about the running \"process\", so it's useful to have clarity about what it means, and what's the difference with the word \"program\".</p>"},{"location":"deployment/concepts/#what-is-a-program","title":"What is a Program","text":"<p>The word program is commonly used to describe many things:</p> <ul> <li>The code that you write, the Python files.</li> <li>The file that can be executed by the operating system, for example: <code>python</code>, <code>python.exe</code> or <code>uvicorn</code>.</li> <li>A particular program while it is running on the operating system, using the CPU, and storing things on memory. This is also called a process.</li> </ul>"},{"location":"deployment/concepts/#what-is-a-process","title":"What is a Process","text":"<p>The word process is normally used in a more specific way, only referring to the thing that is running in the operating system (like in the last point above):</p> <ul> <li>A particular program while it is running on the operating system.<ul> <li>This doesn't refer to the file, nor to the code, it refers specifically to the thing that is being executed and managed by the operating system.</li> </ul> </li> <li>Any program, any code, can only do things when it is being executed. So, when there's a process running.</li> <li>The process can be terminated (or \"killed\") by you, or by the operating system. At that point, it stops running/being executed, and it can no longer do things.</li> <li>Each application that you have running on your computer has some process behind it, each running program, each window, etc. And there are normally many processes running at the same time while a computer is on.</li> <li>There can be multiple processes of the same program running at the same time.</li> </ul> <p>If you check out the \"task manager\" or \"system monitor\" (or similar tools) in your operating system, you will be able to see many of those processes running.</p> <p>And, for example, you will probably see that there are multiple processes running the same browser program (Firefox, Chrome, Edge, etc). They normally run one process per tab, plus some other extra processes.</p> <p></p> <p>Now that we know the difference between the terms process and program, let's continue talking about deployments.</p>"},{"location":"deployment/concepts/#running-on-startup","title":"Running on Startup","text":"<p>In most cases, when you create a web API, you want it to be always running, uninterrupted, so that your clients can always access it. This is of course, unless you have a specific reason why you want it to run only in certain situations, but most of the time you want it constantly running and available.</p>"},{"location":"deployment/concepts/#in-a-remote-server","title":"In a Remote Server","text":"<p>When you set up a remote server (a cloud server, a virtual machine, etc.) the simplest thing you can do is to run Uvicorn (or similar) manually, the same way you do when developing locally.</p> <p>And it will work and will be useful during development.</p> <p>But if your connection to the server is lost, the running process will probably die.</p> <p>And if the server is restarted (for example after updates, or migrations from the cloud provider) you probably won't notice it. And because of that, you won't even know that you have to restart the process manually. So, your API will just stay dead. \ud83d\ude31</p>"},{"location":"deployment/concepts/#run-automatically-on-startup","title":"Run Automatically on Startup","text":"<p>In general, you will probably want the server program (e.g. Uvicorn) to be started automatically on server startup, and without needing any human intervention, to have a process always running with your API (e.g. Uvicorn running your ReadyAPI app).</p>"},{"location":"deployment/concepts/#separate-program","title":"Separate Program","text":"<p>To achieve this, you will normally have a separate program that would make sure your application is run on startup. And in many cases, it would also make sure other components or applications are also run, for example, a database.</p>"},{"location":"deployment/concepts/#example-tools-to-run-at-startup","title":"Example Tools to Run at Startup","text":"<p>Some examples of the tools that can do this job are:</p> <ul> <li>Docker</li> <li>Kubernetes</li> <li>Docker Compose</li> <li>Docker in Swarm Mode</li> <li>Systemd</li> <li>Supervisor</li> <li>Handled internally by a cloud provider as part of their services</li> <li>Others...</li> </ul> <p>I'll give you more concrete examples in the next chapters.</p>"},{"location":"deployment/concepts/#restarts","title":"Restarts","text":"<p>Similar to making sure your application is run on startup, you probably also want to make sure it is restarted after failures.</p>"},{"location":"deployment/concepts/#we-make-mistakes","title":"We Make Mistakes","text":"<p>We, as humans, make mistakes, all the time. Software almost always has bugs hidden in different places. \ud83d\udc1b</p> <p>And we as developers keep improving the code as we find those bugs and as we implement new features (possibly adding new bugs too \ud83d\ude05).</p>"},{"location":"deployment/concepts/#small-errors-automatically-handled","title":"Small Errors Automatically Handled","text":"<p>When building web APIs with ReadyAPI, if there's an error in our code, ReadyAPI will normally contain it to the single request that triggered the error. \ud83d\udee1</p> <p>The client will get a 500 Internal Server Error for that request, but the application will continue working for the next requests instead of just crashing completely.</p>"},{"location":"deployment/concepts/#bigger-errors-crashes","title":"Bigger Errors - Crashes","text":"<p>Nevertheless, there might be cases where we write some code that crashes the entire application making Uvicorn and Python crash. \ud83d\udca5</p> <p>And still, you would probably not want the application to stay dead because there was an error in one place, you probably want it to continue running at least for the path operations that are not broken.</p>"},{"location":"deployment/concepts/#restart-after-crash","title":"Restart After Crash","text":"<p>But in those cases with really bad errors that crash the running process, you would want an external component that is in charge of restarting the process, at least a couple of times...</p> <p>Tip</p> <p>...Although if the whole application is just crashing immediately it probably doesn't make sense to keep restarting it forever. But in those cases, you will probably notice it during development, or at least right after deployment.</p> <p>So let's focus on the main cases, where it could crash entirely in some particular cases in the future, and it still makes sense to restart it.</p> <p>You would probably want to have the thing in charge of restarting your application as an external component, because by that point, the same application with Uvicorn and Python already crashed, so there's nothing in the same code of the same app that could do anything about it.</p>"},{"location":"deployment/concepts/#example-tools-to-restart-automatically","title":"Example Tools to Restart Automatically","text":"<p>In most cases, the same tool that is used to run the program on startup is also used to handle automatic restarts.</p> <p>For example, this could be handled by:</p> <ul> <li>Docker</li> <li>Kubernetes</li> <li>Docker Compose</li> <li>Docker in Swarm Mode</li> <li>Systemd</li> <li>Supervisor</li> <li>Handled internally by a cloud provider as part of their services</li> <li>Others...</li> </ul>"},{"location":"deployment/concepts/#replication-processes-and-memory","title":"Replication - Processes and Memory","text":"<p>With a ReadyAPI application, using a server program like Uvicorn, running it once in one process can serve multiple clients concurrently.</p> <p>But in many cases, you will want to run several worker processes at the same time.</p>"},{"location":"deployment/concepts/#multiple-processes-workers","title":"Multiple Processes - Workers","text":"<p>If you have more clients than what a single process can handle (for example if the virtual machine is not too big) and you have multiple cores in the server's CPU, then you could have multiple processes running with the same application at the same time, and distribute all the requests among them.</p> <p>When you run multiple processes of the same API program, they are commonly called workers.</p>"},{"location":"deployment/concepts/#worker-processes-and-ports","title":"Worker Processes and Ports","text":"<p>Remember from the docs About HTTPS that only one process can be listening on one combination of port and IP address in a server?</p> <p>This is still true.</p> <p>So, to be able to have multiple processes at the same time, there has to be a single process listening on a port that then transmits the communication to each worker process in some way.</p>"},{"location":"deployment/concepts/#memory-per-process","title":"Memory per Process","text":"<p>Now, when the program loads things in memory, for example, a machine learning model in a variable, or the contents of a large file in a variable, all that consumes a bit of the memory (RAM) of the server.</p> <p>And multiple processes normally don't share any memory. This means that each running process has its own things, variables, and memory. And if you are consuming a large amount of memory in your code, each process will consume an equivalent amount of memory.</p>"},{"location":"deployment/concepts/#server-memory","title":"Server Memory","text":"<p>For example, if your code loads a Machine Learning model with 1 GB in size, when you run one process with your API, it will consume at least 1 GB of RAM. And if you start 4 processes (4 workers), each will consume 1 GB of RAM. So in total, your API will consume 4 GB of RAM.</p> <p>And if your remote server or virtual machine only has 3 GB of RAM, trying to load more than 4 GB of RAM will cause problems. \ud83d\udea8</p>"},{"location":"deployment/concepts/#multiple-processes-an-example","title":"Multiple Processes - An Example","text":"<p>In this example, there's a Manager Process that starts and controls two Worker Processes.</p> <p>This Manager Process would probably be the one listening on the port in the IP. And it would transmit all the communication to the worker processes.</p> <p>Those worker processes would be the ones running your application, they would perform the main computations to receive a request and return a response, and they would load anything you put in variables in RAM.</p> <p></p> <p>And of course, the same machine would probably have other processes running as well, apart from your application.</p> <p>An interesting detail is that the percentage of the CPU used by each process can vary a lot over time, but the memory (RAM) normally stays more or less stable.</p> <p>If you have an API that does a comparable amount of computations every time and you have a lot of clients, then the CPU utilization will probably also be stable (instead of constantly going up and down quickly).</p>"},{"location":"deployment/concepts/#examples-of-replication-tools-and-strategies","title":"Examples of Replication Tools and Strategies","text":"<p>There can be several approaches to achieve this, and I'll tell you more about specific strategies in the next chapters, for example when talking about Docker and containers.</p> <p>The main constraint to consider is that there has to be a single component handling the port in the public IP. And then it has to have a way to transmit the communication to the replicated processes/workers.</p> <p>Here are some possible combinations and strategies:</p> <ul> <li>Gunicorn managing Uvicorn workers<ul> <li>Gunicorn would be the process manager listening on the IP and port, the replication would be by having multiple Uvicorn worker processes.</li> </ul> </li> <li>Uvicorn managing Uvicorn workers<ul> <li>One Uvicorn process manager would listen on the IP and port, and it would start multiple Uvicorn worker processes.</li> </ul> </li> <li>Kubernetes and other distributed container systems<ul> <li>Something in the Kubernetes layer would listen on the IP and port. The replication would be by having multiple containers, each with one Uvicorn process running.</li> </ul> </li> <li>Cloud services that handle this for you<ul> <li>The cloud service will probably handle replication for you. It would possibly let you define a process to run, or a container image to use, in any case, it would most probably be a single Uvicorn process, and the cloud service would be in charge of replicating it.</li> </ul> </li> </ul> <p>Tip</p> <p>Don't worry if some of these items about containers, Docker, or Kubernetes don't make a lot of sense yet.</p> <p>I'll tell you more about container images, Docker, Kubernetes, etc. in a future chapter: ReadyAPI in Containers - Docker.</p>"},{"location":"deployment/concepts/#previous-steps-before-starting","title":"Previous Steps Before Starting","text":"<p>There are many cases where you want to perform some steps before starting your application.</p> <p>For example, you might want to run database migrations.</p> <p>But in most cases, you will want to perform these steps only once.</p> <p>So, you will want to have a single process to perform those previous steps, before starting the application.</p> <p>And you will have to make sure that it's a single process running those previous steps even if afterwards, you start multiple processes (multiple workers) for the application itself. If those steps were run by multiple processes, they would duplicate the work by running it on parallel, and if the steps were something delicate like a database migration, they could cause conflicts with each other.</p> <p>Of course, there are some cases where there's no problem in running the previous steps multiple times, in that case, it's a lot easier to handle.</p> <p>Tip</p> <p>Also, keep in mind that depending on your setup, in some cases you might not even need any previous steps before starting your application.</p> <p>In that case, you wouldn't have to worry about any of this. \ud83e\udd37</p>"},{"location":"deployment/concepts/#examples-of-previous-steps-strategies","title":"Examples of Previous Steps Strategies","text":"<p>This will depend heavily on the way you deploy your system, and it would probably be connected to the way you start programs, handling restarts, etc.</p> <p>Here are some possible ideas:</p> <ul> <li>An \"Init Container\" in Kubernetes that runs before your app container</li> <li>A bash script that runs the previous steps and then starts your application<ul> <li>You would still need a way to start/restart that bash script, detect errors, etc.</li> </ul> </li> </ul> <p>Tip</p> <p>I'll give you more concrete examples for doing this with containers in a future chapter: ReadyAPI in Containers - Docker.</p>"},{"location":"deployment/concepts/#resource-utilization","title":"Resource Utilization","text":"<p>Your server(s) is (are) a resource, you can consume or utilize, with your programs, the computation time on the CPUs, and the RAM memory available.</p> <p>How much of the system resources do you want to be consuming/utilizing? It might be easy to think \"not much\", but in reality, you will probably want to consume as much as possible without crashing.</p> <p>If you are paying for 3 servers but you are using only a little bit of their RAM and CPU, you are probably wasting money \ud83d\udcb8, and probably wasting server electric power \ud83c\udf0e, etc.</p> <p>In that case, it could be better to have only 2 servers and use a higher percentage of their resources (CPU, memory, disk, network bandwidth, etc).</p> <p>On the other hand, if you have 2 servers and you are using 100% of their CPU and RAM, at some point one process will ask for more memory, and the server will have to use the disk as \"memory\" (which can be thousands of times slower), or even crash. Or one process might need to do some computation and would have to wait until the CPU is free again.</p> <p>In this case, it would be better to get one extra server and run some processes on it so that they all have enough RAM and CPU time.</p> <p>There's also the chance that for some reason you have a spike of usage of your API. Maybe it went viral, or maybe some other services or bots start using it. And you might want to have extra resources to be safe in those cases.</p> <p>You could put an arbitrary number to target, for example, something between 50% to 90% of resource utilization. The point is that those are probably the main things you will want to measure and use to tweak your deployments.</p> <p>You can use simple tools like <code>htop</code> to see the CPU and RAM used in your server or the amount used by each process. Or you can use more complex monitoring tools, which may be distributed across servers, etc.</p>"},{"location":"deployment/concepts/#recap","title":"Recap","text":"<p>You have been reading here some of the main concepts that you would probably need to keep in mind when deciding how to deploy your application:</p> <ul> <li>Security - HTTPS</li> <li>Running on startup</li> <li>Restarts</li> <li>Replication (the number of processes running)</li> <li>Memory</li> <li>Previous steps before starting</li> </ul> <p>Understanding these ideas and how to apply them should give you the intuition necessary to take any decisions when configuring and tweaking your deployments. \ud83e\udd13</p> <p>In the next sections, I'll give you more concrete examples of possible strategies you can follow. \ud83d\ude80</p>"},{"location":"deployment/cloud/","title":"Deploy ReadyAPI on Cloud Providers","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can use virtually any cloud provider to deploy your ReadyAPI application.</p> <p>In most of the cases, the main cloud providers have guides to deploy ReadyAPI with them.</p>"},{"location":"deployment/cloud/#cloud-providers-sponsors","title":"Cloud Providers - Sponsors","text":"<p>Some cloud providers \u2728 sponsor ReadyAPI \u2728, this ensures the continued and healthy development of ReadyAPI and its ecosystem.</p> <p>And it shows their true commitment to ReadyAPI and its community (you), as they not only want to provide you a good service but also want to make sure you have a good and healthy framework, ReadyAPI. \ud83d\ude47</p> <p>You might want to try their services and follow their guides:</p> <ul> <li>Platform.sh</li> <li>Porter</li> <li>Coherence</li> </ul>"},{"location":"deployment/server-workers/","title":"Server Workers - Gunicorn with Uvicorn","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Let's check back those deployment concepts from before:</p> <ul> <li>Security - HTTPS</li> <li>Running on startup</li> <li>Restarts</li> <li>Replication (the number of processes running)</li> <li>Memory</li> <li>Previous steps before starting</li> </ul> <p>Up to this point, with all the tutorials in the docs, you have probably been running a server program like Uvicorn, running a single process.</p> <p>When deploying applications you will probably want to have some replication of processes to take advantage of multiple cores and to be able to handle more requests.</p> <p>As you saw in the previous chapter about Deployment Concepts, there are multiple strategies you can use.</p> <p>Here I'll show you how to use Gunicorn with Uvicorn worker processes.</p> <p>Info</p> <p>If you are using containers, for example with Docker or Kubernetes, I'll tell you more about that in the next chapter: ReadyAPI in Containers - Docker.</p> <p>In particular, when running on Kubernetes you will probably not want to use Gunicorn and instead run a single Uvicorn process per container, but I'll tell you about it later in that chapter.</p>"},{"location":"deployment/server-workers/#gunicorn-with-uvicorn-workers","title":"Gunicorn with Uvicorn Workers","text":"<p>Gunicorn is mainly an application server using the WSGI standard. That means that Gunicorn can serve applications like Flask and Django. Gunicorn by itself is not compatible with ReadyAPI, as ReadyAPI uses the newest ASGI standard.</p> <p>But Gunicorn supports working as a process manager and allowing users to tell it which specific worker process class to use. Then Gunicorn would start one or more worker processes using that class.</p> <p>And Uvicorn has a Gunicorn-compatible worker class.</p> <p>Using that combination, Gunicorn would act as a process manager, listening on the port and the IP. And it would transmit the communication to the worker processes running the Uvicorn class.</p> <p>And then the Gunicorn-compatible Uvicorn worker class would be in charge of converting the data sent by Gunicorn to the ASGI standard for ReadyAPI to use it.</p>"},{"location":"deployment/server-workers/#install-gunicorn-and-uvicorn","title":"Install Gunicorn and Uvicorn","text":"<pre><code>$ pip install \"uvicorn[standard]\" gunicorn\n\n---&gt; 100%\n</code></pre> <p>That will install both Uvicorn with the <code>standard</code> extra packages (to get high performance) and Gunicorn.</p>"},{"location":"deployment/server-workers/#run-gunicorn-with-uvicorn-workers","title":"Run Gunicorn with Uvicorn Workers","text":"<p>Then you can run Gunicorn with:</p> <pre><code>$ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80\n\n[19499] [INFO] Starting gunicorn 20.1.0\n[19499] [INFO] Listening at: http://0.0.0.0:80 (19499)\n[19499] [INFO] Using worker: uvicorn.workers.UvicornWorker\n[19511] [INFO] Booting worker with pid: 19511\n[19513] [INFO] Booting worker with pid: 19513\n[19514] [INFO] Booting worker with pid: 19514\n[19515] [INFO] Booting worker with pid: 19515\n[19511] [INFO] Started server process [19511]\n[19511] [INFO] Waiting for application startup.\n[19511] [INFO] Application startup complete.\n[19513] [INFO] Started server process [19513]\n[19513] [INFO] Waiting for application startup.\n[19513] [INFO] Application startup complete.\n[19514] [INFO] Started server process [19514]\n[19514] [INFO] Waiting for application startup.\n[19514] [INFO] Application startup complete.\n[19515] [INFO] Started server process [19515]\n[19515] [INFO] Waiting for application startup.\n[19515] [INFO] Application startup complete.\n</code></pre> <p>Let's see what each of those options mean:</p> <ul> <li> <p><code>main:app</code>: This is the same syntax used by Uvicorn, <code>main</code> means the Python module named \"<code>main</code>\", so, a file <code>main.py</code>. And <code>app</code> is the name of the variable that is the ReadyAPI application.</p> <ul> <li> <p>You can imagine that <code>main:app</code> is equivalent to a Python <code>import</code> statement like:</p> <pre><code>from main import app\n</code></pre> </li> <li> <p>So, the colon in <code>main:app</code> would be equivalent to the Python <code>import</code> part in <code>from main import app</code>.</p> </li> </ul> </li> <li> <p><code>--workers</code>: The number of worker processes to use, each will run a Uvicorn worker, in this case, 4 workers.</p> </li> <li> <p><code>--worker-class</code>: The Gunicorn-compatible worker class to use in the worker processes.</p> <ul> <li> <p>Here we pass the class that Gunicorn can import and use with:</p> <pre><code>import uvicorn.workers.UvicornWorker\n</code></pre> </li> </ul> </li> <li> <p><code>--bind</code>: This tells Gunicorn the IP and the port to listen to, using a colon (<code>:</code>) to separate the IP and the port.</p> <ul> <li>If you were running Uvicorn directly, instead of <code>--bind 0.0.0.0:80</code> (the Gunicorn option) you would use <code>--host 0.0.0.0</code> and <code>--port 80</code>.</li> </ul> </li> </ul> <p>In the output, you can see that it shows the PID (process ID) of each process (it's just a number).</p> <p>You can see that:</p> <ul> <li>The Gunicorn process manager starts with PID <code>19499</code> (in your case it will be a different number).</li> <li>Then it starts <code>Listening at: http://0.0.0.0:80</code>.</li> <li>Then it detects that it has to use the worker class at <code>uvicorn.workers.UvicornWorker</code>.</li> <li>And then it starts 4 workers, each with its own PID: <code>19511</code>, <code>19513</code>, <code>19514</code>, and <code>19515</code>.</li> </ul> <p>Gunicorn would also take care of managing dead processes and restarting new ones if needed to keep the number of workers. So that helps in part with the restart concept from the list above.</p> <p>Nevertheless, you would probably also want to have something outside making sure to restart Gunicorn if necessary, and also to run it on startup, etc.</p>"},{"location":"deployment/server-workers/#uvicorn-with-workers","title":"Uvicorn with Workers","text":"<p>Uvicorn also has an option to start and run several worker processes.</p> <p>Nevertheless, as of now, Uvicorn's capabilities for handling worker processes are more limited than Gunicorn's. So, if you want to have a process manager at this level (at the Python level), then it might be better to try with Gunicorn as the process manager.</p> <p>In any case, you would run it like this:</p> <pre><code>$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Uvicorn running on &lt;b&gt;http://0.0.0.0:8080&lt;/b&gt; (Press CTRL+C to quit)\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started parent process [&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;27365&lt;/b&gt;&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27368&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27369&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27370&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27367&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n</code></pre> <p>The only new option here is <code>--workers</code> telling Uvicorn to start 4 worker processes.</p> <p>You can also see that it shows the PID of each process, <code>27365</code> for the parent process (this is the process manager) and one for each worker process: <code>27368</code>, <code>27369</code>, <code>27370</code>, and <code>27367</code>.</p>"},{"location":"deployment/server-workers/#deployment-concepts","title":"Deployment Concepts","text":"<p>Here you saw how to use Gunicorn (or Uvicorn) managing Uvicorn worker processes to parallelize the execution of the application, take advantage of multiple cores in the CPU, and be able to serve more requests.</p> <p>From the list of deployment concepts from above, using workers would mainly help with the replication part, and a little bit with the restarts, but you still need to take care of the others:</p> <ul> <li>Security - HTTPS</li> <li>Running on startup</li> <li>Restarts</li> <li>Replication (the number of processes running)</li> <li>Memory</li> <li>Previous steps before starting</li> </ul>"},{"location":"deployment/server-workers/#containers-and-docker","title":"Containers and Docker","text":"<p>In the next chapter about ReadyAPI in Containers - Docker I'll tell some strategies you could use to handle the other deployment concepts.</p> <p>I'll also show you the official Docker image that includes Gunicorn with Uvicorn workers and some default configurations that can be useful for simple cases.</p> <p>There I'll also show you how to build your own image from scratch to run a single Uvicorn process (without Gunicorn). It is a simple process and is probably what you would want to do when using a distributed container management system like Kubernetes.</p>"},{"location":"deployment/server-workers/#recap","title":"Recap","text":"<p>You can use Gunicorn (or also Uvicorn) as a process manager with Uvicorn workers to take advantage of multi-core CPUs, to run multiple processes in parallel.</p> <p>You could use these tools and ideas if you are setting up your own deployment system while taking care of the other deployment concepts yourself.</p> <p>Check out the next chapter to learn about ReadyAPI with containers (e.g. Docker and Kubernetes). You will see that those tools have simple ways to solve the other deployment concepts as well. \u2728</p>"},{"location":"how-to/","title":"How To - Recipes","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Here you will see different recipes or \"how to\" guides for several topics.</p> <p>Most of these ideas would be more or less independent, and in most cases you should only need to study them if they apply directly to your project.</p> <p>If something seems interesting and useful to your project, go ahead and check it, but otherwise, you might probably just skip them.</p> <p>Tip</p> <p>If you want to learn ReadyAPI in a structured way (recommended), go and read the Tutorial - User Guide chapter by chapter instead.</p>"},{"location":"how-to/general/","title":"General - How To - Recipes","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Here are several pointers to other places in the docs, for general or frequent questions.</p>"},{"location":"how-to/general/#filter-data-security","title":"Filter Data - Security","text":"<p>To ensure that you don't return more data than you should, read the docs for Tutorial - Response Model - Return Type.</p>"},{"location":"how-to/general/#documentation-tags-openapi","title":"Documentation Tags - OpenAPI","text":"<p>To add tags to your path operations, and group them in the docs UI, read the docs for Tutorial - Path Operation Configurations - Tags.</p>"},{"location":"how-to/general/#documentation-summary-and-description-openapi","title":"Documentation Summary and Description - OpenAPI","text":"<p>To add a summary and description to your path operations, and show them in the docs UI, read the docs for Tutorial - Path Operation Configurations - Summary and Description.</p>"},{"location":"how-to/general/#documentation-response-description-openapi","title":"Documentation Response description - OpenAPI","text":"<p>To define the description of the response, shown in the docs UI, read the docs for Tutorial - Path Operation Configurations - Response description.</p>"},{"location":"how-to/general/#documentation-deprecate-a-path-operation-openapi","title":"Documentation Deprecate a Path Operation - OpenAPI","text":"<p>To deprecate a path operation, and show it in the docs UI, read the docs for Tutorial - Path Operation Configurations - Deprecation.</p>"},{"location":"how-to/general/#convert-any-data-to-json-compatible","title":"Convert any Data to JSON-compatible","text":"<p>To convert any data to JSON-compatible, read the docs for Tutorial - JSON Compatible Encoder.</p>"},{"location":"how-to/general/#openapi-metadata-docs","title":"OpenAPI Metadata - Docs","text":"<p>To add metadata to your OpenAPI schema, including a license, version, contact, etc, read the docs for Tutorial - Metadata and Docs URLs.</p>"},{"location":"how-to/general/#openapi-custom-url","title":"OpenAPI Custom URL","text":"<p>To customize the OpenAPI URL (or remove it), read the docs for Tutorial - Metadata and Docs URLs.</p>"},{"location":"how-to/general/#openapi-docs-urls","title":"OpenAPI Docs URLs","text":"<p>To update the URLs used for the automatically generated docs user interfaces, read the docs for Tutorial - Metadata and Docs URLs.</p>"},{"location":"how-to/graphql/","title":"GraphQL","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>As ReadyAPI is based on the ASGI standard, it's very easy to integrate any GraphQL library also compatible with ASGI.</p> <p>You can combine normal ReadyAPI path operations with GraphQL on the same application.</p> <p>Tip</p> <p>GraphQL solves some very specific use cases.</p> <p>It has advantages and disadvantages when compared to common web APIs.</p> <p>Make sure you evaluate if the benefits for your use case compensate the drawbacks. \ud83e\udd13</p>"},{"location":"how-to/graphql/#graphql-libraries","title":"GraphQL Libraries","text":"<p>Here are some of the GraphQL libraries that have ASGI support. You could use them with ReadyAPI:</p> <ul> <li>Strawberry \ud83c\udf53<ul> <li>With docs for ReadyAPI</li> </ul> </li> <li>Ariadne<ul> <li>With docs for Starlette (that also apply to ReadyAPI)</li> </ul> </li> <li>Tartiflette<ul> <li>With Tartiflette ASGI to provide ASGI integration</li> </ul> </li> <li>Graphene<ul> <li>With starlette-graphene3</li> </ul> </li> </ul>"},{"location":"how-to/graphql/#graphql-with-strawberry","title":"GraphQL with Strawberry","text":"<p>If you need or want to work with GraphQL, Strawberry is the recommended library as it has the design closest to ReadyAPI's design, it's all based on type annotations.</p> <p>Depending on your use case, you might prefer to use a different library, but if you asked me, I would probably suggest you try Strawberry.</p> <p>Here's a small preview of how you could integrate Strawberry with ReadyAPI:</p> <pre><code>import strawberry\nfrom readyapi import ReadyAPI\nfrom strawberry.asgi import GraphQL\n\n\n@strawberry.type\nclass User:\n    name: str\n    age: int\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self) -&gt; User:\n        return User(name=\"Patrick\", age=100)\n\n\nschema = strawberry.Schema(query=Query)\n\n\ngraphql_app = GraphQL(schema)\n\napp = ReadyAPI()\napp.add_route(\"/graphql\", graphql_app)\napp.add_websocket_route(\"/graphql\", graphql_app)\n</code></pre> <p>You can learn more about Strawberry in the Strawberry documentation.</p> <p>And also the docs about Strawberry with ReadyAPI.</p>"},{"location":"how-to/graphql/#older-graphqlapp-from-starlette","title":"Older <code>GraphQLApp</code> from Starlette","text":"<p>Previous versions of Starlette included a <code>GraphQLApp</code> class to integrate with Graphene.</p> <p>It was deprecated from Starlette, but if you have code that used it, you can easily migrate to starlette-graphene3, that covers the same use case and has an almost identical interface.</p> <p>Tip</p> <p>If you need GraphQL, I still would recommend you check out Strawberry, as it's based on type annotations instead of custom classes and types.</p>"},{"location":"how-to/graphql/#learn-more","title":"Learn More","text":"<p>You can learn more about GraphQL in the official GraphQL documentation.</p> <p>You can also read more about each those libraries described above in their links.</p>"},{"location":"how-to/custom-request-and-route/","title":"Custom Request and APIRoute class","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>In some cases, you may want to override the logic used by the <code>Request</code> and <code>APIRoute</code> classes.</p> <p>In particular, this may be a good alternative to logic in a middleware.</p> <p>For example, if you want to read or manipulate the request body before it is processed by your application.</p> <p>Danger</p> <p>This is an \"advanced\" feature.</p> <p>If you are just starting with ReadyAPI you might want to skip this section.</p>"},{"location":"how-to/custom-request-and-route/#use-cases","title":"Use cases","text":"<p>Some use cases include:</p> <ul> <li>Converting non-JSON request bodies to JSON (e.g. <code>msgpack</code>).</li> <li>Decompressing gzip-compressed request bodies.</li> <li>Automatically logging all request bodies.</li> </ul>"},{"location":"how-to/custom-request-and-route/#handling-custom-request-body-encodings","title":"Handling custom request body encodings","text":"<p>Let's see how to make use of a custom <code>Request</code> subclass to decompress gzip requests.</p> <p>And an <code>APIRoute</code> subclass to use that custom request class.</p>"},{"location":"how-to/custom-request-and-route/#create-a-custom-gziprequest-class","title":"Create a custom <code>GzipRequest</code> class","text":"<p>Tip</p> <p>This is a toy example to demonstrate how it works, if you need Gzip support, you can use the provided <code>GzipMiddleware</code>.</p> <p>First, we create a <code>GzipRequest</code> class, which will overwrite the <code>Request.body()</code> method to decompress the body in the presence of an appropriate header.</p> <p>If there's no <code>gzip</code> in the header, it will not try to decompress the body.</p> <p>That way, the same route class can handle gzip compressed or uncompressed requests.</p> <pre><code>import gzip\nfrom typing import Callable, List\n\nfrom readyapi import Body, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass GzipRequest(Request):\n    async def body(self) -&gt; bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n\n\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = GzipRoute\n\n\n@app.post(\"/sum\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return {\"sum\": sum(numbers)}\n</code></pre>"},{"location":"how-to/custom-request-and-route/#create-a-custom-gziproute-class","title":"Create a custom <code>GzipRoute</code> class","text":"<p>Next, we create a custom subclass of <code>readyapi.routing.APIRoute</code> that will make use of the <code>GzipRequest</code>.</p> <p>This time, it will overwrite the method <code>APIRoute.get_route_handler()</code>.</p> <p>This method returns a function. And that function is what will receive a request and return a response.</p> <p>Here we use it to create a <code>GzipRequest</code> from the original request.</p> <pre><code>import gzip\nfrom typing import Callable, List\n\nfrom readyapi import Body, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass GzipRequest(Request):\n    async def body(self) -&gt; bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n\n\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = GzipRoute\n\n\n@app.post(\"/sum\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return {\"sum\": sum(numbers)}\n</code></pre> <p>Technical Details</p> <p>A <code>Request</code> has a <code>request.scope</code> attribute, that's just a Python <code>dict</code> containing the metadata related to the request.</p> <p>A <code>Request</code> also has a <code>request.receive</code>, that's a function to \"receive\" the body of the request.</p> <p>The <code>scope</code> <code>dict</code> and <code>receive</code> function are both part of the ASGI specification.</p> <p>And those two things, <code>scope</code> and <code>receive</code>, are what is needed to create a new <code>Request</code> instance.</p> <p>To learn more about the <code>Request</code> check Starlette's docs about Requests.</p> <p>The only thing the function returned by <code>GzipRequest.get_route_handler</code> does differently is convert the <code>Request</code> to a <code>GzipRequest</code>.</p> <p>Doing this, our <code>GzipRequest</code> will take care of decompressing the data (if necessary) before passing it to our path operations.</p> <p>After that, all of the processing logic is the same.</p> <p>But because of our changes in <code>GzipRequest.body</code>, the request body will be automatically decompressed when it is loaded by ReadyAPI when needed.</p>"},{"location":"how-to/custom-request-and-route/#accessing-the-request-body-in-an-exception-handler","title":"Accessing the request body in an exception handler","text":"<p>Tip</p> <p>To solve this same problem, it's probably a lot easier to use the <code>body</code> in a custom handler for <code>RequestValidationError</code> (Handling Errors).</p> <p>But this example is still valid and it shows how to interact with the internal components.</p> <p>We can also use this same approach to access the request body in an exception handler.</p> <p>All we need to do is handle the request inside a <code>try</code>/<code>except</code> block:</p> <pre><code>from typing import Callable, List\n\nfrom readyapi import Body, HTTPException, ReadyAPI, Request, Response\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.routing import APIRoute\n\n\nclass ValidationErrorLoggingRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            try:\n                return await original_route_handler(request)\n            except RequestValidationError as exc:\n                body = await request.body()\n                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                raise HTTPException(status_code=422, detail=detail)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = ValidationErrorLoggingRoute\n\n\n@app.post(\"/\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return sum(numbers)\n</code></pre> <p>If an exception occurs, the<code>Request</code> instance will still be in scope, so we can read and make use of the request body when handling the error:</p> <pre><code>from typing import Callable, List\n\nfrom readyapi import Body, HTTPException, ReadyAPI, Request, Response\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.routing import APIRoute\n\n\nclass ValidationErrorLoggingRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            try:\n                return await original_route_handler(request)\n            except RequestValidationError as exc:\n                body = await request.body()\n                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                raise HTTPException(status_code=422, detail=detail)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = ValidationErrorLoggingRoute\n\n\n@app.post(\"/\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return sum(numbers)\n</code></pre>"},{"location":"how-to/custom-request-and-route/#custom-apiroute-class-in-a-router","title":"Custom <code>APIRoute</code> class in a router","text":"<p>You can also set the <code>route_class</code> parameter of an <code>APIRouter</code>:</p> <pre><code>import time\nfrom typing import Callable\n\nfrom readyapi import APIRouter, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            print(f\"route duration: {duration}\")\n            print(f\"route response: {response}\")\n            print(f\"route response headers: {response.headers}\")\n            return response\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\nrouter = APIRouter(route_class=TimedRoute)\n\n\n@app.get(\"/\")\nasync def not_timed():\n    return {\"message\": \"Not timed\"}\n\n\n@router.get(\"/timed\")\nasync def timed():\n    return {\"message\": \"It's the time of my life\"}\n\n\napp.include_router(router)\n</code></pre> <p>In this example, the path operations under the <code>router</code> will use the custom <code>TimedRoute</code> class, and will have an extra <code>X-Response-Time</code> header in the response with the time it took to generate the response:</p> <pre><code>import time\nfrom typing import Callable\n\nfrom readyapi import APIRouter, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            print(f\"route duration: {duration}\")\n            print(f\"route response: {response}\")\n            print(f\"route response headers: {response.headers}\")\n            return response\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\nrouter = APIRouter(route_class=TimedRoute)\n\n\n@app.get(\"/\")\nasync def not_timed():\n    return {\"message\": \"Not timed\"}\n\n\n@router.get(\"/timed\")\nasync def timed():\n    return {\"message\": \"It's the time of my life\"}\n\n\napp.include_router(router)\n</code></pre>"},{"location":"how-to/conditional-openapi/","title":"Conditional OpenAPI","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>If you needed to, you could use settings and environment variables to configure OpenAPI conditionally depending on the environment, and even disable it entirely.</p>"},{"location":"how-to/conditional-openapi/#about-security-apis-and-docs","title":"About security, APIs, and docs","text":"<p>Hiding your documentation user interfaces in production shouldn't be the way to protect your API.</p> <p>That doesn't add any extra security to your API, the path operations will still be available where they are.</p> <p>If there's a security flaw in your code, it will still exist.</p> <p>Hiding the documentation just makes it more difficult to understand how to interact with your API, and could make it more difficult for you to debug it in production. It could be considered simply a form of Security through obscurity.</p> <p>If you want to secure your API, there are several better things you can do, for example:</p> <ul> <li>Make sure you have well defined Pydantic models for your request bodies and responses.</li> <li>Configure any required permissions and roles using dependencies.</li> <li>Never store plaintext passwords, only password hashes.</li> <li>Implement and use well-known cryptographic tools, like Passlib and JWT tokens, etc.</li> <li>Add more granular permission controls with OAuth2 scopes where needed.</li> <li>...etc.</li> </ul> <p>Nevertheless, you might have a very specific use case where you really need to disable the API docs for some environment (e.g. for production) or depending on configurations from environment variables.</p>"},{"location":"how-to/conditional-openapi/#conditional-openapi-from-settings-and-env-vars","title":"Conditional OpenAPI from settings and env vars","text":"<p>You can easily use the same Pydantic settings to configure your generated OpenAPI and the docs UIs.</p> <p>For example:</p> <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    openapi_url: str = \"/openapi.json\"\n\n\nsettings = Settings()\n\napp = ReadyAPI(openapi_url=settings.openapi_url)\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Here we declare the setting <code>openapi_url</code> with the same default of <code>\"/openapi.json\"</code>.</p> <p>And then we use it when creating the <code>ReadyAPI</code> app.</p> <p>Then you could disable OpenAPI (including the UI docs) by setting the environment variable <code>OPENAPI_URL</code> to the empty string, like:</p> <pre><code>$ OPENAPI_URL= uvicorn main:app\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Then if you go to the URLs at <code>/openapi.json</code>, <code>/docs</code>, or <code>/redoc</code> you will just get a <code>404 Not Found</code> error like:</p> <pre><code>{\n    \"detail\": \"Not Found\"\n}\n</code></pre>"},{"location":"how-to/extending-openapi/","title":"Extending OpenAPI","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>There are some cases where you might need to modify the generated OpenAPI schema.</p> <p>In this section you will see how.</p>"},{"location":"how-to/extending-openapi/#the-normal-process","title":"The normal process","text":"<p>The normal (default) process, is as follows.</p> <p>A <code>ReadyAPI</code> application (instance) has an <code>.openapi()</code> method that is expected to return the OpenAPI schema.</p> <p>As part of the application object creation, a path operation for <code>/openapi.json</code> (or for whatever you set your <code>openapi_url</code>) is registered.</p> <p>It just returns a JSON response with the result of the application's <code>.openapi()</code> method.</p> <p>By default, what the method <code>.openapi()</code> does is check the property <code>.openapi_schema</code> to see if it has contents and return them.</p> <p>If it doesn't, it generates them using the utility function at <code>readyapi.openapi.utils.get_openapi</code>.</p> <p>And that function <code>get_openapi()</code> receives as parameters:</p> <ul> <li><code>title</code>: The OpenAPI title, shown in the docs.</li> <li><code>version</code>: The version of your API, e.g. <code>2.5.0</code>.</li> <li><code>openapi_version</code>: The version of the OpenAPI specification used. By default, the latest: <code>3.1.0</code>.</li> <li><code>summary</code>: A short summary of the API.</li> <li><code>description</code>: The description of your API, this can include markdown and will be shown in the docs.</li> <li><code>routes</code>: A list of routes, these are each of the registered path operations. They are taken from <code>app.routes</code>.</li> </ul> <p>Info</p> <p>The parameter <code>summary</code> is available in OpenAPI 3.1.0 and above, supported by ReadyAPI 0.99.0 and above.</p>"},{"location":"how-to/extending-openapi/#overriding-the-defaults","title":"Overriding the defaults","text":"<p>Using the information above, you can use the same utility function to generate the OpenAPI schema and override each part that you need.</p> <p>For example, let's add ReDoc's OpenAPI extension to include a custom logo.</p>"},{"location":"how-to/extending-openapi/#normal-readyapi","title":"Normal ReadyAPI","text":"<p>First, write all your ReadyAPI application as normally:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.khulnasoft.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#generate-the-openapi-schema","title":"Generate the OpenAPI schema","text":"<p>Then, use the same utility function to generate the OpenAPI schema, inside a <code>custom_openapi()</code> function:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.khulnasoft.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#modify-the-openapi-schema","title":"Modify the OpenAPI schema","text":"<p>Now you can add the ReDoc extension, adding a custom <code>x-logo</code> to the <code>info</code> \"object\" in the OpenAPI schema:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.khulnasoft.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#cache-the-openapi-schema","title":"Cache the OpenAPI schema","text":"<p>You can use the property <code>.openapi_schema</code> as a \"cache\", to store your generated schema.</p> <p>That way, your application won't have to generate the schema every time a user opens your API docs.</p> <p>It will be generated only once, and then the same cached schema will be used for the next requests.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.khulnasoft.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#override-the-method","title":"Override the method","text":"<p>Now you can replace the <code>.openapi()</code> method with your new function.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.khulnasoft.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#check-it","title":"Check it","text":"<p>Once you go to http://127.0.0.1:8000/redoc you will see that you are using your custom logo (in this example, ReadyAPI's logo):</p> <p></p>"},{"location":"how-to/separate-openapi-schemas/","title":"Separate OpenAPI Schemas for Input and Output or Not","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>When using Pydantic v2, the generated OpenAPI is a bit more exact and correct than before. \ud83d\ude0e</p> <p>In fact, in some cases, it will even have two JSON Schemas in OpenAPI for the same Pydantic model, for input and output, depending on if they have default values.</p> <p>Let's see how that works and how to change it if you need to do that.</p>"},{"location":"how-to/separate-openapi-schemas/#pydantic-models-for-input-and-output","title":"Pydantic Models for Input and Output","text":"<p>Let's say you have a Pydantic model with default values, like this one:</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <p> \ud83d\udc40 Full file preview <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <p> \ud83d\udc40 Full file preview <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> <p> \ud83d\udc40 Full file preview <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre>"},{"location":"how-to/separate-openapi-schemas/#model-for-input","title":"Model for Input","text":"<p>If you use this model as an input like here:</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n# Code below omitted \ud83d\udc47\n</code></pre> <p> \ud83d\udc40 Full file preview <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n# Code below omitted \ud83d\udc47\n</code></pre> <p> \ud83d\udc40 Full file preview <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n# Code below omitted \ud83d\udc47\n</code></pre> <p> \ud83d\udc40 Full file preview <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <p>...then the <code>description</code> field will not be required. Because it has a default value of <code>None</code>.</p>"},{"location":"how-to/separate-openapi-schemas/#input-model-in-docs","title":"Input Model in Docs","text":"<p>You can confirm that in the docs, the <code>description</code> field doesn't have a red asterisk, it's not marked as required:</p>"},{"location":"how-to/separate-openapi-schemas/#model-for-output","title":"Model for Output","text":"<p>But if you use the same model as an output, like here:</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <p>...then because <code>description</code> has a default value, if you don't return anything for that field, it will still have that default value.</p>"},{"location":"how-to/separate-openapi-schemas/#model-for-output-response-data","title":"Model for Output Response Data","text":"<p>If you interact with the docs and check the response, even though the code didn't add anything in one of the <code>description</code> fields, the JSON response contains the default value (<code>null</code>):</p> <p>This means that it will always have a value, it's just that sometimes the value could be <code>None</code> (or <code>null</code> in JSON).</p> <p>That means that, clients using your API don't have to check if the value exists or not, they can assume the field will always be there, but just that in some cases it will have the default value of <code>None</code>.</p> <p>The way to describe this in OpenAPI, is to mark that field as required, because it will always be there.</p> <p>Because of that, the JSON Schema for a model can be different depending on if it's used for input or output:</p> <ul> <li>for input the <code>description</code> will not be required</li> <li>for output it will be required (and possibly <code>None</code>, or in JSON terms, <code>null</code>)</li> </ul>"},{"location":"how-to/separate-openapi-schemas/#model-for-output-in-docs","title":"Model for Output in Docs","text":"<p>You can check the output model in the docs too, both <code>name</code> and <code>description</code> are marked as required with a red asterisk:</p>"},{"location":"how-to/separate-openapi-schemas/#model-for-input-and-output-in-docs","title":"Model for Input and Output in Docs","text":"<p>And if you check all the available Schemas (JSON Schemas) in OpenAPI, you will see that there are two, one <code>Item-Input</code> and one <code>Item-Output</code>.</p> <p>For <code>Item-Input</code>, <code>description</code> is not required, it doesn't have a red asterisk.</p> <p>But for <code>Item-Output</code>, <code>description</code> is required, it has a red asterisk.</p> <p>With this feature from Pydantic v2, your API documentation is more precise, and if you have autogenerated clients and SDKs, they will be more precise too, with a better developer experience and consistency. \ud83c\udf89</p>"},{"location":"how-to/separate-openapi-schemas/#do-not-separate-schemas","title":"Do not Separate Schemas","text":"<p>Now, there are some cases where you might want to have the same schema for input and output.</p> <p>Probably the main use case for this is if you already have some autogenerated client code/SDKs and you don't want to update all the autogenerated client code/SDKs yet, you probably will want to do it at some point, but maybe not right now.</p> <p>In that case, you can disable this feature in ReadyAPI, with the parameter <code>separate_input_output_schemas=False</code>.</p> <p>Info</p> <p>Support for <code>separate_input_output_schemas</code> was added in ReadyAPI <code>0.102.0</code>. \ud83e\udd13</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre>"},{"location":"how-to/separate-openapi-schemas/#same-schema-for-input-and-output-models-in-docs","title":"Same Schema for Input and Output Models in Docs","text":"<p>And now there will be one single schema for input and output for the model, only <code>Item</code>, and it will have <code>description</code> as not required:</p> <p>This is the same behavior as in Pydantic v1. \ud83e\udd13</p>"},{"location":"how-to/custom-docs-ui-assets/","title":"Custom Docs UI Static Assets (Self-Hosting)","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>The API docs use Swagger UI and ReDoc, and each of those need some JavaScript and CSS files.</p> <p>By default, those files are served from a CDN.</p> <p>But it's possible to customize it, you can set a specific CDN, or serve the files yourself.</p>"},{"location":"how-to/custom-docs-ui-assets/#custom-cdn-for-javascript-and-css","title":"Custom CDN for JavaScript and CSS","text":"<p>Let's say that you want to use a different CDN, for example you want to use <code>https://unpkg.com/</code>.</p> <p>This could be useful if for example you live in a country that restricts some URLs.</p>"},{"location":"how-to/custom-docs-ui-assets/#disable-the-automatic-docs","title":"Disable the automatic docs","text":"<p>The first step is to disable the automatic docs, as by default, those use the default CDN.</p> <p>To disable them, set their URLs to <code>None</code> when creating your <code>ReadyAPI</code> app:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@next/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#include-the-custom-docs","title":"Include the custom docs","text":"<p>Now you can create the path operations for the custom docs.</p> <p>You can re-use ReadyAPI's internal functions to create the HTML pages for the docs, and pass them the needed arguments:</p> <ul> <li><code>openapi_url</code>: the URL where the HTML page for the docs can get the OpenAPI schema for your API. You can use here the attribute <code>app.openapi_url</code>.</li> <li><code>title</code>: the title of your API.</li> <li><code>oauth2_redirect_url</code>: you can use <code>app.swagger_ui_oauth2_redirect_url</code> here to use the default.</li> <li><code>swagger_js_url</code>: the URL where the HTML for your Swagger UI docs can get the JavaScript file. This is the custom CDN URL.</li> <li><code>swagger_css_url</code>: the URL where the HTML for your Swagger UI docs can get the CSS file. This is the custom CDN URL.</li> </ul> <p>And similarly for ReDoc...</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@next/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>Tip</p> <p>The path operation for <code>swagger_ui_redirect</code> is a helper for when you use OAuth2.</p> <p>If you integrate your API with an OAuth2 provider, you will be able to authenticate and come back to the API docs with the acquired credentials. And interact with it using the real OAuth2 authentication.</p> <p>Swagger UI will handle it behind the scenes for you, but it needs this \"redirect\" helper.</p>"},{"location":"how-to/custom-docs-ui-assets/#create-a-path-operation-to-test-it","title":"Create a path operation to test it","text":"<p>Now, to be able to test that everything works, create a path operation:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@next/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#test-it","title":"Test it","text":"<p>Now, you should be able to go to your docs at http://127.0.0.1:8000/docs, and reload the page, it will load those assets from the new CDN.</p>"},{"location":"how-to/custom-docs-ui-assets/#self-hosting-javascript-and-css-for-docs","title":"Self-hosting JavaScript and CSS for docs","text":"<p>Self-hosting the JavaScript and CSS could be useful if, for example, you need your app to keep working even while offline, without open Internet access, or in a local network.</p> <p>Here you'll see how to serve those files yourself, in the same ReadyAPI app, and configure the docs to use them.</p>"},{"location":"how-to/custom-docs-ui-assets/#project-file-structure","title":"Project file structure","text":"<p>Let's say your project file structure looks like this:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py\n</code></pre> <p>Now create a directory to store those static files.</p> <p>Your new file structure could look like this:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 static/\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#download-the-files","title":"Download the files","text":"<p>Download the static files needed for the docs and put them on that <code>static/</code> directory.</p> <p>You can probably right-click each link and select an option similar to <code>Save link as...</code>.</p> <p>Swagger UI uses the files:</p> <ul> <li><code>swagger-ui-bundle.js</code></li> <li><code>swagger-ui.css</code></li> </ul> <p>And ReDoc uses the file:</p> <ul> <li><code>redoc.standalone.js</code></li> </ul> <p>After that, your file structure could look like:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 static\n    \u251c\u2500\u2500 redoc.standalone.js\n    \u251c\u2500\u2500 swagger-ui-bundle.js\n    \u2514\u2500\u2500 swagger-ui.css\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#serve-the-static-files","title":"Serve the static files","text":"<ul> <li>Import <code>StaticFiles</code>.</li> <li>\"Mount\" a <code>StaticFiles()</code> instance in a specific path.</li> </ul> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#test-the-static-files","title":"Test the static files","text":"<p>Start your application and go to http://127.0.0.1:8000/static/redoc.standalone.js.</p> <p>You should see a very long JavaScript file for ReDoc.</p> <p>It could start with something like:</p> <pre><code>/*!\n * ReDoc - OpenAPI/Swagger-generated API Reference Documentation\n * -------------------------------------------------------------\n *   Version: \"2.0.0-rc.18\"\n *   Repo: https://github.com/Redocly/redoc\n */\n!function(e,t){\"object\"==typeof exports&amp;&amp;\"object\"==typeof m\n\n...\n</code></pre> <p>That confirms that you are being able to serve static files from your app, and that you placed the static files for the docs in the correct place.</p> <p>Now we can configure the app to use those static files for the docs.</p>"},{"location":"how-to/custom-docs-ui-assets/#disable-the-automatic-docs-for-static-files","title":"Disable the automatic docs for static files","text":"<p>The same as when using a custom CDN, the first step is to disable the automatic docs, as those use the CDN by default.</p> <p>To disable them, set their URLs to <code>None</code> when creating your <code>ReadyAPI</code> app:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#include-the-custom-docs-for-static-files","title":"Include the custom docs for static files","text":"<p>And the same way as with a custom CDN, now you can create the path operations for the custom docs.</p> <p>Again, you can re-use ReadyAPI's internal functions to create the HTML pages for the docs, and pass them the needed arguments:</p> <ul> <li><code>openapi_url</code>: the URL where the HTML page for the docs can get the OpenAPI schema for your API. You can use here the attribute <code>app.openapi_url</code>.</li> <li><code>title</code>: the title of your API.</li> <li><code>oauth2_redirect_url</code>: you can use <code>app.swagger_ui_oauth2_redirect_url</code> here to use the default.</li> <li><code>swagger_js_url</code>: the URL where the HTML for your Swagger UI docs can get the JavaScript file. This is the one that your own app is now serving.</li> <li><code>swagger_css_url</code>: the URL where the HTML for your Swagger UI docs can get the CSS file. This is the one that your own app is now serving.</li> </ul> <p>And similarly for ReDoc...</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>Tip</p> <p>The path operation for <code>swagger_ui_redirect</code> is a helper for when you use OAuth2.</p> <p>If you integrate your API with an OAuth2 provider, you will be able to authenticate and come back to the API docs with the acquired credentials. And interact with it using the real OAuth2 authentication.</p> <p>Swagger UI will handle it behind the scenes for you, but it needs this \"redirect\" helper.</p>"},{"location":"how-to/custom-docs-ui-assets/#create-a-path-operation-to-test-static-files","title":"Create a path operation to test static files","text":"<p>Now, to be able to test that everything works, create a path operation:</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#test-static-files-ui","title":"Test Static Files UI","text":"<p>Now, you should be able to disconnect your WiFi, go to your docs at http://127.0.0.1:8000/docs, and reload the page.</p> <p>And even without Internet, you would be able to see the docs for your API and interact with it.</p>"},{"location":"how-to/configure-swagger-ui/","title":"Configure Swagger UI","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can configure some extra Swagger UI parameters.</p> <p>To configure them, pass the <code>swagger_ui_parameters</code> argument when creating the <code>ReadyAPI()</code> app object or to the <code>get_swagger_ui_html()</code> function.</p> <p><code>swagger_ui_parameters</code> receives a dictionary with the configurations passed to Swagger UI directly.</p> <p>ReadyAPI converts the configurations to JSON to make them compatible with JavaScript, as that's what Swagger UI needs.</p>"},{"location":"how-to/configure-swagger-ui/#disable-syntax-highlighting","title":"Disable Syntax Highlighting","text":"<p>For example, you could disable syntax highlighting in Swagger UI.</p> <p>Without changing the settings, syntax highlighting is enabled by default:</p> <p></p> <p>But you can disable it by setting <code>syntaxHighlight</code> to <code>False</code>:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"syntaxHighlight\": False})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>...and then Swagger UI won't show the syntax highlighting anymore:</p> <p></p>"},{"location":"how-to/configure-swagger-ui/#change-the-theme","title":"Change the Theme","text":"<p>The same way you could set the syntax highlighting theme with the key <code>\"syntaxHighlight.theme\"</code> (notice that it has a dot in the middle):</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"syntaxHighlight.theme\": \"obsidian\"})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>That configuration would change the syntax highlighting color theme:</p> <p></p>"},{"location":"how-to/configure-swagger-ui/#change-default-swagger-ui-parameters","title":"Change Default Swagger UI Parameters","text":"<p>ReadyAPI includes some default configuration parameters appropriate for most of the use cases.</p> <p>It includes these default configurations:</p> <pre><code>swagger_ui_default_parameters: Annotated[\n    Dict[str, Any],\n    Doc(\n        \"\"\"\n        Default configurations for Swagger UI.\n\n        You can use it as a template to add any other configurations needed.\n        \"\"\"\n    ),\n] = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n</code></pre> <p>You can override any of them by setting a different value in the argument <code>swagger_ui_parameters</code>.</p> <p>For example, to disable <code>deepLinking</code> you could pass these settings to <code>swagger_ui_parameters</code>:</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"deepLinking\": False})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/configure-swagger-ui/#other-swagger-ui-parameters","title":"Other Swagger UI Parameters","text":"<p>To see all the other possible configurations you can use, read the official docs for Swagger UI parameters.</p>"},{"location":"how-to/configure-swagger-ui/#javascript-only-settings","title":"JavaScript-only settings","text":"<p>Swagger UI also allows other configurations to be JavaScript-only objects (for example, JavaScript functions).</p> <p>ReadyAPI also includes these JavaScript-only <code>presets</code> settings:</p> <pre><code>presets: [\n    SwaggerUIBundle.presets.apis,\n    SwaggerUIBundle.SwaggerUIStandalonePreset\n]\n</code></pre> <p>These are JavaScript objects, not strings, so you can't pass them from Python code directly.</p> <p>If you need to use JavaScript-only configurations like those, you can use one of the methods above. Override all the Swagger UI path operation and manually write any JavaScript you need.</p>"},{"location":"how-to/sql-databases-peewee/","title":"SQL (Relational) Databases with Peewee (deprecated)","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Deprecated</p> <p>This tutorial is deprecated and will be removed in a future version.</p> <p>Warning</p> <p>If you are just starting, the tutorial SQL (Relational) Databases that uses SQLAlchemy should be enough.</p> <p>Feel free to skip this.</p> <p>Peewee is not recommended with ReadyAPI as it doesn't play well with anything async Python. There are several better alternatives.</p> <p>Info</p> <p>These docs assume Pydantic v1.</p> <p>Because Pewee doesn't play well with anything async and there are better alternatives, I won't update these docs for Pydantic v2, they are kept for now only for historical purposes.</p> <p>The examples here are no longer tested in CI (as they were before).</p> <p>If you are starting a project from scratch, you are probably better off with SQLAlchemy ORM (SQL (Relational) Databases), or any other async ORM.</p> <p>If you already have a code base that uses Peewee ORM, you can check here how to use it with ReadyAPI.</p> <p>Python 3.7+ required</p> <p>You will need Python 3.7 or above to safely use Peewee with ReadyAPI.</p>"},{"location":"how-to/sql-databases-peewee/#peewee-for-async","title":"Peewee for async","text":"<p>Peewee was not designed for async frameworks, or with them in mind.</p> <p>Peewee has some heavy assumptions about its defaults and about how it should be used.</p> <p>If you are developing an application with an older non-async framework, and can work with all its defaults, it can be a great tool.</p> <p>But if you need to change some of the defaults, support more than one predefined database, work with an async framework (like ReadyAPI), etc, you will need to add quite some complex extra code to override those defaults.</p> <p>Nevertheless, it's possible to do it, and here you'll see exactly what code you have to add to be able to use Peewee with ReadyAPI.</p> <p>Technical Details</p> <p>You can read more about Peewee's stand about async in Python in the docs, an issue, a PR.</p>"},{"location":"how-to/sql-databases-peewee/#the-same-app","title":"The same app","text":"<p>We are going to create the same application as in the SQLAlchemy tutorial (SQL (Relational) Databases).</p> <p>Most of the code is actually the same.</p> <p>So, we are going to focus only on the differences.</p>"},{"location":"how-to/sql-databases-peewee/#file-structure","title":"File structure","text":"<p>Let's say you have a directory named <code>my_super_project</code> that contains a sub-directory called <code>sql_app</code> with a structure like this:</p> <pre><code>.\n\u2514\u2500\u2500 sql_app\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 crud.py\n    \u251c\u2500\u2500 database.py\n    \u251c\u2500\u2500 main.py\n    \u2514\u2500\u2500 schemas.py\n</code></pre> <p>This is almost the same structure as we had for the SQLAlchemy tutorial.</p> <p>Now let's see what each file/module does.</p>"},{"location":"how-to/sql-databases-peewee/#create-the-peewee-parts","title":"Create the Peewee parts","text":"<p>Let's refer to the file <code>sql_app/database.py</code>.</p>"},{"location":"how-to/sql-databases-peewee/#the-standard-peewee-code","title":"The standard Peewee code","text":"<p>Let's first check all the normal Peewee code, create a Peewee database:</p> <pre><code>from contextvars import ContextVar\n\nimport peewee\n\nDATABASE_NAME = \"test.db\"\ndb_state_default = {\"closed\": None, \"conn\": None, \"ctx\": None, \"transactions\": None}\ndb_state = ContextVar(\"db_state\", default=db_state_default.copy())\n\n\nclass PeeweeConnectionState(peewee._ConnectionState):\n    def __init__(self, **kwargs):\n        super().__setattr__(\"_state\", db_state)\n        super().__init__(**kwargs)\n\n    def __setattr__(self, name, value):\n        self._state.get()[name] = value\n\n    def __getattr__(self, name):\n        return self._state.get()[name]\n\n\ndb = peewee.SqliteDatabase(DATABASE_NAME, check_same_thread=False)\n\ndb._state = PeeweeConnectionState()\n</code></pre> <p>Tip</p> <p>Keep in mind that if you wanted to use a different database, like PostgreSQL, you couldn't just change the string. You would need to use a different Peewee database class.</p>"},{"location":"how-to/sql-databases-peewee/#note","title":"Note","text":"<p>The argument:</p> <pre><code>check_same_thread=False\n</code></pre> <p>is equivalent to the one in the SQLAlchemy tutorial:</p> <pre><code>connect_args={\"check_same_thread\": False}\n</code></pre> <p>...it is needed only for <code>SQLite</code>.</p> <p>Technical Details</p> <p>Exactly the same technical details as in SQL (Relational) Databases apply.</p>"},{"location":"how-to/sql-databases-peewee/#make-peewee-async-compatible-peeweeconnectionstate","title":"Make Peewee async-compatible <code>PeeweeConnectionState</code>","text":"<p>The main issue with Peewee and ReadyAPI is that Peewee relies heavily on Python's <code>threading.local</code>, and it doesn't have a direct way to override it or let you handle connections/sessions directly (as is done in the SQLAlchemy tutorial).</p> <p>And <code>threading.local</code> is not compatible with the new async features of modern Python.</p> <p>Technical Details</p> <p><code>threading.local</code> is used to have a \"magic\" variable that has a different value for each thread.</p> <p>This was useful in older frameworks designed to have one single thread per request, no more, no less.</p> <p>Using this, each request would have its own database connection/session, which is the actual final goal.</p> <p>But ReadyAPI, using the new async features, could handle more than one request on the same thread. And at the same time, for a single request, it could run multiple things in different threads (in a threadpool), depending on if you use <code>async def</code> or normal <code>def</code>. This is what gives all the performance improvements to ReadyAPI.</p> <p>But Python 3.7 and above provide a more advanced alternative to <code>threading.local</code>, that can also be used in the places where <code>threading.local</code> would be used, but is compatible with the new async features.</p> <p>We are going to use that. It's called <code>contextvars</code>.</p> <p>We are going to override the internal parts of Peewee that use <code>threading.local</code> and replace them with <code>contextvars</code>, with the corresponding updates.</p> <p>This might seem a bit complex (and it actually is), you don't really need to completely understand how it works to use it.</p> <p>We will create a <code>PeeweeConnectionState</code>:</p> <pre><code>from contextvars import ContextVar\n\nimport peewee\n\nDATABASE_NAME = \"test.db\"\ndb_state_default = {\"closed\": None, \"conn\": None, \"ctx\": None, \"transactions\": None}\ndb_state = ContextVar(\"db_state\", default=db_state_default.copy())\n\n\nclass PeeweeConnectionState(peewee._ConnectionState):\n    def __init__(self, **kwargs):\n        super().__setattr__(\"_state\", db_state)\n        super().__init__(**kwargs)\n\n    def __setattr__(self, name, value):\n        self._state.get()[name] = value\n\n    def __getattr__(self, name):\n        return self._state.get()[name]\n\n\ndb = peewee.SqliteDatabase(DATABASE_NAME, check_same_thread=False)\n\ndb._state = PeeweeConnectionState()\n</code></pre> <p>This class inherits from a special internal class used by Peewee.</p> <p>It has all the logic to make Peewee use <code>contextvars</code> instead of <code>threading.local</code>.</p> <p><code>contextvars</code> works a bit differently than <code>threading.local</code>. But the rest of Peewee's internal code assumes that this class works with <code>threading.local</code>.</p> <p>So, we need to do some extra tricks to make it work as if it was just using <code>threading.local</code>. The <code>__init__</code>, <code>__setattr__</code>, and <code>__getattr__</code> implement all the required tricks for this to be used by Peewee without knowing that it is now compatible with ReadyAPI.</p> <p>Tip</p> <p>This will just make Peewee behave correctly when used with ReadyAPI. Not randomly opening or closing connections that are being used, creating errors, etc.</p> <p>But it doesn't give Peewee async super-powers. You should still use normal <code>def</code> functions and not <code>async def</code>.</p>"},{"location":"how-to/sql-databases-peewee/#use-the-custom-peeweeconnectionstate-class","title":"Use the custom <code>PeeweeConnectionState</code> class","text":"<p>Now, overwrite the <code>._state</code> internal attribute in the Peewee database <code>db</code> object using the new <code>PeeweeConnectionState</code>:</p> <pre><code>from contextvars import ContextVar\n\nimport peewee\n\nDATABASE_NAME = \"test.db\"\ndb_state_default = {\"closed\": None, \"conn\": None, \"ctx\": None, \"transactions\": None}\ndb_state = ContextVar(\"db_state\", default=db_state_default.copy())\n\n\nclass PeeweeConnectionState(peewee._ConnectionState):\n    def __init__(self, **kwargs):\n        super().__setattr__(\"_state\", db_state)\n        super().__init__(**kwargs)\n\n    def __setattr__(self, name, value):\n        self._state.get()[name] = value\n\n    def __getattr__(self, name):\n        return self._state.get()[name]\n\n\ndb = peewee.SqliteDatabase(DATABASE_NAME, check_same_thread=False)\n\ndb._state = PeeweeConnectionState()\n</code></pre> <p>Tip</p> <p>Make sure you overwrite <code>db._state</code> after creating <code>db</code>.</p> <p>Tip</p> <p>You would do the same for any other Peewee database, including <code>PostgresqlDatabase</code>, <code>MySQLDatabase</code>, etc.</p>"},{"location":"how-to/sql-databases-peewee/#create-the-database-models","title":"Create the database models","text":"<p>Let's now see the file <code>sql_app/models.py</code>.</p>"},{"location":"how-to/sql-databases-peewee/#create-peewee-models-for-our-data","title":"Create Peewee models for our data","text":"<p>Now create the Peewee models (classes) for <code>User</code> and <code>Item</code>.</p> <p>This is the same you would do if you followed the Peewee tutorial and updated the models to have the same data as in the SQLAlchemy tutorial.</p> <p>Tip</p> <p>Peewee also uses the term \"model\" to refer to these classes and instances that interact with the database.</p> <p>But Pydantic also uses the term \"model\" to refer to something different, the data validation, conversion, and documentation classes and instances.</p> <p>Import <code>db</code> from <code>database</code> (the file <code>database.py</code> from above) and use it here.</p> <pre><code>import peewee\n\nfrom .database import db\n\n\nclass User(peewee.Model):\n    email = peewee.CharField(unique=True, index=True)\n    hashed_password = peewee.CharField()\n    is_active = peewee.BooleanField(default=True)\n\n    class Meta:\n        database = db\n\n\nclass Item(peewee.Model):\n    title = peewee.CharField(index=True)\n    description = peewee.CharField(index=True)\n    owner = peewee.ForeignKeyField(User, backref=\"items\")\n\n    class Meta:\n        database = db\n</code></pre> <p>Tip</p> <p>Peewee creates several magic attributes.</p> <p>It will automatically add an <code>id</code> attribute as an integer to be the primary key.</p> <p>It will chose the name of the tables based on the class names.</p> <p>For the <code>Item</code>, it will create an attribute <code>owner_id</code> with the integer ID of the <code>User</code>. But we don't declare it anywhere.</p>"},{"location":"how-to/sql-databases-peewee/#create-the-pydantic-models","title":"Create the Pydantic models","text":"<p>Now let's check the file <code>sql_app/schemas.py</code>.</p> <p>Tip</p> <p>To avoid confusion between the Peewee models and the Pydantic models, we will have the file <code>models.py</code> with the Peewee models, and the file <code>schemas.py</code> with the Pydantic models.</p> <p>These Pydantic models define more or less a \"schema\" (a valid data shape).</p> <p>So this will help us avoiding confusion while using both.</p>"},{"location":"how-to/sql-databases-peewee/#create-the-pydantic-models-schemas","title":"Create the Pydantic models / schemas","text":"<p>Create all the same Pydantic models as in the SQLAlchemy tutorial:</p> <pre><code>from typing import Any, List, Union\n\nimport peewee\nfrom pydantic import BaseModel\nfrom pydantic.utils import GetterDict\n\n\nclass PeeweeGetterDict(GetterDict):\n    def get(self, key: Any, default: Any = None):\n        res = getattr(self._obj, key, default)\n        if isinstance(res, peewee.ModelSelect):\n            return list(res)\n        return res\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n        getter_dict = PeeweeGetterDict\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: List[Item] = []\n\n    class Config:\n        orm_mode = True\n        getter_dict = PeeweeGetterDict\n</code></pre> <p>Tip</p> <p>Here we are creating the models with an <code>id</code>.</p> <p>We didn't explicitly specify an <code>id</code> attribute in the Peewee models, but Peewee adds one automatically.</p> <p>We are also adding the magic <code>owner_id</code> attribute to <code>Item</code>.</p>"},{"location":"how-to/sql-databases-peewee/#create-a-peeweegetterdict-for-the-pydantic-models-schemas","title":"Create a <code>PeeweeGetterDict</code> for the Pydantic models / schemas","text":"<p>When you access a relationship in a Peewee object, like in <code>some_user.items</code>, Peewee doesn't provide a <code>list</code> of <code>Item</code>.</p> <p>It provides a special custom object of class <code>ModelSelect</code>.</p> <p>It's possible to create a <code>list</code> of its items with <code>list(some_user.items)</code>.</p> <p>But the object itself is not a <code>list</code>. And it's also not an actual Python generator. Because of this, Pydantic doesn't know by default how to convert it to a <code>list</code> of Pydantic models / schemas.</p> <p>But recent versions of Pydantic allow providing a custom class that inherits from <code>pydantic.utils.GetterDict</code>, to provide the functionality used when using the <code>orm_mode = True</code> to retrieve the values for ORM model attributes.</p> <p>We are going to create a custom <code>PeeweeGetterDict</code> class and use it in all the same Pydantic models / schemas that use <code>orm_mode</code>:</p> <pre><code>from typing import Any, List, Union\n\nimport peewee\nfrom pydantic import BaseModel\nfrom pydantic.utils import GetterDict\n\n\nclass PeeweeGetterDict(GetterDict):\n    def get(self, key: Any, default: Any = None):\n        res = getattr(self._obj, key, default)\n        if isinstance(res, peewee.ModelSelect):\n            return list(res)\n        return res\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n        getter_dict = PeeweeGetterDict\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: List[Item] = []\n\n    class Config:\n        orm_mode = True\n        getter_dict = PeeweeGetterDict\n</code></pre> <p>Here we are checking if the attribute that is being accessed (e.g. <code>.items</code> in <code>some_user.items</code>) is an instance of <code>peewee.ModelSelect</code>.</p> <p>And if that's the case, just return a <code>list</code> with it.</p> <p>And then we use it in the Pydantic models / schemas that use <code>orm_mode = True</code>, with the configuration variable <code>getter_dict = PeeweeGetterDict</code>.</p> <p>Tip</p> <p>We only need to create one <code>PeeweeGetterDict</code> class, and we can use it in all the Pydantic models / schemas.</p>"},{"location":"how-to/sql-databases-peewee/#crud-utils","title":"CRUD utils","text":"<p>Now let's see the file <code>sql_app/crud.py</code>.</p>"},{"location":"how-to/sql-databases-peewee/#create-all-the-crud-utils","title":"Create all the CRUD utils","text":"<p>Create all the same CRUD utils as in the SQLAlchemy tutorial, all the code is very similar:</p> <pre><code>from . import models, schemas\n\n\ndef get_user(user_id: int):\n    return models.User.filter(models.User.id == user_id).first()\n\n\ndef get_user_by_email(email: str):\n    return models.User.filter(models.User.email == email).first()\n\n\ndef get_users(skip: int = 0, limit: int = 100):\n    return list(models.User.select().offset(skip).limit(limit))\n\n\ndef create_user(user: schemas.UserCreate):\n    fake_hashed_password = user.password + \"notreallyhashed\"\n    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n    db_user.save()\n    return db_user\n\n\ndef get_items(skip: int = 0, limit: int = 100):\n    return list(models.Item.select().offset(skip).limit(limit))\n\n\ndef create_user_item(item: schemas.ItemCreate, user_id: int):\n    db_item = models.Item(**item.dict(), owner_id=user_id)\n    db_item.save()\n    return db_item\n</code></pre> <p>There are some differences with the code for the SQLAlchemy tutorial.</p> <p>We don't pass a <code>db</code> attribute around. Instead we use the models directly. This is because the <code>db</code> object is a global object, that includes all the connection logic. That's why we had to do all the <code>contextvars</code> updates above.</p> <p>Aso, when returning several objects, like in <code>get_users</code>, we directly call <code>list</code>, like in:</p> <pre><code>list(models.User.select())\n</code></pre> <p>This is for the same reason that we had to create a custom <code>PeeweeGetterDict</code>. But by returning something that is already a <code>list</code> instead of the <code>peewee.ModelSelect</code> the <code>response_model</code> in the path operation with <code>List[models.User]</code> (that we'll see later) will work correctly.</p>"},{"location":"how-to/sql-databases-peewee/#main-readyapi-app","title":"Main ReadyAPI app","text":"<p>And now in the file <code>sql_app/main.py</code> let's integrate and use all the other parts we created before.</p>"},{"location":"how-to/sql-databases-peewee/#create-the-database-tables","title":"Create the database tables","text":"<p>In a very simplistic way create the database tables:</p> <pre><code>import time\nfrom typing import List\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\nfrom . import crud, database, models, schemas\nfrom .database import db_state_default\n\ndatabase.db.connect()\ndatabase.db.create_tables([models.User, models.Item])\ndatabase.db.close()\n\napp = ReadyAPI()\n\nsleep_time = 10\n\n\nasync def reset_db_state():\n    database.db._state._state.set(db_state_default.copy())\n    database.db._state.reset()\n\n\ndef get_db(db_state=Depends(reset_db_state)):\n    try:\n        database.db.connect()\n        yield\n    finally:\n        if not database.db.is_closed():\n            database.db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User, dependencies=[Depends(get_db)])\ndef create_user(user: schemas.UserCreate):\n    db_user = crud.get_user_by_email(email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User], dependencies=[Depends(get_db)])\ndef read_users(skip: int = 0, limit: int = 100):\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n\n\n@app.get(\n    \"/users/{user_id}\", response_model=schemas.User, dependencies=[Depends(get_db)]\n)\ndef read_user(user_id: int):\n    db_user = crud.get_user(user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\n    \"/users/{user_id}/items/\",\n    response_model=schemas.Item,\n    dependencies=[Depends(get_db)],\n)\ndef create_item_for_user(user_id: int, item: schemas.ItemCreate):\n    return crud.create_user_item(item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item], dependencies=[Depends(get_db)])\ndef read_items(skip: int = 0, limit: int = 100):\n    items = crud.get_items(skip=skip, limit=limit)\n    return items\n\n\n@app.get(\n    \"/slowusers/\", response_model=List[schemas.User], dependencies=[Depends(get_db)]\n)\ndef read_slow_users(skip: int = 0, limit: int = 100):\n    global sleep_time\n    sleep_time = max(0, sleep_time - 1)\n    time.sleep(sleep_time)  # Fake long processing request\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n</code></pre>"},{"location":"how-to/sql-databases-peewee/#create-a-dependency","title":"Create a dependency","text":"<p>Create a dependency that will connect the database right at the beginning of a request and disconnect it at the end:</p> <pre><code>import time\nfrom typing import List\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\nfrom . import crud, database, models, schemas\nfrom .database import db_state_default\n\ndatabase.db.connect()\ndatabase.db.create_tables([models.User, models.Item])\ndatabase.db.close()\n\napp = ReadyAPI()\n\nsleep_time = 10\n\n\nasync def reset_db_state():\n    database.db._state._state.set(db_state_default.copy())\n    database.db._state.reset()\n\n\ndef get_db(db_state=Depends(reset_db_state)):\n    try:\n        database.db.connect()\n        yield\n    finally:\n        if not database.db.is_closed():\n            database.db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User, dependencies=[Depends(get_db)])\ndef create_user(user: schemas.UserCreate):\n    db_user = crud.get_user_by_email(email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User], dependencies=[Depends(get_db)])\ndef read_users(skip: int = 0, limit: int = 100):\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n\n\n@app.get(\n    \"/users/{user_id}\", response_model=schemas.User, dependencies=[Depends(get_db)]\n)\ndef read_user(user_id: int):\n    db_user = crud.get_user(user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\n    \"/users/{user_id}/items/\",\n    response_model=schemas.Item,\n    dependencies=[Depends(get_db)],\n)\ndef create_item_for_user(user_id: int, item: schemas.ItemCreate):\n    return crud.create_user_item(item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item], dependencies=[Depends(get_db)])\ndef read_items(skip: int = 0, limit: int = 100):\n    items = crud.get_items(skip=skip, limit=limit)\n    return items\n\n\n@app.get(\n    \"/slowusers/\", response_model=List[schemas.User], dependencies=[Depends(get_db)]\n)\ndef read_slow_users(skip: int = 0, limit: int = 100):\n    global sleep_time\n    sleep_time = max(0, sleep_time - 1)\n    time.sleep(sleep_time)  # Fake long processing request\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n</code></pre> <p>Here we have an empty <code>yield</code> because we are actually not using the database object directly.</p> <p>It is connecting to the database and storing the connection data in an internal variable that is independent for each request (using the <code>contextvars</code> tricks from above).</p> <p>Because the database connection is potentially I/O blocking, this dependency is created with a normal <code>def</code> function.</p> <p>And then, in each path operation function that needs to access the database we add it as a dependency.</p> <p>But we are not using the value given by this dependency (it actually doesn't give any value, as it has an empty <code>yield</code>). So, we don't add it to the path operation function but to the path operation decorator in the <code>dependencies</code> parameter:</p> <pre><code>import time\nfrom typing import List\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\nfrom . import crud, database, models, schemas\nfrom .database import db_state_default\n\ndatabase.db.connect()\ndatabase.db.create_tables([models.User, models.Item])\ndatabase.db.close()\n\napp = ReadyAPI()\n\nsleep_time = 10\n\n\nasync def reset_db_state():\n    database.db._state._state.set(db_state_default.copy())\n    database.db._state.reset()\n\n\ndef get_db(db_state=Depends(reset_db_state)):\n    try:\n        database.db.connect()\n        yield\n    finally:\n        if not database.db.is_closed():\n            database.db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User, dependencies=[Depends(get_db)])\ndef create_user(user: schemas.UserCreate):\n    db_user = crud.get_user_by_email(email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User], dependencies=[Depends(get_db)])\ndef read_users(skip: int = 0, limit: int = 100):\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n\n\n@app.get(\n    \"/users/{user_id}\", response_model=schemas.User, dependencies=[Depends(get_db)]\n)\ndef read_user(user_id: int):\n    db_user = crud.get_user(user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\n    \"/users/{user_id}/items/\",\n    response_model=schemas.Item,\n    dependencies=[Depends(get_db)],\n)\ndef create_item_for_user(user_id: int, item: schemas.ItemCreate):\n    return crud.create_user_item(item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item], dependencies=[Depends(get_db)])\ndef read_items(skip: int = 0, limit: int = 100):\n    items = crud.get_items(skip=skip, limit=limit)\n    return items\n\n\n@app.get(\n    \"/slowusers/\", response_model=List[schemas.User], dependencies=[Depends(get_db)]\n)\ndef read_slow_users(skip: int = 0, limit: int = 100):\n    global sleep_time\n    sleep_time = max(0, sleep_time - 1)\n    time.sleep(sleep_time)  # Fake long processing request\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n</code></pre>"},{"location":"how-to/sql-databases-peewee/#context-variable-sub-dependency","title":"Context variable sub-dependency","text":"<p>For all the <code>contextvars</code> parts to work, we need to make sure we have an independent value in the <code>ContextVar</code> for each request that uses the database, and that value will be used as the database state (connection, transactions, etc) for the whole request.</p> <p>For that, we need to create another <code>async</code> dependency <code>reset_db_state()</code> that is used as a sub-dependency in <code>get_db()</code>. It will set the value for the context variable (with just a default <code>dict</code>) that will be used as the database state for the whole request. And then the dependency <code>get_db()</code> will store in it the database state (connection, transactions, etc).</p> <pre><code>import time\nfrom typing import List\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\nfrom . import crud, database, models, schemas\nfrom .database import db_state_default\n\ndatabase.db.connect()\ndatabase.db.create_tables([models.User, models.Item])\ndatabase.db.close()\n\napp = ReadyAPI()\n\nsleep_time = 10\n\n\nasync def reset_db_state():\n    database.db._state._state.set(db_state_default.copy())\n    database.db._state.reset()\n\n\ndef get_db(db_state=Depends(reset_db_state)):\n    try:\n        database.db.connect()\n        yield\n    finally:\n        if not database.db.is_closed():\n            database.db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User, dependencies=[Depends(get_db)])\ndef create_user(user: schemas.UserCreate):\n    db_user = crud.get_user_by_email(email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User], dependencies=[Depends(get_db)])\ndef read_users(skip: int = 0, limit: int = 100):\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n\n\n@app.get(\n    \"/users/{user_id}\", response_model=schemas.User, dependencies=[Depends(get_db)]\n)\ndef read_user(user_id: int):\n    db_user = crud.get_user(user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\n    \"/users/{user_id}/items/\",\n    response_model=schemas.Item,\n    dependencies=[Depends(get_db)],\n)\ndef create_item_for_user(user_id: int, item: schemas.ItemCreate):\n    return crud.create_user_item(item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item], dependencies=[Depends(get_db)])\ndef read_items(skip: int = 0, limit: int = 100):\n    items = crud.get_items(skip=skip, limit=limit)\n    return items\n\n\n@app.get(\n    \"/slowusers/\", response_model=List[schemas.User], dependencies=[Depends(get_db)]\n)\ndef read_slow_users(skip: int = 0, limit: int = 100):\n    global sleep_time\n    sleep_time = max(0, sleep_time - 1)\n    time.sleep(sleep_time)  # Fake long processing request\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n</code></pre> <p>For the next request, as we will reset that context variable again in the <code>async</code> dependency <code>reset_db_state()</code> and then create a new connection in the <code>get_db()</code> dependency, that new request will have its own database state (connection, transactions, etc).</p> <p>Tip</p> <p>As ReadyAPI is an async framework, one request could start being processed, and before finishing, another request could be received and start processing as well, and it all could be processed in the same thread.</p> <p>But context variables are aware of these async features, so, a Peewee database state set in the <code>async</code> dependency <code>reset_db_state()</code> will keep its own data throughout the entire request.</p> <p>And at the same time, the other concurrent request will have its own database state that will be independent for the whole request.</p>"},{"location":"how-to/sql-databases-peewee/#peewee-proxy","title":"Peewee Proxy","text":"<p>If you are using a Peewee Proxy, the actual database is at <code>db.obj</code>.</p> <p>So, you would reset it with:</p> <pre><code>async def reset_db_state():\n    database.db.obj._state._state.set(db_state_default.copy())\n    database.db.obj._state.reset()\n</code></pre>"},{"location":"how-to/sql-databases-peewee/#create-your-readyapi-path-operations","title":"Create your ReadyAPI path operations","text":"<p>Now, finally, here's the standard ReadyAPI path operations code.</p> <pre><code>import time\nfrom typing import List\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\nfrom . import crud, database, models, schemas\nfrom .database import db_state_default\n\ndatabase.db.connect()\ndatabase.db.create_tables([models.User, models.Item])\ndatabase.db.close()\n\napp = ReadyAPI()\n\nsleep_time = 10\n\n\nasync def reset_db_state():\n    database.db._state._state.set(db_state_default.copy())\n    database.db._state.reset()\n\n\ndef get_db(db_state=Depends(reset_db_state)):\n    try:\n        database.db.connect()\n        yield\n    finally:\n        if not database.db.is_closed():\n            database.db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User, dependencies=[Depends(get_db)])\ndef create_user(user: schemas.UserCreate):\n    db_user = crud.get_user_by_email(email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User], dependencies=[Depends(get_db)])\ndef read_users(skip: int = 0, limit: int = 100):\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n\n\n@app.get(\n    \"/users/{user_id}\", response_model=schemas.User, dependencies=[Depends(get_db)]\n)\ndef read_user(user_id: int):\n    db_user = crud.get_user(user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\n    \"/users/{user_id}/items/\",\n    response_model=schemas.Item,\n    dependencies=[Depends(get_db)],\n)\ndef create_item_for_user(user_id: int, item: schemas.ItemCreate):\n    return crud.create_user_item(item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item], dependencies=[Depends(get_db)])\ndef read_items(skip: int = 0, limit: int = 100):\n    items = crud.get_items(skip=skip, limit=limit)\n    return items\n\n\n@app.get(\n    \"/slowusers/\", response_model=List[schemas.User], dependencies=[Depends(get_db)]\n)\ndef read_slow_users(skip: int = 0, limit: int = 100):\n    global sleep_time\n    sleep_time = max(0, sleep_time - 1)\n    time.sleep(sleep_time)  # Fake long processing request\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n</code></pre>"},{"location":"how-to/sql-databases-peewee/#about-def-vs-async-def","title":"About <code>def</code> vs <code>async def</code>","text":"<p>The same as with SQLAlchemy, we are not doing something like:</p> <pre><code>user = await models.User.select().first()\n</code></pre> <p>...but instead we are using:</p> <pre><code>user = models.User.select().first()\n</code></pre> <p>So, again, we should declare the path operation functions and the dependency without <code>async def</code>, just with a normal <code>def</code>, as:</p> <pre><code># Something goes here\ndef read_users(skip: int = 0, limit: int = 100):\n    # Something goes here\n</code></pre>"},{"location":"how-to/sql-databases-peewee/#testing-peewee-with-async","title":"Testing Peewee with async","text":"<p>This example includes an extra path operation that simulates a long processing request with <code>time.sleep(sleep_time)</code>.</p> <p>It will have the database connection open at the beginning and will just wait some seconds before replying back. And each new request will wait one second less.</p> <p>This will easily let you test that your app with Peewee and ReadyAPI is behaving correctly with all the stuff about threads.</p> <p>If you want to check how Peewee would break your app if used without modification, go the <code>sql_app/database.py</code> file and comment the line:</p> <pre><code># db._state = PeeweeConnectionState()\n</code></pre> <p>And in the file <code>sql_app/main.py</code> file, comment the body of the <code>async</code> dependency <code>reset_db_state()</code> and replace it with a <code>pass</code>:</p> <pre><code>async def reset_db_state():\n#     database.db._state._state.set(db_state_default.copy())\n#     database.db._state.reset()\n    pass\n</code></pre> <p>Then run your app with Uvicorn:</p> <pre><code>$ uvicorn sql_app.main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Open your browser at http://127.0.0.1:8000/docs  and create a couple of users.</p> <p>Then open 10 tabs at http://127.0.0.1:8000/docs#/default/read_slow_users_slowusers__get at the same time.</p> <p>Go to the path operation \"Get <code>/slowusers/</code>\" in all of the tabs. Use the \"Try it out\" button and execute the request in each tab, one right after the other.</p> <p>The tabs will wait for a bit and then some of them will show <code>Internal Server Error</code>.</p>"},{"location":"how-to/sql-databases-peewee/#what-happens","title":"What happens","text":"<p>The first tab will make your app create a connection to the database and wait for some seconds before replying back and closing the database connection.</p> <p>Then, for the request in the next tab, your app will wait for one second less, and so on.</p> <p>This means that it will end up finishing some of the last tabs' requests earlier than some of the previous ones.</p> <p>Then one the last requests that wait less seconds will try to open a database connection, but as one of those previous requests for the other tabs will probably be handled in the same thread as the first one, it will have the same database connection that is already open, and Peewee will throw an error and you will see it in the terminal, and the response will have an <code>Internal Server Error</code>.</p> <p>This will probably happen for more than one of those tabs.</p> <p>If you had multiple clients talking to your app exactly at the same time, this is what could happen.</p> <p>And as your app starts to handle more and more clients at the same time, the waiting time in a single request needs to be shorter and shorter to trigger the error.</p>"},{"location":"how-to/sql-databases-peewee/#fix-peewee-with-readyapi","title":"Fix Peewee with ReadyAPI","text":"<p>Now go back to the file <code>sql_app/database.py</code>, and uncomment the line:</p> <pre><code>db._state = PeeweeConnectionState()\n</code></pre> <p>And in the file <code>sql_app/main.py</code> file, uncomment the body of the <code>async</code> dependency <code>reset_db_state()</code>:</p> <pre><code>async def reset_db_state():\n    database.db._state._state.set(db_state_default.copy())\n    database.db._state.reset()\n</code></pre> <p>Terminate your running app and start it again.</p> <p>Repeat the same process with the 10 tabs. This time all of them will wait and you will get all the results without errors.</p> <p>...You fixed it!</p>"},{"location":"how-to/sql-databases-peewee/#review-all-the-files","title":"Review all the files","text":"<p>Remember you should have a directory named <code>my_super_project</code> (or however you want) that contains a sub-directory called <code>sql_app</code>.</p> <p><code>sql_app</code> should have the following files:</p> <ul> <li> <p><code>sql_app/__init__.py</code>: is an empty file.</p> </li> <li> <p><code>sql_app/database.py</code>:</p> </li> </ul> <pre><code>from contextvars import ContextVar\n\nimport peewee\n\nDATABASE_NAME = \"test.db\"\ndb_state_default = {\"closed\": None, \"conn\": None, \"ctx\": None, \"transactions\": None}\ndb_state = ContextVar(\"db_state\", default=db_state_default.copy())\n\n\nclass PeeweeConnectionState(peewee._ConnectionState):\n    def __init__(self, **kwargs):\n        super().__setattr__(\"_state\", db_state)\n        super().__init__(**kwargs)\n\n    def __setattr__(self, name, value):\n        self._state.get()[name] = value\n\n    def __getattr__(self, name):\n        return self._state.get()[name]\n\n\ndb = peewee.SqliteDatabase(DATABASE_NAME, check_same_thread=False)\n\ndb._state = PeeweeConnectionState()\n</code></pre> <ul> <li><code>sql_app/models.py</code>:</li> </ul> <pre><code>import peewee\n\nfrom .database import db\n\n\nclass User(peewee.Model):\n    email = peewee.CharField(unique=True, index=True)\n    hashed_password = peewee.CharField()\n    is_active = peewee.BooleanField(default=True)\n\n    class Meta:\n        database = db\n\n\nclass Item(peewee.Model):\n    title = peewee.CharField(index=True)\n    description = peewee.CharField(index=True)\n    owner = peewee.ForeignKeyField(User, backref=\"items\")\n\n    class Meta:\n        database = db\n</code></pre> <ul> <li><code>sql_app/schemas.py</code>:</li> </ul> <pre><code>from typing import Any, List, Union\n\nimport peewee\nfrom pydantic import BaseModel\nfrom pydantic.utils import GetterDict\n\n\nclass PeeweeGetterDict(GetterDict):\n    def get(self, key: Any, default: Any = None):\n        res = getattr(self._obj, key, default)\n        if isinstance(res, peewee.ModelSelect):\n            return list(res)\n        return res\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Union[str, None] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n        getter_dict = PeeweeGetterDict\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: List[Item] = []\n\n    class Config:\n        orm_mode = True\n        getter_dict = PeeweeGetterDict\n</code></pre> <ul> <li><code>sql_app/crud.py</code>:</li> </ul> <pre><code>from . import models, schemas\n\n\ndef get_user(user_id: int):\n    return models.User.filter(models.User.id == user_id).first()\n\n\ndef get_user_by_email(email: str):\n    return models.User.filter(models.User.email == email).first()\n\n\ndef get_users(skip: int = 0, limit: int = 100):\n    return list(models.User.select().offset(skip).limit(limit))\n\n\ndef create_user(user: schemas.UserCreate):\n    fake_hashed_password = user.password + \"notreallyhashed\"\n    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n    db_user.save()\n    return db_user\n\n\ndef get_items(skip: int = 0, limit: int = 100):\n    return list(models.Item.select().offset(skip).limit(limit))\n\n\ndef create_user_item(item: schemas.ItemCreate, user_id: int):\n    db_item = models.Item(**item.dict(), owner_id=user_id)\n    db_item.save()\n    return db_item\n</code></pre> <ul> <li><code>sql_app/main.py</code>:</li> </ul> <pre><code>import time\nfrom typing import List\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\nfrom . import crud, database, models, schemas\nfrom .database import db_state_default\n\ndatabase.db.connect()\ndatabase.db.create_tables([models.User, models.Item])\ndatabase.db.close()\n\napp = ReadyAPI()\n\nsleep_time = 10\n\n\nasync def reset_db_state():\n    database.db._state._state.set(db_state_default.copy())\n    database.db._state.reset()\n\n\ndef get_db(db_state=Depends(reset_db_state)):\n    try:\n        database.db.connect()\n        yield\n    finally:\n        if not database.db.is_closed():\n            database.db.close()\n\n\n@app.post(\"/users/\", response_model=schemas.User, dependencies=[Depends(get_db)])\ndef create_user(user: schemas.UserCreate):\n    db_user = crud.get_user_by_email(email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(user=user)\n\n\n@app.get(\"/users/\", response_model=List[schemas.User], dependencies=[Depends(get_db)])\ndef read_users(skip: int = 0, limit: int = 100):\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n\n\n@app.get(\n    \"/users/{user_id}\", response_model=schemas.User, dependencies=[Depends(get_db)]\n)\ndef read_user(user_id: int):\n    db_user = crud.get_user(user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.post(\n    \"/users/{user_id}/items/\",\n    response_model=schemas.Item,\n    dependencies=[Depends(get_db)],\n)\ndef create_item_for_user(user_id: int, item: schemas.ItemCreate):\n    return crud.create_user_item(item=item, user_id=user_id)\n\n\n@app.get(\"/items/\", response_model=List[schemas.Item], dependencies=[Depends(get_db)])\ndef read_items(skip: int = 0, limit: int = 100):\n    items = crud.get_items(skip=skip, limit=limit)\n    return items\n\n\n@app.get(\n    \"/slowusers/\", response_model=List[schemas.User], dependencies=[Depends(get_db)]\n)\ndef read_slow_users(skip: int = 0, limit: int = 100):\n    global sleep_time\n    sleep_time = max(0, sleep_time - 1)\n    time.sleep(sleep_time)  # Fake long processing request\n    users = crud.get_users(skip=skip, limit=limit)\n    return users\n</code></pre>"},{"location":"how-to/sql-databases-peewee/#technical-details","title":"Technical Details","text":"<p>Warning</p> <p>These are very technical details that you probably don't need.</p>"},{"location":"how-to/sql-databases-peewee/#the-problem","title":"The problem","text":"<p>Peewee uses <code>threading.local</code> by default to store it's database \"state\" data (connection, transactions, etc).</p> <p><code>threading.local</code> creates a value exclusive to the current thread, but an async framework would run all the code (e.g. for each request) in the same thread, and possibly not in order.</p> <p>On top of that, an async framework could run some sync code in a threadpool (using <code>asyncio.run_in_executor</code>), but belonging to the same request.</p> <p>This means that, with Peewee's current implementation, multiple tasks could be using the same <code>threading.local</code> variable and end up sharing the same connection and data (that they shouldn't), and at the same time, if they execute sync I/O-blocking code in a threadpool (as with normal <code>def</code> functions in ReadyAPI, in path operations  and dependencies), that code won't have access to the database state variables, even while it's part of the same request and it should be able to get access to the same database state.</p>"},{"location":"how-to/sql-databases-peewee/#context-variables","title":"Context variables","text":"<p>Python 3.7 has <code>contextvars</code> that can create a local variable very similar to <code>threading.local</code>, but also supporting these async features.</p> <p>There are several things to keep in mind.</p> <p>The <code>ContextVar</code> has to be created at the top of the module, like:</p> <pre><code>some_var = ContextVar(\"some_var\", default=\"default value\")\n</code></pre> <p>To set a value used in the current \"context\" (e.g. for the current request) use:</p> <pre><code>some_var.set(\"new value\")\n</code></pre> <p>To get a value anywhere inside of the context (e.g. in any part handling the current request) use:</p> <pre><code>some_var.get()\n</code></pre>"},{"location":"how-to/sql-databases-peewee/#set-context-variables-in-the-async-dependency-reset_db_state","title":"Set context variables in the <code>async</code> dependency <code>reset_db_state()</code>","text":"<p>If some part of the async code sets the value with <code>some_var.set(\"updated in function\")</code> (e.g. like the <code>async</code> dependency), the rest of the code in it and the code that goes after (including code inside of <code>async</code> functions called with <code>await</code>) will see that new value.</p> <p>So, in our case, if we set the Peewee state variable (with a default <code>dict</code>) in the <code>async</code> dependency, all the rest of the internal code in our app will see this value and will be able to reuse it for the whole request.</p> <p>And the context variable would be set again for the next request, even if they are concurrent.</p>"},{"location":"how-to/sql-databases-peewee/#set-database-state-in-the-dependency-get_db","title":"Set database state in the dependency <code>get_db()</code>","text":"<p>As <code>get_db()</code> is a normal <code>def</code> function, ReadyAPI will make it run in a threadpool, with a copy of the \"context\", holding the same value for the context variable (the <code>dict</code> with the reset database state). Then it can add database state to that <code>dict</code>, like the connection, etc.</p> <p>But if the value of the context variable (the default <code>dict</code>) was set in that normal <code>def</code> function, it would create a new value that would stay only in that thread of the threadpool, and the rest of the code (like the path operation functions) wouldn't have access to it. In <code>get_db()</code> we can only set values in the <code>dict</code>, but not the entire <code>dict</code> itself.</p> <p>So, we need to have the <code>async</code> dependency <code>reset_db_state()</code> to set the <code>dict</code> in the context variable. That way, all the code has access to the same <code>dict</code> for the database state for a single request.</p>"},{"location":"how-to/sql-databases-peewee/#connect-and-disconnect-in-the-dependency-get_db","title":"Connect and disconnect in the dependency <code>get_db()</code>","text":"<p>Then the next question would be, why not just connect and disconnect the database in the <code>async</code> dependency itself, instead of in <code>get_db()</code>?</p> <p>The <code>async</code> dependency has to be <code>async</code> for the context variable to be preserved for the rest of the request, but creating and closing the database connection is potentially blocking, so it could degrade performance if it was there.</p> <p>So we also need the normal <code>def</code> dependency <code>get_db()</code>.</p>"},{"location":"how-to/async-sql-encode-databases/","title":"Async SQL (Relational) Databases with Encode/Databases (deprecated)","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Info</p> <p>These docs are about to be updated. \ud83c\udf89</p> <p>The current version assumes Pydantic v1.</p> <p>The new docs will include Pydantic v2 and will use SQLModel once it is updated to use Pydantic v2 as well.</p> <p>Deprecated</p> <p>This tutorial is deprecated and will be removed in a future version.</p> <p>You can also use <code>encode/databases</code> with ReadyAPI to connect to databases using <code>async</code> and <code>await</code>.</p> <p>It is compatible with:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>SQLite</li> </ul> <p>In this example, we'll use SQLite, because it uses a single file and Python has integrated support. So, you can copy this example and run it as is.</p> <p>Later, for your production application, you might want to use a database server like PostgreSQL.</p> <p>Tip</p> <p>You could adopt ideas from the section about SQLAlchemy ORM (SQL (Relational) Databases), like using utility functions to perform operations in the database, independent of your ReadyAPI code.</p> <p>This section doesn't apply those ideas, to be equivalent to the counterpart in Starlette.</p>"},{"location":"how-to/async-sql-encode-databases/#import-and-set-up-sqlalchemy","title":"Import and set up <code>SQLAlchemy</code>","text":"<ul> <li>Import <code>SQLAlchemy</code>.</li> <li>Create a <code>metadata</code> object.</li> <li>Create a table <code>notes</code> using the <code>metadata</code> object.</li> </ul> <pre><code>from typing import List\n\nimport databases\nimport sqlalchemy\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n# SQLAlchemy specific code, as with any other app\nDATABASE_URL = \"sqlite:///./test.db\"\n# DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\ndatabase = databases.Database(DATABASE_URL)\n\nmetadata = sqlalchemy.MetaData()\n\nnotes = sqlalchemy.Table(\n    \"notes\",\n    metadata,\n    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column(\"text\", sqlalchemy.String),\n    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n)\n\n\nengine = sqlalchemy.create_engine(\n    DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nmetadata.create_all(engine)\n\n\nclass NoteIn(BaseModel):\n    text: str\n    completed: bool\n\n\nclass Note(BaseModel):\n    id: int\n    text: str\n    completed: bool\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\nasync def startup():\n    await database.connect()\n\n\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await database.disconnect()\n\n\n@app.get(\"/notes/\", response_model=List[Note])\nasync def read_notes():\n    query = notes.select()\n    return await database.fetch_all(query)\n\n\n@app.post(\"/notes/\", response_model=Note)\nasync def create_note(note: NoteIn):\n    query = notes.insert().values(text=note.text, completed=note.completed)\n    last_record_id = await database.execute(query)\n    return {**note.dict(), \"id\": last_record_id}\n</code></pre> <p>Tip</p> <p>Notice that all this code is pure SQLAlchemy Core.</p> <p><code>databases</code> is not doing anything here yet.</p>"},{"location":"how-to/async-sql-encode-databases/#import-and-set-up-databases","title":"Import and set up <code>databases</code>","text":"<ul> <li>Import <code>databases</code>.</li> <li>Create a <code>DATABASE_URL</code>.</li> <li>Create a <code>database</code> object.</li> </ul> <pre><code>from typing import List\n\nimport databases\nimport sqlalchemy\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n# SQLAlchemy specific code, as with any other app\nDATABASE_URL = \"sqlite:///./test.db\"\n# DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\ndatabase = databases.Database(DATABASE_URL)\n\nmetadata = sqlalchemy.MetaData()\n\nnotes = sqlalchemy.Table(\n    \"notes\",\n    metadata,\n    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column(\"text\", sqlalchemy.String),\n    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n)\n\n\nengine = sqlalchemy.create_engine(\n    DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nmetadata.create_all(engine)\n\n\nclass NoteIn(BaseModel):\n    text: str\n    completed: bool\n\n\nclass Note(BaseModel):\n    id: int\n    text: str\n    completed: bool\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\nasync def startup():\n    await database.connect()\n\n\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await database.disconnect()\n\n\n@app.get(\"/notes/\", response_model=List[Note])\nasync def read_notes():\n    query = notes.select()\n    return await database.fetch_all(query)\n\n\n@app.post(\"/notes/\", response_model=Note)\nasync def create_note(note: NoteIn):\n    query = notes.insert().values(text=note.text, completed=note.completed)\n    last_record_id = await database.execute(query)\n    return {**note.dict(), \"id\": last_record_id}\n</code></pre> <p>Tip</p> <p>If you were connecting to a different database (e.g. PostgreSQL), you would need to change the <code>DATABASE_URL</code>.</p>"},{"location":"how-to/async-sql-encode-databases/#create-the-tables","title":"Create the tables","text":"<p>In this case, we are creating the tables in the same Python file, but in production, you would probably want to create them with Alembic, integrated with migrations, etc.</p> <p>Here, this section would run directly, right before starting your ReadyAPI application.</p> <ul> <li>Create an <code>engine</code>.</li> <li>Create all the tables from the <code>metadata</code> object.</li> </ul> <pre><code>from typing import List\n\nimport databases\nimport sqlalchemy\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n# SQLAlchemy specific code, as with any other app\nDATABASE_URL = \"sqlite:///./test.db\"\n# DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\ndatabase = databases.Database(DATABASE_URL)\n\nmetadata = sqlalchemy.MetaData()\n\nnotes = sqlalchemy.Table(\n    \"notes\",\n    metadata,\n    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column(\"text\", sqlalchemy.String),\n    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n)\n\n\nengine = sqlalchemy.create_engine(\n    DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nmetadata.create_all(engine)\n\n\nclass NoteIn(BaseModel):\n    text: str\n    completed: bool\n\n\nclass Note(BaseModel):\n    id: int\n    text: str\n    completed: bool\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\nasync def startup():\n    await database.connect()\n\n\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await database.disconnect()\n\n\n@app.get(\"/notes/\", response_model=List[Note])\nasync def read_notes():\n    query = notes.select()\n    return await database.fetch_all(query)\n\n\n@app.post(\"/notes/\", response_model=Note)\nasync def create_note(note: NoteIn):\n    query = notes.insert().values(text=note.text, completed=note.completed)\n    last_record_id = await database.execute(query)\n    return {**note.dict(), \"id\": last_record_id}\n</code></pre>"},{"location":"how-to/async-sql-encode-databases/#create-models","title":"Create models","text":"<p>Create Pydantic models for:</p> <ul> <li>Notes to be created (<code>NoteIn</code>).</li> <li>Notes to be returned (<code>Note</code>).</li> </ul> <pre><code>from typing import List\n\nimport databases\nimport sqlalchemy\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n# SQLAlchemy specific code, as with any other app\nDATABASE_URL = \"sqlite:///./test.db\"\n# DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\ndatabase = databases.Database(DATABASE_URL)\n\nmetadata = sqlalchemy.MetaData()\n\nnotes = sqlalchemy.Table(\n    \"notes\",\n    metadata,\n    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column(\"text\", sqlalchemy.String),\n    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n)\n\n\nengine = sqlalchemy.create_engine(\n    DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nmetadata.create_all(engine)\n\n\nclass NoteIn(BaseModel):\n    text: str\n    completed: bool\n\n\nclass Note(BaseModel):\n    id: int\n    text: str\n    completed: bool\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\nasync def startup():\n    await database.connect()\n\n\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await database.disconnect()\n\n\n@app.get(\"/notes/\", response_model=List[Note])\nasync def read_notes():\n    query = notes.select()\n    return await database.fetch_all(query)\n\n\n@app.post(\"/notes/\", response_model=Note)\nasync def create_note(note: NoteIn):\n    query = notes.insert().values(text=note.text, completed=note.completed)\n    last_record_id = await database.execute(query)\n    return {**note.dict(), \"id\": last_record_id}\n</code></pre> <p>By creating these Pydantic models, the input data will be validated, serialized (converted), and annotated (documented).</p> <p>So, you will be able to see it all in the interactive API docs.</p>"},{"location":"how-to/async-sql-encode-databases/#connect-and-disconnect","title":"Connect and disconnect","text":"<ul> <li>Create your <code>ReadyAPI</code> application.</li> <li>Create event handlers to connect and disconnect from the database.</li> </ul> <pre><code>from typing import List\n\nimport databases\nimport sqlalchemy\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n# SQLAlchemy specific code, as with any other app\nDATABASE_URL = \"sqlite:///./test.db\"\n# DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\ndatabase = databases.Database(DATABASE_URL)\n\nmetadata = sqlalchemy.MetaData()\n\nnotes = sqlalchemy.Table(\n    \"notes\",\n    metadata,\n    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column(\"text\", sqlalchemy.String),\n    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n)\n\n\nengine = sqlalchemy.create_engine(\n    DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nmetadata.create_all(engine)\n\n\nclass NoteIn(BaseModel):\n    text: str\n    completed: bool\n\n\nclass Note(BaseModel):\n    id: int\n    text: str\n    completed: bool\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\nasync def startup():\n    await database.connect()\n\n\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await database.disconnect()\n\n\n@app.get(\"/notes/\", response_model=List[Note])\nasync def read_notes():\n    query = notes.select()\n    return await database.fetch_all(query)\n\n\n@app.post(\"/notes/\", response_model=Note)\nasync def create_note(note: NoteIn):\n    query = notes.insert().values(text=note.text, completed=note.completed)\n    last_record_id = await database.execute(query)\n    return {**note.dict(), \"id\": last_record_id}\n</code></pre>"},{"location":"how-to/async-sql-encode-databases/#read-notes","title":"Read notes","text":"<p>Create the path operation function to read notes:</p> <pre><code>from typing import List\n\nimport databases\nimport sqlalchemy\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n# SQLAlchemy specific code, as with any other app\nDATABASE_URL = \"sqlite:///./test.db\"\n# DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\ndatabase = databases.Database(DATABASE_URL)\n\nmetadata = sqlalchemy.MetaData()\n\nnotes = sqlalchemy.Table(\n    \"notes\",\n    metadata,\n    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column(\"text\", sqlalchemy.String),\n    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n)\n\n\nengine = sqlalchemy.create_engine(\n    DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nmetadata.create_all(engine)\n\n\nclass NoteIn(BaseModel):\n    text: str\n    completed: bool\n\n\nclass Note(BaseModel):\n    id: int\n    text: str\n    completed: bool\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\nasync def startup():\n    await database.connect()\n\n\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await database.disconnect()\n\n\n@app.get(\"/notes/\", response_model=List[Note])\nasync def read_notes():\n    query = notes.select()\n    return await database.fetch_all(query)\n\n\n@app.post(\"/notes/\", response_model=Note)\nasync def create_note(note: NoteIn):\n    query = notes.insert().values(text=note.text, completed=note.completed)\n    last_record_id = await database.execute(query)\n    return {**note.dict(), \"id\": last_record_id}\n</code></pre> <p>Note</p> <p>Notice that as we communicate with the database using <code>await</code>, the path operation function is declared with <code>async</code>.</p>"},{"location":"how-to/async-sql-encode-databases/#notice-the-response_modellistnote","title":"Notice the <code>response_model=List[Note]</code>","text":"<p>It uses <code>typing.List</code>.</p> <p>That documents (and validates, serializes, filters) the output data, as a <code>list</code> of <code>Note</code>s.</p>"},{"location":"how-to/async-sql-encode-databases/#create-notes","title":"Create notes","text":"<p>Create the path operation function to create notes:</p> <pre><code>from typing import List\n\nimport databases\nimport sqlalchemy\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n# SQLAlchemy specific code, as with any other app\nDATABASE_URL = \"sqlite:///./test.db\"\n# DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n\ndatabase = databases.Database(DATABASE_URL)\n\nmetadata = sqlalchemy.MetaData()\n\nnotes = sqlalchemy.Table(\n    \"notes\",\n    metadata,\n    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n    sqlalchemy.Column(\"text\", sqlalchemy.String),\n    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n)\n\n\nengine = sqlalchemy.create_engine(\n    DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nmetadata.create_all(engine)\n\n\nclass NoteIn(BaseModel):\n    text: str\n    completed: bool\n\n\nclass Note(BaseModel):\n    id: int\n    text: str\n    completed: bool\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\nasync def startup():\n    await database.connect()\n\n\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await database.disconnect()\n\n\n@app.get(\"/notes/\", response_model=List[Note])\nasync def read_notes():\n    query = notes.select()\n    return await database.fetch_all(query)\n\n\n@app.post(\"/notes/\", response_model=Note)\nasync def create_note(note: NoteIn):\n    query = notes.insert().values(text=note.text, completed=note.completed)\n    last_record_id = await database.execute(query)\n    return {**note.dict(), \"id\": last_record_id}\n</code></pre> <p>Info</p> <p>In Pydantic v1 the method was called <code>.dict()</code>, it was deprecated (but still supported) in Pydantic v2, and renamed to <code>.model_dump()</code>.</p> <p>The examples here use <code>.dict()</code> for compatibility with Pydantic v1, but you should use <code>.model_dump()</code> instead if you can use Pydantic v2.</p> <p>Note</p> <p>Notice that as we communicate with the database using <code>await</code>, the path operation function is declared with <code>async</code>.</p>"},{"location":"how-to/async-sql-encode-databases/#about-notedict-id-last_record_id","title":"About <code>{**note.dict(), \"id\": last_record_id}</code>","text":"<p><code>note</code> is a Pydantic <code>Note</code> object.</p> <p><code>note.dict()</code> returns a <code>dict</code> with its data, something like:</p> <pre><code>{\n    \"text\": \"Some note\",\n    \"completed\": False,\n}\n</code></pre> <p>but it doesn't have the <code>id</code> field.</p> <p>So we create a new <code>dict</code>, that contains the key-value pairs from <code>note.dict()</code> with:</p> <pre><code>{**note.dict()}\n</code></pre> <p><code>**note.dict()</code> \"unpacks\" the key value pairs directly, so, <code>{**note.dict()}</code> would be, more or less, a copy of <code>note.dict()</code>.</p> <p>And then, we extend that copy <code>dict</code>, adding another key-value pair: <code>\"id\": last_record_id</code>:</p> <pre><code>{**note.dict(), \"id\": last_record_id}\n</code></pre> <p>So, the final result returned would be something like:</p> <pre><code>{\n    \"id\": 1,\n    \"text\": \"Some note\",\n    \"completed\": False,\n}\n</code></pre>"},{"location":"how-to/async-sql-encode-databases/#check-it","title":"Check it","text":"<p>You can copy this code as is, and see the docs at http://127.0.0.1:8000/docs.</p> <p>There you can see all your API documented and interact with it:</p> <p></p>"},{"location":"how-to/async-sql-encode-databases/#more-info","title":"More info","text":"<p>You can read more about <code>encode/databases</code> at its GitHub page.</p>"},{"location":"how-to/nosql-databases-couchbase/","title":"NoSQL (Distributed / Big Data) Databases with Couchbase (deprecated)","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Info</p> <p>These docs are about to be updated. \ud83c\udf89</p> <p>The current version assumes Pydantic v1.</p> <p>The new docs will hopefully use Pydantic v2 and will use ODMantic with MongoDB.</p> <p>Deprecated</p> <p>This tutorial is deprecated and will be removed in a future version.</p> <p>ReadyAPI can also be integrated with any NoSQL.</p> <p>Here we'll see an example using Couchbase, a document based NoSQL database.</p> <p>You can adapt it to any other NoSQL database like:</p> <ul> <li>MongoDB</li> <li>Cassandra</li> <li>CouchDB</li> <li>ArangoDB</li> <li>ElasticSearch, etc.</li> </ul> <p>Tip</p> <p>There is an official project generator with ReadyAPI and Couchbase, all based on Docker, including a frontend and more tools: https://github.com/khulnasoft/full-stack-readyapi-couchbase</p>"},{"location":"how-to/nosql-databases-couchbase/#import-couchbase-components","title":"Import Couchbase components","text":"<p>For now, don't pay attention to the rest, only the imports:</p> <pre><code>from typing import Union\n\nfrom couchbase import LOCKMODE_WAIT\nfrom couchbase.bucket import Bucket\nfrom couchbase.cluster import Cluster, PasswordAuthenticator\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\nUSERPROFILE_DOC_TYPE = \"userprofile\"\n\n\ndef get_bucket():\n    cluster = Cluster(\n        \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&amp;operation_timeout=30&amp;n1ql_timeout=300\"\n    )\n    authenticator = PasswordAuthenticator(\"username\", \"password\")\n    cluster.authenticate(authenticator)\n    bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n    bucket.timeout = 30\n    bucket.n1ql_timeout = 300\n    return bucket\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    type: str = USERPROFILE_DOC_TYPE\n    hashed_password: str\n\n\ndef get_user(bucket: Bucket, username: str):\n    doc_id = f\"userprofile::{username}\"\n    result = bucket.get(doc_id, quiet=True)\n    if not result.value:\n        return None\n    user = UserInDB(**result.value)\n    return user\n\n\n# ReadyAPI specific code\napp = ReadyAPI()\n\n\n@app.get(\"/users/{username}\", response_model=User)\ndef read_user(username: str):\n    bucket = get_bucket()\n    user = get_user(bucket=bucket, username=username)\n    return user\n</code></pre>"},{"location":"how-to/nosql-databases-couchbase/#define-a-constant-to-use-as-a-document-type","title":"Define a constant to use as a \"document type\"","text":"<p>We will use it later as a fixed field <code>type</code> in our documents.</p> <p>This is not required by Couchbase, but is a good practice that will help you afterwards.</p> <pre><code>from typing import Union\n\nfrom couchbase import LOCKMODE_WAIT\nfrom couchbase.bucket import Bucket\nfrom couchbase.cluster import Cluster, PasswordAuthenticator\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\nUSERPROFILE_DOC_TYPE = \"userprofile\"\n\n\ndef get_bucket():\n    cluster = Cluster(\n        \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&amp;operation_timeout=30&amp;n1ql_timeout=300\"\n    )\n    authenticator = PasswordAuthenticator(\"username\", \"password\")\n    cluster.authenticate(authenticator)\n    bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n    bucket.timeout = 30\n    bucket.n1ql_timeout = 300\n    return bucket\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    type: str = USERPROFILE_DOC_TYPE\n    hashed_password: str\n\n\ndef get_user(bucket: Bucket, username: str):\n    doc_id = f\"userprofile::{username}\"\n    result = bucket.get(doc_id, quiet=True)\n    if not result.value:\n        return None\n    user = UserInDB(**result.value)\n    return user\n\n\n# ReadyAPI specific code\napp = ReadyAPI()\n\n\n@app.get(\"/users/{username}\", response_model=User)\ndef read_user(username: str):\n    bucket = get_bucket()\n    user = get_user(bucket=bucket, username=username)\n    return user\n</code></pre>"},{"location":"how-to/nosql-databases-couchbase/#add-a-function-to-get-a-bucket","title":"Add a function to get a <code>Bucket</code>","text":"<p>In Couchbase, a bucket is a set of documents, that can be of different types.</p> <p>They are generally all related to the same application.</p> <p>The analogy in the relational database world would be a \"database\" (a specific database, not the database server).</p> <p>The analogy in MongoDB would be a \"collection\".</p> <p>In the code, a <code>Bucket</code> represents the main entrypoint of communication with the database.</p> <p>This utility function will:</p> <ul> <li>Connect to a Couchbase cluster (that might be a single machine).<ul> <li>Set defaults for timeouts.</li> </ul> </li> <li>Authenticate in the cluster.</li> <li>Get a <code>Bucket</code> instance.<ul> <li>Set defaults for timeouts.</li> </ul> </li> <li>Return it.</li> </ul> <pre><code>from typing import Union\n\nfrom couchbase import LOCKMODE_WAIT\nfrom couchbase.bucket import Bucket\nfrom couchbase.cluster import Cluster, PasswordAuthenticator\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\nUSERPROFILE_DOC_TYPE = \"userprofile\"\n\n\ndef get_bucket():\n    cluster = Cluster(\n        \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&amp;operation_timeout=30&amp;n1ql_timeout=300\"\n    )\n    authenticator = PasswordAuthenticator(\"username\", \"password\")\n    cluster.authenticate(authenticator)\n    bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n    bucket.timeout = 30\n    bucket.n1ql_timeout = 300\n    return bucket\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    type: str = USERPROFILE_DOC_TYPE\n    hashed_password: str\n\n\ndef get_user(bucket: Bucket, username: str):\n    doc_id = f\"userprofile::{username}\"\n    result = bucket.get(doc_id, quiet=True)\n    if not result.value:\n        return None\n    user = UserInDB(**result.value)\n    return user\n\n\n# ReadyAPI specific code\napp = ReadyAPI()\n\n\n@app.get(\"/users/{username}\", response_model=User)\ndef read_user(username: str):\n    bucket = get_bucket()\n    user = get_user(bucket=bucket, username=username)\n    return user\n</code></pre>"},{"location":"how-to/nosql-databases-couchbase/#create-pydantic-models","title":"Create Pydantic models","text":"<p>As Couchbase \"documents\" are actually just \"JSON objects\", we can model them with Pydantic.</p>"},{"location":"how-to/nosql-databases-couchbase/#user-model","title":"<code>User</code> model","text":"<p>First, let's create a <code>User</code> model:</p> <pre><code>from typing import Union\n\nfrom couchbase import LOCKMODE_WAIT\nfrom couchbase.bucket import Bucket\nfrom couchbase.cluster import Cluster, PasswordAuthenticator\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\nUSERPROFILE_DOC_TYPE = \"userprofile\"\n\n\ndef get_bucket():\n    cluster = Cluster(\n        \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&amp;operation_timeout=30&amp;n1ql_timeout=300\"\n    )\n    authenticator = PasswordAuthenticator(\"username\", \"password\")\n    cluster.authenticate(authenticator)\n    bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n    bucket.timeout = 30\n    bucket.n1ql_timeout = 300\n    return bucket\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    type: str = USERPROFILE_DOC_TYPE\n    hashed_password: str\n\n\ndef get_user(bucket: Bucket, username: str):\n    doc_id = f\"userprofile::{username}\"\n    result = bucket.get(doc_id, quiet=True)\n    if not result.value:\n        return None\n    user = UserInDB(**result.value)\n    return user\n\n\n# ReadyAPI specific code\napp = ReadyAPI()\n\n\n@app.get(\"/users/{username}\", response_model=User)\ndef read_user(username: str):\n    bucket = get_bucket()\n    user = get_user(bucket=bucket, username=username)\n    return user\n</code></pre> <p>We will use this model in our path operation function, so, we don't include in it the <code>hashed_password</code>.</p>"},{"location":"how-to/nosql-databases-couchbase/#userindb-model","title":"<code>UserInDB</code> model","text":"<p>Now, let's create a <code>UserInDB</code> model.</p> <p>This will have the data that is actually stored in the database.</p> <p>We don't create it as a subclass of Pydantic's <code>BaseModel</code> but as a subclass of our own <code>User</code>, because it will have all the attributes in <code>User</code> plus a couple more:</p> <pre><code>from typing import Union\n\nfrom couchbase import LOCKMODE_WAIT\nfrom couchbase.bucket import Bucket\nfrom couchbase.cluster import Cluster, PasswordAuthenticator\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\nUSERPROFILE_DOC_TYPE = \"userprofile\"\n\n\ndef get_bucket():\n    cluster = Cluster(\n        \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&amp;operation_timeout=30&amp;n1ql_timeout=300\"\n    )\n    authenticator = PasswordAuthenticator(\"username\", \"password\")\n    cluster.authenticate(authenticator)\n    bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n    bucket.timeout = 30\n    bucket.n1ql_timeout = 300\n    return bucket\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    type: str = USERPROFILE_DOC_TYPE\n    hashed_password: str\n\n\ndef get_user(bucket: Bucket, username: str):\n    doc_id = f\"userprofile::{username}\"\n    result = bucket.get(doc_id, quiet=True)\n    if not result.value:\n        return None\n    user = UserInDB(**result.value)\n    return user\n\n\n# ReadyAPI specific code\napp = ReadyAPI()\n\n\n@app.get(\"/users/{username}\", response_model=User)\ndef read_user(username: str):\n    bucket = get_bucket()\n    user = get_user(bucket=bucket, username=username)\n    return user\n</code></pre> <p>Note</p> <p>Notice that we have a <code>hashed_password</code> and a <code>type</code> field that will be stored in the database.</p> <p>But it is not part of the general <code>User</code> model (the one we will return in the path operation).</p>"},{"location":"how-to/nosql-databases-couchbase/#get-the-user","title":"Get the user","text":"<p>Now create a function that will:</p> <ul> <li>Take a username.</li> <li>Generate a document ID from it.</li> <li>Get the document with that ID.</li> <li>Put the contents of the document in a <code>UserInDB</code> model.</li> </ul> <p>By creating a function that is only dedicated to getting your user from a <code>username</code> (or any other parameter) independent of your path operation function, you can more easily re-use it in multiple parts and also add unit tests for it:</p> <pre><code>from typing import Union\n\nfrom couchbase import LOCKMODE_WAIT\nfrom couchbase.bucket import Bucket\nfrom couchbase.cluster import Cluster, PasswordAuthenticator\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\nUSERPROFILE_DOC_TYPE = \"userprofile\"\n\n\ndef get_bucket():\n    cluster = Cluster(\n        \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&amp;operation_timeout=30&amp;n1ql_timeout=300\"\n    )\n    authenticator = PasswordAuthenticator(\"username\", \"password\")\n    cluster.authenticate(authenticator)\n    bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n    bucket.timeout = 30\n    bucket.n1ql_timeout = 300\n    return bucket\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    type: str = USERPROFILE_DOC_TYPE\n    hashed_password: str\n\n\ndef get_user(bucket: Bucket, username: str):\n    doc_id = f\"userprofile::{username}\"\n    result = bucket.get(doc_id, quiet=True)\n    if not result.value:\n        return None\n    user = UserInDB(**result.value)\n    return user\n\n\n# ReadyAPI specific code\napp = ReadyAPI()\n\n\n@app.get(\"/users/{username}\", response_model=User)\ndef read_user(username: str):\n    bucket = get_bucket()\n    user = get_user(bucket=bucket, username=username)\n    return user\n</code></pre>"},{"location":"how-to/nosql-databases-couchbase/#f-strings","title":"f-strings","text":"<p>If you are not familiar with the <code>f\"userprofile::{username}\"</code>, it is a Python \"f-string\".</p> <p>Any variable that is put inside of <code>{}</code> in an f-string will be expanded / injected in the string.</p>"},{"location":"how-to/nosql-databases-couchbase/#dict-unpacking","title":"<code>dict</code> unpacking","text":"<p>If you are not familiar with the <code>UserInDB(**result.value)</code>, it is using <code>dict</code> \"unpacking\".</p> <p>It will take the <code>dict</code> at <code>result.value</code>, and take each of its keys and values and pass them as key-values to <code>UserInDB</code> as keyword arguments.</p> <p>So, if the <code>dict</code> contains:</p> <pre><code>{\n    \"username\": \"johndoe\",\n    \"hashed_password\": \"some_hash\",\n}\n</code></pre> <p>It will be passed to <code>UserInDB</code> as:</p> <pre><code>UserInDB(username=\"johndoe\", hashed_password=\"some_hash\")\n</code></pre>"},{"location":"how-to/nosql-databases-couchbase/#create-your-readyapi-code","title":"Create your ReadyAPI code","text":""},{"location":"how-to/nosql-databases-couchbase/#create-the-readyapi-app","title":"Create the <code>ReadyAPI</code> app","text":"<pre><code>from typing import Union\n\nfrom couchbase import LOCKMODE_WAIT\nfrom couchbase.bucket import Bucket\nfrom couchbase.cluster import Cluster, PasswordAuthenticator\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\nUSERPROFILE_DOC_TYPE = \"userprofile\"\n\n\ndef get_bucket():\n    cluster = Cluster(\n        \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&amp;operation_timeout=30&amp;n1ql_timeout=300\"\n    )\n    authenticator = PasswordAuthenticator(\"username\", \"password\")\n    cluster.authenticate(authenticator)\n    bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n    bucket.timeout = 30\n    bucket.n1ql_timeout = 300\n    return bucket\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    type: str = USERPROFILE_DOC_TYPE\n    hashed_password: str\n\n\ndef get_user(bucket: Bucket, username: str):\n    doc_id = f\"userprofile::{username}\"\n    result = bucket.get(doc_id, quiet=True)\n    if not result.value:\n        return None\n    user = UserInDB(**result.value)\n    return user\n\n\n# ReadyAPI specific code\napp = ReadyAPI()\n\n\n@app.get(\"/users/{username}\", response_model=User)\ndef read_user(username: str):\n    bucket = get_bucket()\n    user = get_user(bucket=bucket, username=username)\n    return user\n</code></pre>"},{"location":"how-to/nosql-databases-couchbase/#create-the-path-operation-function","title":"Create the path operation function","text":"<p>As our code is calling Couchbase and we are not using the experimental Python <code>await</code> support, we should declare our function with normal <code>def</code> instead of <code>async def</code>.</p> <p>Also, Couchbase recommends not using a single <code>Bucket</code> object in multiple \"threads\", so, we can just get the bucket directly and pass it to our utility functions:</p> <pre><code>from typing import Union\n\nfrom couchbase import LOCKMODE_WAIT\nfrom couchbase.bucket import Bucket\nfrom couchbase.cluster import Cluster, PasswordAuthenticator\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\nUSERPROFILE_DOC_TYPE = \"userprofile\"\n\n\ndef get_bucket():\n    cluster = Cluster(\n        \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&amp;operation_timeout=30&amp;n1ql_timeout=300\"\n    )\n    authenticator = PasswordAuthenticator(\"username\", \"password\")\n    cluster.authenticate(authenticator)\n    bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n    bucket.timeout = 30\n    bucket.n1ql_timeout = 300\n    return bucket\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    type: str = USERPROFILE_DOC_TYPE\n    hashed_password: str\n\n\ndef get_user(bucket: Bucket, username: str):\n    doc_id = f\"userprofile::{username}\"\n    result = bucket.get(doc_id, quiet=True)\n    if not result.value:\n        return None\n    user = UserInDB(**result.value)\n    return user\n\n\n# ReadyAPI specific code\napp = ReadyAPI()\n\n\n@app.get(\"/users/{username}\", response_model=User)\ndef read_user(username: str):\n    bucket = get_bucket()\n    user = get_user(bucket=bucket, username=username)\n    return user\n</code></pre>"},{"location":"how-to/nosql-databases-couchbase/#recap","title":"Recap","text":"<p>You can integrate any third party NoSQL database, just using their standard packages.</p> <p>The same applies to any other external tool, system or API.</p>"},{"location":"reference/","title":"Reference - Code API","text":"<p>Here's the reference or code API, the classes, functions, parameters, attributes, and all the ReadyAPI parts you can use in your applications.</p> <p>If you want to learn ReadyAPI you are much better off reading the ReadyAPI Tutorial.</p>"},{"location":"reference/readyapi/","title":"<code>ReadyAPI</code> class","text":"<p>Here's the reference information for the <code>ReadyAPI</code> class, with all its parameters, attributes and methods.</p> <p>You can import the <code>ReadyAPI</code> class directly from <code>readyapi</code>:</p> <pre><code>from readyapi import ReadyAPI\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI","title":"readyapi.ReadyAPI","text":"<pre><code>ReadyAPI(\n    *,\n    debug=False,\n    routes=None,\n    title=\"ReadyAPI\",\n    summary=None,\n    description=\"\",\n    version=\"0.1.0\",\n    openapi_url=\"/openapi.json\",\n    openapi_tags=None,\n    servers=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    redirect_slashes=True,\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\",\n    swagger_ui_oauth2_redirect_url=\"/docs/oauth2-redirect\",\n    swagger_ui_init_oauth=None,\n    middleware=None,\n    exception_handlers=None,\n    on_startup=None,\n    on_shutdown=None,\n    lifespan=None,\n    terms_of_service=None,\n    contact=None,\n    license_info=None,\n    openapi_prefix=\"\",\n    root_path=\"\",\n    root_path_in_servers=True,\n    responses=None,\n    callbacks=None,\n    webhooks=None,\n    deprecated=None,\n    include_in_schema=True,\n    swagger_ui_parameters=None,\n    generate_unique_id_function=Default(generate_unique_id),\n    separate_input_output_schemas=True,\n    **extra\n)\n</code></pre> <p>             Bases: <code>Starlette</code></p> <p><code>ReadyAPI</code> app class, the main entrypoint to use ReadyAPI.</p> <p>Read more in the ReadyAPI docs for First Steps.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n</code></pre> PARAMETER  DESCRIPTION <code>debug</code> <p>Boolean indicating if debug tracebacks should be returned on server errors.</p> <p>Read more in the Starlette docs for Applications.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>routes</code> <p>You normally wouldn't use this parameter with ReadyAPI, it is inherited from Starlette and supported for compatibility.</p> <p>In ReadyAPI, you normally would use the path operation methods, like <code>app.get()</code>, <code>app.post()</code>, etc. Note: you probably shouldn't use this parameter, it is inherited from Starlette and supported for compatibility.</p> <p>A list of routes to serve incoming HTTP and WebSocket requests.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>The title of the API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(title=\"ChimichangApp\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>'ReadyAPI'</code> </p> <code>summary</code> <p>A short summary of the API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(summary=\"Deadpond's favorite app. Nuff said.\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description of the API. Supports Markdown (using CommonMark syntax).</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(\n    description=\"\"\"\n                ChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n                ## Items\n\n                You can **read items**.\n\n                ## Users\n\n                You will be able to:\n\n                * **Create users** (_not implemented_).\n                * **Read users** (_not implemented_).\n\n                \"\"\"\n)\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>version</code> <p>The version of the API.</p> <p>Note This is the version of your application, not the version of the OpenAPI specification nor the version of ReadyAPI being used.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(version=\"0.0.1\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>'0.1.0'</code> </p> <code>openapi_url</code> <p>The URL where the OpenAPI schema will be served from.</p> <p>If you set it to <code>None</code>, no OpenAPI schema will be served publicly, and the default automatic endpoints <code>/docs</code> and <code>/redoc</code> will also be disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/openapi.json'</code> </p> <code>openapi_tags</code> <p>A list of tags used by OpenAPI, these are the same <code>tags</code> you can set in the path operations, like:</p> <ul> <li><code>@app.get(\"/users/\", tags=[\"users\"])</code></li> <li><code>@app.get(\"/items/\", tags=[\"items\"])</code></li> </ul> <p>The order of the tags can be used to specify the order shown in tools like Swagger UI, used in the automatic path <code>/docs</code>.</p> <p>It's not required to specify all the tags used.</p> <p>The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.</p> <p>The value of each item is a <code>dict</code> containing:</p> <ul> <li><code>name</code>: The name of the tag.</li> <li><code>description</code>: A short description of the tag.     CommonMark syntax MAY be used for rich     text representation.</li> <li><code>externalDocs</code>: Additional external documentation for this tag. If     provided, it would contain a <code>dict</code> with:<ul> <li><code>description</code>: A short description of the target documentation.     CommonMark syntax MAY be used for     rich text representation.</li> <li><code>url</code>: The URL for the target documentation. Value MUST be in     the form of a URL.</li> </ul> </li> </ul> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.khulnasoft.com/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n</code></pre> <p> TYPE: <code>Optional[List[Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>servers</code> <p>A <code>list</code> of <code>dict</code>s with connectivity information to a target server.</p> <p>You would use it, for example, if your application is served from different domains and you want to use the same Swagger UI in the browser to interact with each of them (instead of having multiple browser tabs open). Or if you want to leave fixed the possible URLs.</p> <p>If the servers <code>list</code> is not provided, or is an empty <code>list</code>, the default value would be a <code>dict</code> with a <code>url</code> value of <code>/</code>.</p> <p>Each item in the <code>list</code> is a <code>dict</code> containing:</p> <ul> <li><code>url</code>: A URL to the target host. This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in <code>{</code>brackets<code>}</code>.</li> <li><code>description</code>: An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.</li> <li><code>variables</code>: A <code>dict</code> between a variable name and its value. The value     is used for substitution in the server's URL template.</li> </ul> <p>Read more in the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ]\n)\n</code></pre> <p> TYPE: <code>Optional[List[Dict[str, Union[str, Any]]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of global dependencies, they will be applied to each path operation, including in sub-routers.</p> <p>Read more about it in the ReadyAPI docs for Global Dependencies.</p> <p>Example</p> <pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import func_dep_1, func_dep_2\n\napp = ReadyAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n</code></pre> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI(default_response_class=ORJSONResponse)\n</code></pre> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>redirect_slashes</code> <p>Whether to detect and redirect slashes in URLs when the client doesn't use the same format.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(redirect_slashes=True)  # the default\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>With this app, if a client goes to <code>/items</code> (without a trailing slash), they will be automatically redirected with an HTTP status code of 307 to <code>/items/</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>docs_url</code> <p>The path to the automatic interactive API documentation. It is handled in the browser by Swagger UI.</p> <p>The default URL is <code>/docs</code>. You can disable it by setting it to <code>None</code>.</p> <p>If <code>openapi_url</code> is set to <code>None</code>, this will be automatically disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/docs'</code> </p> <code>redoc_url</code> <p>The path to the alternative automatic interactive API documentation provided by ReDoc.</p> <p>The default URL is <code>/redoc</code>. You can disable it by setting it to <code>None</code>.</p> <p>If <code>openapi_url</code> is set to <code>None</code>, this will be automatically disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=\"redocumentation\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/redoc'</code> </p> <code>swagger_ui_oauth2_redirect_url</code> <p>The OAuth2 redirect endpoint for the Swagger UI.</p> <p>By default it is <code>/docs/oauth2-redirect</code>.</p> <p>This is only used if you use OAuth2 (with the \"Authorize\" button) with Swagger UI.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/docs/oauth2-redirect'</code> </p> <code>swagger_ui_init_oauth</code> <p>OAuth2 configuration for the Swagger UI, by default shown at <code>/docs</code>.</p> <p>Read more about the available configuration options in the Swagger UI docs.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>middleware</code> <p>List of middleware to be added when creating the application.</p> <p>In ReadyAPI you would normally do this with <code>app.add_middleware()</code> instead.</p> <p>Read more in the ReadyAPI docs for Middleware.</p> <p> TYPE: <code>Optional[Sequence[Middleware]]</code> DEFAULT: <code>None</code> </p> <code>exception_handlers</code> <p>A dictionary with handlers for exceptions.</p> <p>In ReadyAPI, you would normally use the decorator <code>@app.exception_handler()</code>.</p> <p>Read more in the ReadyAPI docs for Handling Errors.</p> <p> TYPE: <code>Optional[Dict[Union[int, Type[Exception]], Callable[[Request, Any], Coroutine[Any, Any, Response]]]]</code> DEFAULT: <code>None</code> </p> <code>on_startup</code> <p>A list of startup event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>on_shutdown</code> <p>A list of shutdown event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifespan</code> <p>A <code>Lifespan</code> context manager handler. This replaces <code>startup</code> and <code>shutdown</code> functions with a single context manager.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Lifespan[AppType]]</code> DEFAULT: <code>None</code> </p> <code>terms_of_service</code> <p>A URL to the Terms of Service for your API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(terms_of_service=\"http://example.com/terms/\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>contact</code> <p>A dictionary with the contact information for the exposed API.</p> <p>It can contain several fields.</p> <ul> <li><code>name</code>: (<code>str</code>) The name of the contact person/organization.</li> <li><code>url</code>: (<code>str</code>) A URL pointing to the contact information. MUST be in     the format of a URL.</li> <li><code>email</code>: (<code>str</code>) The email address of the contact person/organization.     MUST be in the format of an email address.</li> </ul> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    }\n)\n</code></pre> <p> TYPE: <code>Optional[Dict[str, Union[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>license_info</code> <p>A dictionary with the license information for the exposed API.</p> <p>It can contain several fields.</p> <ul> <li><code>name</code>: (<code>str</code>) REQUIRED (if a <code>license_info</code> is set). The     license name used for the API.</li> <li><code>identifier</code>: (<code>str</code>) An SPDX license expression     for the API. The <code>identifier</code> field is mutually exclusive of the <code>url</code>     field. Available since OpenAPI 3.1.0, ReadyAPI 0.99.0.</li> <li><code>url</code>: (<code>str</code>) A URL to the license used for the API. This MUST be     the format of a URL.</li> </ul> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    }\n)\n</code></pre> <p> TYPE: <code>Optional[Dict[str, Union[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>openapi_prefix</code> <p>\"openapi_prefix\" has been deprecated in favor of \"root_path\", which follows more closely the ASGI standard, is simpler, and more automatic. A URL prefix for the OpenAPI URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>root_path</code> <p>A path prefix handled by a proxy that is not seen by the application but is seen by external clients, which affects things like Swagger UI.</p> <p>Read more about it at the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(root_path=\"/api/v1\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>root_path_in_servers</code> <p>To disable automatically generating the URLs in the <code>servers</code> field in the autogenerated OpenAPI using the <code>root_path</code>.</p> <p>Read more about it in the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(root_path_in_servers=False)\n</code></pre> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>webhooks</code> <p>Add OpenAPI webhooks. This is similar to <code>callbacks</code> but it doesn't depend on specific path operations.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Note: This is available since OpenAPI 3.1.0, ReadyAPI 0.99.0.</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Webhooks.</p> <p> TYPE: <code>Optional[APIRouter]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations as deprecated. You probably don't need it, but it's available.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) all the path operations in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>swagger_ui_parameters</code> <p>Parameters to configure Swagger UI, the autogenerated interactive API documentation (by default at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs about how to Configure Swagger UI.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> <code>separate_input_output_schemas</code> <p>Whether to generate separate OpenAPI schemas for request body and response body when the results would be more precise.</p> <p>This is particularly useful when automatically generating clients.</p> <p>For example, if you have a model like:</p> <pre><code>from pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    tags: list[str] = []\n</code></pre> <p>When <code>Item</code> is used for input, a request body, <code>tags</code> is not required, the client doesn't have to provide it.</p> <p>But when using <code>Item</code> for output, for a response body, <code>tags</code> is always available because it has a default value, even if it's just an empty list. So, the client should be able to always expect it.</p> <p>In this case, there would be two different schemas, one for input and another one for output.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**extra</code> <p>Extra keyword arguments to be stored in the app, not used by ReadyAPI anywhere.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def __init__(\n    self: AppType,\n    *,\n    debug: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Boolean indicating if debug tracebacks should be returned on server\n            errors.\n\n            Read more in the\n            [Starlette docs for Applications](https://www.starlette.io/applications/#instantiating-the-application).\n            \"\"\"\n        ),\n    ] = False,\n    routes: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            **Note**: you probably shouldn't use this parameter, it is inherited\n            from Starlette and supported for compatibility.\n\n            ---\n\n            A list of routes to serve incoming HTTP and WebSocket requests.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            You normally wouldn't use this parameter with ReadyAPI, it is inherited\n            from Starlette and supported for compatibility.\n\n            In ReadyAPI, you normally would use the *path operation methods*,\n            like `app.get()`, `app.post()`, etc.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The title of the API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(title=\"ChimichangApp\")\n            ```\n            \"\"\"\n        ),\n    ] = \"ReadyAPI\",\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A short summary of the API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(summary=\"Deadpond's favorite app. Nuff said.\")\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        str,\n        Doc(\n            '''\n            A description of the API. Supports Markdown (using\n            [CommonMark syntax](https://commonmark.org/)).\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(\n                description=\"\"\"\n                            ChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n                            ## Items\n\n                            You can **read items**.\n\n                            ## Users\n\n                            You will be able to:\n\n                            * **Create users** (_not implemented_).\n                            * **Read users** (_not implemented_).\n\n                            \"\"\"\n            )\n            ```\n            '''\n        ),\n    ] = \"\",\n    version: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The version of the API.\n\n            **Note** This is the version of your application, not the version of\n            the OpenAPI specification nor the version of ReadyAPI being used.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(version=\"0.0.1\")\n            ```\n            \"\"\"\n        ),\n    ] = \"0.1.0\",\n    openapi_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The URL where the OpenAPI schema will be served from.\n\n            If you set it to `None`, no OpenAPI schema will be served publicly, and\n            the default automatic endpoints `/docs` and `/redoc` will also be\n            disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#openapi-url).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n            ```\n            \"\"\"\n        ),\n    ] = \"/openapi.json\",\n    openapi_tags: Annotated[\n        Optional[List[Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            A list of tags used by OpenAPI, these are the same `tags` you can set\n            in the *path operations*, like:\n\n            * `@app.get(\"/users/\", tags=[\"users\"])`\n            * `@app.get(\"/items/\", tags=[\"items\"])`\n\n            The order of the tags can be used to specify the order shown in\n            tools like Swagger UI, used in the automatic path `/docs`.\n\n            It's not required to specify all the tags used.\n\n            The tags that are not declared MAY be organized randomly or based\n            on the tools' logic. Each tag name in the list MUST be unique.\n\n            The value of each item is a `dict` containing:\n\n            * `name`: The name of the tag.\n            * `description`: A short description of the tag.\n                [CommonMark syntax](https://commonmark.org/) MAY be used for rich\n                text representation.\n            * `externalDocs`: Additional external documentation for this tag. If\n                provided, it would contain a `dict` with:\n                * `description`: A short description of the target documentation.\n                    [CommonMark syntax](https://commonmark.org/) MAY be used for\n                    rich text representation.\n                * `url`: The URL for the target documentation. Value MUST be in\n                    the form of a URL.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-tags).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            tags_metadata = [\n                {\n                    \"name\": \"users\",\n                    \"description\": \"Operations with users. The **login** logic is also here.\",\n                },\n                {\n                    \"name\": \"items\",\n                    \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n                    \"externalDocs\": {\n                        \"description\": \"Items external docs\",\n                        \"url\": \"https://readyapi.khulnasoft.com/\",\n                    },\n                },\n            ]\n\n            app = ReadyAPI(openapi_tags=tags_metadata)\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    servers: Annotated[\n        Optional[List[Dict[str, Union[str, Any]]]],\n        Doc(\n            \"\"\"\n            A `list` of `dict`s with connectivity information to a target server.\n\n            You would use it, for example, if your application is served from\n            different domains and you want to use the same Swagger UI in the\n            browser to interact with each of them (instead of having multiple\n            browser tabs open). Or if you want to leave fixed the possible URLs.\n\n            If the servers `list` is not provided, or is an empty `list`, the\n            default value would be a `dict` with a `url` value of `/`.\n\n            Each item in the `list` is a `dict` containing:\n\n            * `url`: A URL to the target host. This URL supports Server Variables\n            and MAY be relative, to indicate that the host location is relative\n            to the location where the OpenAPI document is being served. Variable\n            substitutions will be made when a variable is named in `{`brackets`}`.\n            * `description`: An optional string describing the host designated by\n            the URL. [CommonMark syntax](https://commonmark.org/) MAY be used for\n            rich text representation.\n            * `variables`: A `dict` between a variable name and its value. The value\n                is used for substitution in the server's URL template.\n\n            Read more in the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.khulnasoft.com/advanced/behind-a-proxy/#additional-servers).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(\n                servers=[\n                    {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n                    {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n                ]\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of global dependencies, they will be applied to each\n            *path operation*, including in sub-routers.\n\n            Read more about it in the\n            [ReadyAPI docs for Global Dependencies](https://readyapi.khulnasoft.com/tutorial/dependencies/global-dependencies/).\n\n            **Example**\n\n            ```python\n            from readyapi import Depends, ReadyAPI\n\n            from .dependencies import func_dep_1, func_dep_2\n\n            app = ReadyAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#default-response-class).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n            from readyapi.responses import ORJSONResponse\n\n            app = ReadyAPI(default_response_class=ORJSONResponse)\n            ```\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    redirect_slashes: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to detect and redirect slashes in URLs when the client doesn't\n            use the same format.\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(redirect_slashes=True)  # the default\n\n            @app.get(\"/items/\")\n            async def read_items():\n                return [{\"item_id\": \"Foo\"}]\n            ```\n\n            With this app, if a client goes to `/items` (without a trailing slash),\n            they will be automatically redirected with an HTTP status code of 307\n            to `/items/`.\n            \"\"\"\n        ),\n    ] = True,\n    docs_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The path to the automatic interactive API documentation.\n            It is handled in the browser by Swagger UI.\n\n            The default URL is `/docs`. You can disable it by setting it to `None`.\n\n            If `openapi_url` is set to `None`, this will be automatically disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#docs-urls).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n            ```\n            \"\"\"\n        ),\n    ] = \"/docs\",\n    redoc_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The path to the alternative automatic interactive API documentation\n            provided by ReDoc.\n\n            The default URL is `/redoc`. You can disable it by setting it to `None`.\n\n            If `openapi_url` is set to `None`, this will be automatically disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#docs-urls).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(docs_url=\"/documentation\", redoc_url=\"redocumentation\")\n            ```\n            \"\"\"\n        ),\n    ] = \"/redoc\",\n    swagger_ui_oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect endpoint for the Swagger UI.\n\n            By default it is `/docs/oauth2-redirect`.\n\n            This is only used if you use OAuth2 (with the \"Authorize\" button)\n            with Swagger UI.\n            \"\"\"\n        ),\n    ] = \"/docs/oauth2-redirect\",\n    swagger_ui_init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            OAuth2 configuration for the Swagger UI, by default shown at `/docs`.\n\n            Read more about the available configuration options in the\n            [Swagger UI docs](https://swagger.io/docs/open-source-tools/swagger-ui/usage/oauth2/).\n            \"\"\"\n        ),\n    ] = None,\n    middleware: Annotated[\n        Optional[Sequence[Middleware]],\n        Doc(\n            \"\"\"\n            List of middleware to be added when creating the application.\n\n            In ReadyAPI you would normally do this with `app.add_middleware()`\n            instead.\n\n            Read more in the\n            [ReadyAPI docs for Middleware](https://readyapi.khulnasoft.com/tutorial/middleware/).\n            \"\"\"\n        ),\n    ] = None,\n    exception_handlers: Annotated[\n        Optional[\n            Dict[\n                Union[int, Type[Exception]],\n                Callable[[Request, Any], Coroutine[Any, Any, Response]],\n            ]\n        ],\n        Doc(\n            \"\"\"\n            A dictionary with handlers for exceptions.\n\n            In ReadyAPI, you would normally use the decorator\n            `@app.exception_handler()`.\n\n            Read more in the\n            [ReadyAPI docs for Handling Errors](https://readyapi.khulnasoft.com/tutorial/handling-errors/).\n            \"\"\"\n        ),\n    ] = None,\n    on_startup: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of startup event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the [ReadyAPI docs for `lifespan`](https://readyapi.khulnasoft.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    on_shutdown: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of shutdown event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.khulnasoft.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    lifespan: Annotated[\n        Optional[Lifespan[AppType]],\n        Doc(\n            \"\"\"\n            A `Lifespan` context manager handler. This replaces `startup` and\n            `shutdown` functions with a single context manager.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.khulnasoft.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    terms_of_service: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A URL to the Terms of Service for your API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(terms_of_service=\"http://example.com/terms/\")\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    contact: Annotated[\n        Optional[Dict[str, Union[str, Any]]],\n        Doc(\n            \"\"\"\n            A dictionary with the contact information for the exposed API.\n\n            It can contain several fields.\n\n            * `name`: (`str`) The name of the contact person/organization.\n            * `url`: (`str`) A URL pointing to the contact information. MUST be in\n                the format of a URL.\n            * `email`: (`str`) The email address of the contact person/organization.\n                MUST be in the format of an email address.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(\n                contact={\n                    \"name\": \"Deadpoolio the Amazing\",\n                    \"url\": \"http://x-force.example.com/contact/\",\n                    \"email\": \"dp@x-force.example.com\",\n                }\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    license_info: Annotated[\n        Optional[Dict[str, Union[str, Any]]],\n        Doc(\n            \"\"\"\n            A dictionary with the license information for the exposed API.\n\n            It can contain several fields.\n\n            * `name`: (`str`) **REQUIRED** (if a `license_info` is set). The\n                license name used for the API.\n            * `identifier`: (`str`) An [SPDX](https://spdx.dev/) license expression\n                for the API. The `identifier` field is mutually exclusive of the `url`\n                field. Available since OpenAPI 3.1.0, ReadyAPI 0.99.0.\n            * `url`: (`str`) A URL to the license used for the API. This MUST be\n                the format of a URL.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(\n                license_info={\n                    \"name\": \"Apache 2.0\",\n                    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n                }\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    openapi_prefix: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            A URL prefix for the OpenAPI URL.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            \"openapi_prefix\" has been deprecated in favor of \"root_path\", which\n            follows more closely the ASGI standard, is simpler, and more\n            automatic.\n            \"\"\"\n        ),\n    ] = \"\",\n    root_path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            A path prefix handled by a proxy that is not seen by the application\n            but is seen by external clients, which affects things like Swagger UI.\n\n            Read more about it at the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.khulnasoft.com/advanced/behind-a-proxy/).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(root_path=\"/api/v1\")\n            ```\n            \"\"\"\n        ),\n    ] = \"\",\n    root_path_in_servers: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To disable automatically generating the URLs in the `servers` field\n            in the autogenerated OpenAPI using the `root_path`.\n\n            Read more about it in the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.khulnasoft.com/advanced/behind-a-proxy/#disable-automatic-server-from-root_path).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(root_path_in_servers=False)\n            ```\n            \"\"\"\n        ),\n    ] = True,\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.khulnasoft.com/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    webhooks: Annotated[\n        Optional[routing.APIRouter],\n        Doc(\n            \"\"\"\n            Add OpenAPI webhooks. This is similar to `callbacks` but it doesn't\n            depend on specific *path operations*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Note**: This is available since OpenAPI 3.1.0, ReadyAPI 0.99.0.\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Webhooks](https://readyapi.khulnasoft.com/advanced/openapi-webhooks/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* as deprecated. You probably don't need it,\n            but it's available.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) all the *path operations* in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Parameters to configure Swagger UI, the autogenerated interactive API\n            documentation (by default at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs about how to Configure Swagger UI](https://readyapi.khulnasoft.com/how-to/configure-swagger-ui/).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n    separate_input_output_schemas: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to generate separate OpenAPI schemas for request body and\n            response body when the results would be more precise.\n\n            This is particularly useful when automatically generating clients.\n\n            For example, if you have a model like:\n\n            ```python\n            from pydantic import BaseModel\n\n            class Item(BaseModel):\n                name: str\n                tags: list[str] = []\n            ```\n\n            When `Item` is used for input, a request body, `tags` is not required,\n            the client doesn't have to provide it.\n\n            But when using `Item` for output, for a response body, `tags` is always\n            available because it has a default value, even if it's just an empty\n            list. So, the client should be able to always expect it.\n\n            In this case, there would be two different schemas, one for input and\n            another one for output.\n            \"\"\"\n        ),\n    ] = True,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Extra keyword arguments to be stored in the app, not used by ReadyAPI\n            anywhere.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    self.debug = debug\n    self.title = title\n    self.summary = summary\n    self.description = description\n    self.version = version\n    self.terms_of_service = terms_of_service\n    self.contact = contact\n    self.license_info = license_info\n    self.openapi_url = openapi_url\n    self.openapi_tags = openapi_tags\n    self.root_path_in_servers = root_path_in_servers\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.swagger_ui_parameters = swagger_ui_parameters\n    self.servers = servers or []\n    self.separate_input_output_schemas = separate_input_output_schemas\n    self.extra = extra\n    self.openapi_version: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The version string of OpenAPI.\n\n            ReadyAPI will generate OpenAPI version 3.1.0, and will output that as\n            the OpenAPI version. But some tools, even though they might be\n            compatible with OpenAPI 3.1.0, might not recognize it as a valid.\n\n            So you could override this value to trick those tools into using\n            the generated OpenAPI. Have in mind that this is a hack. But if you\n            avoid using features added in OpenAPI 3.1.0, it might work for your\n            use case.\n\n            This is not passed as a parameter to the `ReadyAPI` class to avoid\n            giving the false idea that ReadyAPI would generate a different OpenAPI\n            schema. It is only available as an attribute.\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI()\n\n            app.openapi_version = \"3.0.2\"\n            ```\n            \"\"\"\n        ),\n    ] = \"3.1.0\"\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    # TODO: remove when discarding the openapi_prefix parameter\n    if openapi_prefix:\n        logger.warning(\n            '\"openapi_prefix\" has been deprecated in favor of \"root_path\", which '\n            \"follows more closely the ASGI standard, is simpler, and more \"\n            \"automatic. Check the docs at \"\n            \"https://readyapi.khulnasoft.com/advanced/sub-applications/\"\n        )\n    self.webhooks: Annotated[\n        routing.APIRouter,\n        Doc(\n            \"\"\"\n            The `app.webhooks` attribute is an `APIRouter` with the *path\n            operations* that will be used just for documentation of webhooks.\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Webhooks](https://readyapi.khulnasoft.com/advanced/openapi-webhooks/).\n            \"\"\"\n        ),\n    ] = webhooks or routing.APIRouter()\n    self.root_path = root_path or openapi_prefix\n    self.state: Annotated[\n        State,\n        Doc(\n            \"\"\"\n            A state object for the application. This is the same object for the\n            entire application, it doesn't change from request to request.\n\n            You normally woudln't use this in ReadyAPI, for most of the cases you\n            would instead use ReadyAPI dependencies.\n\n            This is simply inherited from Starlette.\n\n            Read more about it in the\n            [Starlette docs for Applications](https://www.starlette.io/applications/#storing-state-on-the-app-instance).\n            \"\"\"\n        ),\n    ] = State()\n    self.dependency_overrides: Annotated[\n        Dict[Callable[..., Any], Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A dictionary with overrides for the dependencies.\n\n            Each key is the original dependency callable, and the value is the\n            actual dependency that should be called.\n\n            This is for testing, to replace expensive dependencies with testing\n            versions.\n\n            Read more about it in the\n            [ReadyAPI docs for Testing Dependencies with Overrides](https://readyapi.khulnasoft.com/advanced/testing-dependencies/).\n            \"\"\"\n        ),\n    ] = {}\n    self.router: routing.APIRouter = routing.APIRouter(\n        routes=routes,\n        redirect_slashes=redirect_slashes,\n        dependency_overrides_provider=self,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n        lifespan=lifespan,\n        default_response_class=default_response_class,\n        dependencies=dependencies,\n        callbacks=callbacks,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        responses=responses,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n    self.exception_handlers: Dict[\n        Any, Callable[[Request, Any], Union[Response, Awaitable[Response]]]\n    ] = {} if exception_handlers is None else dict(exception_handlers)\n    self.exception_handlers.setdefault(HTTPException, http_exception_handler)\n    self.exception_handlers.setdefault(\n        RequestValidationError, request_validation_exception_handler\n    )\n    self.exception_handlers.setdefault(\n        WebSocketRequestValidationError,\n        # Starlette still has incorrect type specification for the handlers\n        websocket_request_validation_exception_handler,  # type: ignore\n    )\n\n    self.user_middleware: List[Middleware] = (\n        [] if middleware is None else list(middleware)\n    )\n    self.middleware_stack: Union[ASGIApp, None] = None\n    self.setup()\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.openapi_version","title":"openapi_version  <code>instance-attribute</code>","text":"<pre><code>openapi_version = '3.1.0'\n</code></pre> <p>The version string of OpenAPI.</p> <p>ReadyAPI will generate OpenAPI version 3.1.0, and will output that as the OpenAPI version. But some tools, even though they might be compatible with OpenAPI 3.1.0, might not recognize it as a valid.</p> <p>So you could override this value to trick those tools into using the generated OpenAPI. Have in mind that this is a hack. But if you avoid using features added in OpenAPI 3.1.0, it might work for your use case.</p> <p>This is not passed as a parameter to the <code>ReadyAPI</code> class to avoid giving the false idea that ReadyAPI would generate a different OpenAPI schema. It is only available as an attribute.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\napp.openapi_version = \"3.0.2\"\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.webhooks","title":"webhooks  <code>instance-attribute</code>","text":"<pre><code>webhooks = webhooks or APIRouter()\n</code></pre> <p>The <code>app.webhooks</code> attribute is an <code>APIRouter</code> with the path operations that will be used just for documentation of webhooks.</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Webhooks.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.state","title":"state  <code>instance-attribute</code>","text":"<pre><code>state = State()\n</code></pre> <p>A state object for the application. This is the same object for the entire application, it doesn't change from request to request.</p> <p>You normally woudln't use this in ReadyAPI, for most of the cases you would instead use ReadyAPI dependencies.</p> <p>This is simply inherited from Starlette.</p> <p>Read more about it in the Starlette docs for Applications.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.dependency_overrides","title":"dependency_overrides  <code>instance-attribute</code>","text":"<pre><code>dependency_overrides = {}\n</code></pre> <p>A dictionary with overrides for the dependencies.</p> <p>Each key is the original dependency callable, and the value is the actual dependency that should be called.</p> <p>This is for testing, to replace expensive dependencies with testing versions.</p> <p>Read more about it in the ReadyAPI docs for Testing Dependencies with Overrides.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.openapi","title":"openapi","text":"<pre><code>openapi()\n</code></pre> <p>Generate the OpenAPI schema of the application. This is called by ReadyAPI internally.</p> <p>The first time it is called it stores the result in the attribute <code>app.openapi_schema</code>, and next times it is called, it just returns that same result. To avoid the cost of generating the schema every time.</p> <p>If you need to modify the generated OpenAPI schema, you could modify it.</p> <p>Read more in the ReadyAPI docs for OpenAPI.</p> Source code in <code>readyapi/applications.py</code> <pre><code>def openapi(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Generate the OpenAPI schema of the application. This is called by ReadyAPI\n    internally.\n\n    The first time it is called it stores the result in the attribute\n    `app.openapi_schema`, and next times it is called, it just returns that same\n    result. To avoid the cost of generating the schema every time.\n\n    If you need to modify the generated OpenAPI schema, you could modify it.\n\n    Read more in the\n    [ReadyAPI docs for OpenAPI](https://readyapi.khulnasoft.com/how-to/extending-openapi/).\n    \"\"\"\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(\n            title=self.title,\n            version=self.version,\n            openapi_version=self.openapi_version,\n            summary=self.summary,\n            description=self.description,\n            terms_of_service=self.terms_of_service,\n            contact=self.contact,\n            license_info=self.license_info,\n            routes=self.routes,\n            webhooks=self.webhooks.routes,\n            tags=self.openapi_tags,\n            servers=self.servers,\n            separate_input_output_schemas=self.separate_input_output_schemas,\n        )\n    return self.openapi_schema\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.websocket","title":"websocket","text":"<pre><code>websocket(path, name=None, *, dependencies=None)\n</code></pre> <p>Decorate a WebSocket function.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI, WebSocket\n\napp = ReadyAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>WebSocket path.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>A name for the WebSocket. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be used for this WebSocket.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def websocket(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            WebSocket path.\n            \"\"\"\n        ),\n    ],\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A name for the WebSocket. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be used for this\n            WebSocket.\n\n            Read more about it in the\n            [ReadyAPI docs for WebSockets](https://readyapi.khulnasoft.com/advanced/websockets/).\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Decorate a WebSocket function.\n\n    Read more about it in the\n    [ReadyAPI docs for WebSockets](https://readyapi.khulnasoft.com/advanced/websockets/).\n\n    **Example**\n\n    ```python\n    from readyapi import ReadyAPI, WebSocket\n\n    app = ReadyAPI()\n\n    @app.websocket(\"/ws\")\n    async def websocket_endpoint(websocket: WebSocket):\n        await websocket.accept()\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_api_websocket_route(\n            path,\n            func,\n            name=name,\n            dependencies=dependencies,\n        )\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.include_router","title":"include_router","text":"<pre><code>include_router(\n    router,\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    responses=None,\n    deprecated=None,\n    include_in_schema=True,\n    default_response_class=Default(JSONResponse),\n    callbacks=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Include an <code>APIRouter</code> in the same app.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.include_router--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\nfrom .users import users_router\n\napp = ReadyAPI()\n\napp.include_router(users_router)\n</code></pre> PARAMETER  DESCRIPTION <code>router</code> <p>The <code>APIRouter</code> to include.</p> <p> TYPE: <code>APIRouter</code> </p> <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p>Example</p> <pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_token_header\nfrom .internal import admin\n\napp = ReadyAPI()\n\napp.include_router(\n    admin.router,\n    dependencies=[Depends(get_token_header)],\n)\n</code></pre> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all the path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    deprecated=True,\n)\n</code></pre> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>Include (or not) all the path operations in this router in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    include_in_schema=False,\n)\n</code></pre> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>default_response_class</code> <p>Default response class to be used for the path operations in this router.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    default_response_class=ORJSONResponse,\n)\n</code></pre> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def include_router(\n    self,\n    router: Annotated[routing.APIRouter, Doc(\"The `APIRouter` to include.\")],\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n\n            **Example**\n\n            ```python\n            from readyapi import Depends, ReadyAPI\n\n            from .dependencies import get_token_header\n            from .internal import admin\n\n            app = ReadyAPI()\n\n            app.include_router(\n                admin.router,\n                dependencies=[Depends(get_token_header)],\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.khulnasoft.com/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all the *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                deprecated=True,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include (or not) all the *path operations* in this router in the\n            generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                include_in_schema=False,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = True,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Default response class to be used for the *path operations* in this\n            router.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#default-response-class).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n            from readyapi.responses import ORJSONResponse\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                default_response_class=ORJSONResponse,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    \"\"\"\n    Include an `APIRouter` in the same app.\n\n    Read more about it in the\n    [ReadyAPI docs for Bigger Applications](https://readyapi.khulnasoft.com/tutorial/bigger-applications/).\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    from .users import users_router\n\n    app = ReadyAPI()\n\n    app.include_router(users_router)\n    ```\n    \"\"\"\n    self.router.include_router(\n        router,\n        prefix=prefix,\n        tags=tags,\n        dependencies=dependencies,\n        responses=responses,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        default_response_class=default_response_class,\n        callbacks=callbacks,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.get","title":"get","text":"<pre><code>get(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP GET operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.get--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.get(\"/items/\")\ndef read_items():\n    return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def get(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP GET operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.get(\"/items/\")\n    def read_items():\n        return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n    ```\n    \"\"\"\n    return self.router.get(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.put","title":"put","text":"<pre><code>put(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PUT operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.put--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.put(\"/items/{item_id}\")\ndef replace_item(item_id: str, item: Item):\n    return {\"message\": \"Item replaced\", \"id\": item_id}\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def put(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PUT operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.put(\"/items/{item_id}\")\n    def replace_item(item_id: str, item: Item):\n        return {\"message\": \"Item replaced\", \"id\": item_id}\n    ```\n    \"\"\"\n    return self.router.put(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.post","title":"post","text":"<pre><code>post(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP POST operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.post--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return {\"message\": \"Item created\"}\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def post(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP POST operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.post(\"/items/\")\n    def create_item(item: Item):\n        return {\"message\": \"Item created\"}\n    ```\n    \"\"\"\n    return self.router.post(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.delete","title":"delete","text":"<pre><code>delete(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP DELETE operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.delete--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(item_id: str):\n    return {\"message\": \"Item deleted\"}\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def delete(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP DELETE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.delete(\"/items/{item_id}\")\n    def delete_item(item_id: str):\n        return {\"message\": \"Item deleted\"}\n    ```\n    \"\"\"\n    return self.router.delete(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.options","title":"options","text":"<pre><code>options(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP OPTIONS operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.options--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.options(\"/items/\")\ndef get_item_options():\n    return {\"additions\": [\"Aji\", \"Guacamole\"]}\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def options(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP OPTIONS operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.options(\"/items/\")\n    def get_item_options():\n        return {\"additions\": [\"Aji\", \"Guacamole\"]}\n    ```\n    \"\"\"\n    return self.router.options(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.head","title":"head","text":"<pre><code>head(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP HEAD operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.head--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n@app.head(\"/items/\", status_code=204)\ndef get_items_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def head(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP HEAD operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI, Response\n\n    app = ReadyAPI()\n\n    @app.head(\"/items/\", status_code=204)\n    def get_items_headers(response: Response):\n        response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n    ```\n    \"\"\"\n    return self.router.head(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.patch","title":"patch","text":"<pre><code>patch(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PATCH operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.patch--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.patch(\"/items/\")\ndef update_item(item: Item):\n    return {\"message\": \"Item updated in place\"}\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def patch(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PATCH operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.patch(\"/items/\")\n    def update_item(item: Item):\n        return {\"message\": \"Item updated in place\"}\n    ```\n    \"\"\"\n    return self.router.patch(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.trace","title":"trace","text":"<pre><code>trace(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP TRACE operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.trace--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.put(\"/items/{item_id}\")\ndef trace_item(item_id: str):\n    return None\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def trace(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP TRACE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.put(\"/items/{item_id}\")\n    def trace_item(item_id: str):\n        return None\n    ```\n    \"\"\"\n    return self.router.trace(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.on_event","title":"on_event","text":"<pre><code>on_event(event_type)\n</code></pre> <p>Add an event handler for the application.</p> <p><code>on_event</code> is deprecated, use <code>lifespan</code> event handlers instead.</p> <p>Read more about it in the ReadyAPI docs for Lifespan Events.</p> PARAMETER  DESCRIPTION <code>event_type</code> <p>The type of event. <code>startup</code> or <code>shutdown</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>@deprecated(\n    \"\"\"\n    on_event is deprecated, use lifespan event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.khulnasoft.com/advanced/events/).\n    \"\"\"\n)\ndef on_event(\n    self,\n    event_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of event. `startup` or `shutdown`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an event handler for the application.\n\n    `on_event` is deprecated, use `lifespan` event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.khulnasoft.com/advanced/events/#alternative-events-deprecated).\n    \"\"\"\n    return self.router.on_event(event_type)\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.middleware","title":"middleware","text":"<pre><code>middleware(middleware_type)\n</code></pre> <p>Add a middleware to the application.</p> <p>Read more about it in the ReadyAPI docs for Middleware.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.middleware--example","title":"Example","text":"<pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre> PARAMETER  DESCRIPTION <code>middleware_type</code> <p>The type of middleware. Currently only supports <code>http</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def middleware(\n    self,\n    middleware_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of middleware. Currently only supports `http`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a middleware to the application.\n\n    Read more about it in the\n    [ReadyAPI docs for Middleware](https://readyapi.khulnasoft.com/tutorial/middleware/).\n\n    ## Example\n\n    ```python\n    import time\n\n    from readyapi import ReadyAPI, Request\n\n    app = ReadyAPI()\n\n\n    @app.middleware(\"http\")\n    async def add_process_time_header(request: Request, call_next):\n        start_time = time.time()\n        response = await call_next(request)\n        process_time = time.time() - start_time\n        response.headers[\"X-Process-Time\"] = str(process_time)\n        return response\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_middleware(BaseHTTPMiddleware, dispatch=func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.exception_handler","title":"exception_handler","text":"<pre><code>exception_handler(exc_class_or_status_code)\n</code></pre> <p>Add an exception handler to the app.</p> <p>Read more about it in the ReadyAPI docs for Handling Errors.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.exception_handler--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import JSONResponse\n\n\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n\napp = ReadyAPI()\n\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n</code></pre> PARAMETER  DESCRIPTION <code>exc_class_or_status_code</code> <p>The Exception class this would handle, or a status code.</p> <p> TYPE: <code>Union[int, Type[Exception]]</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def exception_handler(\n    self,\n    exc_class_or_status_code: Annotated[\n        Union[int, Type[Exception]],\n        Doc(\n            \"\"\"\n            The Exception class this would handle, or a status code.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an exception handler to the app.\n\n    Read more about it in the\n    [ReadyAPI docs for Handling Errors](https://readyapi.khulnasoft.com/tutorial/handling-errors/).\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI, Request\n    from readyapi.responses import JSONResponse\n\n\n    class UnicornException(Exception):\n        def __init__(self, name: str):\n            self.name = name\n\n\n    app = ReadyAPI()\n\n\n    @app.exception_handler(UnicornException)\n    async def unicorn_exception_handler(request: Request, exc: UnicornException):\n        return JSONResponse(\n            status_code=418,\n            content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n        )\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_exception_handler(exc_class_or_status_code, func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/parameters/","title":"Request Parameters","text":"<p>Here's the reference information for the request parameters.</p> <p>These are the special functions that you can put in path operation function parameters or dependency functions with <code>Annotated</code> to get data from the request.</p> <p>It includes:</p> <ul> <li><code>Query()</code></li> <li><code>Path()</code></li> <li><code>Body()</code></li> <li><code>Cookie()</code></li> <li><code>Header()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>You can import them all directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Body, Cookie, File, Form, Header, Path, Query\n</code></pre>"},{"location":"reference/parameters/#readyapi.Query","title":"readyapi.Query","text":"<pre><code>Query(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER  DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Query(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Query(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Path","title":"readyapi.Path","text":"<pre><code>Path(\n    default=...,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> <p>Declare a path parameter for a path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Parameters and Numeric Validations.</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Path\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n):\n    return {\"item_id\": item_id}\n</code></pre> PARAMETER  DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>...</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Path(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = ...,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    \"\"\"\n    Declare a path parameter for a *path operation*.\n\n    Read more about it in the\n    [ReadyAPI docs for Path Parameters and Numeric Validations](https://readyapi.khulnasoft.com/tutorial/path-params-numeric-validations/).\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import ReadyAPI, Path\n\n    app = ReadyAPI()\n\n\n    @app.get(\"/items/{item_id}\")\n    async def read_items(\n        item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    ):\n        return {\"item_id\": item_id}\n    ```\n    \"\"\"\n    return params.Path(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Body","title":"readyapi.Body","text":"<pre><code>Body(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    embed=False,\n    media_type=\"application/json\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER  DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>embed</code> <p>When <code>embed</code> is <code>True</code>, the parameter will be expected in a JSON body as a key instead of being the JSON body itself.</p> <p>This happens automatically when more than one <code>Body</code> parameter is declared.</p> <p>Read more about it in the ReadyAPI docs for Body - Multiple Parameters.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'application/json'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Body(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    embed: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            When `embed` is `True`, the parameter will be expected in a JSON body as a\n            key instead of being the JSON body itself.\n\n            This happens automatically when more than one `Body` parameter is declared.\n\n            Read more about it in the\n            [ReadyAPI docs for Body - Multiple Parameters](https://readyapi.khulnasoft.com/tutorial/body-multiple-params/#embed-a-single-body-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/json\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Body(\n        default=default,\n        default_factory=default_factory,\n        embed=embed,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Cookie","title":"readyapi.Cookie","text":"<pre><code>Cookie(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER  DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Cookie(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Cookie(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Header","title":"readyapi.Header","text":"<pre><code>Header(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    convert_underscores=True,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER  DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>convert_underscores</code> <p>Automatically convert underscores to hyphens in the parameter field name.</p> <p>Read more about it in the ReadyAPI docs for Header Parameters</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Header(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    convert_underscores: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Automatically convert underscores to hyphens in the parameter field name.\n\n            Read more about it in the\n            [ReadyAPI docs for Header Parameters](https://readyapi.khulnasoft.com/tutorial/header-params/#automatic-conversion)\n            \"\"\"\n        ),\n    ] = True,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Header(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        convert_underscores=convert_underscores,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Form","title":"readyapi.Form","text":"<pre><code>Form(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    media_type=\"application/x-www-form-urlencoded\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER  DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'application/x-www-form-urlencoded'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Form(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/x-www-form-urlencoded\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Form(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.File","title":"readyapi.File","text":"<pre><code>File(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    media_type=\"multipart/form-data\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER  DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'multipart/form-data'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def File(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"multipart/form-data\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.File(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/status/","title":"Status Codes","text":"<p>You can import the <code>status</code> module from <code>readyapi</code>:</p> <pre><code>from readyapi import status\n</code></pre> <p><code>status</code> is provided directly by Starlette.</p> <p>It contains a group of named constants (variables) with integer status codes.</p> <p>For example:</p> <ul> <li>200: <code>status.HTTP_200_OK</code></li> <li>403: <code>status.HTTP_403_FORBIDDEN</code></li> <li>etc.</li> </ul> <p>It can be convenient to quickly access HTTP (and WebSocket) status codes in your app, using autocompletion for the name without having to remember the integer status codes by memory.</p> <p>Read more about it in the ReadyAPI docs about Response Status Code.</p>"},{"location":"reference/status/#example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", status_code=status.HTTP_418_IM_A_TEAPOT)\ndef read_items():\n    return [{\"name\": \"Plumbus\"}, {\"name\": \"Portal Gun\"}]\n</code></pre>"},{"location":"reference/status/#readyapi.status","title":"readyapi.status","text":"<p>HTTP codes See HTTP Status Code Registry: https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml</p> <p>And RFC 2324 - https://tools.ietf.org/html/rfc2324</p>"},{"location":"reference/status/#readyapi.status.HTTP_100_CONTINUE","title":"HTTP_100_CONTINUE  <code>module-attribute</code>","text":"<pre><code>HTTP_100_CONTINUE = 100\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_101_SWITCHING_PROTOCOLS","title":"HTTP_101_SWITCHING_PROTOCOLS  <code>module-attribute</code>","text":"<pre><code>HTTP_101_SWITCHING_PROTOCOLS = 101\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_102_PROCESSING","title":"HTTP_102_PROCESSING  <code>module-attribute</code>","text":"<pre><code>HTTP_102_PROCESSING = 102\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_103_EARLY_HINTS","title":"HTTP_103_EARLY_HINTS  <code>module-attribute</code>","text":"<pre><code>HTTP_103_EARLY_HINTS = 103\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_200_OK","title":"HTTP_200_OK  <code>module-attribute</code>","text":"<pre><code>HTTP_200_OK = 200\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_201_CREATED","title":"HTTP_201_CREATED  <code>module-attribute</code>","text":"<pre><code>HTTP_201_CREATED = 201\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_202_ACCEPTED","title":"HTTP_202_ACCEPTED  <code>module-attribute</code>","text":"<pre><code>HTTP_202_ACCEPTED = 202\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_203_NON_AUTHORITATIVE_INFORMATION","title":"HTTP_203_NON_AUTHORITATIVE_INFORMATION  <code>module-attribute</code>","text":"<pre><code>HTTP_203_NON_AUTHORITATIVE_INFORMATION = 203\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_204_NO_CONTENT","title":"HTTP_204_NO_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_204_NO_CONTENT = 204\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_205_RESET_CONTENT","title":"HTTP_205_RESET_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_205_RESET_CONTENT = 205\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_206_PARTIAL_CONTENT","title":"HTTP_206_PARTIAL_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_206_PARTIAL_CONTENT = 206\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_207_MULTI_STATUS","title":"HTTP_207_MULTI_STATUS  <code>module-attribute</code>","text":"<pre><code>HTTP_207_MULTI_STATUS = 207\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_208_ALREADY_REPORTED","title":"HTTP_208_ALREADY_REPORTED  <code>module-attribute</code>","text":"<pre><code>HTTP_208_ALREADY_REPORTED = 208\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_226_IM_USED","title":"HTTP_226_IM_USED  <code>module-attribute</code>","text":"<pre><code>HTTP_226_IM_USED = 226\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_300_MULTIPLE_CHOICES","title":"HTTP_300_MULTIPLE_CHOICES  <code>module-attribute</code>","text":"<pre><code>HTTP_300_MULTIPLE_CHOICES = 300\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_301_MOVED_PERMANENTLY","title":"HTTP_301_MOVED_PERMANENTLY  <code>module-attribute</code>","text":"<pre><code>HTTP_301_MOVED_PERMANENTLY = 301\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_302_FOUND","title":"HTTP_302_FOUND  <code>module-attribute</code>","text":"<pre><code>HTTP_302_FOUND = 302\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_303_SEE_OTHER","title":"HTTP_303_SEE_OTHER  <code>module-attribute</code>","text":"<pre><code>HTTP_303_SEE_OTHER = 303\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_304_NOT_MODIFIED","title":"HTTP_304_NOT_MODIFIED  <code>module-attribute</code>","text":"<pre><code>HTTP_304_NOT_MODIFIED = 304\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_305_USE_PROXY","title":"HTTP_305_USE_PROXY  <code>module-attribute</code>","text":"<pre><code>HTTP_305_USE_PROXY = 305\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_306_RESERVED","title":"HTTP_306_RESERVED  <code>module-attribute</code>","text":"<pre><code>HTTP_306_RESERVED = 306\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_307_TEMPORARY_REDIRECT","title":"HTTP_307_TEMPORARY_REDIRECT  <code>module-attribute</code>","text":"<pre><code>HTTP_307_TEMPORARY_REDIRECT = 307\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_308_PERMANENT_REDIRECT","title":"HTTP_308_PERMANENT_REDIRECT  <code>module-attribute</code>","text":"<pre><code>HTTP_308_PERMANENT_REDIRECT = 308\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_400_BAD_REQUEST","title":"HTTP_400_BAD_REQUEST  <code>module-attribute</code>","text":"<pre><code>HTTP_400_BAD_REQUEST = 400\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_401_UNAUTHORIZED","title":"HTTP_401_UNAUTHORIZED  <code>module-attribute</code>","text":"<pre><code>HTTP_401_UNAUTHORIZED = 401\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_402_PAYMENT_REQUIRED","title":"HTTP_402_PAYMENT_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_402_PAYMENT_REQUIRED = 402\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_403_FORBIDDEN","title":"HTTP_403_FORBIDDEN  <code>module-attribute</code>","text":"<pre><code>HTTP_403_FORBIDDEN = 403\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_404_NOT_FOUND","title":"HTTP_404_NOT_FOUND  <code>module-attribute</code>","text":"<pre><code>HTTP_404_NOT_FOUND = 404\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_405_METHOD_NOT_ALLOWED","title":"HTTP_405_METHOD_NOT_ALLOWED  <code>module-attribute</code>","text":"<pre><code>HTTP_405_METHOD_NOT_ALLOWED = 405\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_406_NOT_ACCEPTABLE","title":"HTTP_406_NOT_ACCEPTABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_406_NOT_ACCEPTABLE = 406\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_407_PROXY_AUTHENTICATION_REQUIRED","title":"HTTP_407_PROXY_AUTHENTICATION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_408_REQUEST_TIMEOUT","title":"HTTP_408_REQUEST_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>HTTP_408_REQUEST_TIMEOUT = 408\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_409_CONFLICT","title":"HTTP_409_CONFLICT  <code>module-attribute</code>","text":"<pre><code>HTTP_409_CONFLICT = 409\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_410_GONE","title":"HTTP_410_GONE  <code>module-attribute</code>","text":"<pre><code>HTTP_410_GONE = 410\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_411_LENGTH_REQUIRED","title":"HTTP_411_LENGTH_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_411_LENGTH_REQUIRED = 411\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_412_PRECONDITION_FAILED","title":"HTTP_412_PRECONDITION_FAILED  <code>module-attribute</code>","text":"<pre><code>HTTP_412_PRECONDITION_FAILED = 412\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_413_REQUEST_ENTITY_TOO_LARGE","title":"HTTP_413_REQUEST_ENTITY_TOO_LARGE  <code>module-attribute</code>","text":"<pre><code>HTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_414_REQUEST_URI_TOO_LONG","title":"HTTP_414_REQUEST_URI_TOO_LONG  <code>module-attribute</code>","text":"<pre><code>HTTP_414_REQUEST_URI_TOO_LONG = 414\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_415_UNSUPPORTED_MEDIA_TYPE","title":"HTTP_415_UNSUPPORTED_MEDIA_TYPE  <code>module-attribute</code>","text":"<pre><code>HTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE","title":"HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_417_EXPECTATION_FAILED","title":"HTTP_417_EXPECTATION_FAILED  <code>module-attribute</code>","text":"<pre><code>HTTP_417_EXPECTATION_FAILED = 417\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_418_IM_A_TEAPOT","title":"HTTP_418_IM_A_TEAPOT  <code>module-attribute</code>","text":"<pre><code>HTTP_418_IM_A_TEAPOT = 418\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_421_MISDIRECTED_REQUEST","title":"HTTP_421_MISDIRECTED_REQUEST  <code>module-attribute</code>","text":"<pre><code>HTTP_421_MISDIRECTED_REQUEST = 421\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_422_UNPROCESSABLE_ENTITY","title":"HTTP_422_UNPROCESSABLE_ENTITY  <code>module-attribute</code>","text":"<pre><code>HTTP_422_UNPROCESSABLE_ENTITY = 422\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_423_LOCKED","title":"HTTP_423_LOCKED  <code>module-attribute</code>","text":"<pre><code>HTTP_423_LOCKED = 423\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_424_FAILED_DEPENDENCY","title":"HTTP_424_FAILED_DEPENDENCY  <code>module-attribute</code>","text":"<pre><code>HTTP_424_FAILED_DEPENDENCY = 424\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_425_TOO_EARLY","title":"HTTP_425_TOO_EARLY  <code>module-attribute</code>","text":"<pre><code>HTTP_425_TOO_EARLY = 425\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_426_UPGRADE_REQUIRED","title":"HTTP_426_UPGRADE_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_426_UPGRADE_REQUIRED = 426\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_428_PRECONDITION_REQUIRED","title":"HTTP_428_PRECONDITION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_428_PRECONDITION_REQUIRED = 428\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_429_TOO_MANY_REQUESTS","title":"HTTP_429_TOO_MANY_REQUESTS  <code>module-attribute</code>","text":"<pre><code>HTTP_429_TOO_MANY_REQUESTS = 429\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE","title":"HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE  <code>module-attribute</code>","text":"<pre><code>HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS","title":"HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS  <code>module-attribute</code>","text":"<pre><code>HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_500_INTERNAL_SERVER_ERROR","title":"HTTP_500_INTERNAL_SERVER_ERROR  <code>module-attribute</code>","text":"<pre><code>HTTP_500_INTERNAL_SERVER_ERROR = 500\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_501_NOT_IMPLEMENTED","title":"HTTP_501_NOT_IMPLEMENTED  <code>module-attribute</code>","text":"<pre><code>HTTP_501_NOT_IMPLEMENTED = 501\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_502_BAD_GATEWAY","title":"HTTP_502_BAD_GATEWAY  <code>module-attribute</code>","text":"<pre><code>HTTP_502_BAD_GATEWAY = 502\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_503_SERVICE_UNAVAILABLE","title":"HTTP_503_SERVICE_UNAVAILABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_503_SERVICE_UNAVAILABLE = 503\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_504_GATEWAY_TIMEOUT","title":"HTTP_504_GATEWAY_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>HTTP_504_GATEWAY_TIMEOUT = 504\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_505_HTTP_VERSION_NOT_SUPPORTED","title":"HTTP_505_HTTP_VERSION_NOT_SUPPORTED  <code>module-attribute</code>","text":"<pre><code>HTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_506_VARIANT_ALSO_NEGOTIATES","title":"HTTP_506_VARIANT_ALSO_NEGOTIATES  <code>module-attribute</code>","text":"<pre><code>HTTP_506_VARIANT_ALSO_NEGOTIATES = 506\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_507_INSUFFICIENT_STORAGE","title":"HTTP_507_INSUFFICIENT_STORAGE  <code>module-attribute</code>","text":"<pre><code>HTTP_507_INSUFFICIENT_STORAGE = 507\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_508_LOOP_DETECTED","title":"HTTP_508_LOOP_DETECTED  <code>module-attribute</code>","text":"<pre><code>HTTP_508_LOOP_DETECTED = 508\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_510_NOT_EXTENDED","title":"HTTP_510_NOT_EXTENDED  <code>module-attribute</code>","text":"<pre><code>HTTP_510_NOT_EXTENDED = 510\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_511_NETWORK_AUTHENTICATION_REQUIRED","title":"HTTP_511_NETWORK_AUTHENTICATION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511\n</code></pre> <p>WebSocket codes https://www.iana.org/assignments/websocket/websocket.xml#close-code-number https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent</p>"},{"location":"reference/status/#readyapi.status.WS_1000_NORMAL_CLOSURE","title":"WS_1000_NORMAL_CLOSURE  <code>module-attribute</code>","text":"<pre><code>WS_1000_NORMAL_CLOSURE = 1000\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1001_GOING_AWAY","title":"WS_1001_GOING_AWAY  <code>module-attribute</code>","text":"<pre><code>WS_1001_GOING_AWAY = 1001\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1002_PROTOCOL_ERROR","title":"WS_1002_PROTOCOL_ERROR  <code>module-attribute</code>","text":"<pre><code>WS_1002_PROTOCOL_ERROR = 1002\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1003_UNSUPPORTED_DATA","title":"WS_1003_UNSUPPORTED_DATA  <code>module-attribute</code>","text":"<pre><code>WS_1003_UNSUPPORTED_DATA = 1003\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1005_NO_STATUS_RCVD","title":"WS_1005_NO_STATUS_RCVD  <code>module-attribute</code>","text":"<pre><code>WS_1005_NO_STATUS_RCVD = 1005\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1006_ABNORMAL_CLOSURE","title":"WS_1006_ABNORMAL_CLOSURE  <code>module-attribute</code>","text":"<pre><code>WS_1006_ABNORMAL_CLOSURE = 1006\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1007_INVALID_FRAME_PAYLOAD_DATA","title":"WS_1007_INVALID_FRAME_PAYLOAD_DATA  <code>module-attribute</code>","text":"<pre><code>WS_1007_INVALID_FRAME_PAYLOAD_DATA = 1007\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1008_POLICY_VIOLATION","title":"WS_1008_POLICY_VIOLATION  <code>module-attribute</code>","text":"<pre><code>WS_1008_POLICY_VIOLATION = 1008\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1009_MESSAGE_TOO_BIG","title":"WS_1009_MESSAGE_TOO_BIG  <code>module-attribute</code>","text":"<pre><code>WS_1009_MESSAGE_TOO_BIG = 1009\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1010_MANDATORY_EXT","title":"WS_1010_MANDATORY_EXT  <code>module-attribute</code>","text":"<pre><code>WS_1010_MANDATORY_EXT = 1010\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1011_INTERNAL_ERROR","title":"WS_1011_INTERNAL_ERROR  <code>module-attribute</code>","text":"<pre><code>WS_1011_INTERNAL_ERROR = 1011\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1012_SERVICE_RESTART","title":"WS_1012_SERVICE_RESTART  <code>module-attribute</code>","text":"<pre><code>WS_1012_SERVICE_RESTART = 1012\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1013_TRY_AGAIN_LATER","title":"WS_1013_TRY_AGAIN_LATER  <code>module-attribute</code>","text":"<pre><code>WS_1013_TRY_AGAIN_LATER = 1013\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1014_BAD_GATEWAY","title":"WS_1014_BAD_GATEWAY  <code>module-attribute</code>","text":"<pre><code>WS_1014_BAD_GATEWAY = 1014\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1015_TLS_HANDSHAKE","title":"WS_1015_TLS_HANDSHAKE  <code>module-attribute</code>","text":"<pre><code>WS_1015_TLS_HANDSHAKE = 1015\n</code></pre>"},{"location":"reference/uploadfile/","title":"<code>UploadFile</code> class","text":"<p>You can define path operation function parameters to be of the type <code>UploadFile</code> to receive files from the request.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import UploadFile\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile","title":"readyapi.UploadFile","text":"<pre><code>UploadFile(file, *, size=None, filename=None, headers=None)\n</code></pre> <p>             Bases: <code>UploadFile</code></p> <p>A file uploaded in a request.</p> <p>Define it as a path operation function (or dependency) parameter.</p> <p>If you are using a regular <code>def</code> function, you can use the <code>upload_file.file</code> attribute to access the raw standard Python file (blocking, not async), useful and needed for non-async code.</p> <p>Read more about it in the ReadyAPI docs for Request Files.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, File, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> PARAMETER  DESCRIPTION <code>file</code> <p> TYPE: <code>BinaryIO</code> </p> <code>size</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>filename</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>Headers | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/datastructures.py</code> <pre><code>def __init__(\n    self,\n    file: typing.BinaryIO,\n    *,\n    size: int | None = None,\n    filename: str | None = None,\n    headers: Headers | None = None,\n) -&gt; None:\n    self.filename = filename\n    self.file = file\n    self.size = size\n    self.headers = headers or Headers()\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.file","title":"file  <code>instance-attribute</code>","text":"<pre><code>file\n</code></pre> <p>The standard Python file object (non-async).</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.filename","title":"filename  <code>instance-attribute</code>","text":"<pre><code>filename\n</code></pre> <p>The original file name.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.size","title":"size  <code>instance-attribute</code>","text":"<pre><code>size\n</code></pre> <p>The size of the file in bytes.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers\n</code></pre> <p>The headers of the request.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.content_type","title":"content_type  <code>instance-attribute</code>","text":"<pre><code>content_type\n</code></pre> <p>The content type of the request, from the headers.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.read","title":"read  <code>async</code>","text":"<pre><code>read(size=-1)\n</code></pre> <p>Read some bytes from the file.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER  DESCRIPTION <code>size</code> <p>The number of bytes to read from the file.</p> <p> TYPE: <code>int</code> DEFAULT: <code>-1</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def read(\n    self,\n    size: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            The number of bytes to read from the file.\n            \"\"\"\n        ),\n    ] = -1,\n) -&gt; bytes:\n    \"\"\"\n    Read some bytes from the file.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().read(size)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.write","title":"write  <code>async</code>","text":"<pre><code>write(data)\n</code></pre> <p>Write some bytes to the file.</p> <p>You normally wouldn't use this from a file you read in a request.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER  DESCRIPTION <code>data</code> <p>The bytes to write to the file.</p> <p> TYPE: <code>bytes</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def write(\n    self,\n    data: Annotated[\n        bytes,\n        Doc(\n            \"\"\"\n            The bytes to write to the file.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\n    Write some bytes to the file.\n\n    You normally wouldn't use this from a file you read in a request.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().write(data)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.seek","title":"seek  <code>async</code>","text":"<pre><code>seek(offset)\n</code></pre> <p>Move to a position in the file.</p> <p>Any next read or write will be done from that position.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER  DESCRIPTION <code>offset</code> <p>The position in bytes to seek to in the file.</p> <p> TYPE: <code>int</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def seek(\n    self,\n    offset: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            The position in bytes to seek to in the file.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\n    Move to a position in the file.\n\n    Any next read or write will be done from that position.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().seek(offset)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close the file.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"\n    Close the file.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().close()\n</code></pre>"},{"location":"reference/exceptions/","title":"Exceptions - <code>HTTPException</code> and <code>WebSocketException</code>","text":"<p>These are the exceptions that you can raise to show errors to the client.</p> <p>When you raise an exception, as would happen with normal Python, the rest of the execution is aborted. This way you can raise these exceptions from anywhere in the code to abort a request and show the error to the client.</p> <p>You can use:</p> <ul> <li><code>HTTPException</code></li> <li><code>WebSocketException</code></li> </ul> <p>These exceptions can be imported directly from <code>readyapi</code>:</p> <pre><code>from readyapi import HTTPException, WebSocketException\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException","title":"readyapi.HTTPException","text":"<pre><code>HTTPException(status_code, detail=None, headers=None)\n</code></pre> <p>             Bases: <code>HTTPException</code></p> <p>An HTTP exception you can raise in your own code to show errors to the client.</p> <p>This is for client errors, invalid authentication, invalid data, etc. Not for server errors in your code.</p> <p>Read more about it in the ReadyAPI docs for Handling Errors.</p>"},{"location":"reference/exceptions/#readyapi.HTTPException--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, HTTPException\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre> PARAMETER  DESCRIPTION <code>status_code</code> <p>HTTP status code to send to the client.</p> <p> TYPE: <code>int</code> </p> <code>detail</code> <p>Any data to be sent to the client in the <code>detail</code> key of the JSON response.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p>Any headers to send to the client in the response.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    status_code: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            HTTP status code to send to the client.\n            \"\"\"\n        ),\n    ],\n    detail: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Any data to be sent to the client in the `detail` key of the JSON\n            response.\n            \"\"\"\n        ),\n    ] = None,\n    headers: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            Any headers to send to the client in the response.\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    super().__init__(status_code=status_code, detail=detail, headers=headers)\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.detail","title":"detail  <code>instance-attribute</code>","text":"<pre><code>detail = detail\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers = headers\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException","title":"readyapi.WebSocketException","text":"<pre><code>WebSocketException(code, reason=None)\n</code></pre> <p>             Bases: <code>WebSocketException</code></p> <p>A WebSocket exception you can raise in your own code to show errors to the client.</p> <p>This is for client errors, invalid authentication, invalid data, etc. Not for server errors in your code.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p>"},{"location":"reference/exceptions/#readyapi.WebSocketException--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import (\n    Cookie,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\n\napp = ReadyAPI()\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    session: Annotated[str | None, Cookie()] = None,\n    item_id: str,\n):\n    if session is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Session cookie is: {session}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> PARAMETER  DESCRIPTION <code>code</code> <p>A closing code from the valid codes defined in the specification.</p> <p> TYPE: <code>int</code> </p> <code>reason</code> <p>The reason to close the WebSocket connection.</p> <p>It is UTF-8-encoded data. The interpretation of the reason is up to the application, it is not specified by the WebSocket specification.</p> <p>It could contain text that could be human-readable or interpretable by the client code, etc.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    code: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            A closing code from the\n            [valid codes defined in the specification](https://datatracker.ietf.org/doc/html/rfc6455#section-7.4.1).\n            \"\"\"\n        ),\n    ],\n    reason: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            The reason to close the WebSocket connection.\n\n            It is UTF-8-encoded data. The interpretation of the reason is up to the\n            application, it is not specified by the WebSocket specification.\n\n            It could contain text that could be human-readable or interpretable\n            by the client code, etc.\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    super().__init__(code=code, reason=reason)\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/dependencies/","title":"Dependencies - <code>Depends()</code> and <code>Security()</code>","text":""},{"location":"reference/dependencies/#depends","title":"<code>Depends()</code>","text":"<p>Dependencies are handled mainly with the special function <code>Depends()</code> that takes a callable.</p> <p>Here is the reference for it and its parameters.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Depends\n</code></pre>"},{"location":"reference/dependencies/#readyapi.Depends","title":"readyapi.Depends","text":"<pre><code>Depends(dependency=None, *, use_cache=True)\n</code></pre> <p>Declare a ReadyAPI dependency.</p> <p>It takes a single \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you.</p> <p>Read more about it in the ReadyAPI docs for Dependencies.</p> <p>Example</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> PARAMETER  DESCRIPTION <code>dependency</code> <p>A \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you, just pass the object directly.</p> <p> TYPE: <code>Optional[Callable[..., Any]]</code> DEFAULT: <code>None</code> </p> <code>use_cache</code> <p>By default, after a dependency is called the first time in a request, if the dependency is declared again for the rest of the request (for example if the dependency is needed by several dependencies), the value will be re-used for the rest of the request.</p> <p>Set <code>use_cache</code> to <code>False</code> to disable this behavior and ensure the dependency is called again (if declared more than once) in the same request.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Depends(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, ReadyAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Declare a ReadyAPI dependency.\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, ReadyAPI will call it for you.\n\n    Read more about it in the\n    [ReadyAPI docs for Dependencies](https://readyapi.khulnasoft.com/tutorial/dependencies/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import Depends, ReadyAPI\n\n    app = ReadyAPI()\n\n\n    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n        return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n    @app.get(\"/items/\")\n    async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n        return commons\n    ```\n    \"\"\"\n    return params.Depends(dependency=dependency, use_cache=use_cache)\n</code></pre>"},{"location":"reference/dependencies/#security","title":"<code>Security()</code>","text":"<p>For many scenarios, you can handle security (authorization, authentication, etc.) with dependencies, using <code>Depends()</code>.</p> <p>But when you want to also declare OAuth2 scopes, you can use <code>Security()</code> instead of <code>Depends()</code>.</p> <p>You can import <code>Security()</code> directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Security\n</code></pre>"},{"location":"reference/dependencies/#readyapi.Security","title":"readyapi.Security","text":"<pre><code>Security(dependency=None, *, scopes=None, use_cache=True)\n</code></pre> <p>Declare a ReadyAPI Security dependency.</p> <p>The only difference with a regular dependency is that it can declare OAuth2 scopes that will be integrated with OpenAPI and the automatic UI docs (by default at <code>/docs</code>).</p> <p>It takes a single \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you.</p> <p>Read more about it in the ReadyAPI docs for Security and in the ReadyAPI docs for OAuth2 scopes.</p> <p>Example</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom .db import User\nfrom .security import get_current_active_user\n\napp = ReadyAPI()\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> PARAMETER  DESCRIPTION <code>dependency</code> <p>A \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you, just pass the object directly.</p> <p> TYPE: <code>Optional[Callable[..., Any]]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>OAuth2 scopes required for the path operation that uses this Security dependency.</p> <p>The term \"scope\" comes from the OAuth2 specification, it seems to be intentionaly vague and interpretable. It normally refers to permissions, in cases to roles.</p> <p>These scopes are integrated with OpenAPI (and the API docs at <code>/docs</code>). So they are visible in the OpenAPI specification. )</p> <p> TYPE: <code>Optional[Sequence[str]]</code> DEFAULT: <code>None</code> </p> <code>use_cache</code> <p>By default, after a dependency is called the first time in a request, if the dependency is declared again for the rest of the request (for example if the dependency is needed by several dependencies), the value will be re-used for the rest of the request.</p> <p>Set <code>use_cache</code> to <code>False</code> to disable this behavior and ensure the dependency is called again (if declared more than once) in the same request.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Security(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, ReadyAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    scopes: Annotated[\n        Optional[Sequence[str]],\n        Doc(\n            \"\"\"\n            OAuth2 scopes required for the *path operation* that uses this Security\n            dependency.\n\n            The term \"scope\" comes from the OAuth2 specification, it seems to be\n            intentionaly vague and interpretable. It normally refers to permissions,\n            in cases to roles.\n\n            These scopes are integrated with OpenAPI (and the API docs at `/docs`).\n            So they are visible in the OpenAPI specification.\n            )\n            \"\"\"\n        ),\n    ] = None,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Declare a ReadyAPI Security dependency.\n\n    The only difference with a regular dependency is that it can declare OAuth2\n    scopes that will be integrated with OpenAPI and the automatic UI docs (by default\n    at `/docs`).\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, ReadyAPI will call it for you.\n\n    Read more about it in the\n    [ReadyAPI docs for Security](https://readyapi.khulnasoft.com/tutorial/security/) and\n    in the\n    [ReadyAPI docs for OAuth2 scopes](https://readyapi.khulnasoft.com/advanced/security/oauth2-scopes/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import Depends, ReadyAPI\n\n    from .db import User\n    from .security import get_current_active_user\n\n    app = ReadyAPI()\n\n    @app.get(\"/users/me/items/\")\n    async def read_own_items(\n        current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n    ):\n        return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n    ```\n    \"\"\"\n    return params.Security(dependency=dependency, scopes=scopes, use_cache=use_cache)\n</code></pre>"},{"location":"reference/apirouter/","title":"<code>APIRouter</code> class","text":"<p>Here's the reference information for the <code>APIRouter</code> class, with all its parameters, attributes and methods.</p> <p>You can import the <code>APIRouter</code> class directly from <code>readyapi</code>:</p> <pre><code>from readyapi import APIRouter\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter","title":"readyapi.APIRouter","text":"<pre><code>APIRouter(\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    responses=None,\n    callbacks=None,\n    routes=None,\n    redirect_slashes=True,\n    default=None,\n    dependency_overrides_provider=None,\n    route_class=APIRoute,\n    on_startup=None,\n    on_shutdown=None,\n    lifespan=None,\n    deprecated=None,\n    include_in_schema=True,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>             Bases: <code>Router</code></p> <p><code>APIRouter</code> class, used to group path operations, for example to structure an app in multiple files. It would then be included in the <code>ReadyAPI</code> app, or in another <code>APIRouter</code> (ultimately included in the app).</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\napp.include_router(router)\n</code></pre> PARAMETER  DESCRIPTION <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>routes</code> <p>You normally wouldn't use this parameter with ReadyAPI, it is inherited from Starlette and supported for compatibility.</p> <p>In ReadyAPI, you normally would use the path operation methods, like <code>router.get()</code>, <code>router.post()</code>, etc. Note: you probably shouldn't use this parameter, it is inherited from Starlette and supported for compatibility.</p> <p>A list of routes to serve incoming HTTP and WebSocket requests.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>redirect_slashes</code> <p>Whether to detect and redirect slashes in URLs when the client doesn't use the same format.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>default</code> <p>Default function handler for this router. Used to handle 404 Not Found errors.</p> <p> TYPE: <code>Optional[ASGIApp]</code> DEFAULT: <code>None</code> </p> <code>dependency_overrides_provider</code> <p>Only used internally by ReadyAPI to handle dependency overrides.</p> <p>You shouldn't need to use it. It normally points to the <code>ReadyAPI</code> app object.</p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>None</code> </p> <code>route_class</code> <p>Custom route (path operation) class to be used by this router.</p> <p>Read more about it in the ReadyAPI docs for Custom Request and APIRoute class.</p> <p> TYPE: <code>Type[APIRoute]</code> DEFAULT: <code>APIRoute</code> </p> <code>on_startup</code> <p>A list of startup event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>on_shutdown</code> <p>A list of shutdown event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifespan</code> <p>A <code>Lifespan</code> context manager handler. This replaces <code>startup</code> and <code>shutdown</code> functions with a single context manager.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Lifespan[Any]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) all the path operations in this router in the generated OpenAPI.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def __init__(\n    self,\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#default-response-class).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.khulnasoft.com/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    routes: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            **Note**: you probably shouldn't use this parameter, it is inherited\n            from Starlette and supported for compatibility.\n\n            ---\n\n            A list of routes to serve incoming HTTP and WebSocket requests.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            You normally wouldn't use this parameter with ReadyAPI, it is inherited\n            from Starlette and supported for compatibility.\n\n            In ReadyAPI, you normally would use the *path operation methods*,\n            like `router.get()`, `router.post()`, etc.\n            \"\"\"\n        ),\n    ] = None,\n    redirect_slashes: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to detect and redirect slashes in URLs when the client doesn't\n            use the same format.\n            \"\"\"\n        ),\n    ] = True,\n    default: Annotated[\n        Optional[ASGIApp],\n        Doc(\n            \"\"\"\n            Default function handler for this router. Used to handle\n            404 Not Found errors.\n            \"\"\"\n        ),\n    ] = None,\n    dependency_overrides_provider: Annotated[\n        Optional[Any],\n        Doc(\n            \"\"\"\n            Only used internally by ReadyAPI to handle dependency overrides.\n\n            You shouldn't need to use it. It normally points to the `ReadyAPI` app\n            object.\n            \"\"\"\n        ),\n    ] = None,\n    route_class: Annotated[\n        Type[APIRoute],\n        Doc(\n            \"\"\"\n            Custom route (*path operation*) class to be used by this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Request and APIRoute class](https://readyapi.khulnasoft.com/how-to/custom-request-and-route/#custom-apiroute-class-in-a-router).\n            \"\"\"\n        ),\n    ] = APIRoute,\n    on_startup: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of startup event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the [ReadyAPI docs for `lifespan`](https://readyapi.khulnasoft.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    on_shutdown: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of shutdown event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.khulnasoft.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    # the generic to Lifespan[AppType] is the type of the top level application\n    # which the router cannot know statically, so we use typing.Any\n    lifespan: Annotated[\n        Optional[Lifespan[Any]],\n        Doc(\n            \"\"\"\n            A `Lifespan` context manager handler. This replaces `startup` and\n            `shutdown` functions with a single context manager.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.khulnasoft.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) all the *path operations* in this router in the\n            generated OpenAPI.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    super().__init__(\n        routes=routes,\n        redirect_slashes=redirect_slashes,\n        default=default,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n        lifespan=lifespan,\n    )\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\n            \"/\"\n        ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    self.prefix = prefix\n    self.tags: List[Union[str, Enum]] = tags or []\n    self.dependencies = list(dependencies or [])\n    self.deprecated = deprecated\n    self.include_in_schema = include_in_schema\n    self.responses = responses or {}\n    self.callbacks = callbacks or []\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class\n    self.generate_unique_id_function = generate_unique_id_function\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.websocket","title":"websocket","text":"<pre><code>websocket(path, name=None, *, dependencies=None)\n</code></pre> <p>Decorate a WebSocket function.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p>Example</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.websocket--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI, WebSocket\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n\napp.include_router(router)\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>WebSocket path.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>A name for the WebSocket. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be used for this WebSocket.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def websocket(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            WebSocket path.\n            \"\"\"\n        ),\n    ],\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A name for the WebSocket. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be used for this\n            WebSocket.\n\n            Read more about it in the\n            [ReadyAPI docs for WebSockets](https://readyapi.khulnasoft.com/advanced/websockets/).\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Decorate a WebSocket function.\n\n    Read more about it in the\n    [ReadyAPI docs for WebSockets](https://readyapi.khulnasoft.com/advanced/websockets/).\n\n    **Example**\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI, WebSocket\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.websocket(\"/ws\")\n    async def websocket_endpoint(websocket: WebSocket):\n        await websocket.accept()\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n\n    app.include_router(router)\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_api_websocket_route(\n            path, func, name=name, dependencies=dependencies\n        )\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.include_router","title":"include_router","text":"<pre><code>include_router(\n    router,\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    responses=None,\n    callbacks=None,\n    deprecated=None,\n    include_in_schema=True,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Include another <code>APIRouter</code> in the same current <code>APIRouter</code>.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.include_router--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\ninternal_router = APIRouter()\nusers_router = APIRouter()\n\n@users_router.get(\"/users/\")\ndef read_users():\n    return [{\"name\": \"Rick\"}, {\"name\": \"Morty\"}]\n\ninternal_router.include_router(users_router)\napp.include_router(internal_router)\n</code></pre> PARAMETER  DESCRIPTION <code>router</code> <p>The <code>APIRouter</code> to include.</p> <p> TYPE: <code>APIRouter</code> </p> <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>Include (or not) all the path operations in this router in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def include_router(\n    self,\n    router: Annotated[\"APIRouter\", Doc(\"The `APIRouter` to include.\")],\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#default-response-class).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.khulnasoft.com/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include (or not) all the *path operations* in this router in the\n            generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    \"\"\"\n    Include another `APIRouter` in the same current `APIRouter`.\n\n    Read more about it in the\n    [ReadyAPI docs for Bigger Applications](https://readyapi.khulnasoft.com/tutorial/bigger-applications/).\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    internal_router = APIRouter()\n    users_router = APIRouter()\n\n    @users_router.get(\"/users/\")\n    def read_users():\n        return [{\"name\": \"Rick\"}, {\"name\": \"Morty\"}]\n\n    internal_router.include_router(users_router)\n    app.include_router(internal_router)\n    ```\n    \"\"\"\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\n            \"/\"\n        ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, \"path\")  # noqa: B009\n            name = getattr(r, \"name\", \"unknown\")\n            if path is not None and not path:\n                raise ReadyAPIError(\n                    f\"Prefix and path cannot be both empty (path operation: {name})\"\n                )\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            use_response_class = get_value_or_default(\n                route.response_class,\n                router.default_response_class,\n                default_response_class,\n                self.default_response_class,\n            )\n            current_tags = []\n            if tags:\n                current_tags.extend(tags)\n            if route.tags:\n                current_tags.extend(route.tags)\n            current_dependencies: List[params.Depends] = []\n            if dependencies:\n                current_dependencies.extend(dependencies)\n            if route.dependencies:\n                current_dependencies.extend(route.dependencies)\n            current_callbacks = []\n            if callbacks:\n                current_callbacks.extend(callbacks)\n            if route.callbacks:\n                current_callbacks.extend(route.callbacks)\n            current_generate_unique_id = get_value_or_default(\n                route.generate_unique_id_function,\n                router.generate_unique_id_function,\n                generate_unique_id_function,\n                self.generate_unique_id_function,\n            )\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=current_tags,\n                dependencies=current_dependencies,\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=combined_responses,\n                deprecated=route.deprecated or deprecated or self.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                response_model_include=route.response_model_include,\n                response_model_exclude=route.response_model_exclude,\n                response_model_by_alias=route.response_model_by_alias,\n                response_model_exclude_unset=route.response_model_exclude_unset,\n                response_model_exclude_defaults=route.response_model_exclude_defaults,\n                response_model_exclude_none=route.response_model_exclude_none,\n                include_in_schema=route.include_in_schema\n                and self.include_in_schema\n                and include_in_schema,\n                response_class=use_response_class,\n                name=route.name,\n                route_class_override=type(route),\n                callbacks=current_callbacks,\n                openapi_extra=route.openapi_extra,\n                generate_unique_id_function=current_generate_unique_id,\n            )\n        elif isinstance(route, routing.Route):\n            methods = list(route.methods or [])\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=methods,\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n        elif isinstance(route, APIWebSocketRoute):\n            current_dependencies = []\n            if dependencies:\n                current_dependencies.extend(dependencies)\n            if route.dependencies:\n                current_dependencies.extend(route.dependencies)\n            self.add_api_websocket_route(\n                prefix + route.path,\n                route.endpoint,\n                dependencies=current_dependencies,\n                name=route.name,\n            )\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n    for handler in router.on_startup:\n        self.add_event_handler(\"startup\", handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler(\"shutdown\", handler)\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.get","title":"get","text":"<pre><code>get(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP GET operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.get--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.get(\"/items/\")\ndef read_items():\n    return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\napp.include_router(router)\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def get(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP GET operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.get(\"/items/\")\n    def read_items():\n        return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"GET\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.put","title":"put","text":"<pre><code>put(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PUT operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.put--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.put(\"/items/{item_id}\")\ndef replace_item(item_id: str, item: Item):\n    return {\"message\": \"Item replaced\", \"id\": item_id}\n\napp.include_router(router)\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def put(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PUT operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.put(\"/items/{item_id}\")\n    def replace_item(item_id: str, item: Item):\n        return {\"message\": \"Item replaced\", \"id\": item_id}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"PUT\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.post","title":"post","text":"<pre><code>post(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP POST operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.post--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.post(\"/items/\")\ndef create_item(item: Item):\n    return {\"message\": \"Item created\"}\n\napp.include_router(router)\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def post(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP POST operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.post(\"/items/\")\n    def create_item(item: Item):\n        return {\"message\": \"Item created\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"POST\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.delete","title":"delete","text":"<pre><code>delete(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP DELETE operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.delete--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.delete(\"/items/{item_id}\")\ndef delete_item(item_id: str):\n    return {\"message\": \"Item deleted\"}\n\napp.include_router(router)\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def delete(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP DELETE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.delete(\"/items/{item_id}\")\n    def delete_item(item_id: str):\n        return {\"message\": \"Item deleted\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"DELETE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.options","title":"options","text":"<pre><code>options(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP OPTIONS operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.options--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.options(\"/items/\")\ndef get_item_options():\n    return {\"additions\": [\"Aji\", \"Guacamole\"]}\n\napp.include_router(router)\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def options(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP OPTIONS operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.options(\"/items/\")\n    def get_item_options():\n        return {\"additions\": [\"Aji\", \"Guacamole\"]}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"OPTIONS\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.head","title":"head","text":"<pre><code>head(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP HEAD operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.head--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.head(\"/items/\", status_code=204)\ndef get_items_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n\napp.include_router(router)\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def head(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP HEAD operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.head(\"/items/\", status_code=204)\n    def get_items_headers(response: Response):\n        response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"HEAD\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.patch","title":"patch","text":"<pre><code>patch(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PATCH operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.patch--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.patch(\"/items/\")\ndef update_item(item: Item):\n    return {\"message\": \"Item updated in place\"}\n\napp.include_router(router)\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def patch(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PATCH operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.patch(\"/items/\")\n    def update_item(item: Item):\n        return {\"message\": \"Item updated in place\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"PATCH\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.trace","title":"trace","text":"<pre><code>trace(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP TRACE operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.trace--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.trace(\"/items/{item_id}\")\ndef trace_item(item_id: str):\n    return None\n\napp.include_router(router)\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def trace(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP TRACE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.trace(\"/items/{item_id}\")\n    def trace_item(item_id: str):\n        return None\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"TRACE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.on_event","title":"on_event","text":"<pre><code>on_event(event_type)\n</code></pre> <p>Add an event handler for the router.</p> <p><code>on_event</code> is deprecated, use <code>lifespan</code> event handlers instead.</p> <p>Read more about it in the ReadyAPI docs for Lifespan Events.</p> PARAMETER  DESCRIPTION <code>event_type</code> <p>The type of event. <code>startup</code> or <code>shutdown</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>@deprecated(\n    \"\"\"\n    on_event is deprecated, use lifespan event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.khulnasoft.com/advanced/events/).\n    \"\"\"\n)\ndef on_event(\n    self,\n    event_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of event. `startup` or `shutdown`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an event handler for the router.\n\n    `on_event` is deprecated, use `lifespan` event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.khulnasoft.com/advanced/events/#alternative-events-deprecated).\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_event_handler(event_type, func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/background/","title":"Background Tasks - <code>BackgroundTasks</code>","text":"<p>You can declare a parameter in a path operation function or dependency function with the type <code>BackgroundTasks</code>, and then you can use it to schedule the execution of background tasks after the response is sent.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import BackgroundTasks\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks","title":"readyapi.BackgroundTasks","text":"<pre><code>BackgroundTasks(tasks=None)\n</code></pre> <p>             Bases: <code>BackgroundTasks</code></p> <p>A collection of background tasks that will be called after a response has been sent to the client.</p> <p>Read more about it in the ReadyAPI docs for Background Tasks.</p>"},{"location":"reference/background/#readyapi.BackgroundTasks--example","title":"Example","text":"<pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> PARAMETER  DESCRIPTION <code>tasks</code> <p> TYPE: <code>Sequence[BackgroundTask] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/background.py</code> <pre><code>def __init__(self, tasks: typing.Sequence[BackgroundTask] | None = None):\n    self.tasks = list(tasks) if tasks else []\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.func","title":"func  <code>instance-attribute</code>","text":"<pre><code>func = func\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args = args\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.kwargs","title":"kwargs  <code>instance-attribute</code>","text":"<pre><code>kwargs = kwargs\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.is_async","title":"is_async  <code>instance-attribute</code>","text":"<pre><code>is_async = is_async_callable(func)\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.tasks","title":"tasks  <code>instance-attribute</code>","text":"<pre><code>tasks = list(tasks) if tasks else []\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.add_task","title":"add_task","text":"<pre><code>add_task(func, *args, **kwargs)\n</code></pre> <p>Add a function to be called in the background after the response is sent.</p> <p>Read more about it in the ReadyAPI docs for Background Tasks.</p> PARAMETER  DESCRIPTION <code>func</code> <p>The function to call after the response is sent.</p> <p>It can be a regular <code>def</code> function or an <code>async def</code> function.</p> <p> TYPE: <code>Callable[P, Any]</code> </p> <code>*args</code> <p> TYPE: <code>args</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p> TYPE: <code>kwargs</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/background.py</code> <pre><code>def add_task(\n    self,\n    func: Annotated[\n        Callable[P, Any],\n        Doc(\n            \"\"\"\n            The function to call after the response is sent.\n\n            It can be a regular `def` function or an `async def` function.\n            \"\"\"\n        ),\n    ],\n    *args: P.args,\n    **kwargs: P.kwargs,\n) -&gt; None:\n    \"\"\"\n    Add a function to be called in the background after the response is sent.\n\n    Read more about it in the\n    [ReadyAPI docs for Background Tasks](https://readyapi.khulnasoft.com/tutorial/background-tasks/).\n    \"\"\"\n    return super().add_task(func, *args, **kwargs)\n</code></pre>"},{"location":"reference/request/","title":"<code>Request</code> class","text":"<p>You can declare a parameter in a path operation function or dependency to be of type <code>Request</code> and then you can access the raw request object directly, without any validation, etc.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Request\n</code></pre> <p>Tip</p> <p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p>"},{"location":"reference/request/#readyapi.Request","title":"readyapi.Request","text":"<pre><code>Request(scope, receive=empty_receive, send=empty_send)\n</code></pre> <p>             Bases: <code>HTTPConnection</code></p> PARAMETER  DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> DEFAULT: <code>empty_receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> DEFAULT: <code>empty_send</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def __init__(\n    self, scope: Scope, receive: Receive = empty_receive, send: Send = empty_send\n):\n    super().__init__(scope)\n    assert scope[\"type\"] == \"http\"\n    self._receive = receive\n    self._send = send\n    self._stream_consumed = False\n    self._is_disconnected = False\n    self._form = None\n</code></pre>"},{"location":"reference/request/#readyapi.Request.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/request/#readyapi.Request.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/request/#readyapi.Request.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/request/#readyapi.Request.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/request/#readyapi.Request.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/request/#readyapi.Request.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/request/#readyapi.Request.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/request/#readyapi.Request.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/request/#readyapi.Request.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/request/#readyapi.Request.session","title":"session  <code>property</code>","text":"<pre><code>session\n</code></pre>"},{"location":"reference/request/#readyapi.Request.auth","title":"auth  <code>property</code>","text":"<pre><code>auth\n</code></pre>"},{"location":"reference/request/#readyapi.Request.user","title":"user  <code>property</code>","text":"<pre><code>user\n</code></pre>"},{"location":"reference/request/#readyapi.Request.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/request/#readyapi.Request.method","title":"method  <code>property</code>","text":"<pre><code>method\n</code></pre>"},{"location":"reference/request/#readyapi.Request.receive","title":"receive  <code>property</code>","text":"<pre><code>receive\n</code></pre>"},{"location":"reference/request/#readyapi.Request.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER  DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    router: Router = self.scope[\"router\"]\n    url_path = router.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/request/#readyapi.Request.stream","title":"stream  <code>async</code>","text":"<pre><code>stream()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def stream(self) -&gt; typing.AsyncGenerator[bytes, None]:\n    if hasattr(self, \"_body\"):\n        yield self._body\n        yield b\"\"\n        return\n    if self._stream_consumed:\n        raise RuntimeError(\"Stream consumed\")\n    while not self._stream_consumed:\n        message = await self._receive()\n        if message[\"type\"] == \"http.request\":\n            body = message.get(\"body\", b\"\")\n            if not message.get(\"more_body\", False):\n                self._stream_consumed = True\n            if body:\n                yield body\n        elif message[\"type\"] == \"http.disconnect\":\n            self._is_disconnected = True\n            raise ClientDisconnect()\n    yield b\"\"\n</code></pre>"},{"location":"reference/request/#readyapi.Request.body","title":"body  <code>async</code>","text":"<pre><code>body()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def body(self) -&gt; bytes:\n    if not hasattr(self, \"_body\"):\n        chunks: list[bytes] = []\n        async for chunk in self.stream():\n            chunks.append(chunk)\n        self._body = b\"\".join(chunks)\n    return self._body\n</code></pre>"},{"location":"reference/request/#readyapi.Request.json","title":"json  <code>async</code>","text":"<pre><code>json()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def json(self) -&gt; typing.Any:\n    if not hasattr(self, \"_json\"):\n        body = await self.body()\n        self._json = json.loads(body)\n    return self._json\n</code></pre>"},{"location":"reference/request/#readyapi.Request.form","title":"form","text":"<pre><code>form(*, max_files=1000, max_fields=1000)\n</code></pre> PARAMETER  DESCRIPTION <code>max_files</code> <p> TYPE: <code>int | float</code> DEFAULT: <code>1000</code> </p> <code>max_fields</code> <p> TYPE: <code>int | float</code> DEFAULT: <code>1000</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def form(\n    self, *, max_files: int | float = 1000, max_fields: int | float = 1000\n) -&gt; AwaitableOrContextManager[FormData]:\n    return AwaitableOrContextManagerWrapper(\n        self._get_form(max_files=max_files, max_fields=max_fields)\n    )\n</code></pre>"},{"location":"reference/request/#readyapi.Request.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def close(self) -&gt; None:\n    if self._form is not None:\n        await self._form.close()\n</code></pre>"},{"location":"reference/request/#readyapi.Request.is_disconnected","title":"is_disconnected  <code>async</code>","text":"<pre><code>is_disconnected()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def is_disconnected(self) -&gt; bool:\n    if not self._is_disconnected:\n        message: Message = {}\n\n        # If message isn't immediately available, move on\n        with anyio.CancelScope() as cs:\n            cs.cancel()\n            message = await self._receive()\n\n        if message.get(\"type\") == \"http.disconnect\":\n            self._is_disconnected = True\n\n    return self._is_disconnected\n</code></pre>"},{"location":"reference/request/#readyapi.Request.send_push_promise","title":"send_push_promise  <code>async</code>","text":"<pre><code>send_push_promise(path)\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>async def send_push_promise(self, path: str) -&gt; None:\n    if \"http.response.push\" in self.scope.get(\"extensions\", {}):\n        raw_headers: list[tuple[bytes, bytes]] = []\n        for name in SERVER_PUSH_HEADERS_TO_COPY:\n            for value in self.headers.getlist(name):\n                raw_headers.append(\n                    (name.encode(\"latin-1\"), value.encode(\"latin-1\"))\n                )\n        await self._send(\n            {\"type\": \"http.response.push\", \"path\": path, \"headers\": raw_headers}\n        )\n</code></pre>"},{"location":"reference/websockets/","title":"WebSockets","text":"<p>When defining WebSockets, you normally declare a parameter of type <code>WebSocket</code> and with it you can read data from the client and send data to it.</p> <p>It is provided directly by Starlette, but you can import it from <code>readyapi</code>:</p> <pre><code>from readyapi import WebSocket\n</code></pre> <p>Tip</p> <p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p> <p>When a client disconnects, a <code>WebSocketDisconnect</code> exception is raised, you can catch it.</p> <p>You can import it directly form <code>readyapi</code>:</p> <pre><code>from readyapi import WebSocketDisconnect\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket","title":"readyapi.WebSocket","text":"<pre><code>WebSocket(scope, receive, send)\n</code></pre> <p>             Bases: <code>HTTPConnection</code></p> PARAMETER  DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive, send: Send) -&gt; None:\n    super().__init__(scope)\n    assert scope[\"type\"] == \"websocket\"\n    self._receive = receive\n    self._send = send\n    self.client_state = WebSocketState.CONNECTING\n    self.application_state = WebSocketState.CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.client_state","title":"client_state  <code>instance-attribute</code>","text":"<pre><code>client_state = CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.application_state","title":"application_state  <code>instance-attribute</code>","text":"<pre><code>application_state = CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER  DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    router: Router = self.scope[\"router\"]\n    url_path = router.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive","title":"receive  <code>async</code>","text":"<pre><code>receive()\n</code></pre> <p>Receive ASGI websocket messages, ensuring valid state transitions.</p> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive(self) -&gt; Message:\n    \"\"\"\n    Receive ASGI websocket messages, ensuring valid state transitions.\n    \"\"\"\n    if self.client_state == WebSocketState.CONNECTING:\n        message = await self._receive()\n        message_type = message[\"type\"]\n        if message_type != \"websocket.connect\":\n            raise RuntimeError(\n                'Expected ASGI message \"websocket.connect\", '\n                f\"but got {message_type!r}\"\n            )\n        self.client_state = WebSocketState.CONNECTED\n        return message\n    elif self.client_state == WebSocketState.CONNECTED:\n        message = await self._receive()\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.receive\", \"websocket.disconnect\"}:\n            raise RuntimeError(\n                'Expected ASGI message \"websocket.receive\" or '\n                f'\"websocket.disconnect\", but got {message_type!r}'\n            )\n        if message_type == \"websocket.disconnect\":\n            self.client_state = WebSocketState.DISCONNECTED\n        return message\n    else:\n        raise RuntimeError(\n            'Cannot call \"receive\" once a disconnect message has been received.'\n        )\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send","title":"send  <code>async</code>","text":"<pre><code>send(message)\n</code></pre> <p>Send ASGI websocket messages, ensuring valid state transitions.</p> PARAMETER  DESCRIPTION <code>message</code> <p> TYPE: <code>Message</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send(self, message: Message) -&gt; None:\n    \"\"\"\n    Send ASGI websocket messages, ensuring valid state transitions.\n    \"\"\"\n    if self.application_state == WebSocketState.CONNECTING:\n        message_type = message[\"type\"]\n        if message_type not in {\n            \"websocket.accept\",\n            \"websocket.close\",\n            \"websocket.http.response.start\",\n        }:\n            raise RuntimeError(\n                'Expected ASGI message \"websocket.accept\",'\n                '\"websocket.close\" or \"websocket.http.response.start\",'\n                f\"but got {message_type!r}\"\n            )\n        if message_type == \"websocket.close\":\n            self.application_state = WebSocketState.DISCONNECTED\n        elif message_type == \"websocket.http.response.start\":\n            self.application_state = WebSocketState.RESPONSE\n        else:\n            self.application_state = WebSocketState.CONNECTED\n        await self._send(message)\n    elif self.application_state == WebSocketState.CONNECTED:\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.send\", \"websocket.close\"}:\n            raise RuntimeError(\n                'Expected ASGI message \"websocket.send\" or \"websocket.close\", '\n                f\"but got {message_type!r}\"\n            )\n        if message_type == \"websocket.close\":\n            self.application_state = WebSocketState.DISCONNECTED\n        try:\n            await self._send(message)\n        except OSError:\n            self.application_state = WebSocketState.DISCONNECTED\n            raise WebSocketDisconnect(code=1006)\n    elif self.application_state == WebSocketState.RESPONSE:\n        message_type = message[\"type\"]\n        if message_type != \"websocket.http.response.body\":\n            raise RuntimeError(\n                'Expected ASGI message \"websocket.http.response.body\", '\n                f\"but got {message_type!r}\"\n            )\n        if not message.get(\"more_body\", False):\n            self.application_state = WebSocketState.DISCONNECTED\n        await self._send(message)\n    else:\n        raise RuntimeError('Cannot call \"send\" once a close message has been sent.')\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.accept","title":"accept  <code>async</code>","text":"<pre><code>accept(subprotocol=None, headers=None)\n</code></pre> PARAMETER  DESCRIPTION <code>subprotocol</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>Iterable[tuple[bytes, bytes]] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def accept(\n    self,\n    subprotocol: str | None = None,\n    headers: typing.Iterable[tuple[bytes, bytes]] | None = None,\n) -&gt; None:\n    headers = headers or []\n\n    if self.client_state == WebSocketState.CONNECTING:\n        # If we haven't yet seen the 'connect' message, then wait for it first.\n        await self.receive()\n    await self.send(\n        {\"type\": \"websocket.accept\", \"subprotocol\": subprotocol, \"headers\": headers}\n    )\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_text","title":"receive_text  <code>async</code>","text":"<pre><code>receive_text()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_text(self) -&gt; str:\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError(\n            'WebSocket is not connected. Need to call \"accept\" first.'\n        )\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n    return typing.cast(str, message[\"text\"])\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_bytes","title":"receive_bytes  <code>async</code>","text":"<pre><code>receive_bytes()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_bytes(self) -&gt; bytes:\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError(\n            'WebSocket is not connected. Need to call \"accept\" first.'\n        )\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n    return typing.cast(bytes, message[\"bytes\"])\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_json","title":"receive_json  <code>async</code>","text":"<pre><code>receive_json(mode='text')\n</code></pre> PARAMETER  DESCRIPTION <code>mode</code> <p> TYPE: <code>str</code> DEFAULT: <code>'text'</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_json(self, mode: str = \"text\") -&gt; typing.Any:\n    if mode not in {\"text\", \"binary\"}:\n        raise RuntimeError('The \"mode\" argument should be \"text\" or \"binary\".')\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError(\n            'WebSocket is not connected. Need to call \"accept\" first.'\n        )\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n\n    if mode == \"text\":\n        text = message[\"text\"]\n    else:\n        text = message[\"bytes\"].decode(\"utf-8\")\n    return json.loads(text)\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_text","title":"iter_text  <code>async</code>","text":"<pre><code>iter_text()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_text(self) -&gt; typing.AsyncIterator[str]:\n    try:\n        while True:\n            yield await self.receive_text()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_bytes","title":"iter_bytes  <code>async</code>","text":"<pre><code>iter_bytes()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_bytes(self) -&gt; typing.AsyncIterator[bytes]:\n    try:\n        while True:\n            yield await self.receive_bytes()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_json","title":"iter_json  <code>async</code>","text":"<pre><code>iter_json()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_json(self) -&gt; typing.AsyncIterator[typing.Any]:\n    try:\n        while True:\n            yield await self.receive_json()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_text","title":"send_text  <code>async</code>","text":"<pre><code>send_text(data)\n</code></pre> PARAMETER  DESCRIPTION <code>data</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_text(self, data: str) -&gt; None:\n    await self.send({\"type\": \"websocket.send\", \"text\": data})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_bytes","title":"send_bytes  <code>async</code>","text":"<pre><code>send_bytes(data)\n</code></pre> PARAMETER  DESCRIPTION <code>data</code> <p> TYPE: <code>bytes</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_bytes(self, data: bytes) -&gt; None:\n    await self.send({\"type\": \"websocket.send\", \"bytes\": data})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_json","title":"send_json  <code>async</code>","text":"<pre><code>send_json(data, mode='text')\n</code></pre> PARAMETER  DESCRIPTION <code>data</code> <p> TYPE: <code>Any</code> </p> <code>mode</code> <p> TYPE: <code>str</code> DEFAULT: <code>'text'</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_json(self, data: typing.Any, mode: str = \"text\") -&gt; None:\n    if mode not in {\"text\", \"binary\"}:\n        raise RuntimeError('The \"mode\" argument should be \"text\" or \"binary\".')\n    text = json.dumps(data, separators=(\",\", \":\"), ensure_ascii=False)\n    if mode == \"text\":\n        await self.send({\"type\": \"websocket.send\", \"text\": text})\n    else:\n        await self.send({\"type\": \"websocket.send\", \"bytes\": text.encode(\"utf-8\")})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.close","title":"close  <code>async</code>","text":"<pre><code>close(code=1000, reason=None)\n</code></pre> PARAMETER  DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def close(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    await self.send(\n        {\"type\": \"websocket.close\", \"code\": code, \"reason\": reason or \"\"}\n    )\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect","title":"readyapi.WebSocketDisconnect","text":"<pre><code>WebSocketDisconnect(code=1000, reason=None)\n</code></pre> <p>             Bases: <code>Exception</code></p> PARAMETER  DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    self.code = code\n    self.reason = reason or \"\"\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/websockets/#websockets-additional-classes","title":"WebSockets - additional classes","text":"<p>Additional classes for handling WebSockets.</p> <p>Provided directly by Starlette, but you can import it from <code>readyapi</code>:</p> <pre><code>from readyapi.websockets import WebSocketDisconnect, WebSocketState\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect","title":"readyapi.websockets.WebSocketDisconnect","text":"<pre><code>WebSocketDisconnect(code=1000, reason=None)\n</code></pre> <p>             Bases: <code>Exception</code></p> PARAMETER  DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    self.code = code\n    self.reason = reason or \"\"\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState","title":"readyapi.websockets.WebSocketState","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.CONNECTING","title":"CONNECTING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONNECTING = 0\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.CONNECTED","title":"CONNECTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONNECTED = 1\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.DISCONNECTED","title":"DISCONNECTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DISCONNECTED = 2\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.RESPONSE","title":"RESPONSE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RESPONSE = 3\n</code></pre>"},{"location":"reference/httpconnection/","title":"<code>HTTPConnection</code> class","text":"<p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p> <p>You can import it from <code>readyapi.requests</code>:</p> <pre><code>from readyapi.requests import HTTPConnection\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection","title":"readyapi.requests.HTTPConnection","text":"<pre><code>HTTPConnection(scope, receive=None)\n</code></pre> <p>             Bases: <code>Mapping[str, Any]</code></p> <p>A base class for incoming HTTP connections, that is used to provide any functionality that is common to both <code>Request</code> and <code>WebSocket</code>.</p> PARAMETER  DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive | None = None) -&gt; None:\n    assert scope[\"type\"] in (\"http\", \"websocket\")\n    self.scope = scope\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.session","title":"session  <code>property</code>","text":"<pre><code>session\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.auth","title":"auth  <code>property</code>","text":"<pre><code>auth\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.user","title":"user  <code>property</code>","text":"<pre><code>user\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER  DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    router: Router = self.scope[\"router\"]\n    url_path = router.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/response/","title":"<code>Response</code> class","text":"<p>You can declare a parameter in a path operation function or dependency to be of type <code>Response</code> and then you can set data for the response like headers or cookies.</p> <p>You can also use it directly to create an instance of it and return it from your path operations.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Response\n</code></pre>"},{"location":"reference/response/#readyapi.Response","title":"readyapi.Response","text":"<pre><code>Response(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/response/#readyapi.Response.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/response/#readyapi.Response.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/response/#readyapi.Response.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/response/#readyapi.Response.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/response/#readyapi.Response.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/response/#readyapi.Response.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/response/#readyapi.Response.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes:\n    if content is None:\n        return b\"\"\n    if isinstance(content, bytes):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/response/#readyapi.Response.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER  DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [\n            (k.lower().encode(\"latin-1\"), v.encode(\"latin-1\"))\n            for k, v in headers.items()\n        ]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if (\n            content_type.startswith(\"text/\")\n            and \"charset=\" not in content_type.lower()\n        ):\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/response/#readyapi.Response.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/response/#readyapi.Response.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/","title":"Custom Response Classes - File, HTML, Redirect, Streaming, etc.","text":"<p>There are several custom response classes you can use to create an instance and return them directly from your path operations.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>You can import them directly from <code>readyapi.responses</code>:</p> <pre><code>from readyapi.responses import (\n    FileResponse,\n    HTMLResponse,\n    JSONResponse,\n    ORJSONResponse,\n    PlainTextResponse,\n    RedirectResponse,\n    Response,\n    StreamingResponse,\n    UJSONResponse,\n)\n</code></pre>"},{"location":"reference/responses/#readyapi-responses","title":"ReadyAPI Responses","text":"<p>There are a couple of custom ReadyAPI response classes, you can use them to optimize JSON performance.</p>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse","title":"readyapi.responses.UJSONResponse","text":"<pre><code>UJSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>             Bases: <code>JSONResponse</code></p> <p>JSON response using the high-performance ujson library to serialize data to JSON.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>readyapi/responses.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n    assert ujson is not None, \"ujson must be installed to use UJSONResponse\"\n    return ujson.dumps(content, ensure_ascii=False).encode(\"utf-8\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER  DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [\n            (k.lower().encode(\"latin-1\"), v.encode(\"latin-1\"))\n            for k, v in headers.items()\n        ]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if (\n            content_type.startswith(\"text/\")\n            and \"charset=\" not in content_type.lower()\n        ):\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse","title":"readyapi.responses.ORJSONResponse","text":"<pre><code>ORJSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>             Bases: <code>JSONResponse</code></p> <p>JSON response using the high-performance orjson library to serialize data to JSON.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>readyapi/responses.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n    assert orjson is not None, \"orjson must be installed to use ORJSONResponse\"\n    return orjson.dumps(\n        content, option=orjson.OPT_NON_STR_KEYS | orjson.OPT_SERIALIZE_NUMPY\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER  DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [\n            (k.lower().encode(\"latin-1\"), v.encode(\"latin-1\"))\n            for k, v in headers.items()\n        ]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if (\n            content_type.startswith(\"text/\")\n            and \"charset=\" not in content_type.lower()\n        ):\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#starlette-responses","title":"Starlette Responses","text":""},{"location":"reference/responses/#readyapi.responses.FileResponse","title":"readyapi.responses.FileResponse","text":"<pre><code>FileResponse(\n    path,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n    filename=None,\n    stat_result=None,\n    method=None,\n    content_disposition_type=\"attachment\",\n)\n</code></pre> <p>             Bases: <code>Response</code></p> PARAMETER  DESCRIPTION <code>path</code> <p> TYPE: <code>str | PathLike[str]</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> <code>filename</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>stat_result</code> <p> TYPE: <code>stat_result | None</code> DEFAULT: <code>None</code> </p> <code>method</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>content_disposition_type</code> <p> TYPE: <code>str</code> DEFAULT: <code>'attachment'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    path: str | os.PathLike[str],\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n    filename: str | None = None,\n    stat_result: os.stat_result | None = None,\n    method: str | None = None,\n    content_disposition_type: str = \"attachment\",\n) -&gt; None:\n    self.path = path\n    self.status_code = status_code\n    self.filename = filename\n    if method is not None:\n        warnings.warn(\n            \"The 'method' parameter is not used, and it will be removed.\",\n            DeprecationWarning,\n        )\n    if media_type is None:\n        media_type = guess_type(filename or path)[0] or \"text/plain\"\n    self.media_type = media_type\n    self.background = background\n    self.init_headers(headers)\n    if self.filename is not None:\n        content_disposition_filename = quote(self.filename)\n        if content_disposition_filename != self.filename:\n            content_disposition = \"{}; filename*=utf-8''{}\".format(\n                content_disposition_type, content_disposition_filename\n            )\n        else:\n            content_disposition = '{}; filename=\"{}\"'.format(\n                content_disposition_type, self.filename\n            )\n        self.headers.setdefault(\"content-disposition\", content_disposition)\n    self.stat_result = stat_result\n    if stat_result is not None:\n        self.set_stat_headers(stat_result)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.chunk_size","title":"chunk_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chunk_size = 64 * 1024\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.media_type","title":"media_type  <code>instance-attribute</code>","text":"<pre><code>media_type = media_type\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes:\n    if content is None:\n        return b\"\"\n    if isinstance(content, bytes):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER  DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [\n            (k.lower().encode(\"latin-1\"), v.encode(\"latin-1\"))\n            for k, v in headers.items()\n        ]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if (\n            content_type.startswith(\"text/\")\n            and \"charset=\" not in content_type.lower()\n        ):\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse","title":"readyapi.responses.HTMLResponse","text":"<pre><code>HTMLResponse(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>             Bases: <code>Response</code></p> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'text/html'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes:\n    if content is None:\n        return b\"\"\n    if isinstance(content, bytes):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER  DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [\n            (k.lower().encode(\"latin-1\"), v.encode(\"latin-1\"))\n            for k, v in headers.items()\n        ]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if (\n            content_type.startswith(\"text/\")\n            and \"charset=\" not in content_type.lower()\n        ):\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse","title":"readyapi.responses.JSONResponse","text":"<pre><code>JSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>             Bases: <code>Response</code></p> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes:\n    return json.dumps(\n        content,\n        ensure_ascii=False,\n        allow_nan=False,\n        indent=None,\n        separators=(\",\", \":\"),\n    ).encode(\"utf-8\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER  DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [\n            (k.lower().encode(\"latin-1\"), v.encode(\"latin-1\"))\n            for k, v in headers.items()\n        ]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if (\n            content_type.startswith(\"text/\")\n            and \"charset=\" not in content_type.lower()\n        ):\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse","title":"readyapi.responses.PlainTextResponse","text":"<pre><code>PlainTextResponse(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>             Bases: <code>Response</code></p> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'text/plain'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes:\n    if content is None:\n        return b\"\"\n    if isinstance(content, bytes):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER  DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [\n            (k.lower().encode(\"latin-1\"), v.encode(\"latin-1\"))\n            for k, v in headers.items()\n        ]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if (\n            content_type.startswith(\"text/\")\n            and \"charset=\" not in content_type.lower()\n        ):\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse","title":"readyapi.responses.RedirectResponse","text":"<pre><code>RedirectResponse(\n    url, status_code=307, headers=None, background=None\n)\n</code></pre> <p>             Bases: <code>Response</code></p> PARAMETER  DESCRIPTION <code>url</code> <p> TYPE: <code>str | URL</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>307</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    url: str | URL,\n    status_code: int = 307,\n    headers: typing.Mapping[str, str] | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(\n        content=b\"\", status_code=status_code, headers=headers, background=background\n    )\n    self.headers[\"location\"] = quote(str(url), safe=\":/%#?=@[]!$&amp;'()*+,;\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes:\n    if content is None:\n        return b\"\"\n    if isinstance(content, bytes):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER  DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [\n            (k.lower().encode(\"latin-1\"), v.encode(\"latin-1\"))\n            for k, v in headers.items()\n        ]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if (\n            content_type.startswith(\"text/\")\n            and \"charset=\" not in content_type.lower()\n        ):\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response","title":"readyapi.responses.Response","text":"<pre><code>Response(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes:\n    if content is None:\n        return b\"\"\n    if isinstance(content, bytes):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER  DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [\n            (k.lower().encode(\"latin-1\"), v.encode(\"latin-1\"))\n            for k, v in headers.items()\n        ]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if (\n            content_type.startswith(\"text/\")\n            and \"charset=\" not in content_type.lower()\n        ):\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse","title":"readyapi.responses.StreamingResponse","text":"<pre><code>StreamingResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>             Bases: <code>Response</code></p> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>ContentStream</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: ContentStream,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    if isinstance(content, typing.AsyncIterable):\n        self.body_iterator = content\n    else:\n        self.body_iterator = iterate_in_threadpool(content)\n    self.status_code = status_code\n    self.media_type = self.media_type if media_type is None else media_type\n    self.background = background\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.body_iterator","title":"body_iterator  <code>instance-attribute</code>","text":"<pre><code>body_iterator\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.media_type","title":"media_type  <code>instance-attribute</code>","text":"<pre><code>media_type = (\n    media_type if media_type is None else media_type\n)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER  DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes:\n    if content is None:\n        return b\"\"\n    if isinstance(content, bytes):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER  DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [\n            (k.lower().encode(\"latin-1\"), v.encode(\"latin-1\"))\n            for k, v in headers.items()\n        ]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if (\n            content_type.startswith(\"text/\")\n            and \"charset=\" not in content_type.lower()\n        ):\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER  DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/middleware/","title":"Middleware","text":"<p>There are several middlewares available provided by Starlette directly.</p> <p>Read more about them in the ReadyAPI docs for Middleware.</p> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.cors import CORSMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.gzip import GZipMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.httpsredirect import HTTPSRedirectMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.trustedhost import TrustedHostMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.wsgi import WSGIMiddleware\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware","title":"readyapi.middleware.cors.CORSMiddleware","text":"<pre><code>CORSMiddleware(\n    app,\n    allow_origins=(),\n    allow_methods=(\"GET\"),\n    allow_headers=(),\n    allow_credentials=False,\n    allow_origin_regex=None,\n    expose_headers=(),\n    max_age=600,\n)\n</code></pre> PARAMETER  DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>allow_origins</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>allow_methods</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>('GET')</code> </p> <code>allow_headers</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>allow_credentials</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>allow_origin_regex</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>expose_headers</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>max_age</code> <p> TYPE: <code>int</code> DEFAULT: <code>600</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    allow_origins: typing.Sequence[str] = (),\n    allow_methods: typing.Sequence[str] = (\"GET\",),\n    allow_headers: typing.Sequence[str] = (),\n    allow_credentials: bool = False,\n    allow_origin_regex: str | None = None,\n    expose_headers: typing.Sequence[str] = (),\n    max_age: int = 600,\n) -&gt; None:\n    if \"*\" in allow_methods:\n        allow_methods = ALL_METHODS\n\n    compiled_allow_origin_regex = None\n    if allow_origin_regex is not None:\n        compiled_allow_origin_regex = re.compile(allow_origin_regex)\n\n    allow_all_origins = \"*\" in allow_origins\n    allow_all_headers = \"*\" in allow_headers\n    preflight_explicit_allow_origin = not allow_all_origins or allow_credentials\n\n    simple_headers = {}\n    if allow_all_origins:\n        simple_headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    if allow_credentials:\n        simple_headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n    if expose_headers:\n        simple_headers[\"Access-Control-Expose-Headers\"] = \", \".join(expose_headers)\n\n    preflight_headers = {}\n    if preflight_explicit_allow_origin:\n        # The origin value will be set in preflight_response() if it is allowed.\n        preflight_headers[\"Vary\"] = \"Origin\"\n    else:\n        preflight_headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    preflight_headers.update(\n        {\n            \"Access-Control-Allow-Methods\": \", \".join(allow_methods),\n            \"Access-Control-Max-Age\": str(max_age),\n        }\n    )\n    allow_headers = sorted(SAFELISTED_HEADERS | set(allow_headers))\n    if allow_headers and not allow_all_headers:\n        preflight_headers[\"Access-Control-Allow-Headers\"] = \", \".join(allow_headers)\n    if allow_credentials:\n        preflight_headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n\n    self.app = app\n    self.allow_origins = allow_origins\n    self.allow_methods = allow_methods\n    self.allow_headers = [h.lower() for h in allow_headers]\n    self.allow_all_origins = allow_all_origins\n    self.allow_all_headers = allow_all_headers\n    self.preflight_explicit_allow_origin = preflight_explicit_allow_origin\n    self.allow_origin_regex = compiled_allow_origin_regex\n    self.simple_headers = simple_headers\n    self.preflight_headers = preflight_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_origins","title":"allow_origins  <code>instance-attribute</code>","text":"<pre><code>allow_origins = allow_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_methods","title":"allow_methods  <code>instance-attribute</code>","text":"<pre><code>allow_methods = allow_methods\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_headers","title":"allow_headers  <code>instance-attribute</code>","text":"<pre><code>allow_headers = [lower() for h in allow_headers]\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_all_origins","title":"allow_all_origins  <code>instance-attribute</code>","text":"<pre><code>allow_all_origins = allow_all_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_all_headers","title":"allow_all_headers  <code>instance-attribute</code>","text":"<pre><code>allow_all_headers = allow_all_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_explicit_allow_origin","title":"preflight_explicit_allow_origin  <code>instance-attribute</code>","text":"<pre><code>preflight_explicit_allow_origin = (\n    preflight_explicit_allow_origin\n)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_origin_regex","title":"allow_origin_regex  <code>instance-attribute</code>","text":"<pre><code>allow_origin_regex = compiled_allow_origin_regex\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.simple_headers","title":"simple_headers  <code>instance-attribute</code>","text":"<pre><code>simple_headers = simple_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_headers","title":"preflight_headers  <code>instance-attribute</code>","text":"<pre><code>preflight_headers = preflight_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.is_allowed_origin","title":"is_allowed_origin","text":"<pre><code>is_allowed_origin(origin)\n</code></pre> PARAMETER  DESCRIPTION <code>origin</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def is_allowed_origin(self, origin: str) -&gt; bool:\n    if self.allow_all_origins:\n        return True\n\n    if self.allow_origin_regex is not None and self.allow_origin_regex.fullmatch(\n        origin\n    ):\n        return True\n\n    return origin in self.allow_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_response","title":"preflight_response","text":"<pre><code>preflight_response(request_headers)\n</code></pre> PARAMETER  DESCRIPTION <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def preflight_response(self, request_headers: Headers) -&gt; Response:\n    requested_origin = request_headers[\"origin\"]\n    requested_method = request_headers[\"access-control-request-method\"]\n    requested_headers = request_headers.get(\"access-control-request-headers\")\n\n    headers = dict(self.preflight_headers)\n    failures = []\n\n    if self.is_allowed_origin(origin=requested_origin):\n        if self.preflight_explicit_allow_origin:\n            # The \"else\" case is already accounted for in self.preflight_headers\n            # and the value would be \"*\".\n            headers[\"Access-Control-Allow-Origin\"] = requested_origin\n    else:\n        failures.append(\"origin\")\n\n    if requested_method not in self.allow_methods:\n        failures.append(\"method\")\n\n    # If we allow all headers, then we have to mirror back any requested\n    # headers in the response.\n    if self.allow_all_headers and requested_headers is not None:\n        headers[\"Access-Control-Allow-Headers\"] = requested_headers\n    elif requested_headers is not None:\n        for header in [h.lower() for h in requested_headers.split(\",\")]:\n            if header.strip() not in self.allow_headers:\n                failures.append(\"headers\")\n                break\n\n    # We don't strictly need to use 400 responses here, since its up to\n    # the browser to enforce the CORS policy, but its more informative\n    # if we do.\n    if failures:\n        failure_text = \"Disallowed CORS \" + \", \".join(failures)\n        return PlainTextResponse(failure_text, status_code=400, headers=headers)\n\n    return PlainTextResponse(\"OK\", status_code=200, headers=headers)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.simple_response","title":"simple_response  <code>async</code>","text":"<pre><code>simple_response(scope, receive, send, request_headers)\n</code></pre> PARAMETER  DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>async def simple_response(\n    self, scope: Scope, receive: Receive, send: Send, request_headers: Headers\n) -&gt; None:\n    send = functools.partial(self.send, send=send, request_headers=request_headers)\n    await self.app(scope, receive, send)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.send","title":"send  <code>async</code>","text":"<pre><code>send(message, send, request_headers)\n</code></pre> PARAMETER  DESCRIPTION <code>message</code> <p> TYPE: <code>Message</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>async def send(\n    self, message: Message, send: Send, request_headers: Headers\n) -&gt; None:\n    if message[\"type\"] != \"http.response.start\":\n        await send(message)\n        return\n\n    message.setdefault(\"headers\", [])\n    headers = MutableHeaders(scope=message)\n    headers.update(self.simple_headers)\n    origin = request_headers[\"Origin\"]\n    has_cookie = \"cookie\" in request_headers\n\n    # If request includes any cookie headers, then we must respond\n    # with the specific origin instead of '*'.\n    if self.allow_all_origins and has_cookie:\n        self.allow_explicit_origin(headers, origin)\n\n    # If we only allow specific origins, then we have to mirror back\n    # the Origin header in the response.\n    elif not self.allow_all_origins and self.is_allowed_origin(origin=origin):\n        self.allow_explicit_origin(headers, origin)\n\n    await send(message)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_explicit_origin","title":"allow_explicit_origin  <code>staticmethod</code>","text":"<pre><code>allow_explicit_origin(headers, origin)\n</code></pre> PARAMETER  DESCRIPTION <code>headers</code> <p> TYPE: <code>MutableHeaders</code> </p> <code>origin</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>@staticmethod\ndef allow_explicit_origin(headers: MutableHeaders, origin: str) -&gt; None:\n    headers[\"Access-Control-Allow-Origin\"] = origin\n    headers.add_vary_header(\"Origin\")\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware","title":"readyapi.middleware.gzip.GZipMiddleware","text":"<pre><code>GZipMiddleware(app, minimum_size=500, compresslevel=9)\n</code></pre> PARAMETER  DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>minimum_size</code> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> <code>compresslevel</code> <p> TYPE: <code>int</code> DEFAULT: <code>9</code> </p> Source code in <code>starlette/middleware/gzip.py</code> <pre><code>def __init__(\n    self, app: ASGIApp, minimum_size: int = 500, compresslevel: int = 9\n) -&gt; None:\n    self.app = app\n    self.minimum_size = minimum_size\n    self.compresslevel = compresslevel\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.minimum_size","title":"minimum_size  <code>instance-attribute</code>","text":"<pre><code>minimum_size = minimum_size\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.compresslevel","title":"compresslevel  <code>instance-attribute</code>","text":"<pre><code>compresslevel = compresslevel\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware","title":"readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware","text":"<pre><code>HTTPSRedirectMiddleware(app)\n</code></pre> PARAMETER  DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> Source code in <code>starlette/middleware/httpsredirect.py</code> <pre><code>def __init__(self, app: ASGIApp) -&gt; None:\n    self.app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware","title":"readyapi.middleware.trustedhost.TrustedHostMiddleware","text":"<pre><code>TrustedHostMiddleware(\n    app, allowed_hosts=None, www_redirect=True\n)\n</code></pre> PARAMETER  DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>allowed_hosts</code> <p> TYPE: <code>Sequence[str] | None</code> DEFAULT: <code>None</code> </p> <code>www_redirect</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>starlette/middleware/trustedhost.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    allowed_hosts: typing.Sequence[str] | None = None,\n    www_redirect: bool = True,\n) -&gt; None:\n    if allowed_hosts is None:\n        allowed_hosts = [\"*\"]\n\n    for pattern in allowed_hosts:\n        assert \"*\" not in pattern[1:], ENFORCE_DOMAIN_WILDCARD\n        if pattern.startswith(\"*\") and pattern != \"*\":\n            assert pattern.startswith(\"*.\"), ENFORCE_DOMAIN_WILDCARD\n    self.app = app\n    self.allowed_hosts = list(allowed_hosts)\n    self.allow_any = \"*\" in allowed_hosts\n    self.www_redirect = www_redirect\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.allowed_hosts","title":"allowed_hosts  <code>instance-attribute</code>","text":"<pre><code>allowed_hosts = list(allowed_hosts)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.allow_any","title":"allow_any  <code>instance-attribute</code>","text":"<pre><code>allow_any = '*' in allowed_hosts\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.www_redirect","title":"www_redirect  <code>instance-attribute</code>","text":"<pre><code>www_redirect = www_redirect\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.wsgi.WSGIMiddleware","title":"readyapi.middleware.wsgi.WSGIMiddleware","text":"<pre><code>WSGIMiddleware(app)\n</code></pre> PARAMETER  DESCRIPTION <code>app</code> <p> TYPE: <code>Callable[..., Any]</code> </p> Source code in <code>starlette/middleware/wsgi.py</code> <pre><code>def __init__(self, app: typing.Callable[..., typing.Any]) -&gt; None:\n    self.app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.wsgi.WSGIMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/openapi/","title":"OpenAPI","text":"<p>There are several utilities to handle OpenAPI.</p> <p>You normally don't need to use them unless you have a specific advanced use case that requires it.</p>"},{"location":"reference/openapi/docs/","title":"OpenAPI <code>docs</code>","text":"<p>Utilities to handle OpenAPI automatic UI documentation, including Swagger UI (by default at <code>/docs</code>) and ReDoc (by default at <code>/redoc</code>).</p>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_swagger_ui_html","title":"readyapi.openapi.docs.get_swagger_ui_html","text":"<pre><code>get_swagger_ui_html(\n    *,\n    openapi_url,\n    title,\n    swagger_js_url=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui-bundle.js\",\n    swagger_css_url=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui.css\",\n    swagger_favicon_url=\"https://readyapi.khulnasoft.com/img/favicon.png\",\n    oauth2_redirect_url=None,\n    init_oauth=None,\n    swagger_ui_parameters=None\n)\n</code></pre> <p>Generate and return the HTML  that loads Swagger UI for the interactive API docs (normally served at <code>/docs</code>).</p> <p>You would only call this function yourself if you needed to override some parts, for example the URLs to use to load Swagger UI's JavaScript and CSS.</p> <p>Read more about it in the ReadyAPI docs for Configure Swagger UI and the ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting).</p> PARAMETER  DESCRIPTION <code>openapi_url</code> <p>The OpenAPI URL that Swagger UI should load and use.</p> <p>This is normally done automatically by ReadyAPI using the default URL <code>/openapi.json</code>.</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>The HTML <code>&lt;title&gt;</code> content, normally shown in the browser tab.</p> <p> TYPE: <code>str</code> </p> <code>swagger_js_url</code> <p>The URL to use to load the Swagger UI JavaScript.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui-bundle.js'</code> </p> <code>swagger_css_url</code> <p>The URL to use to load the Swagger UI CSS.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui.css'</code> </p> <code>swagger_favicon_url</code> <p>The URL of the favicon to use. It is normally shown in the browser tab.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://readyapi.khulnasoft.com/img/favicon.png'</code> </p> <code>oauth2_redirect_url</code> <p>The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>init_oauth</code> <p>A dictionary with Swagger UI OAuth2 initialization configurations.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>swagger_ui_parameters</code> <p>Configuration parameters for Swagger UI.</p> <p>It defaults to swagger_ui_default_parameters.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_swagger_ui_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that Swagger UI should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    swagger_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui-bundle.js\",\n    swagger_css_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI CSS.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui.css\",\n    swagger_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.khulnasoft.com/img/favicon.png\",\n    oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n    init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            A dictionary with Swagger UI OAuth2 initialization configurations.\n            \"\"\"\n        ),\n    ] = None,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Configuration parameters for Swagger UI.\n\n            It defaults to [swagger_ui_default_parameters][readyapi.openapi.docs.swagger_ui_default_parameters].\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML  that loads Swagger UI for the interactive\n    API docs (normally served at `/docs`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load Swagger UI's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Configure Swagger UI](https://readyapi.khulnasoft.com/how-to/configure-swagger-ui/)\n    and the [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.khulnasoft.com/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    current_swagger_ui_parameters = swagger_ui_default_parameters.copy()\n    if swagger_ui_parameters:\n        current_swagger_ui_parameters.update(swagger_ui_parameters)\n\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"{swagger_css_url}\"&gt;\n    &lt;link rel=\"shortcut icon\" href=\"{swagger_favicon_url}\"&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;div id=\"swagger-ui\"&gt;\n    &lt;/div&gt;\n    &lt;script src=\"{swagger_js_url}\"&gt;&lt;/script&gt;\n    &lt;!-- `SwaggerUIBundle` is now available on the page --&gt;\n    &lt;script&gt;\n    const ui = SwaggerUIBundle({{\n        url: '{openapi_url}',\n    \"\"\"\n\n    for key, value in current_swagger_ui_parameters.items():\n        html += f\"{json.dumps(key)}: {json.dumps(jsonable_encoder(value))},\\n\"\n\n    if oauth2_redirect_url:\n        html += f\"oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}',\"\n\n    html += \"\"\"\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })\"\"\"\n\n    if init_oauth:\n        html += f\"\"\"\n        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n        \"\"\"\n\n    html += \"\"\"\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_redoc_html","title":"readyapi.openapi.docs.get_redoc_html","text":"<pre><code>get_redoc_html(\n    *,\n    openapi_url,\n    title,\n    redoc_js_url=\"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\",\n    redoc_favicon_url=\"https://readyapi.khulnasoft.com/img/favicon.png\",\n    with_google_fonts=True\n)\n</code></pre> <p>Generate and return the HTML response that loads ReDoc for the alternative API docs (normally served at <code>/redoc</code>).</p> <p>You would only call this function yourself if you needed to override some parts, for example the URLs to use to load ReDoc's JavaScript and CSS.</p> <p>Read more about it in the ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting).</p> PARAMETER  DESCRIPTION <code>openapi_url</code> <p>The OpenAPI URL that ReDoc should load and use.</p> <p>This is normally done automatically by ReadyAPI using the default URL <code>/openapi.json</code>.</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>The HTML <code>&lt;title&gt;</code> content, normally shown in the browser tab.</p> <p> TYPE: <code>str</code> </p> <code>redoc_js_url</code> <p>The URL to use to load the ReDoc JavaScript.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js'</code> </p> <code>redoc_favicon_url</code> <p>The URL of the favicon to use. It is normally shown in the browser tab.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://readyapi.khulnasoft.com/img/favicon.png'</code> </p> <code>with_google_fonts</code> <p>Load and use Google Fonts.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_redoc_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that ReDoc should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    redoc_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the ReDoc JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\",\n    redoc_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.khulnasoft.com/img/favicon.png\",\n    with_google_fonts: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Load and use Google Fonts.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML response that loads ReDoc for the alternative\n    API docs (normally served at `/redoc`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load ReDoc's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.khulnasoft.com/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;!-- needed for adaptive design --&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    \"\"\"\n    if with_google_fonts:\n        html += \"\"\"\n    &lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\"&gt;\n    \"\"\"\n    html += f\"\"\"\n    &lt;link rel=\"shortcut icon\" href=\"{redoc_favicon_url}\"&gt;\n    &lt;!--\n    ReDoc doesn't change outer page styles\n    --&gt;\n    &lt;style&gt;\n      body {{\n        margin: 0;\n        padding: 0;\n      }}\n    &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;noscript&gt;\n        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n    &lt;/noscript&gt;\n    &lt;redoc spec-url=\"{openapi_url}\"&gt;&lt;/redoc&gt;\n    &lt;script src=\"{redoc_js_url}\"&gt; &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_swagger_ui_oauth2_redirect_html","title":"readyapi.openapi.docs.get_swagger_ui_oauth2_redirect_html","text":"<pre><code>get_swagger_ui_oauth2_redirect_html()\n</code></pre> <p>Generate the HTML response with the OAuth2 redirection for Swagger UI.</p> <p>You normally don't need to use or change this.</p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_swagger_ui_oauth2_redirect_html() -&gt; HTMLResponse:\n    \"\"\"\n    Generate the HTML response with the OAuth2 redirection for Swagger UI.\n\n    You normally don't need to use or change this.\n    \"\"\"\n    # copied from https://github.com/swagger-api/swagger-ui/blob/v4.14.0/dist/oauth2-redirect.html\n    html = \"\"\"\n    &lt;!doctype html&gt;\n    &lt;html lang=\"en-US\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Swagger UI: OAuth2 Redirect&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;script&gt;\n        'use strict';\n        function run () {\n            var oauth2 = window.opener.swaggerUIRedirectOauth2;\n            var sentState = oauth2.state;\n            var redirectUrl = oauth2.redirectUrl;\n            var isValid, qp, arr;\n\n            if (/code|token|error/.test(window.location.hash)) {\n                qp = window.location.hash.substring(1).replace('?', '&amp;');\n            } else {\n                qp = location.search.substring(1);\n            }\n\n            arr = qp.split(\"&amp;\");\n            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n            qp = qp ? JSON.parse('{' + arr.join() + '}',\n                    function (key, value) {\n                        return key === \"\" ? value : decodeURIComponent(value);\n                    }\n            ) : {};\n\n            isValid = qp.state === sentState;\n\n            if ((\n              oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n            ) &amp;&amp; !oauth2.auth.code) {\n                if (!isValid) {\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"warning\",\n                        message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                    });\n                }\n\n                if (qp.code) {\n                    delete oauth2.state;\n                    oauth2.auth.code = qp.code;\n                    oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                } else {\n                    let oauthErrorMsg;\n                    if (qp.error) {\n                        oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                            (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n                            (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\n                    }\n\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"error\",\n                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                    });\n                }\n            } else {\n                oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n            }\n            window.close();\n        }\n\n        if (document.readyState !== 'loading') {\n            run();\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                run();\n            });\n        }\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n        \"\"\"\n    return HTMLResponse(content=html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.swagger_ui_default_parameters","title":"readyapi.openapi.docs.swagger_ui_default_parameters  <code>module-attribute</code>","text":"<pre><code>swagger_ui_default_parameters = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n</code></pre> <p>Default configurations for Swagger UI.</p> <p>You can use it as a template to add any other configurations needed.</p>"},{"location":"reference/openapi/models/","title":"OpenAPI <code>models</code>","text":"<p>OpenAPI Pydantic models used to generate and validate the generated OpenAPI.</p>"},{"location":"reference/openapi/models/#readyapi.openapi.models","title":"readyapi.openapi.models","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.SchemaOrBool","title":"SchemaOrBool  <code>module-attribute</code>","text":"<pre><code>SchemaOrBool = Union[Schema, bool]\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityScheme","title":"SecurityScheme  <code>module-attribute</code>","text":"<pre><code>SecurityScheme = Union[\n    APIKey, HTTPBase, OAuth2, OpenIdConnect, HTTPBearer\n]\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.EmailStr","title":"EmailStr","text":"<p>             Bases: <code>str</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.EmailStr.validate","title":"validate  <code>classmethod</code>","text":"<pre><code>validate(v)\n</code></pre> PARAMETER  DESCRIPTION <code>v</code> <p> TYPE: <code>Any</code> </p> Source code in <code>readyapi/openapi/models.py</code> <pre><code>@classmethod\ndef validate(cls, v: Any) -&gt; str:\n    logger.warning(\n        \"email-validator not installed, email fields will be treated as str.\\n\"\n        \"To install, run: pip install email-validator\"\n    )\n    return str(v)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact","title":"Contact","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.email","title":"email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>email = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License","title":"License","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.identifier","title":"identifier  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>identifier = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.License.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info","title":"Info","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.termsOfService","title":"termsOfService  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>termsOfService = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.contact","title":"contact  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contact = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.license","title":"license  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>license = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable","title":"ServerVariable","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.enum","title":"enum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.default","title":"default  <code>instance-attribute</code>","text":"<pre><code>default\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server","title":"Server","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Reference","title":"Reference","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Reference.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator","title":"Discriminator","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator.propertyName","title":"propertyName  <code>instance-attribute</code>","text":"<pre><code>propertyName\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator.mapping","title":"mapping  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mapping = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML","title":"XML","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.namespace","title":"namespace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>namespace = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.prefix","title":"prefix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefix = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.attribute","title":"attribute  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attribute = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.wrapped","title":"wrapped  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wrapped = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation","title":"ExternalDocumentation","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema","title":"Schema","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='$schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.vocabulary","title":"vocabulary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>vocabulary = Field(default=None, alias='$vocabulary')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = Field(default=None, alias='$id')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.anchor","title":"anchor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>anchor = Field(default=None, alias='$anchor')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dynamicAnchor","title":"dynamicAnchor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dynamicAnchor = Field(default=None, alias='$dynamicAnchor')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(default=None, alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dynamicRef","title":"dynamicRef  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dynamicRef = Field(default=None, alias='$dynamicRef')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.defs","title":"defs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>defs = Field(default=None, alias='$defs')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment = Field(default=None, alias='$comment')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.allOf","title":"allOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.anyOf","title":"anyOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>anyOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.oneOf","title":"oneOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>oneOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.not_","title":"not_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>not_ = Field(default=None, alias='not')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.if_","title":"if_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>if_ = Field(default=None, alias='if')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.then","title":"then  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>then = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.else_","title":"else_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>else_ = Field(default=None, alias='else')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dependentSchemas","title":"dependentSchemas  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dependentSchemas = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.prefixItems","title":"prefixItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefixItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.items","title":"items  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>items = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contains","title":"contains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contains = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.properties","title":"properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>properties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.patternProperties","title":"patternProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>patternProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.additionalProperties","title":"additionalProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>additionalProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.propertyNames","title":"propertyNames  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>propertyNames = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.unevaluatedItems","title":"unevaluatedItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unevaluatedItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.unevaluatedProperties","title":"unevaluatedProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unevaluatedProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.enum","title":"enum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.const","title":"const  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>const = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.multipleOf","title":"multipleOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>multipleOf = Field(default=None, gt=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maximum","title":"maximum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maximum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.exclusiveMaximum","title":"exclusiveMaximum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exclusiveMaximum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minimum","title":"minimum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minimum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.exclusiveMinimum","title":"exclusiveMinimum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exclusiveMinimum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxLength","title":"maxLength  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxLength = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minLength","title":"minLength  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minLength = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxItems","title":"maxItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxItems = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minItems","title":"minItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minItems = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.uniqueItems","title":"uniqueItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>uniqueItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxContains","title":"maxContains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxContains = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minContains","title":"minContains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minContains = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxProperties","title":"maxProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxProperties = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minProperties","title":"minProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minProperties = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dependentRequired","title":"dependentRequired  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dependentRequired = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.format","title":"format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>format = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentEncoding","title":"contentEncoding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentEncoding = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentMediaType","title":"contentMediaType  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentMediaType = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentSchema","title":"contentSchema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentSchema = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.title","title":"title  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>title = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.default","title":"default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.readOnly","title":"readOnly  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>readOnly = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.writeOnly","title":"writeOnly  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>writeOnly = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.discriminator","title":"discriminator  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>discriminator = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.xml","title":"xml  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>xml = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre> Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead."},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example","title":"Example","text":"<p>             Bases: <code>TypedDict</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.summary","title":"summary  <code>instance-attribute</code>","text":"<pre><code>summary\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.externalValue","title":"externalValue  <code>instance-attribute</code>","text":"<pre><code>externalValue\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType","title":"ParameterInType","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.query","title":"query  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>query = 'query'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.header","title":"header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header = 'header'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.path","title":"path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>path = 'path'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.cookie","title":"cookie  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cookie = 'cookie'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding","title":"Encoding","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.contentType","title":"contentType  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentType = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType","title":"MediaType","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.encoding","title":"encoding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>encoding = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase","title":"ParameterBase","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter","title":"Parameter","text":"<p>             Bases: <code>ParameterBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.in_","title":"in_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>in_ = Field(alias='in')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header","title":"Header","text":"<p>             Bases: <code>ParameterBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody","title":"RequestBody","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.content","title":"content  <code>instance-attribute</code>","text":"<pre><code>content\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link","title":"Link","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.operationRef","title":"operationRef  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationRef = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.operationId","title":"operationId  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationId = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.requestBody","title":"requestBody  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBody = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.server","title":"server  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>server = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response","title":"Response","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.links","title":"links  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>links = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation","title":"Operation","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.operationId","title":"operationId  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationId = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.requestBody","title":"requestBody  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBody = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.responses","title":"responses  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>responses = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.callbacks","title":"callbacks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>callbacks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.security","title":"security  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>security = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem","title":"PathItem","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(default=None, alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.get","title":"get  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>get = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.put","title":"put  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>put = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.post","title":"post  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>post = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.delete","title":"delete  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>delete = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.options","title":"options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>options = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.head","title":"head  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>head = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.patch","title":"patch  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>patch = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.trace","title":"trace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType","title":"SecuritySchemeType","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.apiKey","title":"apiKey  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>apiKey = 'apiKey'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.http","title":"http  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>http = 'http'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.oauth2","title":"oauth2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>oauth2 = 'oauth2'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.openIdConnect","title":"openIdConnect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>openIdConnect = 'openIdConnect'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase","title":"SecurityBase","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn","title":"APIKeyIn","text":"<p>             Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.query","title":"query  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>query = 'query'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.header","title":"header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header = 'header'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.cookie","title":"cookie  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cookie = 'cookie'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey","title":"APIKey","text":"<p>             Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=apiKey, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.in_","title":"in_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>in_ = Field(alias='in')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase","title":"HTTPBase","text":"<p>             Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=http, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.scheme","title":"scheme  <code>instance-attribute</code>","text":"<pre><code>scheme\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer","title":"HTTPBearer","text":"<p>             Bases: <code>HTTPBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=http, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.scheme","title":"scheme  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scheme = 'bearer'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.bearerFormat","title":"bearerFormat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bearerFormat = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow","title":"OAuthFlow","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit","title":"OAuthFlowImplicit","text":"<p>             Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.authorizationUrl","title":"authorizationUrl  <code>instance-attribute</code>","text":"<pre><code>authorizationUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword","title":"OAuthFlowPassword","text":"<p>             Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials","title":"OAuthFlowClientCredentials","text":"<p>             Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode","title":"OAuthFlowAuthorizationCode","text":"<p>             Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.authorizationUrl","title":"authorizationUrl  <code>instance-attribute</code>","text":"<pre><code>authorizationUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows","title":"OAuthFlows","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.implicit","title":"implicit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>implicit = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.password","title":"password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.clientCredentials","title":"clientCredentials  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>clientCredentials = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.authorizationCode","title":"authorizationCode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>authorizationCode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2","title":"OAuth2","text":"<p>             Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=oauth2, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.flows","title":"flows  <code>instance-attribute</code>","text":"<pre><code>flows\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect","title":"OpenIdConnect","text":"<p>             Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=openIdConnect, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.openIdConnectUrl","title":"openIdConnectUrl  <code>instance-attribute</code>","text":"<pre><code>openIdConnectUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components","title":"Components","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.schemas","title":"schemas  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schemas = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.responses","title":"responses  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>responses = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.requestBodies","title":"requestBodies  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBodies = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.securitySchemes","title":"securitySchemes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>securitySchemes = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.links","title":"links  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>links = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.callbacks","title":"callbacks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>callbacks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.pathItems","title":"pathItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pathItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag","title":"Tag","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI","title":"OpenAPI","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.openapi","title":"openapi  <code>instance-attribute</code>","text":"<pre><code>openapi\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.info","title":"info  <code>instance-attribute</code>","text":"<pre><code>info\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.jsonSchemaDialect","title":"jsonSchemaDialect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>jsonSchemaDialect = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.paths","title":"paths  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>paths = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.webhooks","title":"webhooks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>webhooks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.components","title":"components  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>components = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.security","title":"security  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>security = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/security/","title":"Security Tools","text":"<p>When you need to declare dependencies with OAuth2 scopes you use <code>Security()</code>.</p> <p>But you still need to define what is the dependable, the callable that you pass as a parameter to <code>Depends()</code> or <code>Security()</code>.</p> <p>There are multiple tools that you can use to create those dependables, and they get integrated into OpenAPI so they are shown in the automatic docs UI, they can be used by automatically generated clients and SDKs, etc.</p> <p>You can import them from <code>readyapi.security</code>:</p> <pre><code>from readyapi.security import (\n    APIKeyCookie,\n    APIKeyHeader,\n    APIKeyQuery,\n    HTTPAuthorizationCredentials,\n    HTTPBasic,\n    HTTPBasicCredentials,\n    HTTPBearer,\n    HTTPDigest,\n    OAuth2,\n    OAuth2AuthorizationCodeBearer,\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    OAuth2PasswordRequestFormStrict,\n    OpenIdConnect,\n    SecurityScopes,\n)\n</code></pre>"},{"location":"reference/security/#api-key-security-schemes","title":"API Key Security Schemes","text":""},{"location":"reference/security/#readyapi.security.APIKeyCookie","title":"readyapi.security.APIKeyCookie","text":"<pre><code>APIKeyCookie(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>             Bases: <code>APIKeyBase</code></p> <p>API key authentication using a cookie.</p> <p>This defines the name of the cookie that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the cookie automatically and provides it as the dependency result. But it doesn't define how to set that cookie.</p>"},{"location":"reference/security/#readyapi.security.APIKeyCookie--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyCookie--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyCookie\n\napp = ReadyAPI()\n\ncookie_scheme = APIKeyCookie(name=\"session\")\n\n\n@app.get(\"/items/\")\nasync def read_items(session: str = Depends(cookie_scheme)):\n    return {\"session\": session}\n</code></pre> PARAMETER  DESCRIPTION <code>name</code> <p>Cookie name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the cookie is not provided, <code>APIKeyCookie</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the cookie is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a cookie or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[str, Doc(\"Cookie name.\")],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the cookie is not provided, `APIKeyCookie` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the cookie is not available,\n            instead of erroring out, the dependency result will be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a cookie or\n            in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.cookie},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": cookie}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader","title":"readyapi.security.APIKeyHeader","text":"<pre><code>APIKeyHeader(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>             Bases: <code>APIKeyBase</code></p> <p>API key authentication using a header.</p> <p>This defines the name of the header that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the header automatically and provides it as the dependency result. But it doesn't define how to send that key to the client.</p>"},{"location":"reference/security/#readyapi.security.APIKeyHeader--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyHeader--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyHeader\n\napp = ReadyAPI()\n\nheader_scheme = APIKeyHeader(name=\"x-key\")\n\n\n@app.get(\"/items/\")\nasync def read_items(key: str = Depends(header_scheme)):\n    return {\"key\": key}\n</code></pre> PARAMETER  DESCRIPTION <code>name</code> <p>Header name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the header is not provided, <code>APIKeyHeader</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a header or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[str, Doc(\"Header name.\")],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the header is not provided, `APIKeyHeader` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the header is not available,\n            instead of erroring out, the dependency result will be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a header or\n            in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.header},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": header}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery","title":"readyapi.security.APIKeyQuery","text":"<pre><code>APIKeyQuery(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>             Bases: <code>APIKeyBase</code></p> <p>API key authentication using a query parameter.</p> <p>This defines the name of the query parameter that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the query parameter automatically and provides it as the dependency result. But it doesn't define how to send that API key to the client.</p>"},{"location":"reference/security/#readyapi.security.APIKeyQuery--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyQuery--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyQuery\n\napp = ReadyAPI()\n\nquery_scheme = APIKeyQuery(name=\"api_key\")\n\n\n@app.get(\"/items/\")\nasync def read_items(api_key: str = Depends(query_scheme)):\n    return {\"api_key\": api_key}\n</code></pre> PARAMETER  DESCRIPTION <code>name</code> <p>Query parameter name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the query parameter is not provided, <code>APIKeyQuery</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the query parameter is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a query parameter or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[\n        str,\n        Doc(\"Query parameter name.\"),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the query parameter is not provided, `APIKeyQuery` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the query parameter is not\n            available, instead of erroring out, the dependency result will be\n            `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a query\n            parameter or in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.query},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": query}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#http-authentication-schemes","title":"HTTP Authentication Schemes","text":""},{"location":"reference/security/#readyapi.security.HTTPBasic","title":"readyapi.security.HTTPBasic","text":"<pre><code>HTTPBasic(\n    *,\n    scheme_name=None,\n    realm=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>             Bases: <code>HTTPBase</code></p> <p>HTTP Basic authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasic--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPBasicCredentials</code> object containing the <code>username</code> and the <code>password</code>.</p> <p>Read more about it in the ReadyAPI docs for HTTP Basic Auth.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasic--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> PARAMETER  DESCRIPTION <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>realm</code> <p>HTTP Basic authentication realm.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Basic authentication is not provided (a header), <code>HTTPBasic</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Basic authentication is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in HTTP Basic authentication or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    realm: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            HTTP Basic authentication realm.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Basic authentication is not provided (a\n            header), `HTTPBasic` will automatically cancel the request and send the\n            client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Basic authentication\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in HTTP Basic\n            authentication or in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBaseModel(scheme=\"basic\", description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.realm = realm\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBase(scheme='basic', description=description)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.realm","title":"realm  <code>instance-attribute</code>","text":"<pre><code>realm = realm\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer","title":"readyapi.security.HTTPBearer","text":"<pre><code>HTTPBearer(\n    *,\n    bearerFormat=None,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>             Bases: <code>HTTPBase</code></p> <p>HTTP Bearer token authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPBearer--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPAuthorizationCredentials</code> object containing the <code>scheme</code> and the <code>credentials</code>.</p>"},{"location":"reference/security/#readyapi.security.HTTPBearer--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPAuthorizationCredentials, HTTPBearer\n\napp = ReadyAPI()\n\nsecurity = HTTPBearer()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(\n    credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n</code></pre> PARAMETER  DESCRIPTION <code>bearerFormat</code> <p>Bearer token format.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Bearer token not provided (in an <code>Authorization</code> header), <code>HTTPBearer</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Bearer token is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in an HTTP Bearer token or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    bearerFormat: Annotated[Optional[str], Doc(\"Bearer token format.\")] = None,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Bearer token not provided (in an\n            `Authorization` header), `HTTPBearer` will automatically cancel the\n            request and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Bearer token\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in an HTTP\n            Bearer token or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBearerModel(bearerFormat=bearerFormat, description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBearer(\n    bearerFormat=bearerFormat, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest","title":"readyapi.security.HTTPDigest","text":"<pre><code>HTTPDigest(\n    *, scheme_name=None, description=None, auto_error=True\n)\n</code></pre> <p>             Bases: <code>HTTPBase</code></p> <p>HTTP Digest authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPDigest--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPAuthorizationCredentials</code> object containing the <code>scheme</code> and the <code>credentials</code>.</p>"},{"location":"reference/security/#readyapi.security.HTTPDigest--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPAuthorizationCredentials, HTTPDigest\n\napp = ReadyAPI()\n\nsecurity = HTTPDigest()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(\n    credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n</code></pre> PARAMETER  DESCRIPTION <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Digest not provided, <code>HTTPDigest</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Digest is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in HTTP Digest or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Digest not provided, `HTTPDigest` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Digest is not\n            available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in HTTP\n            Digest or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBaseModel(scheme=\"digest\", description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBase(scheme='digest', description=description)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#http-credentials","title":"HTTP Credentials","text":""},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials","title":"readyapi.security.HTTPAuthorizationCredentials","text":"<p>             Bases: <code>BaseModel</code></p> <p>The HTTP authorization credentials in the result of using <code>HTTPBearer</code> or <code>HTTPDigest</code> in a dependency.</p> <p>The HTTP authorization header value is split by the first space.</p> <p>The first part is the <code>scheme</code>, the second part is the <code>credentials</code>.</p> <p>For example, in an HTTP Bearer token scheme, the client will send a header like:</p> <pre><code>Authorization: Bearer deadbeef12346\n</code></pre> <p>In this case:</p> <ul> <li><code>scheme</code> will have the value <code>\"Bearer\"</code></li> <li><code>credentials</code> will have the value <code>\"deadbeef12346\"</code></li> </ul>"},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials.scheme","title":"scheme  <code>instance-attribute</code>","text":"<pre><code>scheme\n</code></pre> <p>The HTTP authorization scheme extracted from the header value.</p>"},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials.credentials","title":"credentials  <code>instance-attribute</code>","text":"<pre><code>credentials\n</code></pre> <p>The HTTP authorization credentials extracted from the header value.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials","title":"readyapi.security.HTTPBasicCredentials","text":"<p>             Bases: <code>BaseModel</code></p> <p>The HTTP Basic credendials given as the result of using <code>HTTPBasic</code> in a dependency.</p> <p>Read more about it in the ReadyAPI docs for HTTP Basic Auth.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username\n</code></pre> <p>The HTTP Basic username.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password\n</code></pre> <p>The HTTP Basic password.</p>"},{"location":"reference/security/#oauth2-authentication","title":"OAuth2 Authentication","text":""},{"location":"reference/security/#readyapi.security.OAuth2","title":"readyapi.security.OAuth2","text":"<pre><code>OAuth2(\n    *,\n    flows=OAuthFlowsModel(),\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>             Bases: <code>SecurityBase</code></p> <p>This is the base class for OAuth2 authentication, an instance of it would be used as a dependency. All other OAuth2 classes inherit from it and customize it for each OAuth2 flow.</p> <p>You normally would not create a new class inheriting from it but use one of the existing subclasses, and maybe compose them if you want to support multiple flows.</p> <p>Read more about it in the ReadyAPI docs for Security.</p> PARAMETER  DESCRIPTION <code>flows</code> <p>The dictionary of OAuth2 flows.</p> <p> TYPE: <code>Union[OAuthFlows, Dict[str, Dict[str, Any]]]</code> DEFAULT: <code>OAuthFlows()</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    *,\n    flows: Annotated[\n        Union[OAuthFlowsModel, Dict[str, Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            The dictionary of OAuth2 flows.\n            \"\"\"\n        ),\n    ] = OAuthFlowsModel(),\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = OAuth2Model(\n        flows=cast(OAuthFlowsModel, flows), description=description\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer","title":"readyapi.security.OAuth2AuthorizationCodeBearer","text":"<pre><code>OAuth2AuthorizationCodeBearer(\n    authorizationUrl,\n    tokenUrl,\n    refreshUrl=None,\n    scheme_name=None,\n    scopes=None,\n    description=None,\n    auto_error=True,\n)\n</code></pre> <p>             Bases: <code>OAuth2</code></p> <p>OAuth2 flow for authentication using a bearer token obtained with an OAuth2 code flow. An instance of it would be used as a dependency.</p> PARAMETER  DESCRIPTION <code>authorizationUrl</code> <p> TYPE: <code>str</code> </p> <code>tokenUrl</code> <p>The URL to obtain the OAuth2 token.</p> <p> TYPE: <code>str</code> </p> <code>refreshUrl</code> <p>The URL to refresh the token and obtain a new one.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>The OAuth2 scopes that would be required by the path operations that use this dependency.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    authorizationUrl: str,\n    tokenUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to obtain the OAuth2 token.\n            \"\"\"\n        ),\n    ],\n    refreshUrl: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The URL to refresh the token and obtain a new one.\n            \"\"\"\n        ),\n    ] = None,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    scopes: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            The OAuth2 scopes that would be required by the *path operations* that\n            use this dependency.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    if not scopes:\n        scopes = {}\n    flows = OAuthFlowsModel(\n        authorizationCode=cast(\n            Any,\n            {\n                \"authorizationUrl\": authorizationUrl,\n                \"tokenUrl\": tokenUrl,\n                \"refreshUrl\": refreshUrl,\n                \"scopes\": scopes,\n            },\n        )\n    )\n    super().__init__(\n        flows=flows,\n        scheme_name=scheme_name,\n        description=description,\n        auto_error=auto_error,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer","title":"readyapi.security.OAuth2PasswordBearer","text":"<pre><code>OAuth2PasswordBearer(\n    tokenUrl,\n    scheme_name=None,\n    scopes=None,\n    description=None,\n    auto_error=True,\n)\n</code></pre> <p>             Bases: <code>OAuth2</code></p> <p>OAuth2 flow for authentication using a bearer token obtained with a password. An instance of it would be used as a dependency.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p> PARAMETER  DESCRIPTION <code>tokenUrl</code> <p>The URL to obtain the OAuth2 token. This would be the path operation that has <code>OAuth2PasswordRequestForm</code> as a dependency.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>The OAuth2 scopes that would be required by the path operations that use this dependency.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    tokenUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to obtain the OAuth2 token. This would be the *path operation*\n            that has `OAuth2PasswordRequestForm` as a dependency.\n            \"\"\"\n        ),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    scopes: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            The OAuth2 scopes that would be required by the *path operations* that\n            use this dependency.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    if not scopes:\n        scopes = {}\n    flows = OAuthFlowsModel(\n        password=cast(Any, {\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n    )\n    super().__init__(\n        flows=flows,\n        scheme_name=scheme_name,\n        description=description,\n        auto_error=auto_error,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#oauth2-password-form","title":"OAuth2 Password Form","text":""},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm","title":"readyapi.security.OAuth2PasswordRequestForm","text":"<pre><code>OAuth2PasswordRequestForm(\n    *,\n    grant_type=None,\n    username,\n    password,\n    scope=\"\",\n    client_id=None,\n    client_secret=None\n)\n</code></pre> <p>This is a dependency class to collect the <code>username</code> and <code>password</code> as form data for an OAuth2 password flow.</p> <p>The OAuth2 specification dictates that for a password flow the data should be collected using form data (instead of JSON) and that it should have the specific fields <code>username</code> and <code>password</code>.</p> <p>All the initialization parameters are extracted from the request.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordRequestForm\n\napp = ReadyAPI()\n\n\n@app.post(\"/login\")\ndef login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    data = {}\n    data[\"scopes\"] = []\n    for scope in form_data.scopes:\n        data[\"scopes\"].append(scope)\n    if form_data.client_id:\n        data[\"client_id\"] = form_data.client_id\n    if form_data.client_secret:\n        data[\"client_secret\"] = form_data.client_secret\n    return data\n</code></pre> <p>Note that for OAuth2 the scope <code>items:read</code> is a single scope in an opaque string. You could have custom internal logic to separate it by colon caracters (<code>:</code>) or similar, and get the two parts <code>items</code> and <code>read</code>. Many applications do that to group and organize permissions, you could do it as well in your application, just know that that it is application specific, it's not part of the specification.</p> PARAMETER  DESCRIPTION <code>grant_type</code> <p>The OAuth2 spec says it is required and MUST be the fixed string \"password\". Nevertheless, this dependency class is permissive and allows not passing it. If you want to enforce it, use instead the <code>OAuth2PasswordRequestFormStrict</code> dependency.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>username</code> <p><code>username</code> string. The OAuth2 spec requires the exact field name <code>username</code>.</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p><code>password</code> string. The OAuth2 spec requires the exact field name `password\".</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>A single string with actually several scopes separated by spaces. Each scope is also a string.</p> <p>For example, a single string with:</p> <p>```python \"items:read items:write users:read profile openid\" ````</p> <p>would represent the scopes:</p> <ul> <li><code>items:read</code></li> <li><code>items:write</code></li> <li><code>users:read</code></li> <li><code>profile</code></li> <li><code>openid</code></li> </ul> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>client_id</code> <p>If there's a <code>client_id</code>, it can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>client_secret</code> <p>If there's a <code>client_password</code> (and a <code>client_id</code>), they can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    *,\n    grant_type: Annotated[\n        Union[str, None],\n        Form(pattern=\"password\"),\n        Doc(\n            \"\"\"\n            The OAuth2 spec says it is required and MUST be the fixed string\n            \"password\". Nevertheless, this dependency class is permissive and\n            allows not passing it. If you want to enforce it, use instead the\n            `OAuth2PasswordRequestFormStrict` dependency.\n            \"\"\"\n        ),\n    ] = None,\n    username: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `username` string. The OAuth2 spec requires the exact field name\n            `username`.\n            \"\"\"\n        ),\n    ],\n    password: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `password` string. The OAuth2 spec requires the exact field name\n            `password\".\n            \"\"\"\n        ),\n    ],\n    scope: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            A single string with actually several scopes separated by spaces. Each\n            scope is also a string.\n\n            For example, a single string with:\n\n            ```python\n            \"items:read items:write users:read profile openid\"\n            ````\n\n            would represent the scopes:\n\n            * `items:read`\n            * `items:write`\n            * `users:read`\n            * `profile`\n            * `openid`\n            \"\"\"\n        ),\n    ] = \"\",\n    client_id: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_id`, it can be sent as part of the form fields.\n            But the OAuth2 specification recommends sending the `client_id` and\n            `client_secret` (if any) using HTTP Basic auth.\n            \"\"\"\n        ),\n    ] = None,\n    client_secret: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_password` (and a `client_id`), they can be sent\n            as part of the form fields. But the OAuth2 specification recommends\n            sending the `client_id` and `client_secret` (if any) using HTTP Basic\n            auth.\n            \"\"\"\n        ),\n    ] = None,\n):\n    self.grant_type = grant_type\n    self.username = username\n    self.password = password\n    self.scopes = scope.split()\n    self.client_id = client_id\n    self.client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.grant_type","title":"grant_type  <code>instance-attribute</code>","text":"<pre><code>grant_type = grant_type\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username = username\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password = password\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = split()\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.client_id","title":"client_id  <code>instance-attribute</code>","text":"<pre><code>client_id = client_id\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.client_secret","title":"client_secret  <code>instance-attribute</code>","text":"<pre><code>client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict","title":"readyapi.security.OAuth2PasswordRequestFormStrict","text":"<pre><code>OAuth2PasswordRequestFormStrict(\n    grant_type,\n    username,\n    password,\n    scope=\"\",\n    client_id=None,\n    client_secret=None,\n)\n</code></pre> <p>             Bases: <code>OAuth2PasswordRequestForm</code></p> <p>This is a dependency class to collect the <code>username</code> and <code>password</code> as form data for an OAuth2 password flow.</p> <p>The OAuth2 specification dictates that for a password flow the data should be collected using form data (instead of JSON) and that it should have the specific fields <code>username</code> and <code>password</code>.</p> <p>All the initialization parameters are extracted from the request.</p> <p>The only difference between <code>OAuth2PasswordRequestFormStrict</code> and <code>OAuth2PasswordRequestForm</code> is that <code>OAuth2PasswordRequestFormStrict</code> requires the client to send the form field <code>grant_type</code> with the value <code>\"password\"</code>, which is required in the OAuth2 specification (it seems that for no particular reason), while for <code>OAuth2PasswordRequestForm</code> <code>grant_type</code> is optional.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordRequestForm\n\napp = ReadyAPI()\n\n\n@app.post(\"/login\")\ndef login(form_data: Annotated[OAuth2PasswordRequestFormStrict, Depends()]):\n    data = {}\n    data[\"scopes\"] = []\n    for scope in form_data.scopes:\n        data[\"scopes\"].append(scope)\n    if form_data.client_id:\n        data[\"client_id\"] = form_data.client_id\n    if form_data.client_secret:\n        data[\"client_secret\"] = form_data.client_secret\n    return data\n</code></pre> <p>Note that for OAuth2 the scope <code>items:read</code> is a single scope in an opaque string. You could have custom internal logic to separate it by colon caracters (<code>:</code>) or similar, and get the two parts <code>items</code> and <code>read</code>. Many applications do that to group and organize permissions, you could do it as well in your application, just know that that it is application specific, it's not part of the specification.</p> the OAuth2 spec says it is required and MUST be the fixed string \"password\". <p>This dependency is strict about it. If you want to be permissive, use instead the OAuth2PasswordRequestForm dependency class.</p> <p>username: username string. The OAuth2 spec requires the exact field name \"username\". password: password string. The OAuth2 spec requires the exact field name \"password\". scope: Optional string. Several scopes (each one a string) separated by spaces. E.g.     \"items:read items:write users:read profile openid\" client_id: optional string. OAuth2 recommends sending the client_id and client_secret (if any)     using HTTP Basic auth, as: client_id:client_secret client_secret: optional string. OAuth2 recommends sending the client_id and client_secret (if any)     using HTTP Basic auth, as: client_id:client_secret</p> PARAMETER  DESCRIPTION <code>grant_type</code> <p>The OAuth2 spec says it is required and MUST be the fixed string \"password\". This dependency is strict about it. If you want to be permissive, use instead the <code>OAuth2PasswordRequestForm</code> dependency class.</p> <p> TYPE: <code>str</code> </p> <code>username</code> <p><code>username</code> string. The OAuth2 spec requires the exact field name <code>username</code>.</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p><code>password</code> string. The OAuth2 spec requires the exact field name `password\".</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>A single string with actually several scopes separated by spaces. Each scope is also a string.</p> <p>For example, a single string with:</p> <p>```python \"items:read items:write users:read profile openid\" ````</p> <p>would represent the scopes:</p> <ul> <li><code>items:read</code></li> <li><code>items:write</code></li> <li><code>users:read</code></li> <li><code>profile</code></li> <li><code>openid</code></li> </ul> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>client_id</code> <p>If there's a <code>client_id</code>, it can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>client_secret</code> <p>If there's a <code>client_password</code> (and a <code>client_id</code>), they can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    grant_type: Annotated[\n        str,\n        Form(pattern=\"password\"),\n        Doc(\n            \"\"\"\n            The OAuth2 spec says it is required and MUST be the fixed string\n            \"password\". This dependency is strict about it. If you want to be\n            permissive, use instead the `OAuth2PasswordRequestForm` dependency\n            class.\n            \"\"\"\n        ),\n    ],\n    username: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `username` string. The OAuth2 spec requires the exact field name\n            `username`.\n            \"\"\"\n        ),\n    ],\n    password: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `password` string. The OAuth2 spec requires the exact field name\n            `password\".\n            \"\"\"\n        ),\n    ],\n    scope: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            A single string with actually several scopes separated by spaces. Each\n            scope is also a string.\n\n            For example, a single string with:\n\n            ```python\n            \"items:read items:write users:read profile openid\"\n            ````\n\n            would represent the scopes:\n\n            * `items:read`\n            * `items:write`\n            * `users:read`\n            * `profile`\n            * `openid`\n            \"\"\"\n        ),\n    ] = \"\",\n    client_id: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_id`, it can be sent as part of the form fields.\n            But the OAuth2 specification recommends sending the `client_id` and\n            `client_secret` (if any) using HTTP Basic auth.\n            \"\"\"\n        ),\n    ] = None,\n    client_secret: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_password` (and a `client_id`), they can be sent\n            as part of the form fields. But the OAuth2 specification recommends\n            sending the `client_id` and `client_secret` (if any) using HTTP Basic\n            auth.\n            \"\"\"\n        ),\n    ] = None,\n):\n    super().__init__(\n        grant_type=grant_type,\n        username=username,\n        password=password,\n        scope=scope,\n        client_id=client_id,\n        client_secret=client_secret,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.grant_type","title":"grant_type  <code>instance-attribute</code>","text":"<pre><code>grant_type = grant_type\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username = username\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password = password\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = split()\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.client_id","title":"client_id  <code>instance-attribute</code>","text":"<pre><code>client_id = client_id\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.client_secret","title":"client_secret  <code>instance-attribute</code>","text":"<pre><code>client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#oauth2-security-scopes-in-dependencies","title":"OAuth2 Security Scopes in Dependencies","text":""},{"location":"reference/security/#readyapi.security.SecurityScopes","title":"readyapi.security.SecurityScopes","text":"<pre><code>SecurityScopes(scopes=None)\n</code></pre> <p>This is a special class that you can define in a parameter in a dependency to obtain the OAuth2 scopes required by all the dependencies in the same chain.</p> <p>This way, multiple dependencies can have different scopes, even when used in the same path operation. And with this, you can access all the scopes required in all those dependencies in a single place.</p> <p>Read more about it in the ReadyAPI docs for OAuth2 scopes.</p> PARAMETER  DESCRIPTION <code>scopes</code> <p>This will be filled by ReadyAPI.</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    scopes: Annotated[\n        Optional[List[str]],\n        Doc(\n            \"\"\"\n            This will be filled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n):\n    self.scopes: Annotated[\n        List[str],\n        Doc(\n            \"\"\"\n            The list of all the scopes required by dependencies.\n            \"\"\"\n        ),\n    ] = scopes or []\n    self.scope_str: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            All the scopes required by all the dependencies in a single string\n            separated by spaces, as defined in the OAuth2 specification.\n            \"\"\"\n        ),\n    ] = \" \".join(self.scopes)\n</code></pre>"},{"location":"reference/security/#readyapi.security.SecurityScopes.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = scopes or []\n</code></pre> <p>The list of all the scopes required by dependencies.</p>"},{"location":"reference/security/#readyapi.security.SecurityScopes.scope_str","title":"scope_str  <code>instance-attribute</code>","text":"<pre><code>scope_str = join(scopes)\n</code></pre> <p>All the scopes required by all the dependencies in a single string separated by spaces, as defined in the OAuth2 specification.</p>"},{"location":"reference/security/#openid-connect","title":"OpenID Connect","text":""},{"location":"reference/security/#readyapi.security.OpenIdConnect","title":"readyapi.security.OpenIdConnect","text":"<pre><code>OpenIdConnect(\n    *,\n    openIdConnectUrl,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>             Bases: <code>SecurityBase</code></p> <p>OpenID Connect authentication class. An instance of it would be used as a dependency.</p> PARAMETER  DESCRIPTION <code>openIdConnectUrl</code> <p>The OpenID Connect URL.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OpenID Connect authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OpenID Connect or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/open_id_connect_url.py</code> <pre><code>def __init__(\n    self,\n    *,\n    openIdConnectUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n        The OpenID Connect URL.\n        \"\"\"\n        ),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OpenID Connect authentication, it will automatically cancel the request\n            and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OpenID\n            Connect or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = OpenIdConnectModel(\n        openIdConnectUrl=openIdConnectUrl, description=description\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OpenIdConnect(\n    openIdConnectUrl=openIdConnectUrl,\n    description=description,\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/encoders/","title":"Encoders - <code>jsonable_encoder</code>","text":""},{"location":"reference/encoders/#readyapi.encoders.jsonable_encoder","title":"readyapi.encoders.jsonable_encoder","text":"<pre><code>jsonable_encoder(\n    obj,\n    include=None,\n    exclude=None,\n    by_alias=True,\n    exclude_unset=False,\n    exclude_defaults=False,\n    exclude_none=False,\n    custom_encoder=None,\n    sqlalchemy_safe=True,\n)\n</code></pre> <p>Convert any object to something that can be encoded in JSON.</p> <p>This is used internally by ReadyAPI to make sure anything you return can be encoded as JSON before it is sent to the client.</p> <p>You can also use it yourself, for example to convert objects before saving them in a database that supports only JSON.</p> <p>Read more about it in the ReadyAPI docs for JSON Compatible Encoder.</p> PARAMETER  DESCRIPTION <code>obj</code> <p>The input object to convert to JSON.</p> <p> TYPE: <code>Any</code> </p> <code>include</code> <p>Pydantic's <code>include</code> parameter, passed to Pydantic models to set the fields to include.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>exclude</code> <p>Pydantic's <code>exclude</code> parameter, passed to Pydantic models to set the fields to exclude.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>by_alias</code> <p>Pydantic's <code>by_alias</code> parameter, passed to Pydantic models to define if the output should use the alias names (when provided) or the Python attribute names. In an API, if you set an alias, it's probably because you want to use it in the result, so you probably want to leave this set to <code>True</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>exclude_unset</code> <p>Pydantic's <code>exclude_unset</code> parameter, passed to Pydantic models to define if it should exclude from the output the fields that were not explicitly set (and that only had their default values).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>exclude_defaults</code> <p>Pydantic's <code>exclude_defaults</code> parameter, passed to Pydantic models to define if it should exclude from the output the fields that had the same default value, even when they were explicitly set.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>exclude_none</code> <p>Pydantic's <code>exclude_none</code> parameter, passed to Pydantic models to define if it should exclude from the output any fields that have a <code>None</code> value.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>custom_encoder</code> <p>Pydantic's <code>custom_encoder</code> parameter, passed to Pydantic models to define a custom encoder.</p> <p> TYPE: <code>Optional[Dict[Any, Callable[[Any], Any]]]</code> DEFAULT: <code>None</code> </p> <code>sqlalchemy_safe</code> <p>Exclude from the output any fields that start with the name <code>_sa</code>.</p> <p>This is mainly a hack for compatibility with SQLAlchemy objects, they store internal SQLAlchemy-specific state in attributes named with <code>_sa</code>, and those objects can't (and shouldn't be) serialized to JSON.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/encoders.py</code> <pre><code>def jsonable_encoder(\n    obj: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The input object to convert to JSON.\n            \"\"\"\n        ),\n    ],\n    include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `include` parameter, passed to Pydantic models to set the\n            fields to include.\n            \"\"\"\n        ),\n    ] = None,\n    exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `exclude` parameter, passed to Pydantic models to set the\n            fields to exclude.\n            \"\"\"\n        ),\n    ] = None,\n    by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `by_alias` parameter, passed to Pydantic models to define if\n            the output should use the alias names (when provided) or the Python\n            attribute names. In an API, if you set an alias, it's probably because you\n            want to use it in the result, so you probably want to leave this set to\n            `True`.\n            \"\"\"\n        ),\n    ] = True,\n    exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_unset` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that were not explicitly\n            set (and that only had their default values).\n            \"\"\"\n        ),\n    ] = False,\n    exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_defaults` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that had the same default\n            value, even when they were explicitly set.\n            \"\"\"\n        ),\n    ] = False,\n    exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_none` parameter, passed to Pydantic models to define\n            if it should exclude from the output any fields that have a `None` value.\n            \"\"\"\n        ),\n    ] = False,\n    custom_encoder: Annotated[\n        Optional[Dict[Any, Callable[[Any], Any]]],\n        Doc(\n            \"\"\"\n            Pydantic's `custom_encoder` parameter, passed to Pydantic models to define\n            a custom encoder.\n            \"\"\"\n        ),\n    ] = None,\n    sqlalchemy_safe: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Exclude from the output any fields that start with the name `_sa`.\n\n            This is mainly a hack for compatibility with SQLAlchemy objects, they\n            store internal SQLAlchemy-specific state in attributes named with `_sa`,\n            and those objects can't (and shouldn't be) serialized to JSON.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Convert any object to something that can be encoded in JSON.\n\n    This is used internally by ReadyAPI to make sure anything you return can be\n    encoded as JSON before it is sent to the client.\n\n    You can also use it yourself, for example to convert objects before saving them\n    in a database that supports only JSON.\n\n    Read more about it in the\n    [ReadyAPI docs for JSON Compatible Encoder](https://readyapi.khulnasoft.com/tutorial/encoder/).\n    \"\"\"\n    custom_encoder = custom_encoder or {}\n    if custom_encoder:\n        if type(obj) in custom_encoder:\n            return custom_encoder[type(obj)](obj)\n        else:\n            for encoder_type, encoder_instance in custom_encoder.items():\n                if isinstance(obj, encoder_type):\n                    return encoder_instance(obj)\n    if include is not None and not isinstance(include, (set, dict)):\n        include = set(include)\n    if exclude is not None and not isinstance(exclude, (set, dict)):\n        exclude = set(exclude)\n    if isinstance(obj, BaseModel):\n        # TODO: remove when deprecating Pydantic v1\n        encoders: Dict[Any, Any] = {}\n        if not PYDANTIC_V2:\n            encoders = getattr(obj.__config__, \"json_encoders\", {})  # type: ignore[attr-defined]\n            if custom_encoder:\n                encoders.update(custom_encoder)\n        obj_dict = _model_dump(\n            obj,\n            mode=\"json\",\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n        )\n        if \"__root__\" in obj_dict:\n            obj_dict = obj_dict[\"__root__\"]\n        return jsonable_encoder(\n            obj_dict,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n            # TODO: remove when deprecating Pydantic v1\n            custom_encoder=encoders,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if dataclasses.is_dataclass(obj):\n        obj_dict = dataclasses.asdict(obj)\n        return jsonable_encoder(\n            obj_dict,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_defaults=exclude_defaults,\n            exclude_none=exclude_none,\n            custom_encoder=custom_encoder,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if isinstance(obj, Enum):\n        return obj.value\n    if isinstance(obj, PurePath):\n        return str(obj)\n    if isinstance(obj, (str, int, float, type(None))):\n        return obj\n    if isinstance(obj, UndefinedType):\n        return None\n    if isinstance(obj, dict):\n        encoded_dict = {}\n        allowed_keys = set(obj.keys())\n        if include is not None:\n            allowed_keys &amp;= set(include)\n        if exclude is not None:\n            allowed_keys -= set(exclude)\n        for key, value in obj.items():\n            if (\n                (\n                    not sqlalchemy_safe\n                    or (not isinstance(key, str))\n                    or (not key.startswith(\"_sa\"))\n                )\n                and (value is not None or not exclude_none)\n                and key in allowed_keys\n            ):\n                encoded_key = jsonable_encoder(\n                    key,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_value = jsonable_encoder(\n                    value,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_dict[encoded_key] = encoded_value\n        return encoded_dict\n    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple, deque)):\n        encoded_list = []\n        for item in obj:\n            encoded_list.append(\n                jsonable_encoder(\n                    item,\n                    include=include,\n                    exclude=exclude,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_defaults=exclude_defaults,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n            )\n        return encoded_list\n\n    if type(obj) in ENCODERS_BY_TYPE:\n        return ENCODERS_BY_TYPE[type(obj)](obj)\n    for encoder, classes_tuple in encoders_by_class_tuples.items():\n        if isinstance(obj, classes_tuple):\n            return encoder(obj)\n\n    try:\n        data = dict(obj)\n    except Exception as e:\n        errors: List[Exception] = []\n        errors.append(e)\n        try:\n            data = vars(obj)\n        except Exception as e:\n            errors.append(e)\n            raise ValueError(errors) from e\n    return jsonable_encoder(\n        data,\n        include=include,\n        exclude=exclude,\n        by_alias=by_alias,\n        exclude_unset=exclude_unset,\n        exclude_defaults=exclude_defaults,\n        exclude_none=exclude_none,\n        custom_encoder=custom_encoder,\n        sqlalchemy_safe=sqlalchemy_safe,\n    )\n</code></pre>"},{"location":"reference/staticfiles/","title":"Static Files - <code>StaticFiles</code>","text":"<p>You can use the <code>StaticFiles</code> class to serve static files, like JavaScript, CSS, images, etc.</p> <p>Read more about it in the ReadyAPI docs for Static Files.</p> <p>You can import it directly from <code>readyapi.staticfiles</code>:</p> <pre><code>from readyapi.staticfiles import StaticFiles\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles","title":"readyapi.staticfiles.StaticFiles","text":"<pre><code>StaticFiles(\n    *,\n    directory=None,\n    packages=None,\n    html=False,\n    check_dir=True,\n    follow_symlink=False\n)\n</code></pre> PARAMETER  DESCRIPTION <code>directory</code> <p> TYPE: <code>PathLike | None</code> DEFAULT: <code>None</code> </p> <code>packages</code> <p> TYPE: <code>list[str | tuple[str, str]] | None</code> DEFAULT: <code>None</code> </p> <code>html</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>check_dir</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>follow_symlink</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def __init__(\n    self,\n    *,\n    directory: PathLike | None = None,\n    packages: list[str | tuple[str, str]] | None = None,\n    html: bool = False,\n    check_dir: bool = True,\n    follow_symlink: bool = False,\n) -&gt; None:\n    self.directory = directory\n    self.packages = packages\n    self.all_directories = self.get_directories(directory, packages)\n    self.html = html\n    self.config_checked = False\n    self.follow_symlink = follow_symlink\n    if check_dir and directory is not None and not os.path.isdir(directory):\n        raise RuntimeError(f\"Directory '{directory}' does not exist\")\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.directory","title":"directory  <code>instance-attribute</code>","text":"<pre><code>directory = directory\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages = packages\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.all_directories","title":"all_directories  <code>instance-attribute</code>","text":"<pre><code>all_directories = get_directories(directory, packages)\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.html","title":"html  <code>instance-attribute</code>","text":"<pre><code>html = html\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.config_checked","title":"config_checked  <code>instance-attribute</code>","text":"<pre><code>config_checked = False\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.follow_symlink","title":"follow_symlink  <code>instance-attribute</code>","text":"<pre><code>follow_symlink = follow_symlink\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_directories","title":"get_directories","text":"<pre><code>get_directories(directory=None, packages=None)\n</code></pre> <p>Given <code>directory</code> and <code>packages</code> arguments, return a list of all the directories that should be used for serving static files from.</p> PARAMETER  DESCRIPTION <code>directory</code> <p> TYPE: <code>PathLike | None</code> DEFAULT: <code>None</code> </p> <code>packages</code> <p> TYPE: <code>list[str | tuple[str, str]] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def get_directories(\n    self,\n    directory: PathLike | None = None,\n    packages: list[str | tuple[str, str]] | None = None,\n) -&gt; list[PathLike]:\n    \"\"\"\n    Given `directory` and `packages` arguments, return a list of all the\n    directories that should be used for serving static files from.\n    \"\"\"\n    directories = []\n    if directory is not None:\n        directories.append(directory)\n\n    for package in packages or []:\n        if isinstance(package, tuple):\n            package, statics_dir = package\n        else:\n            statics_dir = \"statics\"\n        spec = importlib.util.find_spec(package)\n        assert spec is not None, f\"Package {package!r} could not be found.\"\n        assert spec.origin is not None, f\"Package {package!r} could not be found.\"\n        package_directory = os.path.normpath(\n            os.path.join(spec.origin, \"..\", statics_dir)\n        )\n        assert os.path.isdir(\n            package_directory\n        ), f\"Directory '{statics_dir!r}' in package {package!r} could not be found.\"\n        directories.append(package_directory)\n\n    return directories\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_path","title":"get_path","text":"<pre><code>get_path(scope)\n</code></pre> <p>Given the ASGI scope, return the <code>path</code> string to serve up, with OS specific path separators, and any '..', '.' components removed.</p> PARAMETER  DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def get_path(self, scope: Scope) -&gt; str:\n    \"\"\"\n    Given the ASGI scope, return the `path` string to serve up,\n    with OS specific path separators, and any '..', '.' components removed.\n    \"\"\"\n    route_path = get_route_path(scope)\n    return os.path.normpath(os.path.join(*route_path.split(\"/\")))  # noqa: E501\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_response","title":"get_response  <code>async</code>","text":"<pre><code>get_response(path, scope)\n</code></pre> <p>Returns an HTTP response, given the incoming path, method and request headers.</p> PARAMETER  DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> <code>scope</code> <p> TYPE: <code>Scope</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>async def get_response(self, path: str, scope: Scope) -&gt; Response:\n    \"\"\"\n    Returns an HTTP response, given the incoming path, method and request headers.\n    \"\"\"\n    if scope[\"method\"] not in (\"GET\", \"HEAD\"):\n        raise HTTPException(status_code=405)\n\n    try:\n        full_path, stat_result = await anyio.to_thread.run_sync(\n            self.lookup_path, path\n        )\n    except PermissionError:\n        raise HTTPException(status_code=401)\n    except OSError:\n        raise\n\n    if stat_result and stat.S_ISREG(stat_result.st_mode):\n        # We have a static file to serve.\n        return self.file_response(full_path, stat_result, scope)\n\n    elif stat_result and stat.S_ISDIR(stat_result.st_mode) and self.html:\n        # We're in HTML mode, and have got a directory URL.\n        # Check if we have 'index.html' file to serve.\n        index_path = os.path.join(path, \"index.html\")\n        full_path, stat_result = await anyio.to_thread.run_sync(\n            self.lookup_path, index_path\n        )\n        if stat_result is not None and stat.S_ISREG(stat_result.st_mode):\n            if not scope[\"path\"].endswith(\"/\"):\n                # Directory URLs should redirect to always end in \"/\".\n                url = URL(scope=scope)\n                url = url.replace(path=url.path + \"/\")\n                return RedirectResponse(url=url)\n            return self.file_response(full_path, stat_result, scope)\n\n    if self.html:\n        # Check for '404.html' if we're in HTML mode.\n        full_path, stat_result = await anyio.to_thread.run_sync(\n            self.lookup_path, \"404.html\"\n        )\n        if stat_result and stat.S_ISREG(stat_result.st_mode):\n            return FileResponse(full_path, stat_result=stat_result, status_code=404)\n    raise HTTPException(status_code=404)\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.lookup_path","title":"lookup_path","text":"<pre><code>lookup_path(path)\n</code></pre> PARAMETER  DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def lookup_path(self, path: str) -&gt; tuple[str, os.stat_result | None]:\n    for directory in self.all_directories:\n        joined_path = os.path.join(directory, path)\n        if self.follow_symlink:\n            full_path = os.path.abspath(joined_path)\n        else:\n            full_path = os.path.realpath(joined_path)\n        directory = os.path.realpath(directory)\n        if os.path.commonpath([full_path, directory]) != directory:\n            # Don't allow misbehaving clients to break out of the static files\n            # directory.\n            continue\n        try:\n            return full_path, os.stat(full_path)\n        except (FileNotFoundError, NotADirectoryError):\n            continue\n    return \"\", None\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.file_response","title":"file_response","text":"<pre><code>file_response(\n    full_path, stat_result, scope, status_code=200\n)\n</code></pre> PARAMETER  DESCRIPTION <code>full_path</code> <p> TYPE: <code>PathLike</code> </p> <code>stat_result</code> <p> TYPE: <code>stat_result</code> </p> <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def file_response(\n    self,\n    full_path: PathLike,\n    stat_result: os.stat_result,\n    scope: Scope,\n    status_code: int = 200,\n) -&gt; Response:\n    request_headers = Headers(scope=scope)\n\n    response = FileResponse(\n        full_path, status_code=status_code, stat_result=stat_result\n    )\n    if self.is_not_modified(response.headers, request_headers):\n        return NotModifiedResponse(response.headers)\n    return response\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.check_config","title":"check_config  <code>async</code>","text":"<pre><code>check_config()\n</code></pre> <p>Perform a one-off configuration check that StaticFiles is actually pointed at a directory, so that we can raise loud errors rather than just returning 404 responses.</p> Source code in <code>starlette/staticfiles.py</code> <pre><code>async def check_config(self) -&gt; None:\n    \"\"\"\n    Perform a one-off configuration check that StaticFiles is actually\n    pointed at a directory, so that we can raise loud errors rather than\n    just returning 404 responses.\n    \"\"\"\n    if self.directory is None:\n        return\n\n    try:\n        stat_result = await anyio.to_thread.run_sync(os.stat, self.directory)\n    except FileNotFoundError:\n        raise RuntimeError(\n            f\"StaticFiles directory '{self.directory}' does not exist.\"\n        )\n    if not (stat.S_ISDIR(stat_result.st_mode) or stat.S_ISLNK(stat_result.st_mode)):\n        raise RuntimeError(\n            f\"StaticFiles path '{self.directory}' is not a directory.\"\n        )\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.is_not_modified","title":"is_not_modified","text":"<pre><code>is_not_modified(response_headers, request_headers)\n</code></pre> <p>Given the request and response headers, return <code>True</code> if an HTTP \"Not Modified\" response could be returned instead.</p> PARAMETER  DESCRIPTION <code>response_headers</code> <p> TYPE: <code>Headers</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def is_not_modified(\n    self, response_headers: Headers, request_headers: Headers\n) -&gt; bool:\n    \"\"\"\n    Given the request and response headers, return `True` if an HTTP\n    \"Not Modified\" response could be returned instead.\n    \"\"\"\n    try:\n        if_none_match = request_headers[\"if-none-match\"]\n        etag = response_headers[\"etag\"]\n        if etag in [tag.strip(\" W/\") for tag in if_none_match.split(\",\")]:\n            return True\n    except KeyError:\n        pass\n\n    try:\n        if_modified_since = parsedate(request_headers[\"if-modified-since\"])\n        last_modified = parsedate(response_headers[\"last-modified\"])\n        if (\n            if_modified_since is not None\n            and last_modified is not None\n            and if_modified_since &gt;= last_modified\n        ):\n            return True\n    except KeyError:\n        pass\n\n    return False\n</code></pre>"},{"location":"reference/templating/","title":"Templating - <code>Jinja2Templates</code>","text":"<p>You can use the <code>Jinja2Templates</code> class to render Jinja templates.</p> <p>Read more about it in the ReadyAPI docs for Templates.</p> <p>You can import it directly from <code>readyapi.templating</code>:</p> <pre><code>from readyapi.templating import Jinja2Templates\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates","title":"readyapi.templating.Jinja2Templates","text":"<pre><code>Jinja2Templates(\n    directory=None,\n    *,\n    context_processors=None,\n    env=None,\n    **env_options\n)\n</code></pre> <p>templates = Jinja2Templates(\"templates\")</p> <p>return templates.TemplateResponse(\"index.html\", {\"request\": request})</p> PARAMETER  DESCRIPTION <code>directory</code> <p> TYPE: <code>str | PathLike[AnyStr] | Sequence[str | PathLike[AnyStr]] | None</code> DEFAULT: <code>None</code> </p> <code>context_processors</code> <p> TYPE: <code>list[Callable[[Request], dict[str, Any]]] | None</code> DEFAULT: <code>None</code> </p> <code>env</code> <p> TYPE: <code>Environment | None</code> DEFAULT: <code>None</code> </p> <code>**env_options</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def __init__(\n    self,\n    directory: str\n    | PathLike[typing.AnyStr]\n    | typing.Sequence[str | PathLike[typing.AnyStr]]\n    | None = None,\n    *,\n    context_processors: list[typing.Callable[[Request], dict[str, typing.Any]]]\n    | None = None,\n    env: jinja2.Environment | None = None,\n    **env_options: typing.Any,\n) -&gt; None:\n    if env_options:\n        warnings.warn(\n            \"Extra environment options are deprecated. Use a preconfigured jinja2.Environment instead.\",  # noqa: E501\n            DeprecationWarning,\n        )\n    assert jinja2 is not None, \"jinja2 must be installed to use Jinja2Templates\"\n    assert directory or env, \"either 'directory' or 'env' arguments must be passed\"\n    self.context_processors = context_processors or []\n    if directory is not None:\n        self.env = self._create_env(directory, **env_options)\n    elif env is not None:\n        self.env = env\n\n    self._setup_env_defaults(self.env)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.context_processors","title":"context_processors  <code>instance-attribute</code>","text":"<pre><code>context_processors = context_processors or []\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.env","title":"env  <code>instance-attribute</code>","text":"<pre><code>env = _create_env(directory, **env_options)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.get_template","title":"get_template","text":"<pre><code>get_template(name)\n</code></pre> PARAMETER  DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def get_template(self, name: str) -&gt; jinja2.Template:\n    return self.env.get_template(name)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.TemplateResponse","title":"TemplateResponse","text":"<pre><code>TemplateResponse(*args, **kwargs)\n</code></pre> PARAMETER  DESCRIPTION <code>*args</code> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def TemplateResponse(\n    self, *args: typing.Any, **kwargs: typing.Any\n) -&gt; _TemplateResponse:\n    if args:\n        if isinstance(\n            args[0], str\n        ):  # the first argument is template name (old style)\n            warnings.warn(\n                \"The `name` is not the first parameter anymore. \"\n                \"The first parameter should be the `Request` instance.\\n\"\n                'Replace `TemplateResponse(name, {\"request\": request})` by `TemplateResponse(request, name)`.',  # noqa: E501\n                DeprecationWarning,\n            )\n\n            name = args[0]\n            context = args[1] if len(args) &gt; 1 else kwargs.get(\"context\", {})\n            status_code = (\n                args[2] if len(args) &gt; 2 else kwargs.get(\"status_code\", 200)\n            )\n            headers = args[2] if len(args) &gt; 2 else kwargs.get(\"headers\")\n            media_type = args[3] if len(args) &gt; 3 else kwargs.get(\"media_type\")\n            background = args[4] if len(args) &gt; 4 else kwargs.get(\"background\")\n\n            if \"request\" not in context:\n                raise ValueError('context must include a \"request\" key')\n            request = context[\"request\"]\n        else:  # the first argument is a request instance (new style)\n            request = args[0]\n            name = args[1] if len(args) &gt; 1 else kwargs[\"name\"]\n            context = args[2] if len(args) &gt; 2 else kwargs.get(\"context\", {})\n            status_code = (\n                args[3] if len(args) &gt; 3 else kwargs.get(\"status_code\", 200)\n            )\n            headers = args[4] if len(args) &gt; 4 else kwargs.get(\"headers\")\n            media_type = args[5] if len(args) &gt; 5 else kwargs.get(\"media_type\")\n            background = args[6] if len(args) &gt; 6 else kwargs.get(\"background\")\n    else:  # all arguments are kwargs\n        if \"request\" not in kwargs:\n            warnings.warn(\n                \"The `TemplateResponse` now requires the `request` argument.\\n\"\n                'Replace `TemplateResponse(name, {\"context\": context})` by `TemplateResponse(request, name)`.',  # noqa: E501\n                DeprecationWarning,\n            )\n            if \"request\" not in kwargs.get(\"context\", {}):\n                raise ValueError('context must include a \"request\" key')\n\n        context = kwargs.get(\"context\", {})\n        request = kwargs.get(\"request\", context.get(\"request\"))\n        name = typing.cast(str, kwargs[\"name\"])\n        status_code = kwargs.get(\"status_code\", 200)\n        headers = kwargs.get(\"headers\")\n        media_type = kwargs.get(\"media_type\")\n        background = kwargs.get(\"background\")\n\n    context.setdefault(\"request\", request)\n    for context_processor in self.context_processors:\n        context.update(context_processor(request))\n\n    template = self.get_template(name)\n    return _TemplateResponse(\n        template,\n        context,\n        status_code=status_code,\n        headers=headers,\n        media_type=media_type,\n        background=background,\n    )\n</code></pre>"},{"location":"reference/testclient/","title":"Test Client - <code>TestClient</code>","text":"<p>You can use the <code>TestClient</code> class to test ReadyAPI applications without creating an actual HTTP and socket connection, just communicating directly with the ReadyAPI code.</p> <p>Read more about it in the ReadyAPI docs for Testing.</p> <p>You can import it directly from <code>readyapi.testclient</code>:</p> <pre><code>from readyapi.testclient import TestClient\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient","title":"readyapi.testclient.TestClient","text":"<pre><code>TestClient(\n    app,\n    base_url=\"http://testserver\",\n    raise_server_exceptions=True,\n    root_path=\"\",\n    backend=\"asyncio\",\n    backend_options=None,\n    cookies=None,\n    headers=None,\n    follow_redirects=True,\n)\n</code></pre> <p>             Bases: <code>Client</code></p> PARAMETER  DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>base_url</code> <p> TYPE: <code>str</code> DEFAULT: <code>'http://testserver'</code> </p> <code>raise_server_exceptions</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>root_path</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>backend</code> <p> TYPE: <code>Literal['asyncio', 'trio']</code> DEFAULT: <code>'asyncio'</code> </p> <code>backend_options</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>dict[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    base_url: str = \"http://testserver\",\n    raise_server_exceptions: bool = True,\n    root_path: str = \"\",\n    backend: typing.Literal[\"asyncio\", \"trio\"] = \"asyncio\",\n    backend_options: dict[str, typing.Any] | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    headers: dict[str, str] | None = None,\n    follow_redirects: bool = True,\n) -&gt; None:\n    self.async_backend = _AsyncBackend(\n        backend=backend, backend_options=backend_options or {}\n    )\n    if _is_asgi3(app):\n        asgi_app = app\n    else:\n        app = typing.cast(ASGI2App, app)  # type: ignore[assignment]\n        asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]\n    self.app = asgi_app\n    self.app_state: dict[str, typing.Any] = {}\n    transport = _TestClientTransport(\n        self.app,\n        portal_factory=self._portal_factory,\n        raise_server_exceptions=raise_server_exceptions,\n        root_path=root_path,\n        app_state=self.app_state,\n    )\n    if headers is None:\n        headers = {}\n    headers.setdefault(\"user-agent\", \"testclient\")\n    super().__init__(\n        base_url=base_url,\n        headers=headers,\n        transport=transport,\n        follow_redirects=follow_redirects,\n        cookies=cookies,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.headers","title":"headers  <code>property</code> <code>writable</code>","text":"<pre><code>headers\n</code></pre> <p>HTTP headers to include when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.follow_redirects","title":"follow_redirects  <code>instance-attribute</code>","text":"<pre><code>follow_redirects = follow_redirects\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.max_redirects","title":"max_redirects  <code>instance-attribute</code>","text":"<pre><code>max_redirects = max_redirects\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed\n</code></pre> <p>Check if the client being closed</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.trust_env","title":"trust_env  <code>property</code>","text":"<pre><code>trust_env\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.timeout","title":"timeout  <code>property</code> <code>writable</code>","text":"<pre><code>timeout\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.event_hooks","title":"event_hooks  <code>property</code> <code>writable</code>","text":"<pre><code>event_hooks\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.auth","title":"auth  <code>property</code> <code>writable</code>","text":"<pre><code>auth\n</code></pre> <p>Authentication class used when none is passed at the request-level.</p> <p>See also Authentication.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.base_url","title":"base_url  <code>property</code> <code>writable</code>","text":"<pre><code>base_url\n</code></pre> <p>Base URL to use when sending requests with relative URLs.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.cookies","title":"cookies  <code>property</code> <code>writable</code>","text":"<pre><code>cookies\n</code></pre> <p>Cookie values to include when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.params","title":"params  <code>property</code> <code>writable</code>","text":"<pre><code>params\n</code></pre> <p>Query parameters to include in the URL when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.portal","title":"portal  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>portal = None\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.async_backend","title":"async_backend  <code>instance-attribute</code>","text":"<pre><code>async_backend = _AsyncBackend(\n    backend=backend, backend_options=backend_options or {}\n)\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = asgi_app\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.app_state","title":"app_state  <code>instance-attribute</code>","text":"<pre><code>app_state = {}\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.build_request","title":"build_request","text":"<pre><code>build_request(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> <p>Build and return a request instance.</p> <ul> <li>The <code>params</code>, <code>headers</code> and <code>cookies</code> arguments are merged with any values set on the client.</li> <li>The <code>url</code> argument is merged with any <code>base_url</code> set on the client.</li> </ul> <p>See also: Request instances</p> PARAMETER  DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>Optional[RequestContent]</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>Optional[RequestData]</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>Optional[RequestFiles]</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>Optional[QueryParamTypes]</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>Optional[HeaderTypes]</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>Optional[CookieTypes]</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p> TYPE: <code>Union[TimeoutTypes, UseClientDefault]</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>Optional[RequestExtensions]</code> DEFAULT: <code>None</code> </p> Source code in <code>httpx/_client.py</code> <pre><code>def build_request(\n    self,\n    method: str,\n    url: URLTypes,\n    *,\n    content: typing.Optional[RequestContent] = None,\n    data: typing.Optional[RequestData] = None,\n    files: typing.Optional[RequestFiles] = None,\n    json: typing.Optional[typing.Any] = None,\n    params: typing.Optional[QueryParamTypes] = None,\n    headers: typing.Optional[HeaderTypes] = None,\n    cookies: typing.Optional[CookieTypes] = None,\n    timeout: typing.Union[TimeoutTypes, UseClientDefault] = USE_CLIENT_DEFAULT,\n    extensions: typing.Optional[RequestExtensions] = None,\n) -&gt; Request:\n    \"\"\"\n    Build and return a request instance.\n\n    * The `params`, `headers` and `cookies` arguments\n    are merged with any values set on the client.\n    * The `url` argument is merged with any `base_url` set on the client.\n\n    See also: [Request instances][0]\n\n    [0]: /advanced/#request-instances\n    \"\"\"\n    url = self._merge_url(url)\n    headers = self._merge_headers(headers)\n    cookies = self._merge_cookies(cookies)\n    params = self._merge_queryparams(params)\n    extensions = {} if extensions is None else extensions\n    if \"timeout\" not in extensions:\n        timeout = (\n            self.timeout\n            if isinstance(timeout, UseClientDefault)\n            else Timeout(timeout)\n        )\n        extensions = dict(**extensions, timeout=timeout.as_dict())\n    return Request(\n        method,\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.stream","title":"stream","text":"<pre><code>stream(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> <p>Alternative to <code>httpx.request()</code> that streams the response body instead of loading it into memory at once.</p> <p>Parameters: See <code>httpx.request</code>.</p> <p>See also: Streaming Responses</p> PARAMETER  DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>Optional[RequestContent]</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>Optional[RequestData]</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>Optional[RequestFiles]</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>Optional[QueryParamTypes]</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>Optional[HeaderTypes]</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>Optional[CookieTypes]</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>Union[AuthTypes, UseClientDefault, None]</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>Union[bool, UseClientDefault]</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>Union[TimeoutTypes, UseClientDefault]</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>Optional[RequestExtensions]</code> DEFAULT: <code>None</code> </p> YIELDS DESCRIPTION <code>Response</code> Source code in <code>httpx/_client.py</code> <pre><code>@contextmanager\ndef stream(\n    self,\n    method: str,\n    url: URLTypes,\n    *,\n    content: typing.Optional[RequestContent] = None,\n    data: typing.Optional[RequestData] = None,\n    files: typing.Optional[RequestFiles] = None,\n    json: typing.Optional[typing.Any] = None,\n    params: typing.Optional[QueryParamTypes] = None,\n    headers: typing.Optional[HeaderTypes] = None,\n    cookies: typing.Optional[CookieTypes] = None,\n    auth: typing.Union[AuthTypes, UseClientDefault, None] = USE_CLIENT_DEFAULT,\n    follow_redirects: typing.Union[bool, UseClientDefault] = USE_CLIENT_DEFAULT,\n    timeout: typing.Union[TimeoutTypes, UseClientDefault] = USE_CLIENT_DEFAULT,\n    extensions: typing.Optional[RequestExtensions] = None,\n) -&gt; typing.Iterator[Response]:\n    \"\"\"\n    Alternative to `httpx.request()` that streams the response body\n    instead of loading it into memory at once.\n\n    **Parameters**: See `httpx.request`.\n\n    See also: [Streaming Responses][0]\n\n    [0]: /quickstart#streaming-responses\n    \"\"\"\n    request = self.build_request(\n        method=method,\n        url=url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        timeout=timeout,\n        extensions=extensions,\n    )\n    response = self.send(\n        request=request,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        stream=True,\n    )\n    try:\n        yield response\n    finally:\n        response.close()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.send","title":"send","text":"<pre><code>send(\n    request,\n    *,\n    stream=False,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT\n)\n</code></pre> <p>Send a request.</p> <p>The request is sent as-is, unmodified.</p> <p>Typically you'll want to build one with <code>Client.build_request()</code> so that any client-level configuration is merged into the request, but passing an explicit <code>httpx.Request()</code> is supported as well.</p> <p>See also: Request instances</p> PARAMETER  DESCRIPTION <code>request</code> <p> TYPE: <code>Request</code> </p> <code>stream</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>auth</code> <p> TYPE: <code>Union[AuthTypes, UseClientDefault, None]</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>Union[bool, UseClientDefault]</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> Source code in <code>httpx/_client.py</code> <pre><code>def send(\n    self,\n    request: Request,\n    *,\n    stream: bool = False,\n    auth: typing.Union[AuthTypes, UseClientDefault, None] = USE_CLIENT_DEFAULT,\n    follow_redirects: typing.Union[bool, UseClientDefault] = USE_CLIENT_DEFAULT,\n) -&gt; Response:\n    \"\"\"\n    Send a request.\n\n    The request is sent as-is, unmodified.\n\n    Typically you'll want to build one with `Client.build_request()`\n    so that any client-level configuration is merged into the request,\n    but passing an explicit `httpx.Request()` is supported as well.\n\n    See also: [Request instances][0]\n\n    [0]: /advanced/#request-instances\n    \"\"\"\n    if self._state == ClientState.CLOSED:\n        raise RuntimeError(\"Cannot send a request, as the client has been closed.\")\n\n    self._state = ClientState.OPENED\n    follow_redirects = (\n        self.follow_redirects\n        if isinstance(follow_redirects, UseClientDefault)\n        else follow_redirects\n    )\n\n    auth = self._build_request_auth(request, auth)\n\n    response = self._send_handling_auth(\n        request,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        history=[],\n    )\n    try:\n        if not stream:\n            response.read()\n\n        return response\n\n    except BaseException as exc:\n        response.close()\n        raise exc\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close transport and proxies.</p> Source code in <code>httpx/_client.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\n    Close transport and proxies.\n    \"\"\"\n    if self._state != ClientState.CLOSED:\n        self._state = ClientState.CLOSED\n\n        self._transport.close()\n        for transport in self._mounts.values():\n            if transport is not None:\n                transport.close()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.request","title":"request","text":"<pre><code>request(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects=None,\n    allow_redirects=None,\n    timeout=httpx._client.USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER  DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>allow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def request(  # type: ignore[override]\n    self,\n    method: str,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | None = None,\n    allow_redirects: bool | None = None,\n    timeout: httpx._types.TimeoutTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    url = self._merge_url(url)\n    redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n    return super().request(\n        method,\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=redirect,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.get","title":"get","text":"<pre><code>get(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects=None,\n    allow_redirects=None,\n    timeout=httpx._client.USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER  DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>allow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def get(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | None = None,\n    allow_redirects: bool | None = None,\n    timeout: httpx._types.TimeoutTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n    return super().get(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=redirect,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.options","title":"options","text":"<pre><code>options(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects=None,\n    allow_redirects=None,\n    timeout=httpx._client.USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER  DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>allow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def options(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | None = None,\n    allow_redirects: bool | None = None,\n    timeout: httpx._types.TimeoutTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n    return super().options(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=redirect,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.head","title":"head","text":"<pre><code>head(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects=None,\n    allow_redirects=None,\n    timeout=httpx._client.USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER  DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>allow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def head(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | None = None,\n    allow_redirects: bool | None = None,\n    timeout: httpx._types.TimeoutTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n    return super().head(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=redirect,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.post","title":"post","text":"<pre><code>post(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects=None,\n    allow_redirects=None,\n    timeout=httpx._client.USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER  DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>allow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def post(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | None = None,\n    allow_redirects: bool | None = None,\n    timeout: httpx._types.TimeoutTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n    return super().post(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=redirect,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.put","title":"put","text":"<pre><code>put(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects=None,\n    allow_redirects=None,\n    timeout=httpx._client.USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER  DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>allow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def put(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | None = None,\n    allow_redirects: bool | None = None,\n    timeout: httpx._types.TimeoutTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n    return super().put(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=redirect,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.patch","title":"patch","text":"<pre><code>patch(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects=None,\n    allow_redirects=None,\n    timeout=httpx._client.USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER  DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>allow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def patch(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | None = None,\n    allow_redirects: bool | None = None,\n    timeout: httpx._types.TimeoutTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n    return super().patch(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=redirect,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.delete","title":"delete","text":"<pre><code>delete(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects=None,\n    allow_redirects=None,\n    timeout=httpx._client.USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER  DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>allow_redirects</code> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def delete(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | None = None,\n    allow_redirects: bool | None = None,\n    timeout: httpx._types.TimeoutTypes\n    | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n    return super().delete(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=redirect,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.websocket_connect","title":"websocket_connect","text":"<pre><code>websocket_connect(url, subprotocols=None, **kwargs)\n</code></pre> PARAMETER  DESCRIPTION <code>url</code> <p> TYPE: <code>str</code> </p> <code>subprotocols</code> <p> TYPE: <code>Sequence[str] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def websocket_connect(\n    self,\n    url: str,\n    subprotocols: typing.Sequence[str] | None = None,\n    **kwargs: typing.Any,\n) -&gt; WebSocketTestSession:\n    url = urljoin(\"ws://testserver\", url)\n    headers = kwargs.get(\"headers\", {})\n    headers.setdefault(\"connection\", \"upgrade\")\n    headers.setdefault(\"sec-websocket-key\", \"testserver==\")\n    headers.setdefault(\"sec-websocket-version\", \"13\")\n    if subprotocols is not None:\n        headers.setdefault(\"sec-websocket-protocol\", \", \".join(subprotocols))\n    kwargs[\"headers\"] = headers\n    try:\n        super().request(\"GET\", url, **kwargs)\n    except _Upgrade as exc:\n        session = exc.session\n    else:\n        raise RuntimeError(\"Expected WebSocket upgrade\")  # pragma: no cover\n\n    return session\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.lifespan","title":"lifespan  <code>async</code>","text":"<pre><code>lifespan()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def lifespan(self) -&gt; None:\n    scope = {\"type\": \"lifespan\", \"state\": self.app_state}\n    try:\n        await self.app(scope, self.stream_receive.receive, self.stream_send.send)\n    finally:\n        await self.stream_send.send(None)\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.wait_startup","title":"wait_startup  <code>async</code>","text":"<pre><code>wait_startup()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def wait_startup(self) -&gt; None:\n    await self.stream_receive.send({\"type\": \"lifespan.startup\"})\n\n    async def receive() -&gt; typing.Any:\n        message = await self.stream_send.receive()\n        if message is None:\n            self.task.result()\n        return message\n\n    message = await receive()\n    assert message[\"type\"] in (\n        \"lifespan.startup.complete\",\n        \"lifespan.startup.failed\",\n    )\n    if message[\"type\"] == \"lifespan.startup.failed\":\n        await receive()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.wait_shutdown","title":"wait_shutdown  <code>async</code>","text":"<pre><code>wait_shutdown()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def wait_shutdown(self) -&gt; None:\n    async def receive() -&gt; typing.Any:\n        message = await self.stream_send.receive()\n        if message is None:\n            self.task.result()\n        return message\n\n    async with self.stream_send:\n        await self.stream_receive.send({\"type\": \"lifespan.shutdown\"})\n        message = await receive()\n        assert message[\"type\"] in (\n            \"lifespan.shutdown.complete\",\n            \"lifespan.shutdown.failed\",\n        )\n        if message[\"type\"] == \"lifespan.shutdown.failed\":\n            await receive()\n</code></pre>"},{"location":"newsletter/","title":"ReadyAPI and friends newsletter","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#latest-changes","title":"Latest Changes","text":"<ul> <li>Nx pkg patch 1. PR #41 by @NxPKG.</li> <li>Update README.md. PR #40 by @NxPKG.</li> <li>Update api_key.py. PR #36 by @NxPKG.</li> <li>\u2b06 Bump actions/setup-python from 4 to 5. PR #35 by @dependabot[bot].</li> <li>Develop. PR #32 by @FortiShield.</li> <li>Develop. PR #31 by @FortiShield.</li> </ul>"},{"location":"release-notes/#fixes","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix support for query parameters with list types, handle JSON encoding Pydantic <code>UndefinedType</code>. PR #9929 by @arjwilliams.</li> </ul>"},{"location":"release-notes/#refactors","title":"Refactors","text":"<ul> <li>\u2728 Add support for Pydantic's 2.7 new deprecated Field parameter, remove URL from validation errors response. PR #11461 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak docs and translations links, typos, format. PR #11389 by @nilslindemann.</li> <li>\ud83d\udcdd Fix typo in <code>docs/es/docs/async.md</code>. PR #11400 by @fabianfalon.</li> <li>\ud83d\udcdd Update OpenAPI client generation docs to use <code>@hey-api/openapi-ts</code>. PR #11339 by @jordanshatford.</li> </ul>"},{"location":"release-notes/#translations","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/index.html</code>. PR #11430 by @waketzheng.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #11411 by @anton2yakovlev.</li> <li>\ud83c\udf10 Add Portuguese translations for <code>learn/index.md</code> <code>resources/index.md</code> <code>help/index.md</code> <code>about/index.md</code>. PR #10807 by @nazarepiedady.</li> <li>\ud83c\udf10 Update Russian translations for deployments docs. PR #11271 by @Lufa1u.</li> <li>\ud83c\udf10 Add Bengali translations for <code>docs/bn/docs/python-types.md</code>. PR #11376 by @imtiaz101325.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/simple-oauth2.md</code>. PR #5744 by @KdHyeon0661.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/help-readyapi.md</code>. PR #4139 by @kty4119.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/events.md</code>. PR #5087 by @pers0n4.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/path-operation-configuration.md</code>. PR #1954 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/request-forms-and-files.md</code>. PR #1946 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10532 by @AlertRED.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/debugging.md</code>. PR #5695 by @JungWooGeon.</li> </ul>"},{"location":"release-notes/#internal","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade version of typer for docs. PR #11393 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01102","title":"0.110.2","text":""},{"location":"release-notes/#fixes_1","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix parameterless <code>Depends()</code> with generics. PR #9479 by @nzig.</li> </ul>"},{"location":"release-notes/#refactors_1","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update mypy. PR #11049 by @k0t3n.</li> <li>\u267b\ufe0f Simplify string format with f-strings in <code>readyapi/applications.py</code>. PR #11335 by @igeni.</li> </ul>"},{"location":"release-notes/#upgrades","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to &gt;=0.37.2,&lt;0.38.0, remove Starlette filterwarning for internal tests. PR #11266 by @nothielf.</li> </ul>"},{"location":"release-notes/#docs_1","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak docs and translations links and remove old docs translations. PR #11381 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/oauth2.py</code>. PR #11368 by @shandongbinzhou.</li> <li>\ud83d\udcdd Update links to Pydantic docs to point to new website. PR #11328 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/extra-models.md</code>. PR #11329 by @alejsdev.</li> <li>\ud83d\udcdd Update <code>project-generation.md</code>. PR #11326 by @alejsdev.</li> <li>\ud83d\udcdd Update External Links. PR #11327 by @alejsdev.</li> <li>\ud83d\udd25 Remove link to Pydantic's benchmark, on other i18n pages.. PR #11224 by @hirotoKirimaru.</li> <li>\u270f\ufe0f Fix typos in docstrings. PR #11295 by @davidhuser.</li> <li>\ud83d\udee0\ufe0f Improve Node.js script in docs to generate TypeScript clients. PR #11293 by @alejsdev.</li> <li>\ud83d\udcdd Update examples for tests to replace \"inexistent\" for \"nonexistent\". PR #11220 by @Homesteady.</li> <li>\ud83d\udcdd Update <code>python-multipart</code> GitHub link in all docs from <code>https://andrew-d.github.io/python-multipart/</code> to <code>https://github.com/Kludex/python-multipart</code>. PR #11239 by @joshjhans.</li> </ul>"},{"location":"release-notes/#translations_1","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/response-status-code.md</code>. PR #10357 by @nilslindemann.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #3480 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/body.md</code>. PR #3481 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/path-params.md</code>. PR #3479 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/body-fields.md</code>. PR #3496 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/extra-models.md</code>. PR #3497 by @jaystone776.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/metadata.md</code>. PR #2667 by @tokusumi.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/contributing.md</code>. PR #10487 by @nilslindemann.</li> <li>\ud83c\udf10 Update Japanese translation of <code>docs/ja/docs/tutorial/query-params.md</code>. PR #10808 by @urushio.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/security/get-current-user.md</code>. PR #3842 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/openapi-callbacks.md</code>. PR #3825 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/extending-openapi.md</code>. PR #3823 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-dependencies.md</code>. PR #3819 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/custom-request-and-route.md</code>. PR #3816 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/external-links.md</code>. PR #3833 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/templates.md</code>. PR #3812 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/sub-applications.md</code>. PR #3811 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/async-sql-databases.md</code>. PR #3805 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/middleware.md</code>. PR #3804 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/dataclasses.md</code>. PR #3803 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/using-request-directly.md</code>. PR #3802 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/http-basic-auth.md</code>. PR #3801 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/oauth2-scopes.md</code>. PR #3800 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/cookie-params.md</code>. PR #3486 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/header-params.md</code>. PR #3487 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/response-status-code.md</code>. PR #3498 by @jaystone776.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/first-steps.md</code>. PR #10432 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/events.md</code>. PR #10693 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/cloud.md</code>. PR #10746 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/behind-a-proxy.md</code>. PR #10675 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/help-readyapi.md</code>. PR #10455 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/python-types.md</code>. PR #10287 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/path-params.md</code>. PR #10290 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/handling-errors.md</code>. PR #10379 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/index.md</code>. PR #10283 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/http-basic-auth.md</code>. PR #10651 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/bigger-applications.md</code>. PR #10554 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/path-operation-advanced-configuration.md</code>. PR #10612 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/static-files.md</code>. PR #10584 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/oauth2-jwt.md</code>. PR #10522 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/response-model.md</code>. PR #10345 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/extra-models.md</code>. PR #10351 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-updates.md</code>. PR #10396 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/alternatives.md</code>. PR #10855 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/templates.md</code>. PR #10678 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/oauth2-scopes.md</code>. PR #10643 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/async-tests.md</code>. PR #10708 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/metadata.md</code>. PR #10581 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/testing.md</code>. PR #10586 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/schema-extra-example.md</code>. PR #10597 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/index.md</code>. PR #10611 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-directly.md</code>. PR #10618 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/additional-responses.md</code>. PR #10626 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-cookies.md</code>. PR #10627 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-headers.md</code>. PR #10628 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-change-status-code.md</code>. PR #10632 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/advanced-dependencies.md</code>. PR #10633 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/index.md</code>. PR #10635 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/using-request-directly.md</code>. PR #10653 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/dataclasses.md</code>. PR #10667 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/middleware.md</code>. PR #10668 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/sub-applications.md</code>. PR #10671 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/websockets.md</code>. PR #10687 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-websockets.md</code>. PR #10703 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-events.md</code>. PR #10704 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-dependencies.md</code>. PR #10706 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/openapi-callbacks.md</code>. PR #10710 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/settings.md</code>. PR #10709 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/wsgi.md</code>. PR #10713 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/index.md</code>. PR #10733 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/https.md</code>. PR #10737 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/manually.md</code>. PR #10738 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/concepts.md</code>. PR #10744 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/features.md</code>. PR #10284 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/server-workers.md</code>. PR #10747 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/docker.md</code>. PR #10759 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/index.md</code>. PR #10769 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/general.md</code>. PR #10770 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/graphql.md</code>. PR #10788 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/custom-request-and-route.md</code>. PR #10789 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/conditional-openapi.md</code>. PR #10790 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/separate-openapi-schemas.md</code>. PR #10796 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/configure-swagger-ui.md</code>. PR #10804 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/custom-docs-ui-assets.md</code>. PR #10803 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/parameters.md</code>. PR #10814 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/status.md</code>. PR #10815 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/uploadfile.md</code>. PR #10816 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/exceptions.md</code>. PR #10817 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/dependencies.md</code>. PR #10818 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/apirouter.md</code>. PR #10819 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/websockets.md</code>. PR #10822 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/httpconnection.md</code>. PR #10823 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/response.md</code>. PR #10824 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/middleware.md</code>. PR #10837 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/openapi/*.md</code>. PR #10838 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/security/index.md</code>. PR #10839 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/staticfiles.md</code>. PR #10841 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/testclient.md</code>. PR #10843 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/project-generation.md</code>. PR #10851 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/history-design-future.md</code>. PR #10865 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10422 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/global-dependencies.md</code>. PR #10420 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/readyapi-people.md</code>. PR #10285 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #10409 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/index.md</code>. PR #10429 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #10411 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/extra-data-types.md</code>. PR #10534 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/simple-oauth2.md</code>. PR #10504 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/get-current-user.md</code>. PR #10439 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-forms-and-files.md</code>. PR #10368 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/encoder.md</code>. PR #10385 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-forms.md</code>. PR #10361 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/versions.md</code>. PR #10491 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/async.md</code>. PR #10449 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/cookie-params.md</code>. PR #10323 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #10407 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/index.md</code>. PR #10399 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/header-params.md</code>. PR #10326 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/path-params-numeric-validations.md</code>. PR #10307 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/query-params-str-validations.md</code>. PR #10304 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-files.md</code>. PR #10364 by @nilslindemann.</li> <li>:globe_with_meridians: Add Portuguese translation for <code>docs/pt/docs/advanced/templates.md</code>. PR #11338 by @SamuelBFavarin.</li> <li>\ud83c\udf10 Add Bengali translations for <code>docs/bn/docs/learn/index.md</code>. PR #11337 by @imtiaz101325.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/index.md</code>. PR #11296 by @choi-haram.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/about/index.md</code>. PR #11299 by @choi-haram.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/index.md</code>. PR #9613 by @ElliottLarsen.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/extending-openapi.md</code>. PR #10794 by @nilslindemann.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/metadata.md</code>. PR #11286 by @jackleeio.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/contributing.md</code>. PR #10887 by @Aruelius.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/docs/readyapi-people.md</code>. PR #11195 by @vusallyv.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/index.md</code>. PR #11223 by @kohiry.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #11242 by @jackleeio.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/learn/index.md</code>. PR #11192 by @vusallyv.</li> </ul>"},{"location":"release-notes/#internal_1","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #11387 by @khulnasoft.</li> <li>\u2b06 Bump actions/cache from 3 to 4. PR #10988 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.11 to 1.8.14. PR #11318 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.1.0 to 10.2.0. PR #11011 by @dependabot[bot].</li> <li>\u2b06 Bump black from 23.3.0 to 24.3.0. PR #11325 by @dependabot[bot].</li> <li>\ud83d\udc77 Add cron to run test once a week on monday. PR #11377 by @estebanx64.</li> <li>\u2795 Replace mkdocs-markdownextradata-plugin with mkdocs-macros-plugin. PR #11383 by @khulnasoft.</li> <li>\ud83d\udc77 Disable MkDocs insiders social plugin while an issue in MkDocs Material is handled. PR #11373 by @khulnasoft.</li> <li>\ud83d\udc77 Fix logic for when to install and use MkDocs Insiders. PR #11372 by @khulnasoft.</li> <li>\ud83d\udc77 Do not use Python packages cache for publish. PR #11366 by @khulnasoft.</li> <li>\ud83d\udc77 Add CI to test sdists for redistribution (e.g. Linux distros). PR #11365 by @khulnasoft.</li> <li>\ud83d\udc77 Update build-docs GitHub Action path filter. PR #11354 by @khulnasoft.</li> <li>\ud83d\udd27 Update Ruff config, add extra ignore rule from SQLModel. PR #11353 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade configuration for Ruff v0.2.0. PR #11075 by @charliermarsh.</li> <li>\ud83d\udd27 Update sponsors, add MongoDB. PR #11346 by @khulnasoft.</li> <li>\u2b06 Bump dorny/paths-filter from 2 to 3. PR #11028 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 3.0.0 to 3.1.4. PR #11310 by @dependabot[bot].</li> <li>\u267b\ufe0f Refactor computing ReadyAPI People, include 3 months, 6 months, 1 year, based on comment date, not discussion date. PR #11304 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #11228 by @khulnasoft.</li> <li>\ud83d\udd25 Remove Jina AI QA Bot from the docs. PR #11268 by @nan-wang.</li> <li>\ud83d\udd27 Update sponsors, remove Jina, remove Powens, move TestDriven.io. PR #11213 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01100","title":"0.110.0","text":""},{"location":"release-notes/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>\ud83d\udc1b Fix unhandled growing memory for internal server errors, refactor dependencies with <code>yield</code> and <code>except</code> to require raising again as in regular Python. PR #11191 by @khulnasoft.<ul> <li>This is a breaking change (and only slightly) if you used dependencies with <code>yield</code>, used <code>except</code> in those dependencies, and didn't raise again.</li> <li>This was reported internally by @rushilsrivastava as a memory leak when the server had unhandled exceptions that would produce internal server errors, the memory allocated before that point would not be released.</li> <li>Read the new docs: Dependencies with <code>yield</code> and <code>except</code>.</li> </ul> </li> </ul> <p>In short, if you had dependencies that looked like:</p> <pre><code>def my_dep():\n    try:\n        yield\n    except SomeException:\n        pass\n</code></pre> <p>Now you need to make sure you raise again after <code>except</code>, just as you would in regular Python:</p> <pre><code>def my_dep():\n    try:\n        yield\n    except SomeException:\n        raise\n</code></pre>"},{"location":"release-notes/#docs_2","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix minor typos in <code>docs/ko/docs/</code>. PR #11126 by @KaniKim.</li> <li>\u270f\ufe0f Fix minor typo in <code>readyapi/applications.py</code>. PR #11099 by @JacobHayes.</li> </ul>"},{"location":"release-notes/#translations_2","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/background.md</code>. PR #10820 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/templating.md</code>. PR #10842 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/external-links.md</code>. PR #10852 by @nilslindemann.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/tutorial/query-params.md</code>. PR #11162 by @hasansezertasan.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/encoders.md</code>. PR #10840 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/responses.md</code>. PR #10825 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/request.md</code>. PR #10821 by @nilslindemann.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/query-params.md</code>. PR #11078 by @emrhnsyts.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/readyapi.md</code>. PR #10813 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/newsletter.md</code>. PR #10853 by @nilslindemann.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/learn/index.md</code>. PR #11142 by @hsuanchi.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/dependencies/global-dependencies.md</code>. PR #11123 by @riroan.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #11124 by @riroan.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/schema-extra-example.md</code>. PR #11121 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/body-fields.md</code>. PR #11112 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/cookie-params.md</code>. PR #11118 by @riroan.</li> <li>\ud83c\udf10 Update Korean translation for <code>/docs/ko/docs/dependencies/index.md</code>. PR #11114 by @KaniKim.</li> <li>\ud83c\udf10 Update Korean translation for <code>/docs/ko/docs/deployment/docker.md</code>. PR #11113 by @KaniKim.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/tutorial/first-steps.md</code>. PR #11094 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/security/index.md</code>. PR #2278 by @Xaraxx.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/response-headers.md</code>. PR #2276 by @Xaraxx.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/deployment/index.md</code> and <code>~/deployment/versions.md</code>. PR #9669 by @pabloperezmoya.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/benchmarks.md</code>. PR #10928 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/response-change-status-code.md</code>. PR #11100 by @alejsdev.</li> </ul>"},{"location":"release-notes/#01092","title":"0.109.2","text":""},{"location":"release-notes/#upgrades_1","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade version of Starlette to <code>&gt;= 0.36.3</code>. PR #11086 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_3","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/readyapi-people.md</code>. PR #10547 by @alperiox.</li> </ul>"},{"location":"release-notes/#internal_2","title":"Internal","text":"<ul> <li>\ud83c\udf71 Add new ReadyAPI logo. PR #11090 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01091","title":"0.109.1","text":""},{"location":"release-notes/#security-fixes","title":"Security fixes","text":"<ul> <li>\u2b06\ufe0f Upgrade minimum version of <code>python-multipart</code> to <code>&gt;=0.0.7</code> to fix a vulnerability when using form data with a ReDos attack. You can also simply upgrade <code>python-multipart</code>.</li> </ul> <p>Read more in the advisory: Content-Type Header ReDoS.</p>"},{"location":"release-notes/#features","title":"Features","text":"<ul> <li>\u2728  Include HTTP 205 in status codes with no body. PR #10969 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_2","title":"Refactors","text":"<ul> <li>\u2705 Refactor tests for duplicate operation ID generation for compatibility with other tools running the ReadyAPI test suite. PR #10876 by @emmettbutler.</li> <li>\u267b\ufe0f Simplify string format with f-strings in <code>readyapi/utils.py</code>. PR #10576 by @eukub.</li> <li>\ud83d\udd27 Fix Ruff configuration unintentionally enabling and re-disabling mccabe complexity check. PR #10893 by @jiridanek.</li> <li>\u2705 Re-enable test in <code>tests/test_tutorial/test_header_params/test_tutorial003.py</code> after fix in Starlette. PR #10904 by @ooknimm.</li> </ul>"},{"location":"release-notes/#docs_3","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak wording in <code>help-readyapi.md</code>. PR #11040 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak docs for Behind a Proxy. PR #11038 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link: 10 Tips for adding SQLAlchemy to ReadyAPI. PR #11036 by @Donnype.</li> <li>\ud83d\udcdd Add External Link: Tips on migrating from Flask to ReadyAPI and vice-versa. PR #11029 by @jtemporal.</li> <li>\ud83d\udcdd Deprecate old tutorials: Peewee, Couchbase, encode/databases. PR #10979 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/oauth2.py</code>. PR #10972 by @RafalSkolasinski.</li> <li>\ud83d\udcdd Update <code>HTTPException</code> details in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #5418 by @papb.</li> <li>\u270f\ufe0f A few tweaks in <code>docs/de/docs/tutorial/first-steps.md</code>. PR #10959 by @nilslindemann.</li> <li>\u270f\ufe0f Fix link in <code>docs/en/docs/advanced/async-tests.md</code>. PR #10960 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typos for Spanish documentation. PR #10957 by @jlopezlira.</li> <li>\ud83d\udcdd Add warning about lifespan functions and backwards compatibility with events. PR #10734 by @jacob-indigo.</li> <li>\u270f\ufe0f Fix broken link in <code>docs/tutorial/sql-databases.md</code> in several languages. PR #10716 by @theoohoho.</li> <li>\u270f\ufe0f Remove broken links from <code>external_links.yml</code>. PR #10943 by @Torabek.</li> <li>\ud83d\udcdd Update template docs with more info about <code>url_for</code>. PR #5937 by @EzzEddin.</li> <li>\ud83d\udcdd Update usage of Token model in security docs. PR #9313 by @piotrszacilowski.</li> <li>\u270f\ufe0f Update highlighted line in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #5490 by @papb.</li> <li>\ud83d\udcdd Add External Link: Explore How to Effectively Use JWT With ReadyAPI. PR #10212 by @aanchlia.</li> <li>\ud83d\udcdd Add hyperlink to <code>docs/en/docs/tutorial/static-files.md</code>. PR #10243 by @hungtsetse.</li> <li>\ud83d\udcdd Add External Link: Instrument a ReadyAPI service adding tracing with OpenTelemetry and send/show traces in Grafana Tempo. PR #9440 by @softwarebloat.</li> <li>\ud83d\udcdd Review and rewording of <code>en/docs/contributing.md</code>. PR #10480 by @nilslindemann.</li> <li>\ud83d\udcdd Add External Link: ML serving and monitoring with ReadyAPI and Evidently. PR #9701 by @mnrozhkov.</li> <li>\ud83d\udcdd Reword in docs, from \"have in mind\" to \"keep in mind\". PR #10376 by @malicious.</li> <li>\ud83d\udcdd Add External Link: Talk by Jeny Sadadia. PR #10265 by @JenySadadia.</li> <li>\ud83d\udcdd Add location info to <code>tutorial/bigger-applications.md</code>. PR #10552 by @nilslindemann.</li> <li>\u270f\ufe0f Fix Pydantic method name in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code>. PR #10826 by @ahmedabdou14.</li> </ul>"},{"location":"release-notes/#translations_4","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/external-links.md</code>. PR #10933 by @pablocm83.</li> <li>\ud83c\udf10 Update Korean translation for <code>docs/ko/docs/tutorial/first-steps.md</code>, <code>docs/ko/docs/tutorial/index.md</code>, <code>docs/ko/docs/tutorial/path-params.md</code>, and <code>docs/ko/docs/tutorial/query-params.md</code>. PR #4218 by @SnowSuno.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10870 by @zhiquanchi.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/concepts.md</code>. PR #10282 by @xzmeng.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/docs/index.md</code>. PR #11047 by @aykhans.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/middleware.md</code>. PR #2829 by @JeongHyeongKim.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-nested-models.md</code>. PR #10313 by @nilslindemann.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/tutorial/middleware.md</code>. PR #9695 by @mojtabapaso.</li> <li>\ud83c\udf10 Update Farsi translation for <code>docs/fa/docs/index.md</code>. PR #10216 by @theonlykingpin.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-fields.md</code>. PR #10310 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body.md</code>. PR #10295 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-multiple-params.md</code>. PR #10308 by @nilslindemann.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/security/get-current-user.md</code>. PR #2681 by @sh0nk.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/advanced-dependencies.md</code>. PR #3798 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/events.md</code>. PR #3815 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/behind-a-proxy.md</code>. PR #3820 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-events.md</code>. PR #3818 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-websockets.md</code>. PR #3817 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-database.md</code>. PR #3821 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/deta.md</code>. PR #3837 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/history-design-future.md</code>. PR #3832 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/project-generation.md</code>. PR #3831 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/docker.md</code>. PR #10296 by @xzmeng.</li> <li>\ud83c\udf10 Update Spanish translation for <code>docs/es/docs/features.md</code>. PR #10884 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/newsletter.md</code>. PR #10922 by @pablocm83.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/background-tasks.md</code>. PR #5910 by @junah201.</li> <li>:globe_with_meridians: Add Turkish translation for <code>docs/tr/docs/alternatives.md</code>. PR #10502 by @alperiox.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/dependencies/index.md</code>. PR #10989 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/body.md</code>. PR #11000 by @KaniKim.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/schema-extra-example.md</code>. PR #4065 by @luccasmmg.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/history-design-future.md</code>. PR #11012 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/resources/index.md</code>. PR #11020 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/how-to/index.md</code>. PR #11021 by @hasansezertasan.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/query-params.md</code>. PR #10293 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/benchmarks.md</code>. PR #10866 by @nilslindemann.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/learn/index.md</code>. PR #11014 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/tutorial/security/index.md</code>. PR #9945 by @mojtabapaso.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/help/index.md</code>. PR #11013 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/about/index.md</code>. PR #11006 by @hasansezertasan.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/benchmarks.md</code>. PR #11005 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Italian translation for <code>docs/it/docs/index.md</code>. PR #5233 by @matteospanio.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/help/index.md</code>. PR #10983 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/features.md</code>. PR #10976 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/get-current-user.md</code>. PR #5737 by @KdHyeon0661.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/first-steps.md</code>. PR #10541 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/handling-errors.md</code>. PR #10375 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/encoder.md</code>. PR #10374 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-updates.md</code>. PR #10373 by @AlertRED.</li> <li>\ud83c\udf10 Russian translation: updated <code>readyapi-people.md</code>.. PR #10255 by @NiKuma0.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/security/index.md</code>. PR #5798 by @3w36zj6.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/generate-clients.md</code>. PR #10725 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/openapi-webhooks.md</code>. PR #10712 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/custom-response.md</code>. PR #10624 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/additional-status-codes.md</code>. PR #10617 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/middleware.md</code>. PR #10391 by @JohannesJungbluth.</li> <li>\ud83c\udf10 Add German translation for introduction documents. PR #10497 by @nilslindemann.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/encoder.md</code>. PR #1955 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/extra-data-types.md</code>. PR #1932 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/async.md</code>. PR #5191 by @BilalAlpaslan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/project-generation.md</code>. PR #5192 by @BilalAlpaslan.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/docker.md</code>. PR #5657 by @nearnear.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/server-workers.md</code>. PR #4935 by @jujumilk3.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/index.md</code>. PR #4561 by @jujumilk3.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/path-operation-configuration.md</code>. PR #3639 by @jungsu-kwon.</li> <li>\ud83c\udf10 Modify the description of <code>zh</code> - Traditional Chinese. PR #10889 by @cherinyy.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/static-files.md</code>. PR #2957 by @jeesang7.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/response-model.md</code>. PR #2766 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/body-multiple-params.md</code>. PR #2461 by @PandaHun.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/query-params-str-validations.md</code>. PR #2415 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/python-types.md</code>. PR #2267 by @jrim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/body-nested-models.md</code>. PR #2506 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/learn/index.md</code>. PR #10977 by @KaniKim.</li> <li>\ud83c\udf10 Initialize translations for Traditional Chinese. PR #10505 by @hsuanchi.</li> <li>\u270f\ufe0f Tweak the german translation of <code>docs/de/docs/tutorial/index.md</code>. PR #10962 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typo error in <code>docs/ko/docs/tutorial/path-params.md</code>. PR #10758 by @2chanhaeng.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #1961 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #1960 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #1959 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/background-tasks.md</code>. PR #2668 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/index.md</code> and <code>docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #1958 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/response-model.md</code>. PR #1938 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-multiple-params.md</code>. PR #1903 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/path-params-numeric-validations.md</code>. PR #1902 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/python-types.md</code>. PR #1899 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/handling-errors.md</code>. PR #1953 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/response-status-code.md</code>. PR #1942 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/extra-models.md</code>. PR #1941 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese tranlsation for <code>docs/ja/docs/tutorial/schema-extra-example.md</code>. PR #1931 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-nested-models.md</code>. PR #1930 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-fields.md</code>. PR #1923 by @SwftAlpc.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/index.md</code>. PR #9502 by @fhabers21.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/background-tasks.md</code>. PR #10566 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typo in <code>docs/ru/docs/index.md</code>. PR #10672 by @Delitel-WEB.</li> <li>\u270f\ufe0f Fix typos in <code>docs/zh/docs/tutorial/extra-data-types.md</code>. PR #10727 by @HiemalBeryl.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #10410 by @AlertRED.</li> </ul>"},{"location":"release-notes/#internal_3","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #11074 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: add Coherence. PR #11066 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action issue-manager. PR #11056 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsors: TalkPython badge. PR #11052 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: TalkPython badge image. PR #11048 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Deta. PR #11041 by @khulnasoft.</li> <li>\ud83d\udc84 Fix CSS breaking RTL languages (erroneously introduced by a previous RTL PR). PR #11039 by @khulnasoft.</li> <li>\ud83d\udd27 Add Italian to <code>mkdocs.yml</code>. PR #11016 by @alejsdev.</li> <li>\ud83d\udd28 Verify <code>mkdocs.yml</code> languages in CI, update <code>docs.py</code>. PR #11009 by @khulnasoft.</li> <li>\ud83d\udd27 Update config in <code>label-approved.yml</code> to accept translations with 1 reviewer. PR #11007 by @alejsdev.</li> <li>\ud83d\udc77 Add changes-requested handling in GitHub Action issue manager. PR #10971 by @khulnasoft.</li> <li>\ud83d\udd27  Group dependencies on dependabot updates. PR #10952 by @Kludex.</li> <li>\u2b06 Bump actions/setup-python from 4 to 5. PR #10764 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.10 to 1.8.11. PR #10731 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.28.0 to 3.0.0. PR #10777 by @dependabot[bot].</li> <li>\ud83d\udd27  Add support for translations to languages with a longer code name, like <code>zh-hant</code>. PR #10950 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01090","title":"0.109.0","text":""},{"location":"release-notes/#features_1","title":"Features","text":"<ul> <li>\u2728 Add support for Python 3.12. PR #10666 by @Jamim.</li> </ul>"},{"location":"release-notes/#upgrades_2","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to &gt;=0.35.0,&lt;0.36.0. PR #10938 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_4","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/alternatives.md</code>. PR #10931 by @s111d.</li> <li>\ud83d\udcdd Replace <code>email</code> with <code>username</code> in <code>docs_src/security/tutorial007</code> code examples. PR #10649 by @nilslindemann.</li> <li>\ud83d\udcdd Add VS Code tutorial link. PR #10592 by @nilslindemann.</li> <li>\ud83d\udcdd Add notes about Pydantic v2's new <code>.model_dump()</code>. PR #10929 by @khulnasoft.</li> <li>\ud83d\udcdd Fix broken link in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #10765 by @HurSungYun.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI application monitoring made easy. PR #10917 by @khulnasoft.</li> <li>\u2728 Generate automatic language names for docs translations. PR #5354 by @jakul.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/alternatives.md</code> and <code>docs/en/docs/tutorial/dependencies/index.md</code>. PR #10906 by @s111d.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10834 by @Molkree.</li> <li>\ud83d\udcdd Add article: \"Building a RESTful API with ReadyAPI: Secure Signup and Login Functionality Included\". PR #9733 by @dxphilo.</li> <li>\ud83d\udcdd Add warning about lifecycle events with <code>AsyncClient</code>. PR #4167 by @andrew-chang-dewitt.</li> <li>\u270f\ufe0f Fix typos in <code>/docs/reference/exceptions.md</code> and <code>/en/docs/reference/status.md</code>. PR #10809 by @clarencepenz.</li> <li>\u270f\ufe0f Fix typo in <code>openapi-callbacks.md</code>. PR #10673 by @kayjan.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/routing.py</code> . PR #10520 by @sepsh.</li> <li>\ud83d\udcdd Replace HTTP code returned in case of existing user error in docs for testing. PR #4482 by @TristanMarion.</li> <li>\ud83d\udcdd Add blog for ReadyAPI &amp; Supabase. PR #6018 by @theinfosecguy.</li> <li>\ud83d\udcdd Update example source files for SQL databases with SQLAlchemy. PR #9508 by @s-mustafa.</li> <li>\ud83d\udcdd Update code examples in docs for body, replace name <code>create_item</code> with <code>update_item</code> when appropriate. PR #5913 by @OttoAndrey.</li> <li>\u270f\ufe0f Fix typo in dependencies with yield source examples. PR #10847 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_5","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Bengali translation for <code>docs/bn/docs/index.md</code>. PR #9177 by @Fahad-Md-Kamal.</li> <li>\u270f\ufe0f Update Python version in <code>index.md</code> in several languages. PR #10711 by @tamago3keran.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-forms-and-files.md</code>. PR #10347 by @AlertRED.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/index.md</code>. PR #10362 by @rostik1410.</li> <li>\u270f\ufe0f  Update Python version in <code>docs/ko/docs/index.md</code>. PR #10680 by @Eeap.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/features.md</code>. PR #5887 by @amirilf.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/additional-responses.md</code>. PR #10325 by @ShuibeiC.</li> <li>\ud83c\udf10 Fix typos in Russian translations for <code>docs/ru/docs/tutorial/background-tasks.md</code>, <code>docs/ru/docs/tutorial/body-nested-models.md</code>, <code>docs/ru/docs/tutorial/debugging.md</code>, <code>docs/ru/docs/tutorial/testing.md</code>. PR #10311 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-files.md</code>. PR #10332 by @AlertRED.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/server-workers.md</code>. PR #10292 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/cloud.md</code>. PR #10291 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/manually.md</code>. PR #10279 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/https.md</code>. PR #10277 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/index.md</code>. PR #10275 by @xzmeng.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/first-steps.md</code>. PR #9530 by @fhabers21.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/index.md</code>. PR #10444 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/learn/index.md</code>. PR #10479 by @KAZAMA-DREAM.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/learn/index.md</code>. PR #10539 by @AlertRED.</li> <li>\ud83c\udf10 Update SQLAlchemy instruction in Chinese translation <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #9712 by @Royc30ne.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/external-links.md</code>. PR #10549 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/learn/index.md</code>. PR #10885 by @pablocm83.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body-fields.md</code>. PR #10670 by @ArtemKhymenko.</li> <li>\ud83c\udf10 Add Hungarian translation for <code>/docs/hu/docs/index.md</code>. PR #10812 by @takacs.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/newsletter.md</code>. PR #10550 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/help/index.md</code>. PR #10907 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/about/index.md</code>. PR #10908 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/resources/index.md</code>. PR #10909 by @pablocm83.</li> </ul>"},{"location":"release-notes/#internal_4","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10871 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade custom GitHub Action comment-docs-preview-in-pr. PR #10916 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action latest-changes. PR #10915 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action label-approved. PR #10913 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action label-approved. PR #10905 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01080","title":"0.108.0","text":""},{"location":"release-notes/#upgrades_3","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to <code>&gt;=0.29.0,&lt;0.33.0</code>, update docs and usage of templates with new Starlette arguments. Remove pin of AnyIO <code>&gt;=3.7.1,&lt;4.0.0</code>, add support for AnyIO 4.x.x. PR #10846 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01070","title":"0.107.0","text":""},{"location":"release-notes/#upgrades_4","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.28.0. PR #9636 by @adriangb.</li> </ul>"},{"location":"release-notes/#docs_5","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs: Node.js script alternative to update OpenAPI for generated clients. PR #10845 by @alejsdev.</li> <li>\ud83d\udcdd Restructure Docs section in Contributing page. PR #10844 by @alejsdev.</li> </ul>"},{"location":"release-notes/#01060","title":"0.106.0","text":""},{"location":"release-notes/#breaking-changes_1","title":"Breaking Changes","text":"<p>Using resources from dependencies with <code>yield</code> in background tasks is no longer supported.</p> <p>This change is what supports the new features, read below. \ud83e\udd13</p>"},{"location":"release-notes/#dependencies-with-yield-httpexception-and-background-tasks","title":"Dependencies with <code>yield</code>, <code>HTTPException</code> and Background Tasks","text":"<p>Dependencies with <code>yield</code> now can raise <code>HTTPException</code> and other exceptions after <code>yield</code>. \ud83c\udf89</p> <p>Read the new docs here: Dependencies with <code>yield</code> and <code>HTTPException</code>.</p> <pre><code>from readyapi import Depends, ReadyAPI, HTTPException\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <p>Before ReadyAPI 0.106.0, raising exceptions after <code>yield</code> was not possible, the exit code in dependencies with <code>yield</code> was executed after the response was sent, so Exception Handlers would have already run.</p> <p>This was designed this way mainly to allow using the same objects \"yielded\" by dependencies inside of background tasks, because the exit code would be executed after the background tasks were finished.</p> <p>Nevertheless, as this would mean waiting for the response to travel through the network while unnecessarily holding a resource in a dependency with yield (for example a database connection), this was changed in ReadyAPI 0.106.0.</p> <p>Additionally, a background task is normally an independent set of logic that should be handled separately, with its own resources (e.g. its own database connection).</p> <p>If you used to rely on this behavior, now you should create the resources for background tasks inside the background task itself, and use internally only data that doesn't depend on the resources of dependencies with <code>yield</code>.</p> <p>For example, instead of using the same database session, you would create a new database session inside of the background task, and you would obtain the objects from the database using this new session. And then instead of passing the object from the database as a parameter to the background task function, you would pass the ID of that object and then obtain the object again inside the background task function.</p> <p>The sequence of execution before ReadyAPI 0.106.0 was like this diagram:</p> <p>Time flows from top to bottom. And each column is one of the parts interacting or executing code.</p> <pre><code>sequenceDiagram\n\nparticipant client as Client\nparticipant handler as Exception handler\nparticipant dep as Dep with yield\nparticipant operation as Path Operation\nparticipant tasks as Background tasks\n\n    Note over client,tasks: Can raise exception for dependency, handled after response is sent\n    Note over client,operation: Can raise HTTPException and can change the response\n    client -&gt;&gt; dep: Start request\n    Note over dep: Run code up to yield\n    opt raise\n        dep --&gt;&gt; handler: Raise HTTPException\n        handler --&gt;&gt; client: HTTP error response\n        dep --&gt;&gt; dep: Raise other exception\n    end\n    dep -&gt;&gt; operation: Run dependency, e.g. DB session\n    opt raise\n        operation --&gt;&gt; dep: Raise HTTPException\n        dep --&gt;&gt; handler: Auto forward exception\n        handler --&gt;&gt; client: HTTP error response\n        operation --&gt;&gt; dep: Raise other exception\n        dep --&gt;&gt; handler: Auto forward exception\n    end\n    operation -&gt;&gt; client: Return response to client\n    Note over client,operation: Response is already sent, can't change it anymore\n    opt Tasks\n        operation --&gt;&gt; tasks: Send background tasks\n    end\n    opt Raise other exception\n        tasks --&gt;&gt; dep: Raise other exception\n    end\n    Note over dep: After yield\n    opt Handle other exception\n        dep --&gt;&gt; dep: Handle exception, can't change response. E.g. close DB session.\n    end</code></pre> <p>The new execution flow can be found in the docs: Execution of dependencies with <code>yield</code>.</p>"},{"location":"release-notes/#features_2","title":"Features","text":"<ul> <li>\u2728 Add support for raising exceptions (including <code>HTTPException</code>) in dependencies with <code>yield</code> in the exit code, do not support them in background tasks. PR #10831 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_5","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10567 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01050","title":"0.105.0","text":""},{"location":"release-notes/#features_3","title":"Features","text":"<ul> <li>\u2728 Add support for multiple Annotated annotations, e.g. <code>Annotated[str, Field(), Query()]</code>. PR #10773 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_3","title":"Refactors","text":"<ul> <li>\ud83d\udd25 Remove unused NoneType. PR #10774 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_6","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak default suggested configs for generating clients. PR #10736 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_6","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Scalar. PR #10728 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add PropelAuth. PR #10760 by @khulnasoft.</li> <li>\ud83d\udc77 Update build docs, verify README on CI. PR #10750 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Fern. PR #10729 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Codacy. PR #10677 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Reflex. PR #10676 by @khulnasoft.</li> <li>\ud83d\udcdd Update release notes, move and check latest-changes. PR #10588 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade latest-changes GitHub Action. PR #10587 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01041","title":"0.104.1","text":""},{"location":"release-notes/#fixes_2","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin Swagger UI version to 5.9.0 temporarily to handle a bug crashing it in 5.9.1. PR #10529 by @alejandraklachquin.<ul> <li>This is not really a bug in ReadyAPI but in Swagger UI, nevertheless pinning the version will work while a solution is found on the Swagger UI side.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_7","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update data structure and render for external-links. PR #10495 by @khulnasoft.</li> <li>\u270f\ufe0f Fix link to SPDX license identifier in <code>docs/en/docs/tutorial/metadata.md</code>. PR #10433 by @worldworm.</li> <li>\ud83d\udcdd Update example validation error from Pydantic v1 to match Pydantic v2 in <code>docs/en/docs/tutorial/path-params.md</code>. PR #10043 by @giuliowaitforitdavide.</li> <li>\u270f\ufe0f Fix typos in emoji docs and in some source examples. PR #10438 by @afuetterer.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/reference/dependencies.md</code>. PR #10465 by @suravshresth.</li> <li>\u270f\ufe0f Fix typos and rewordings in <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #10468 by @yogabonito.</li> <li>\ud83d\udcdd Update docs, remove references to removed <code>pydantic.Required</code> in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #10469 by @yogabonito.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/reference/index.md</code>. PR #10467 by @tarsil.</li> <li>\ud83d\udd25 Remove unnecessary duplicated docstrings. PR #10484 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_7","title":"Internal","text":"<ul> <li>\u270f\ufe0f Update Pydantic links to dotenv support. PR #10511 by @White-Mask.</li> <li>\u270f\ufe0f Update links in <code>docs/en/docs/async.md</code> and <code>docs/zh/docs/async.md</code> to make them relative. PR #10498 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix links in <code>docs/em/docs/async.md</code>. PR #10507 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix typo in <code>docs/em/docs/index.md</code>, Python 3.8. PR #10521 by @kerriop.</li> <li>\u2b06 Bump pillow from 9.5.0 to 10.1.0. PR #10446 by @dependabot[bot].</li> <li>\u2b06 Update mkdocs-material requirement from &lt;9.0.0,&gt;=8.1.4 to &gt;=8.1.4,&lt;10.0.0. PR #5862 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.21 to 9.4.7. PR #10545 by @dependabot[bot].</li> <li>\ud83d\udc77 Install MkDocs Material Insiders only when secrets are available, for Dependabot. PR #10544 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors badges, Databento. PR #10519 by @khulnasoft.</li> <li>\ud83d\udc77 Adopt Ruff format. PR #10517 by @khulnasoft.</li> <li>\ud83d\udd27 Add <code>CITATION.cff</code> file for academic citations. PR #10496 by @khulnasoft.</li> <li>\ud83d\udc1b Fix overriding MKDocs theme lang in hook. PR #10490 by @khulnasoft.</li> <li>\ud83d\udd25 Drop/close Gitter chat. Questions should go to GitHub Discussions, free conversations to Discord.. PR #10485 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01040","title":"0.104.0","text":""},{"location":"release-notes/#features_4","title":"Features","text":"<ul> <li>\u2728 Add reference (code API) docs with PEP 727, add subclass with custom docstrings for <code>BackgroundTasks</code>, refactor docs structure. PR #10392 by @khulnasoft. New docs at ReadyAPI Reference - Code API.</li> </ul>"},{"location":"release-notes/#upgrades_5","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Drop support for Python 3.7, require Python 3.8 or above. PR #10442 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_8","title":"Internal","text":"<ul> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.27.0 to 2.28.0. PR #10268 by @dependabot[bot].</li> <li>\u2b06 Bump actions/checkout from 3 to 4. PR #10208 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.6 to 1.8.10. PR #10061 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors, Bump.sh images. PR #10381 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #10363 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01032","title":"0.103.2","text":""},{"location":"release-notes/#refactors_4","title":"Refactors","text":"<ul> <li>\u2b06\ufe0f Upgrade compatibility with Pydantic v2.4, new renamed functions and JSON Schema input/output models with default values. PR #10344 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_6","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/extra-data-types.md</code>. PR #10132 by @ArtemKhymenko.</li> <li>\ud83c\udf10 Fix typos in French translations for <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>, <code>docs/fr/docs/alternatives.md</code>, <code>docs/fr/docs/async.md</code>, <code>docs/fr/docs/features.md</code>, <code>docs/fr/docs/help-readyapi.md</code>, <code>docs/fr/docs/index.md</code>, <code>docs/fr/docs/python-types.md</code>, <code>docs/fr/docs/tutorial/body.md</code>, <code>docs/fr/docs/tutorial/first-steps.md</code>, <code>docs/fr/docs/tutorial/query-params.md</code>. PR #10154 by @s-rigaud.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/async.md</code>. PR #5591 by @mkdir700.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/simple-oauth2.md</code>. PR #3844 by @jaystone776.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/cloud.md</code>. PR #10191 by @Sion99.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/https.md</code>. PR #10298 by @tamtam-fitness.</li> <li>\ud83c\udf10 Fix typo in Russian translation for <code>docs/ru/docs/tutorial/body-fields.md</code>. PR #10224 by @AlertRED.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/help-readyapi.md</code>. PR #10121 by @romabozhanovgithub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/header-params.md</code>. PR #10226 by @AlertRED.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/versions.md</code>. PR #10276 by @xzmeng.</li> </ul>"},{"location":"release-notes/#internal_9","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, remove Flint. PR #10349 by @khulnasoft.</li> <li>\ud83d\udd27 Rename label \"awaiting review\" to \"awaiting-review\" to simplify search queries. PR #10343 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, enable Svix (revert #10228). PR #10253 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Svix. PR #10228 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Bump.sh. PR #10227 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01031","title":"0.103.1","text":""},{"location":"release-notes/#fixes_3","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin AnyIO to &lt; 4.0.0 to handle an incompatibility while upgrading to Starlette 0.31.1. PR #10194 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_8","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix validation parameter name in docs, from <code>regex</code> to <code>pattern</code>. PR #10085 by @pablodorrio.</li> <li>\u270f\ufe0f Fix indent format in <code>docs/en/docs/deployment/server-workers.md</code>. PR #10066 by @tamtam-fitness.</li> <li>\u270f\ufe0f Fix Pydantic examples in tutorial for Python types. PR #9961 by @rahulsalgare.</li> <li>\u270f\ufe0f Fix link to Pydantic docs in <code>docs/en/docs/tutorial/extra-data-types.md</code>. PR #10155 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #10170 by @poupapaa.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #10172 by @ragul-kachiappan.</li> </ul>"},{"location":"release-notes/#translations_7","title":"Translations","text":"<ul> <li>\ud83c\udf10 Remove duplicate line in translation for <code>docs/pt/docs/tutorial/path-params.md</code>. PR #10126 by @LecoOliveira.</li> <li>\ud83c\udf10 Add Yoruba translation for <code>docs/yo/docs/index.md</code>. PR #10033 by @AfolabiOlaoluwa.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/python-types.md</code>. PR #10080 by @rostik1410.</li> <li>\ud83c\udf10 Add Vietnamese translations for <code>docs/vi/docs/tutorial/first-steps.md</code> and <code>docs/vi/docs/tutorial/index.md</code>. PR #10088 by @magiskboy.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/alternatives.md</code>. PR #10060 by @whysage.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/index.md</code>. PR #10079 by @rostik1410.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/how-to/separate-openapi-schemas.md</code> and <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #10189 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/generate-clients.md</code>. PR #9883 by @funny-cat-happy.</li> </ul>"},{"location":"release-notes/#refactors_5","title":"Refactors","text":"<ul> <li>\u270f\ufe0f Fix typos in comment in <code>readyapi/applications.py</code>. PR #10045 by @AhsanSheraz.</li> <li>\u2705 Add missing test for OpenAPI examples, it was missing in coverage. PR #10188 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_10","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10186 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01030","title":"0.103.0","text":""},{"location":"release-notes/#features_5","title":"Features","text":"<ul> <li>\u2728 Add support for <code>openapi_examples</code> in all ReadyAPI parameters. PR #10152 by @khulnasoft.<ul> <li>New docs: OpenAPI-specific examples.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_9","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add note to docs about Separate Input and Output Schemas with ReadyAPI version. PR #10150 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01020","title":"0.102.0","text":""},{"location":"release-notes/#features_6","title":"Features","text":"<ul> <li>\u2728 Add support for disabling the separation of input and output JSON Schemas in OpenAPI with Pydantic v2 with <code>separate_input_output_schemas=False</code>. PR #10145 by @khulnasoft.<ul> <li>New docs Separate OpenAPI Schemas for Input and Output or Not.</li> <li>This PR also includes a new setup (internal tools) for generating screenshots for the docs.</li> </ul> </li> </ul>"},{"location":"release-notes/#refactors_6","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor tests for new Pydantic 2.2.1. PR #10115 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_10","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add new docs section, How To - Recipes, move docs that don't have to be read by everyone to How To. PR #10114 by @khulnasoft.</li> <li>\ud83d\udcdd Update Advanced docs, add links to sponsor courses. PR #10113 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs for generating clients. PR #10112 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak MkDocs and add redirects. PR #10111 by @khulnasoft.</li> <li>\ud83d\udcdd Restructure docs for cloud providers, include links to sponsors. PR #10110 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_11","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Speakeasy. PR #10098 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01011","title":"0.101.1","text":""},{"location":"release-notes/#fixes_4","title":"Fixes","text":"<ul> <li>\u2728 Add <code>ResponseValidationError</code> printable details, to show up in server error logs. PR #10078 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_7","title":"Refactors","text":"<ul> <li>\u270f\ufe0f Fix typo in deprecation warnings in <code>readyapi/params.py</code>. PR #9854 by @russbiggs.</li> <li>\u270f\ufe0f Fix typos in comments on internal code in <code>readyapi/concurrency.py</code> and <code>readyapi/routing.py</code>. PR #9590 by @ElliottLarsen.</li> </ul>"},{"location":"release-notes/#docs_11","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in release notes. PR #9835 by @francisbergin.</li> <li>\ud83d\udcdd Add external article: Build an SMS Spam Classifier Serverless Database with FaunaDB and ReadyAPI. PR #9847 by @adejumoridwan.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/contributing.md</code>. PR #9878 by @VicenteMerino.</li> <li>\ud83d\udcdd Fix code highlighting in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #9806 by @theonlykingpin.</li> </ul>"},{"location":"release-notes/#translations_8","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/concepts.md</code>. PR #10062 by @tamtam-fitness.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/server-workers.md</code>. PR #10064 by @tamtam-fitness.</li> <li>\ud83c\udf10 Update Japanese translation for <code>docs/ja/docs/deployment/docker.md</code>. PR #10073 by @tamtam-fitness.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/readyapi-people.md</code>. PR #10059 by @rostik1410.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/cookie-params.md</code>. PR #10032 by @rostik1410.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/docker.md</code>. PR #9971 by @Xewus.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/python-types.md</code>. PR #10047 by @magiskboy.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/global-dependencies.md</code>. PR #9970 by @dudyaosuplayer.</li> <li>\ud83c\udf10 Add Urdu translation for <code>docs/ur/docs/benchmarks.md</code>. PR #9974 by @AhsanSheraz.</li> </ul>"},{"location":"release-notes/#internal_12","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add sponsor Porter. PR #10051 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Jina back as bronze sponsor. PR #10050 by @khulnasoft.</li> <li>\u2b06 Bump mypy from 1.4.0 to 1.4.1. PR #9756 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.17 to 9.1.21. PR #9960 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#01010","title":"0.101.0","text":""},{"location":"release-notes/#features_7","title":"Features","text":"<ul> <li>\u2728 Enable Pydantic's serialization mode for responses, add support for Pydantic's <code>computed_field</code>, better OpenAPI for response models, proper required attributes, better generated clients. PR #10011 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_8","title":"Refactors","text":"<ul> <li>\u2705 Fix tests for compatibility with pydantic 2.1.1. PR #9943 by @dmontagu.</li> <li>\u2705 Fix test error in Windows for <code>jsonable_encoder</code>. PR #9840 by @iudeen.</li> </ul>"},{"location":"release-notes/#upgrades_6","title":"Upgrades","text":"<ul> <li>\ud83d\udccc Do not allow Pydantic 2.1.0 that breaks (require 2.1.1). PR #10012 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_9","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/index.md</code>. PR #9963 by @eVery1337.</li> <li>\ud83c\udf10 Remove Vietnamese note about missing translation. PR #9957 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_13","title":"Internal","text":"<ul> <li>\ud83d\udc77 Add GitHub Actions step dump context to debug external failures. PR #10008 by @khulnasoft.</li> <li>\ud83d\udd27 Restore MkDocs Material pin after the fix. PR #10001 by @khulnasoft.</li> <li>\ud83d\udd27 Update the Question template to ask for the Pydantic version. PR #10000 by @khulnasoft.</li> <li>\ud83d\udccd Update MkDocs Material dependencies. PR #9986 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9999 by @khulnasoft.</li> <li>\ud83d\udc33 Update Dockerfile with compatibility versions, to upgrade later. PR #9998 by @khulnasoft.</li> <li>\u2795 Add pydantic-settings to ReadyAPI People dependencies. PR #9988 by @khulnasoft.</li> <li>\u267b\ufe0f Update ReadyAPI People logic with new Pydantic. PR #9985 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsors, Fern badge. PR #9982 by @khulnasoft.</li> <li>\ud83d\udc77 Deploy docs to Cloudflare Pages. PR #9978 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsor Fern. PR #9979 by @khulnasoft.</li> <li>\ud83d\udc77 Update CI debug mode with Tmate. PR #9977 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01001","title":"0.100.1","text":""},{"location":"release-notes/#fixes_5","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Replace <code>MultHostUrl</code> to <code>AnyUrl</code> for compatibility with older versions of Pydantic v1. PR #9852 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_12","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update links for self-hosted Swagger UI, point to v5, for OpenAPI 31.0. PR #9834 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_10","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body.md</code>. PR #4574 by @ss-o-furda.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/features.md</code> and <code>docs/vi/docs/index.md</code>. PR #3006 by @magiskboy.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/async.md</code>. PR #4179 by @NinaHwang.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/background-tasks.md</code>. PR #9812 by @wdh99.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/query-params-str-validations.md</code>. PR #4075 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/index.md</code>. PR #2234 by @JulianMaurin.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/contributing.md</code>. PR #2132 by @JulianMaurin.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/benchmarks.md</code>. PR #2155 by @clemsau.</li> <li>\ud83c\udf10 Update Chinese translations with new source files. PR #9738 by @mahone3297.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-forms.md</code>. PR #9841 by @dedkot01.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/handling-errors.md</code>. PR #9485 by @Creat55.</li> </ul>"},{"location":"release-notes/#internal_14","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Fern. PR #9956 by @khulnasoft.</li> <li>\ud83d\udc77 Update ReadyAPI People token. PR #9844 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9775 by @khulnasoft.</li> <li>\ud83d\udc77 Update MkDocs Material token. PR #9843 by @khulnasoft.</li> <li>\ud83d\udc77 Update token for latest changes. PR #9842 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01000","title":"0.100.0","text":"<p>\u2728 Support for Pydantic v2 \u2728</p> <p>Pydantic version 2 has the core re-written in Rust and includes a lot of improvements and features, for example:</p> <ul> <li>Improved correctness in corner cases.</li> <li>Safer types.</li> <li>Better performance and less energy consumption.</li> <li>Better extensibility.</li> <li>etc.</li> </ul> <p>...all this while keeping the same Python API. In most of the cases, for simple models, you can simply upgrade the Pydantic version and get all the benefits. \ud83d\ude80</p> <p>In some cases, for pure data validation and processing, you can get performance improvements of 20x or more. This means 2,000% or more. \ud83e\udd2f</p> <p>When you use ReadyAPI, there's a lot more going on, processing the request and response, handling dependencies, executing your own code, and particularly, waiting for the network. But you will probably still get some nice performance improvements just from the upgrade.</p> <p>The focus of this release is compatibility with Pydantic v1 and v2, to make sure your current apps keep working. Later there will be more focus on refactors, correctness, code improvements, and then performance improvements. Some third-party early beta testers that ran benchmarks on the beta releases of ReadyAPI reported improvements of 2x - 3x. Which is not bad for just doing <code>pip install --upgrade readyapi pydantic</code>. This was not an official benchmark and I didn't check it myself, but it's a good sign.</p>"},{"location":"release-notes/#migration","title":"Migration","text":"<p>Check out the Pydantic migration guide.</p> <p>For the things that need changes in your Pydantic models, the Pydantic team built <code>bump-pydantic</code>.</p> <p>A command line tool that will process your code and update most of the things automatically for you. Make sure you have your code in git first, and review each of the changes to make sure everything is correct before committing the changes.</p>"},{"location":"release-notes/#pydantic-v1","title":"Pydantic v1","text":"<p>This version of ReadyAPI still supports Pydantic v1. And although Pydantic v1 will be deprecated at some point, it will still be supported for a while.</p> <p>This means that you can install the new Pydantic v2, and if something fails, you can install Pydantic v1 while you fix any problems you might have, but having the latest ReadyAPI.</p> <p>There are tests for both Pydantic v1 and v2, and test coverage is kept at 100%.</p>"},{"location":"release-notes/#changes","title":"Changes","text":"<ul> <li> <p>There are new parameter fields supported by Pydantic <code>Field()</code> for:</p> <ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> </li> <li> <p>The new parameter fields are:</p> <ul> <li><code>default_factory</code></li> <li><code>alias_priority</code></li> <li><code>validation_alias</code></li> <li><code>serialization_alias</code></li> <li><code>discriminator</code></li> <li><code>strict</code></li> <li><code>multiple_of</code></li> <li><code>allow_inf_nan</code></li> <li><code>max_digits</code></li> <li><code>decimal_places</code></li> <li><code>json_schema_extra</code></li> </ul> </li> </ul> <p>...you can read about them in the Pydantic docs.</p> <ul> <li>The parameter <code>regex</code> has been deprecated and replaced by <code>pattern</code>.<ul> <li>You can read more about it in the docs for Query Parameters and String Validations: Add regular expressions.</li> </ul> </li> <li>New Pydantic models use an improved and simplified attribute <code>model_config</code> that takes a simple dict instead of an internal class <code>Config</code> for their configuration.<ul> <li>You can read more about it in the docs for Declare Request Example Data.</li> </ul> </li> <li>The attribute <code>schema_extra</code> for the internal class <code>Config</code> has been replaced by the key <code>json_schema_extra</code> in the new <code>model_config</code> dict.<ul> <li>You can read more about it in the docs for Declare Request Example Data.</li> </ul> </li> <li>When you install <code>\"readyapi[all]\"</code> it now also includes:<ul> <li><code>pydantic-settings</code> - for settings management.</li> <li><code>pydantic-extra-types</code> - for extra types to be used with Pydantic.</li> </ul> </li> <li> <p>Now Pydantic Settings is an additional optional package (included in <code>\"readyapi[all]\"</code>). To use settings you should now import <code>from pydantic_settings import BaseSettings</code> instead of importing from <code>pydantic</code> directly.</p> <ul> <li>You can read more about it in the docs for Settings and Environment Variables.</li> </ul> </li> <li> <p>PR #9816 by @khulnasoft, included all the work done (in multiple PRs) on the beta branch (<code>main-pv2</code>).</p> </li> </ul>"},{"location":"release-notes/#0991","title":"0.99.1","text":""},{"location":"release-notes/#fixes_6","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix JSON Schema accepting bools as valid JSON Schemas, e.g. <code>additionalProperties: false</code>. PR #9781 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_13","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update source examples to use new JSON Schema examples field. PR #9776 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0990","title":"0.99.0","text":""},{"location":"release-notes/#features_8","title":"Features","text":"<ul> <li> <p>\u2728 Add support for OpenAPI 3.1.0. PR #9770 by @khulnasoft.</p> <ul> <li>New support for documenting webhooks, read the new docs here: Advanced User Guide: OpenAPI Webhooks.</li> <li>Upgrade OpenAPI 3.1.0, this uses JSON Schema 2020-12.</li> <li>Upgrade Swagger UI to version 5.x.x, that supports OpenAPI 3.1.0.</li> <li>Updated <code>examples</code> field in <code>Query()</code>, <code>Cookie()</code>, <code>Body()</code>, etc. based on the latest JSON Schema and OpenAPI. Now it takes a list of examples and they are included directly in the JSON Schema, not outside. Read more about it (including the historical technical details) in the updated docs: Tutorial: Declare Request Example Data.</li> </ul> </li> <li> <p>\u2728 Add support for <code>deque</code> objects and children in <code>jsonable_encoder</code>. PR #9433 by @cranium.</p> </li> </ul>"},{"location":"release-notes/#docs_14","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix form for the ReadyAPI and friends newsletter. PR #9749 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_11","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/advanced/sub-applications.md</code>. PR #9692 by @mojtabapaso.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/response-model.md</code>. PR #9675 by @glsglsgls.</li> </ul>"},{"location":"release-notes/#internal_15","title":"Internal","text":"<ul> <li>\ud83d\udd28 Enable linenums in MkDocs Material during local live development to simplify highlighting code. PR #9769 by @khulnasoft.</li> <li>\u2b06 Update httpx requirement from &lt;0.24.0,&gt;=0.23.0 to &gt;=0.23.0,&lt;0.25.0. PR #9724 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.16 to 9.1.17. PR #9746 by @dependabot[bot].</li> <li>\ud83d\udd25 Remove missing translation dummy pages, no longer necessary. PR #9751 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #9259 by @pre-commit-ci[bot].</li> <li>\u2728 Add Material for MkDocs Insiders features and cards. PR #9748 by @khulnasoft.</li> <li>\ud83d\udd25 Remove languages without translations. PR #9743 by @khulnasoft.</li> <li>\u2728 Refactor docs for building scripts, use MkDocs hooks, simplify (remove) configs for languages. PR #9742 by @khulnasoft.</li> <li>\ud83d\udd28 Add MkDocs hook that renames sections based on the first index file. PR #9737 by @khulnasoft.</li> <li>\ud83d\udc77 Make cron jobs run only on main repo, not on forks, to avoid error notifications from missing tokens. PR #9735 by @khulnasoft.</li> <li>\ud83d\udd27 Update MkDocs for other languages. PR #9734 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor Docs CI, run in multiple workers with a dynamic matrix to optimize speed. PR #9732 by @khulnasoft.</li> <li>\ud83d\udd25 Remove old internal GitHub Action watch-previews that is no longer needed. PR #9730 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade MkDocs and MkDocs Material. PR #9729 by @khulnasoft.</li> <li>\ud83d\udc77 Build and deploy docs only on docs changes. PR #9728 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0980","title":"0.98.0","text":""},{"location":"release-notes/#features_9","title":"Features","text":"<ul> <li>\u2728 Allow disabling <code>redirect_slashes</code> at the ReadyAPI app level. PR #3432 by @cyberlis.</li> </ul>"},{"location":"release-notes/#docs_15","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs on Pydantic using ujson internally. PR #5804 by @mvasilkov.</li> <li>\u270f Rewording in <code>docs/en/docs/tutorial/debugging.md</code>. PR #9581 by @ivan-abc.</li> <li>\ud83d\udcdd Add german blog post (Domain-driven Design mit Python und ReadyAPI). PR #9261 by @msander.</li> <li>\u270f\ufe0f Tweak wording in <code>docs/en/docs/tutorial/security/index.md</code>. PR #9561 by @jyothish-mohan.</li> <li>\ud83d\udcdd Update <code>Annotated</code> notes in <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #9620 by @Alexandrhub.</li> <li>\u270f\ufe0f Fix typo <code>Annotation</code> -&gt; <code>Annotated</code> in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9625 by @mccricardo.</li> <li>\ud83d\udcdd Use in memory database for testing SQL in docs. PR #1223 by @HarshaLaxman.</li> </ul>"},{"location":"release-notes/#translations_12","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/metadata.md</code>. PR #9681 by @TabarakoAkula.</li> <li>\ud83c\udf10 Fix typo in Spanish translation for <code>docs/es/docs/tutorial/first-steps.md</code>. PR #9571 by @lilidl-nft.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/path-operation-configuration.md</code>. PR #9696 by @TabarakoAkula.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/index.md</code>. PR #9666 by @lordqyxz.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/settings.md</code>. PR #9652 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/websockets.md</code>. PR #9651 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/testing.md</code>. PR #9641 by @wdh99.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/extra-models.md</code>. PR #9619 by @ivan-abc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/cors.md</code>. PR #9608 by @ivan-abc.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/features.md</code>. PR #5348 by @mbroton.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-nested-models.md</code>. PR #9605 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_16","title":"Internal","text":"<ul> <li>\u2b06 Bump ruff from 0.0.272 to 0.0.275. PR #9721 by @dependabot[bot].</li> <li>\u2b06 Update uvicorn[standard] requirement from &lt;0.21.0,&gt;=0.12.0 to &gt;=0.12.0,&lt;0.23.0. PR #9463 by @dependabot[bot].</li> <li>\u2b06 Bump mypy from 1.3.0 to 1.4.0. PR #9719 by @dependabot[bot].</li> <li>\u2b06 Update pre-commit requirement from &lt;3.0.0,&gt;=2.17.0 to &gt;=2.17.0,&lt;4.0.0. PR #9251 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.5 to 1.8.6. PR #9482 by @dependabot[bot].</li> <li>\u270f\ufe0f Fix tooltips for light/dark theme toggler in docs. PR #9588 by @pankaj1707k.</li> <li>\ud83d\udd27 Set minimal hatchling version needed to build the package. PR #9240 by @mgorny.</li> <li>\ud83d\udcdd Add repo link to PyPI. PR #9559 by @JacobCoffee.</li> <li>\u270f\ufe0f Fix typos in data for tests. PR #4958 by @ryanrussell.</li> <li>\ud83d\udd27 Update sponsors, add Flint. PR #9699 by @khulnasoft.</li> <li>\ud83d\udc77 Lint in CI only once, only with one version of Python, run tests with all of them. PR #9686 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0970","title":"0.97.0","text":""},{"location":"release-notes/#features_10","title":"Features","text":"<ul> <li>\u2728 Add support for <code>dependencies</code> in WebSocket routes. PR #4534 by @paulo-raca.</li> <li>\u2728 Add exception handler for <code>WebSocketRequestValidationError</code> (which also allows to override it). PR #6030 by @kristjanvalur.</li> </ul>"},{"location":"release-notes/#refactors_9","title":"Refactors","text":"<ul> <li>\u2b06\ufe0f Upgrade and fully migrate to Ruff, remove isort, includes a couple of tweaks suggested by the new version of Ruff. PR #9660 by @khulnasoft.</li> <li>\u267b\ufe0f Update internal type annotations and upgrade mypy. PR #9658 by @khulnasoft.</li> <li>\u267b\ufe0f Simplify <code>AsyncExitStackMiddleware</code> as without Python 3.6 <code>AsyncExitStack</code> is always available. PR #9657 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#upgrades_7","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Black. PR #9661 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_17","title":"Internal","text":"<ul> <li>\ud83d\udc9a Update CI cache to fix installs when dependencies change. PR #9659 by @khulnasoft.</li> <li>\u2b07\ufe0f Separate requirements for development into their own requirements.txt files, they shouldn't be extras. PR #9655 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0961","title":"0.96.1","text":""},{"location":"release-notes/#fixes_7","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>HTTPException</code> header type annotations. PR #9648 by @khulnasoft.</li> <li>\ud83d\udc1b Fix OpenAPI model fields int validations, <code>gte</code> to <code>ge</code>. PR #9635 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#upgrades_8","title":"Upgrades","text":"<ul> <li>\ud83d\udccc Update minimum version of Pydantic to &gt;=1.7.4. This fixes an issue when trying to use an old version of Pydantic. PR #9567 by @Kludex.</li> </ul>"},{"location":"release-notes/#refactors_10","title":"Refactors","text":"<ul> <li>\u267b Remove <code>media_type</code> from <code>ORJSONResponse</code> as it's inherited from the parent class. PR #5805 by @Kludex.</li> <li>\u267b Instantiate <code>HTTPException</code> only when needed, optimization refactor. PR #5356 by @pawamoy.</li> </ul>"},{"location":"release-notes/#docs_16","title":"Docs","text":"<ul> <li>\ud83d\udd25 Remove link to Pydantic's benchmark, as it was removed there. PR #5811 by @Kludex.</li> </ul>"},{"location":"release-notes/#translations_13","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix spelling in Indonesian translation of <code>docs/id/docs/tutorial/index.md</code>. PR #5635 by @purwowd.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/index.md</code>. PR #5896 by @Wilidon.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/response-change-status-code.md</code> and <code>docs/zh/docs/advanced/response-headers.md</code>. PR #9544 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/schema-extra-example.md</code>. PR #9621 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_18","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add sponsor Platform.sh. PR #9650 by @khulnasoft.</li> <li>\ud83d\udc77 Add custom token to Smokeshow and Preview Docs for download-artifact, to prevent API rate limits. PR #9646 by @khulnasoft.</li> <li>\ud83d\udc77 Add custom tokens for GitHub Actions to avoid rate limits. PR #9647 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0960","title":"0.96.0","text":""},{"location":"release-notes/#features_11","title":"Features","text":"<ul> <li>\u26a1 Update <code>create_cloned_field</code> to use a global cache and improve startup performance. PR #4645 by @madkinsz and previous original PR by @huonw.</li> </ul>"},{"location":"release-notes/#docs_17","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Deta deployment tutorial for compatibility with Deta Space. PR #6004 by @mikBighne98.</li> <li>\u270f\ufe0f Fix typo in Deta deployment tutorial. PR #9501 by @lemonyte.</li> </ul>"},{"location":"release-notes/#translations_14","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/body.md</code>. PR #3885 by @solomein-sv.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/static-files.md</code>. PR #9580 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-params.md</code>. PR #9584 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/first-steps.md</code>. PR #9471 by @AGolicyn.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/debugging.md</code>. PR #9579 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/path-params.md</code>. PR #9519 by @AGolicyn.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/static-files.md</code>. PR #9436 by @wdh99.</li> <li>\ud83c\udf10 Update Spanish translation including new illustrations in <code>docs/es/docs/async.md</code>. PR #9483 by @andresbermeoq.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/path-params-numeric-validations.md</code>. PR #9563 by @ivan-abc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/concepts.md</code>. PR #9577 by @Xewus.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-multiple-params.md</code>. PR #9586 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_19","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #9602 by @github-actions[bot].</li> <li>\ud83d\udd27 Update sponsors, remove InvestSuite. PR #9612 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0952","title":"0.95.2","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette version to <code>&gt;=0.27.0</code> for a security release. PR #9541 by @khulnasoft. Details on Starlette's security advisory.</li> </ul>"},{"location":"release-notes/#translations_15","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/events.md</code>. PR #9326 by @oandersonmagalhaes.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/manually.md</code>. PR #9417 by @Xewus.</li> <li>\ud83c\udf10 Add setup for translations to Lao. PR #9396 by @TheBrown.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/testing.md</code>. PR #9403 by @Xewus.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/https.md</code>. PR #9428 by @Xewus.</li> <li>\u270f Fix command to install requirements in Windows. PR #9445 by @MariiaRomanuik.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/response-directly.md</code>. PR #9415 by @axel584.</li> <li>\ud83c\udf10 Initiate Czech translation setup. PR #9288 by @3p1463k.</li> <li>\u270f Fix typo in Portuguese docs for <code>docs/pt/docs/index.md</code>. PR #9337 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/response-status-code.md</code>. PR #9370 by @nadia3373.</li> </ul>"},{"location":"release-notes/#internal_20","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix <code>flask.escape</code> warning for internal tests. PR #9468 by @samuelcolvin.</li> <li>\u2705 Refactor 2 tests, for consistency and simplification. PR #9504 by @khulnasoft.</li> <li>\u2705 Refactor OpenAPI tests, prepare for Pydantic v2. PR #9503 by @khulnasoft.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.26.0 to 2.27.0. PR #9394 by @dependabot[bot].</li> <li>\ud83d\udc9a Disable setup-python pip cache in CI. PR #9438 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.6.4 to 1.8.5. PR #9346 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0951","title":"0.95.1","text":""},{"location":"release-notes/#fixes_8","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix using <code>Annotated</code> in routers or path operations decorated multiple times. PR #9315 by @sharonyogev.</li> </ul>"},{"location":"release-notes/#docs_18","title":"Docs","text":"<ul> <li>\ud83c\udf10 \ud83d\udd20 \ud83d\udcc4 \ud83d\udc22 Translate docs to Emoji \ud83e\udd73 \ud83c\udf89 \ud83d\udca5 \ud83e\udd2f \ud83e\udd2f. PR #5385 by @LeeeeT.</li> <li>\ud83d\udcdd Add notification message warning about old versions of ReadyAPI not supporting <code>Annotated</code>. PR #9298 by @grdworkin.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/advanced/behind-a-proxy.md</code>. PR #5681 by @Leommjr.</li> <li>\u270f Fix wrong import from typing module in Persian translations for <code>docs/fa/docs/index.md</code>. PR #6083 by @Kimiaattaei.</li> <li>\u270f\ufe0f Fix format, remove unnecessary asterisks in <code>docs/en/docs/help-readyapi.md</code>. PR #9249 by @armgabrielyan.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9272 by @nicornk.</li> <li>\u270f Fix typo/bug in inline code example in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9273 by @tim-habitat.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #9282 by @aadarsh977.</li> <li>\u270f Fix typo: 'wll' to 'will' in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9380 by @dasstyxx.</li> </ul>"},{"location":"release-notes/#translations_16","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/index.md</code>. PR #5673 by @axel584.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-nested-models.md</code>. PR #4053 by @luccasmmg.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/alternatives.md</code>. PR #5994 by @Xewus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/extra-models.md</code>. PR #5912 by @LorhanSohaky.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/path-operation-configuration.md</code>. PR #5936 by @LorhanSohaky.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/contributing.md</code>. PR #6002 by @stigsanek.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #9176 by @sehwan505.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/project-generation.md</code>. PR #9243 by @Xewus.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/index.md</code>. PR #9265 by @frabc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-params-str-validations.md</code>. PR #9267 by @dedkot01.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/benchmarks.md</code>. PR #9271 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_21","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: remove Jina. PR #9388 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add databento, remove Ines's course and StriveWorks. PR #9351 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0950","title":"0.95.0","text":""},{"location":"release-notes/#highlights","title":"Highlights","text":"<p>This release adds support for dependencies and parameters using <code>Annotated</code> and recommends its usage. \u2728</p> <p>This has several benefits, one of the main ones is that now the parameters of your functions with <code>Annotated</code> would not be affected at all.</p> <p>If you call those functions in other places in your code, the actual default values will be kept, your editor will help you notice missing required arguments, Python will require you to pass required arguments at runtime, you will be able to use the same functions for different things and with different libraries (e.g. Typer will soon support <code>Annotated</code> too, then you could use the same function for an API and a CLI), etc.</p> <p>Because <code>Annotated</code> is standard Python, you still get all the benefits from editors and tools, like autocompletion, inline errors, etc.</p> <p>One of the biggest benefits is that now you can create <code>Annotated</code> dependencies that are then shared by multiple path operation functions, this will allow you to reduce a lot of code duplication in your codebase, while keeping all the support from editors and tools.</p> <p>For example, you could have code like this:</p> <pre><code>def get_current_user(token: str):\n    # authenticate user\n    return User()\n\n\n@app.get(\"/items/\")\ndef read_items(user: User = Depends(get_current_user)):\n    ...\n\n\n@app.post(\"/items/\")\ndef create_item(*, user: User = Depends(get_current_user), item: Item):\n    ...\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(*, user: User = Depends(get_current_user), item_id: int):\n    ...\n\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(*, user: User = Depends(get_current_user), item_id: int):\n    ...\n</code></pre> <p>There's a bit of code duplication for the dependency:</p> <pre><code>user: User = Depends(get_current_user)\n</code></pre> <p>...the bigger the codebase, the more noticeable it is.</p> <p>Now you can create an annotated dependency once, like this:</p> <pre><code>CurrentUser = Annotated[User, Depends(get_current_user)]\n</code></pre> <p>And then you can reuse this <code>Annotated</code> dependency:</p> <pre><code>CurrentUser = Annotated[User, Depends(get_current_user)]\n\n\n@app.get(\"/items/\")\ndef read_items(user: CurrentUser):\n    ...\n\n\n@app.post(\"/items/\")\ndef create_item(user: CurrentUser, item: Item):\n    ...\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(user: CurrentUser, item_id: int):\n    ...\n\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(user: CurrentUser, item_id: int):\n    ...\n</code></pre> <p>...and <code>CurrentUser</code> has all the typing information as <code>User</code>, so your editor will work as expected (autocompletion and everything), and ReadyAPI will be able to understand the dependency defined in <code>Annotated</code>. \ud83d\ude0e</p> <p>Roughly all the docs have been rewritten to use <code>Annotated</code> as the main way to declare parameters and dependencies. All the examples in the docs now include a version with <code>Annotated</code> and a version without it, for each of the specific Python versions (when there are small differences/improvements in more recent versions). There were around 23K new lines added between docs, examples, and tests. \ud83d\ude80</p> <p>The key updated docs are:</p> <ul> <li>Python Types Intro:<ul> <li>Type Hints with Metadata Annotations.</li> </ul> </li> <li>Tutorial:<ul> <li>Query Parameters and String Validations - Additional validation<ul> <li>Advantages of <code>Annotated</code></li> </ul> </li> <li>Path Parameters and Numeric Validations - Order the parameters as you need, tricks<ul> <li>Better with <code>Annotated</code></li> </ul> </li> <li>Dependencies - First Steps - Share <code>Annotated</code> dependencies</li> </ul> </li> </ul> <p>Special thanks to @nzig for the core implementation and to @adriangb for the inspiration and idea with Xpresso! \ud83d\ude80</p>"},{"location":"release-notes/#features_12","title":"Features","text":"<ul> <li>\u2728Add support for PEP-593 <code>Annotated</code> for specifying dependencies and parameters. PR #4871 by @nzig.</li> </ul>"},{"location":"release-notes/#docs_19","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak tip recommending <code>Annotated</code> in docs. PR #9270 by @khulnasoft.</li> <li>\ud83d\udcdd Update order of examples, latest Python version first, and simplify version tab names. PR #9269 by @khulnasoft.</li> <li>\ud83d\udcdd Update all docs to use <code>Annotated</code> as the main recommendation, with new examples and tests. PR #9268 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0941","title":"0.94.1","text":""},{"location":"release-notes/#fixes_9","title":"Fixes","text":"<ul> <li>\ud83c\udfa8 Fix types for lifespan, upgrade Starlette to 0.26.1. PR #9245 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0940","title":"0.94.0","text":""},{"location":"release-notes/#upgrades_9","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade python-multipart to support 0.0.6. PR #9212 by @musicinmybrain.</li> <li>\u2b06\ufe0f Upgrade Starlette version, support new <code>lifespan</code> with state. PR #9239 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_20","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Sentry link in docs. PR #9218 by @smeubank.</li> </ul>"},{"location":"release-notes/#translations_17","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/history-design-future.md</code>. PR #5986 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_22","title":"Internal","text":"<ul> <li>\u2795 Add <code>pydantic</code> to PyPI classifiers. PR #5914 by @yezz123.</li> <li>\u2b06 Bump black from 22.10.0 to 23.1.0. PR #5953 by @dependabot[bot].</li> <li>\u2b06 Bump types-ujson from 5.6.0.0 to 5.7.0.1. PR #6027 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.3 to 2.26.0. PR #6034 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5709 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#0930","title":"0.93.0","text":""},{"location":"release-notes/#features_13","title":"Features","text":"<ul> <li>\u2728 Add support for <code>lifespan</code> async context managers (superseding <code>startup</code> and <code>shutdown</code> events). Initial PR #2944 by @uSpike.</li> </ul> <p>Now, instead of using independent <code>startup</code> and <code>shutdown</code> events, you can define that logic in a single function with <code>yield</code> decorated with <code>@asynccontextmanager</code> (an async context manager).</p> <p>For example:</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Note: This is the recommended way going forward, instead of using <code>startup</code> and <code>shutdown</code> events.</p> <p>Read more about it in the new docs: Advanced User Guide: Lifespan Events.</p>"},{"location":"release-notes/#docs_21","title":"Docs","text":"<ul> <li>\u270f Fix formatting in <code>docs/en/docs/tutorial/metadata.md</code> for <code>ReDoc</code>. PR #6005 by @eykamp.</li> </ul>"},{"location":"release-notes/#translations_18","title":"Translations","text":"<ul> <li>\ud83c\udf10 Tamil translations - initial setup. PR #5564 by @gusty1g.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>. PR #9221 by @axel584.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/debugging.md</code>. PR #9175 by @frabc.</li> <li>\ud83c\udf10 Initiate Armenian translation setup. PR #5844 by @har8.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/manually.md</code>. PR #3693 by @rjNemo.</li> </ul>"},{"location":"release-notes/#internal_23","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update translation bot messages. PR #9206 by @khulnasoft.</li> <li>\ud83d\udc77 Update translations bot to use Discussions, and notify when a PR is done. PR #9183 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors-badges. PR #9182 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9181 by @github-actions[bot].</li> <li>\ud83d\udd0a Log GraphQL errors in ReadyAPI People, because it returns 200, with a payload with an error. PR #9171 by @khulnasoft.</li> <li>\ud83d\udc9a Fix/workaround GitHub Actions in Docker with git for ReadyAPI People. PR #9169 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor ReadyAPI Experts to use only discussions now that questions are migrated. PR #9165 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade analytics. PR #6025 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade and re-enable installing Typer-CLI. PR #6008 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0920","title":"0.92.0","text":"<p>\ud83d\udea8 This is a security fix. Please upgrade as soon as possible.</p>"},{"location":"release-notes/#upgrades_10","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.25.0. PR #5996 by @khulnasoft.<ul> <li>This solves a vulnerability that could allow denial of service attacks by using many small multipart fields/files (parts), consuming high CPU and memory.</li> <li>Only applications using forms (e.g. file uploads) could be affected.</li> <li>For most cases, upgrading won't have any breaking changes.</li> </ul> </li> </ul>"},{"location":"release-notes/#0910","title":"0.91.0","text":""},{"location":"release-notes/#upgrades_11","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette version to <code>0.24.0</code> and refactor internals for compatibility. PR #5985 by @khulnasoft.<ul> <li>This can solve nuanced errors when using middlewares. Before Starlette <code>0.24.0</code>, a new instance of each middleware class would be created when a new middleware was added. That normally was not a problem, unless the middleware class expected to be created only once, with only one instance, that happened in some cases. This upgrade would solve those cases (thanks @adriangb! Starlette PR #2017). Now the middleware class instances are created once, right before the first request (the first time the app is called).</li> <li>If you depended on that previous behavior, you might need to update your code. As always, make sure your tests pass before merging the upgrade.</li> </ul> </li> </ul>"},{"location":"release-notes/#0901","title":"0.90.1","text":""},{"location":"release-notes/#upgrades_12","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette range to allow 0.23.1. PR #5980 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_22","title":"Docs","text":"<ul> <li>\u270f Tweak wording to clarify <code>docs/en/docs/project-generation.md</code>. PR #5930 by @chandra-deb.</li> <li>\u270f Update Pydantic GitHub URLs. PR #5952 by @yezz123.</li> <li>\ud83d\udcdd Add opinion from Cisco. PR #5981 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_19","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/cookie-params.md</code>. PR #5890 by @bnzone.</li> </ul>"},{"location":"release-notes/#internal_24","title":"Internal","text":"<ul> <li>\u270f Update <code>zip-docs.sh</code> internal script, remove extra space. PR #5931 by @JuanPerdomo00.</li> </ul>"},{"location":"release-notes/#0900","title":"0.90.0","text":""},{"location":"release-notes/#upgrades_13","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Bump Starlette from 0.22.0 to 0.23.0. Initial PR #5739 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_23","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add article \"Tortoise ORM / ReadyAPI \u200b\u6574\u5408\u200b\u5feb\u901f\u200b\u7b46\u8a18\u200b\" to External Links. PR #5496 by @Leon0824.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5954 by @github-actions[bot].</li> <li>\ud83d\udcdd Micro-tweak help docs. PR #5960 by @khulnasoft.</li> <li>\ud83d\udd27 Update new issue chooser to direct to GitHub Discussions. PR #5948 by @khulnasoft.</li> <li>\ud83d\udcdd Recommend GitHub Discussions for questions. PR #5944 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_20","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-fields.md</code>. PR #5898 by @simatheone.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/help-readyapi.md</code>. PR #5970 by @khulnasoft.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/static-files.md</code>. PR #5858 by @batlopes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/encoder.md</code>. PR #5525 by @felipebpl.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/contributing.md</code>. PR #5870 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_25","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade Ubuntu version for docs workflow. PR #5971 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors badges. PR #5943 by @khulnasoft.</li> <li>\u2728 Compute ReadyAPI Experts including GitHub Discussions. PR #5941 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade isort and update pre-commit. PR #5940 by @khulnasoft.</li> <li>\ud83d\udd27 Add template for questions in Discussions. PR #5920 by @khulnasoft.</li> <li>\ud83d\udd27 Update Sponsor Budget Insight to Powens. PR #5916 by @khulnasoft.</li> <li>\ud83d\udd27 Update GitHub Sponsors badge data. PR #5915 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0891","title":"0.89.1","text":""},{"location":"release-notes/#fixes_10","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Ignore Response classes on return annotation. PR #5855 by @Kludex. See the new docs in the PR below.</li> </ul>"},{"location":"release-notes/#docs_24","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs and examples for Response Model with Return Type Annotations, and update runtime error. PR #5873 by @khulnasoft. New docs at Response Model - Return Type: Other Return Type Annotations.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI lambda container: serverless simplified. PR #5784 by @rafrasenberg.</li> </ul>"},{"location":"release-notes/#translations_21","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/first_steps.md</code>. PR #5691 by @Kadermiyanyedi.</li> </ul>"},{"location":"release-notes/#0890","title":"0.89.0","text":""},{"location":"release-notes/#features_14","title":"Features","text":"<ul> <li>\u2728 Add support for function return type annotations to declare the <code>response_model</code>. Initial PR #1436 by @uriyyo.</li> </ul> <p>Now you can declare the return type / <code>response_model</code> in the function return type annotation:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <p>ReadyAPI will use the return type annotation to perform:</p> <ul> <li>Data validation</li> <li>Automatic documentation<ul> <li>It could power automatic client generators</li> </ul> </li> <li>Data filtering</li> </ul> <p>Before this version it was only supported via the <code>response_model</code> parameter.</p> <p>Read more about it in the new docs: Response Model - Return Type.</p>"},{"location":"release-notes/#docs_25","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add External Link: Authorization on ReadyAPI with Casbin. PR #5712 by @Xhy-5000.</li> <li>\u270f Fix typo in <code>docs/en/docs/async.md</code>. PR #5785 by @Kingdageek.</li> <li>\u270f Fix typo in <code>docs/en/docs/deployment/concepts.md</code>. PR #5824 by @kelbyfaessler.</li> </ul>"},{"location":"release-notes/#translations_22","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/readyapi-people.md</code>. PR #5577 by @Xewus.</li> <li>\ud83c\udf10 Fix typo in Chinese translation for <code>docs/zh/docs/benchmarks.md</code>. PR #4269 by @15027668g.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/cors.md</code>. PR #3764 by @NinaHwang.</li> </ul>"},{"location":"release-notes/#internal_26","title":"Internal","text":"<ul> <li>\u2b06 Update coverage[toml] requirement from &lt;7.0,&gt;=6.5.0 to &gt;=6.5.0,&lt;8.0. PR #5801 by @dependabot[bot].</li> <li>\u2b06 Update uvicorn[standard] requirement from &lt;0.19.0,&gt;=0.12.0 to &gt;=0.12.0,&lt;0.21.0 for development. PR #5795 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.2 to 2.24.3. PR #5842 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5825 by @github-actions[bot].</li> <li>\u2b06 Bump types-ujson from 5.5.0 to 5.6.0.0. PR #5735 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.5.2 to 1.6.4. PR #5750 by @dependabot[bot].</li> <li>\ud83d\udc77 Add GitHub Action gate/check. PR #5492 by @webknjaz.</li> <li>\ud83d\udd27 Update sponsors, add Svix. PR #5848 by @khulnasoft.</li> <li>\ud83d\udd27 Remove Doist sponsor. PR #5847 by @khulnasoft.</li> <li>\u2b06 Update sqlalchemy requirement from &lt;=1.4.41,&gt;=1.3.18 to &gt;=1.3.18,&lt;1.4.43. PR #5540 by @dependabot[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.2.4 to 2.0.0. PR #5757 by @dependabot[bot].</li> <li>\ud83d\udc77 Refactor CI artifact upload/download for docs previews. PR #5793 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.5.1 to 1.5.2. PR #5714 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5722 by @github-actions[bot].</li> <li>\ud83d\udd27 Update sponsors, disable course bundle. PR #5713 by @khulnasoft.</li> <li>\u2b06 Update typer[all] requirement from &lt;0.7.0,&gt;=0.6.1 to &gt;=0.6.1,&lt;0.8.0. PR #5639 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0880","title":"0.88.0","text":""},{"location":"release-notes/#upgrades_14","title":"Upgrades","text":"<ul> <li>\u2b06 Bump Starlette to version <code>0.22.0</code> to fix bad encoding for query parameters in new <code>TestClient</code>. PR #5659 by @azogue.</li> </ul>"},{"location":"release-notes/#docs_26","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in docs for <code>docs/en/docs/advanced/middleware.md</code>. PR #5376 by @rifatrakib.</li> </ul>"},{"location":"release-notes/#translations_23","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/docker.md</code>. PR #5663 by @ayr-ton.</li> </ul>"},{"location":"release-notes/#internal_27","title":"Internal","text":"<ul> <li>\ud83d\udc77 Tweak build-docs to improve CI performance. PR #5699 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5566 by @pre-commit-ci[bot].</li> <li>\u2b06\ufe0f Upgrade Ruff. PR #5698 by @khulnasoft.</li> <li>\ud83d\udc77 Remove pip cache for Smokeshow as it depends on a requirements.txt. PR #5700 by @khulnasoft.</li> <li>\ud83d\udc9a Fix pip cache for Smokeshow. PR #5697 by @khulnasoft.</li> <li>\ud83d\udc77 Fix and tweak CI cache handling. PR #5696 by @khulnasoft.</li> <li>\ud83d\udc77 Update <code>setup-python</code> action in tests to use new caching feature. PR #5680 by @madkinsz.</li> <li>\u2b06 Bump black from 22.8.0 to 22.10.0. PR #5569 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0870","title":"0.87.0","text":"<p>Highlights of this release:</p> <ul> <li>Upgraded Starlette<ul> <li>Now the <code>TestClient</code> is based on HTTPX instead of Requests. \ud83d\ude80</li> <li>There are some possible breaking changes in the <code>TestClient</code> usage, but @Kludex built bump-testclient to help you automatize migrating your tests. Make sure you are using Git and that you can undo any unnecessary changes (false positive changes, etc) before using <code>bump-testclient</code>.</li> </ul> </li> <li>New WebSocketException (and docs), re-exported from Starlette.</li> <li>Upgraded and relaxed dependencies for package extras <code>all</code> (including new Uvicorn version), when you install <code>\"readyapi[all]\"</code>.</li> <li>New docs about how to Help Maintain ReadyAPI.</li> </ul>"},{"location":"release-notes/#features_15","title":"Features","text":"<ul> <li>\u2b06\ufe0f Upgrade and relax dependencies for extras \"all\". PR #5634 by @khulnasoft.</li> <li>\u2728 Re-export Starlette's <code>WebSocketException</code> and add it to docs. PR #5629 by @khulnasoft.</li> <li>\ud83d\udcdd Update references to Requests for tests to HTTPX, and add HTTPX to extras. PR #5628 by @khulnasoft.</li> <li>\u2b06 Upgrade Starlette to <code>0.21.0</code>, including the new <code>TestClient</code> based on HTTPX. PR #5471 by @pawelrubin.</li> </ul>"},{"location":"release-notes/#docs_27","title":"Docs","text":"<ul> <li>\u270f\ufe0f Tweak Help ReadyAPI from PR review after merging. PR #5633 by @khulnasoft.</li> <li>\u270f\ufe0f  Clarify docs on CORS. PR #5627 by @paxcodes.</li> <li>\ud83d\udcdd Update Help ReadyAPI: Help Maintain ReadyAPI. PR #5632 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_24","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix highlight lines for Japanese translation for <code>docs/tutorial/query-params.md</code>. PR #2969 by @ftnext.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/additional-status-code.md</code>. PR #5477 by @axel584.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-forms-and-files.md</code>. PR #5579 by @batlopes.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/websockets.md</code>. PR #4983 by @xryuseix.</li> </ul>"},{"location":"release-notes/#internal_28","title":"Internal","text":"<ul> <li>\u2728 Use Ruff for linting. PR #5630 by @khulnasoft.</li> <li>\ud83d\udee0 Add Arabic issue number to Notify Translations GitHub Action. PR #5610 by @khulnasoft.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.1 to 2.24.2. PR #5609 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.0 to 2.24.1. PR #5603 by @dependabot[bot].</li> <li>\ud83d\udcdd Update coverage badge to use Samuel Colvin's Smokeshow. PR #5585 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0860","title":"0.86.0","text":""},{"location":"release-notes/#features_16","title":"Features","text":"<ul> <li>\u2b06 Add Python 3.11 to the officially supported versions. PR #5587 by @khulnasoft.</li> <li>\u2705 Enable tests for Python 3.11. PR #4881 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_11","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Close FormData (uploaded files) after the request is done. PR #5465 by @adriangb.</li> </ul>"},{"location":"release-notes/#docs_28","title":"Docs","text":"<ul> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/security/oauth2-jwt.md</code>. PR #5584 by @vivekashok1221.</li> </ul>"},{"location":"release-notes/#translations_25","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update wording in Chinese translation for <code>docs/zh/docs/python-types.md</code>. PR #5416 by @supercaizehua.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/index.md</code>. PR #5336 by @Xewus.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #3846 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_29","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update ReadyAPI People to exclude bots: pre-commit-ci, dependabot. PR #5586 by @khulnasoft.</li> <li>\ud83c\udfa8 Format OpenAPI JSON in <code>test_starlette_exception.py</code>. PR #5379 by @iudeen.</li> <li>\ud83d\udc77 Switch from Codecov to Smokeshow plus pytest-cov to pure coverage for internal tests. PR #5583 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5571 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0852","title":"0.85.2","text":""},{"location":"release-notes/#docs_29","title":"Docs","text":"<ul> <li>\u270f Fix grammar and add helpful links to dependencies in <code>docs/en/docs/async.md</code>. PR #5432 by @pamelafox.</li> <li>\u270f Fix broken link in <code>alternatives.md</code>. PR #5455 by @su-shubham.</li> <li>\u270f Fix typo in docs about contributing, for compatibility with <code>pip</code> in Zsh. PR #5523 by @zhangbo2012.</li> <li>\ud83d\udcdd Fix typo in docs with examples for Python 3.10 instead of 3.9. PR #5545 by @feliciss.</li> </ul>"},{"location":"release-notes/#translations_26","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-forms.md</code>. PR #4934 by @batlopes.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #4971 by @Zssaer.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/deta.md</code>. PR #3692 by @rjNemo.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #5255 by @hjlarry.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #4999 by @Zssaer.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/wsgi.md</code>. PR #4505 by @ASpathfinder.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-multiple-params.md</code>. PR #4111 by @lbmendes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/path-params-numeric-validations.md</code>. PR #4099 by @lbmendes.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/versions.md</code>. PR #3690 by @rjNemo.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/help-readyapi.md</code>. PR #2233 by @JulianMaurin.</li> <li>\ud83c\udf10 Fix typo in Chinese translation for <code>docs/zh/docs/tutorial/security/first-steps.md</code>. PR #5530 by @yuki1sntSnow.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/response-status-code.md</code>. PR #4922 by @batlopes.</li> <li>\ud83d\udd27 Add config for Tamil translations. PR #5563 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_30","title":"Internal","text":"<ul> <li>\u2b06 Bump internal dependency mypy from 0.971 to 0.982. PR #5541 by @dependabot[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.2.3 to 1.2.4. PR #5507 by @dependabot[bot].</li> <li>\u2b06 Bump internal dependency types-ujson from 5.4.0 to 5.5.0. PR #5537 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.23.0 to 2.24.0. PR #5508 by @dependabot[bot].</li> <li>\u2b06 Update internal dependency pytest-cov requirement from &lt;4.0.0,&gt;=2.12.0 to &gt;=2.12.0,&lt;5.0.0. PR #5539 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5536 by @pre-commit-ci[bot].</li> <li>\ud83d\udc1b Fix internal Trio test warnings. PR #5547 by @samuelcolvin.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5408 by @pre-commit-ci[bot].</li> <li>\u2b06\ufe0f Upgrade Typer to include Rich in scripts for docs. PR #5502 by @khulnasoft.</li> <li>\ud83d\udc1b Fix calling <code>mkdocs</code> for languages as a subprocess to fix/enable MkDocs Material search plugin. PR #5501 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0851","title":"0.85.1","text":""},{"location":"release-notes/#fixes_12","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix support for strings in OpenAPI status codes: <code>default</code>, <code>1XX</code>, <code>2XX</code>, <code>3XX</code>, <code>4XX</code>, <code>5XX</code>. PR #5187 by @JarroVGIT.</li> </ul>"},{"location":"release-notes/#docs_30","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add WayScript x ReadyAPI Tutorial to External Links section. PR #5407 by @moneeka.</li> </ul>"},{"location":"release-notes/#internal_31","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #5447 by @github-actions[bot].</li> <li>\ud83d\udd27 Disable Material for MkDocs search plugin. PR #5495 by @khulnasoft.</li> <li>\ud83d\udd07 Ignore Trio warning in tests for CI. PR #5483 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0850","title":"0.85.0","text":""},{"location":"release-notes/#features_17","title":"Features","text":"<ul> <li>\u2b06 Upgrade version required of Starlette from <code>0.19.1</code> to <code>0.20.4</code>. Initial PR #4820 by @Kludex.<ul> <li>This includes several bug fixes in Starlette.</li> </ul> </li> <li>\u2b06\ufe0f Upgrade Uvicorn max version in public extras: all. From <code>&gt;=0.12.0,&lt;0.18.0</code> to <code>&gt;=0.12.0,&lt;0.19.0</code>. PR #5401 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_32","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade dependencies for doc and dev internal extras: Typer, Uvicorn. PR #5400 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade test dependencies: Black, HTTPX, databases, types-ujson. PR #5399 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade mypy and tweak internal type annotations. PR #5398 by @khulnasoft.</li> <li>\ud83d\udd27 Update test dependencies, upgrade Pytest, move dependencies from dev to test. PR #5396 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0840","title":"0.84.0","text":""},{"location":"release-notes/#breaking-changes_2","title":"Breaking Changes","text":"<p>This version of ReadyAPI drops support for Python 3.6. \ud83d\udd25 Please upgrade to a supported version of Python (3.7 or above), Python 3.6 reached the end-of-life a long time ago. \ud83d\ude05\u2620</p> <ul> <li>\ud83d\udd27 Update package metadata, drop support for Python 3.6, move build internals from Flit to Hatch. PR #5240 by @ofek.</li> </ul>"},{"location":"release-notes/#0830","title":"0.83.0","text":"<p>\ud83d\udea8 This is probably the last release (or one of the last releases) to support Python 3.6. \ud83d\udd25</p> <p>Python 3.6 reached the end-of-life and is no longer supported by Python since around a year ago.</p> <p>You hopefully updated to a supported version of Python a while ago. If you haven't, you really should.</p>"},{"location":"release-notes/#features_18","title":"Features","text":"<ul> <li>\u2728 Add support in <code>jsonable_encoder</code> for include and exclude with dataclasses. PR #4923 by @DCsunset.</li> </ul>"},{"location":"release-notes/#fixes_13","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>RuntimeError</code> raised when <code>HTTPException</code> has a status code with no content. PR #5365 by @iudeen.</li> <li>\ud83d\udc1b Fix empty reponse body when default <code>status_code</code> is empty but the a <code>Response</code> parameter with <code>response.status_code</code> is set. PR #5360 by @tmeckel.</li> </ul>"},{"location":"release-notes/#docs_31","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update <code>SECURITY.md</code>. PR #5377 by @Kludex.</li> </ul>"},{"location":"release-notes/#internal_33","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5352 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#0820","title":"0.82.0","text":"<p>\ud83d\udea8 This is probably the last release (or one of the last releases) to support Python 3.6. \ud83d\udd25</p> <p>Python 3.6 reached the end-of-life and is no longer supported by Python since around a year ago.</p> <p>You hopefully updated to a supported version of Python a while ago. If you haven't, you really should.</p>"},{"location":"release-notes/#features_19","title":"Features","text":"<ul> <li>\u2728 Export <code>WebSocketState</code> in <code>readyapi.websockets</code>. PR #4376 by @matiuszka.</li> <li>\u2728 Support Python internal description on Pydantic model's docstring. PR #3032 by @Kludex.</li> <li>\u2728 Update <code>ORJSONResponse</code> to support non <code>str</code> keys and serializing Numpy arrays. PR #3892 by @baby5.</li> </ul>"},{"location":"release-notes/#fixes_14","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Allow exit code for dependencies with <code>yield</code> to always execute, by removing capacity limiter for them, to e.g. allow closing DB connections without deadlocks. PR #5122 by @adriangb.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action: set HTTPX timeout for GraphQL query request. PR #5222 by @iudeen.</li> <li>\ud83d\udc1b Make sure a parameter defined as required is kept required in OpenAPI even if defined as optional in another dependency. PR #4319 by @cd17822.</li> <li>\ud83d\udc1b Fix support for path parameters in WebSockets. PR #3879 by @davidbrochart.</li> </ul>"},{"location":"release-notes/#docs_32","title":"Docs","text":"<ul> <li>\u270f Update Hypercorn link, now pointing to GitHub. PR #5346 by @baconfield.</li> <li>\u270f Tweak wording in <code>docs/en/docs/advanced/dataclasses.md</code>. PR #3698 by @pfackeldey.</li> <li>\ud83d\udcdd Add note about Python 3.10 <code>X | Y</code> operator in explanation about Response Models. PR #5307 by @MendyLanda.</li> <li>\ud83d\udcdd Add link to New Relic article: \"How to monitor ReadyAPI application performance using Python agent\". PR #5260 by @sjyothi54.</li> <li>\ud83d\udcdd Update docs for <code>ORJSONResponse</code> with details about improving performance. PR #2615 by @falkben.</li> <li>\ud83d\udcdd Add docs for creating a custom Response class. PR #5331 by @khulnasoft.</li> <li>\ud83d\udcdd Add tip about using alias for form data fields. PR #5329 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_27","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/features.md</code>. PR #5315 by @Xewus.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/request-files.md</code>. PR #4529 by @ASpathfinder.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/encoder.md</code>. PR #4969 by @Zssaer.</li> <li>\ud83c\udf10 Fix MkDocs file line for Portuguese translation of <code>background-task.md</code>. PR #5242 by @ComicShrimp.</li> </ul>"},{"location":"release-notes/#internal_34","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #5347 by @github-actions[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.22.0 to 2.23.0. PR #5321 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5318 by @pre-commit-ci[bot].</li> <li>\u270f Fix a small code highlight line error. PR #5256 by @hjlarry.</li> <li>\u267b Internal small refactor, move <code>operation_id</code> parameter position in delete method for consistency with the code. PR #4474 by @hiel.</li> <li>\ud83d\udd27 Update sponsors, disable ImgWhale. PR #5338 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0810","title":"0.81.0","text":""},{"location":"release-notes/#features_20","title":"Features","text":"<ul> <li>\u2728 Add ReDoc <code>&lt;noscript&gt;</code> warning when JS is disabled. PR #5074 by @evroon.</li> <li>\u2728 Add support for <code>FrozenSet</code> in parameters (e.g. query). PR #2938 by @juntatalor.</li> <li>\u2728 Allow custom middlewares to raise <code>HTTPException</code>s and propagate them. PR #2036 by @ghandic.</li> <li>\u2728 Preserve <code>json.JSONDecodeError</code> information when handling invalid JSON in request body, to support custom exception handlers that use its information. PR #4057 by @UKnowWhoIm.</li> </ul>"},{"location":"release-notes/#fixes_15","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>jsonable_encoder</code> for dataclasses with pydantic-compatible fields. PR #3607 by @himbeles.</li> <li>\ud83d\udc1b Fix support for extending <code>openapi_extras</code> with parameter lists. PR #4267 by @orilevari.</li> </ul>"},{"location":"release-notes/#docs_33","title":"Docs","text":"<ul> <li>\u270f Fix a simple typo in <code>docs/en/docs/python-types.md</code>. PR #5193 by @GlitchingCore.</li> <li>\u270f Fix typos in <code>tests/test_schema_extra_examples.py</code>. PR #5126 by @supraaxdd.</li> <li>\u270f Fix typos in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #5142 by @invisibleroads.</li> <li>\ud83d\udcdd Add step about upgrading pip in the venv to avoid errors when installing dependencies <code>docs/en/docs/contributing.md</code>. PR #5181 by @edisnake.</li> <li>\u270f Reword and clarify text in tutorial <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #5169 by @papb.</li> <li>\u270f Fix minor typo in <code>docs/en/docs/features.md</code>. PR #5206 by @OtherBarry.</li> <li>\u270f Fix minor typos in <code>docs/en/docs/async.md</code>. PR #5125 by @Ksenofanex.</li> <li>\ud83d\udcdd Add external link to docs: \"Readyapi, Docker(Docker compose) and Postgres\". PR #5033 by @krishnardt.</li> <li>\ud83d\udcdd Simplify example for docs for Additional Responses, remove unnecessary <code>else</code>. PR #4693 by @adriangb.</li> <li>\ud83d\udcdd Update docs, compare enums with identity instead of equality. PR #4905 by @MicaelJarniac.</li> <li>\u270f Fix typo in <code>docs/en/docs/python-types.md</code>. PR #4886 by @MicaelJarniac.</li> <li>\ud83c\udfa8 Fix syntax highlighting in docs for OpenAPI Callbacks. PR #4368 by @xncbf.</li> <li>\u270f Reword confusing sentence in docs file <code>typo-fix-path-params-numeric-validations.md</code>. PR #3219 by @ccrenfroe.</li> <li>\ud83d\udcdd Update docs for handling HTTP Basic Auth with <code>secrets.compare_digest()</code> to account for non-ASCII characters. PR #3536 by @lewoudar.</li> <li>\ud83d\udcdd Update docs for testing, fix examples with relative imports. PR #5302 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_28","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/index.md</code>. PR #5289 by @impocode.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/versions.md</code>. PR #4985 by @emp7yhead.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/header-params.md</code>. PR #4921 by @batlopes.</li> <li>\ud83c\udf10 Update <code>ko/mkdocs.yml</code> for a missing link. PR #5020 by @dalinaum.</li> </ul>"},{"location":"release-notes/#internal_35","title":"Internal","text":"<ul> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.21.1 to 2.22.0. PR #5258 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5196 by @pre-commit-ci[bot].</li> <li>\ud83d\udd25 Delete duplicated tests in <code>tests/test_tutorial/test_sql_databases/test_sql_databases.py</code>. PR #5040 by @raccoonyy.</li> <li>\u267b Simplify internal RegEx in <code>readyapi/utils.py</code>. PR #5057 by @pylounge.</li> <li>\ud83d\udd27 Fix Type hint of <code>auto_error</code> which does not need to be <code>Optional[bool]</code>. PR #4933 by @DavidKimDY.</li> <li>\ud83d\udd27 Update mypy config, use <code>strict = true</code> instead of manual configs. PR #4605 by @michaeloliverx.</li> <li>\u267b Change a <code>dict()</code> for <code>{}</code> in <code>readyapi/utils.py</code>. PR #3138 by @ShahriyarR.</li> <li>\u267b Move internal variable for errors in <code>jsonable_encoder</code> to put related code closer. PR #4560 by @GuilleQP.</li> <li>\u267b Simplify conditional assignment in <code>readyapi/dependencies/utils.py</code>. PR #4597 by @cikay.</li> <li>\u2b06 Upgrade version pin accepted for Flake8, for internal code, to <code>flake8 &gt;=3.8.3,&lt;6.0.0</code>. PR #4097 by @jamescurtin.</li> <li>\ud83c\udf71 Update Jina banner, fix typo. PR #5301 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0800","title":"0.80.0","text":""},{"location":"release-notes/#breaking-changes-fixes","title":"Breaking Changes - Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>response_model</code> not invalidating <code>None</code>. PR #2725 by @hukkin.</li> </ul> <p>If you are using <code>response_model</code> with some type that doesn't include <code>None</code> but the function is returning <code>None</code>, it will now raise an internal server error, because you are returning invalid data that violates the contract in <code>response_model</code>. Before this release it would allow breaking that contract returning <code>None</code>.</p> <p>For example, if you have an app like this:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Item)\ndef get_invalid_none():\n    return None\n</code></pre> <p>...calling the path <code>/items/invalidnone</code> will raise an error, because <code>None</code> is not a valid type for the <code>response_model</code> declared with <code>Item</code>.</p> <p>You could also be implicitly returning <code>None</code> without realizing, for example:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Item)\ndef get_invalid_none():\n    if flag:\n        return {\"name\": \"foo\"}\n    # if flag is False, at this point the function will implicitly return None\n</code></pre> <p>If you have path operations using <code>response_model</code> that need to be allowed to return <code>None</code>, make it explicit in <code>response_model</code> using <code>Union[Something, None]</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Union[Item, None])\ndef get_invalid_none():\n    return None\n</code></pre> <p>This way the data will be correctly validated, you won't have an internal server error, and the documentation will also reflect that this path operation could return <code>None</code> (or <code>null</code> in JSON).</p>"},{"location":"release-notes/#fixes_16","title":"Fixes","text":"<ul> <li>\u2b06 Upgrade Swagger UI copy of <code>oauth2-redirect.html</code> to include fixes for flavors of authorization code flows in Swagger UI. PR #3439 initial PR by @koonpeng.</li> <li>\u267b Strip empty whitespace from description extracted from docstrings. PR #2821 by @and-semakin.</li> <li>\ud83d\udc1b Fix cached dependencies when using a dependency in <code>Security()</code> and other places (e.g. <code>Depends()</code>) with different OAuth2 scopes. PR #2945 by @laggardkernel.</li> <li>\ud83c\udfa8 Update type annotations for <code>response_model</code>, allow things like <code>Union[str, None]</code>. PR #5294 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_29","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix typos in German translation for <code>docs/de/docs/features.md</code>. PR #4533 by @0xflotus.</li> <li>\ud83c\udf10 Add missing navigator for <code>encoder.md</code> in Korean translation. PR #5238 by @joonas-yoon.</li> <li>(Empty PR merge by accident) #4913.</li> </ul>"},{"location":"release-notes/#0791","title":"0.79.1","text":""},{"location":"release-notes/#fixes_17","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>jsonable_encoder</code> using <code>include</code> and <code>exclude</code> parameters for non-Pydantic objects. PR #2606 by @xaviml.</li> <li>\ud83d\udc1b Fix edge case with repeated aliases names not shown in OpenAPI. PR #2351 by @klaa97.</li> <li>\ud83d\udcdd Add misc dependency installs to tutorial docs. PR #2126 by @TeoZosa.</li> </ul>"},{"location":"release-notes/#docs_34","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add note giving credit for illustrations to Ketrina Thompson. PR #5284 by @khulnasoft.</li> <li>\u270f Fix typo in <code>python-types.md</code>. PR #5116 by @Kludex.</li> <li>\u270f Fix typo in <code>docs/en/docs/python-types.md</code>. PR #5007 by @atiabbz.</li> <li>\ud83d\udcdd Remove unneeded Django/Flask references from async topic intro. PR #5280 by @carltongibson.</li> <li>\u2728 Add illustrations for Concurrent burgers and Parallel burgers. PR #5277 by @khulnasoft. Updated docs at: Concurrency and Burgers.</li> </ul>"},{"location":"release-notes/#translations_30","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/query-params.md</code>. PR #4775 by @batlopes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/first-steps.md</code>. PR #4954 by @FLAIR7.</li> <li>\ud83c\udf10 Add translation for <code>docs/zh/docs/advanced/response-cookies.md</code>. PR #4638 by @zhangbo2012.</li> <li>\ud83c\udf10  Add French translation for <code>docs/fr/docs/deployment/index.md</code>. PR #3689 by @rjNemo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>tutorial/handling-errors.md</code>. PR #4769 by @frnsimoes.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/history-design-future.md</code>. PR #3451 by @rjNemo.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/background-tasks.md</code>. PR #4854 by @AdmiralDesu.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/security/first-steps.md</code>. PR #3841 by @jaystone776.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/nosql-databases.md</code>. PR #4205 by @sUeharaE4.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/index.md</code>. PR #4705 by @bas-baskara.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/index.md</code> and tweak right-to-left CSS. PR #2395 by @mohsen-mahmoodi.</li> </ul>"},{"location":"release-notes/#internal_36","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update Jina sponsorship. PR #5283 by @khulnasoft.</li> <li>\ud83d\udd27 Update Jina sponsorship. PR #5272 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, Striveworks badge. PR #5179 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0790","title":"0.79.0","text":""},{"location":"release-notes/#fixes-breaking-changes","title":"Fixes - Breaking Changes","text":"<ul> <li>\ud83d\udc1b Fix removing body from status codes that do not support it. PR #5145 by @khulnasoft.<ul> <li>Setting <code>status_code</code> to <code>204</code>, <code>304</code>, or any code below <code>200</code> (1xx) will remove the body from the response.</li> <li>This fixes an error in Uvicorn that otherwise would be thrown: <code>RuntimeError: Response content longer than Content-Length</code>.</li> <li>This removes <code>readyapi.openapi.constants.STATUS_CODES_WITH_NO_BODY</code>, it is replaced by a function in utils.</li> </ul> </li> </ul>"},{"location":"release-notes/#translations_31","title":"Translations","text":"<ul> <li>\ud83c\udf10 Start of Hebrew translation. PR #5050 by @itay-raveh.</li> <li>\ud83d\udd27 Add config for Swedish translations notification. PR #5147 by @khulnasoft.</li> <li>\ud83c\udf10 Start of Swedish translation. PR #5062 by @MrRawbin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/index.md</code>. PR #5043 by @wakabame.</li> <li>\ud83c\udf10\ud83c\uddf5\ud83c\uddf1 Add Polish translation for <code>docs/pl/docs/tutorial/first-steps.md</code>. PR #5024 by @Valaraucoo.</li> </ul>"},{"location":"release-notes/#internal_37","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update translations notification for Hebrew. PR #5158 by @khulnasoft.</li> <li>\ud83d\udd27 Update Dependabot commit message. PR #5156 by @khulnasoft.</li> <li>\u2b06 Bump actions/upload-artifact from 2 to 3. PR #5148 by @dependabot[bot].</li> <li>\u2b06 Bump actions/cache from 2 to 3. PR #5149 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors badge configs. PR #5155 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5154 by @khulnasoft.</li> <li>\ud83d\udd27 Update Jina sponsor badges. PR #5151 by @khulnasoft.</li> <li>\u2b06 Bump actions/checkout from 2 to 3. PR #5133 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5030 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.1.5 to 1.2.3. PR #5132 by @dependabot[bot].</li> <li>\u2b06 Bump codecov/codecov-action from 2 to 3. PR #5131 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.9.0 to 2.21.1. PR #5130 by @dependabot[bot].</li> <li>\u2b06 Bump actions/setup-python from 2 to 4. PR #5129 by @dependabot[bot].</li> <li>\ud83d\udc77 Add Dependabot. PR #5128 by @khulnasoft.</li> <li>\u267b\ufe0f Move from <code>Optional[X]</code> to <code>Union[X, None]</code> for internal utils. PR #5124 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Dropbase, add Doist. PR #5096 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Classiq, add ImgWhale. PR #5079 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0780","title":"0.78.0","text":""},{"location":"release-notes/#features_21","title":"Features","text":"<ul> <li> <p>\u2728 Add support for omitting <code>...</code> as default value when declaring required parameters with:</p> </li> <li> <p><code>Path()</code></p> </li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>New docs at Tutorial - Query Parameters and String Validations - Make it required. PR #4906 by @khulnasoft.</p> <p>Up to now, declaring a required parameter while adding additional validation or metadata needed using <code>...</code> (Ellipsis).</p> <p>For example:</p> <pre><code>from readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(default=..., gt=0),\n    query: str = Query(default=..., max_length=10),\n    session: str = Cookie(default=..., min_length=3),\n    x_trace: str = Header(default=..., title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>...all these parameters are required because the default value is <code>...</code> (Ellipsis).</p> <p>But now it's possible and supported to just omit the default value, as would be done with Pydantic fields, and the parameters would still be required.</p> <p>\u2728 For example, this is now supported:</p> <pre><code>from readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(gt=0),\n    query: str = Query(max_length=10),\n    session: str = Cookie(min_length=3),\n    x_trace: str = Header(title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>To declare parameters as optional (not required), you can set a default value as always, for example using <code>None</code>:</p> <pre><code>from typing import Union\nfrom readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(gt=0),\n    query: Union[str, None] = Query(default=None, max_length=10),\n    session: Union[str, None] = Cookie(default=None, min_length=3),\n    x_trace: Union[str, None] = Header(default=None, title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"release-notes/#docs_35","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs recommending <code>Union</code> over <code>Optional</code> and migrate source examples. New docs at Python Types Intro - Using <code>Union</code> or <code>Optional</code>. PR #4908 by @khulnasoft.</li> <li>\ud83c\udfa8 Fix default value as set in tutorial for Path Operations Advanced Configurations. PR #4899 by @khulnasoft.</li> <li>\ud83d\udcdd Add documentation for redefined path operations. PR #4864 by @madkinsz.</li> <li>\ud83d\udcdd Updates links for Celery documentation. PR #4736 by @sammyzord.</li> <li>\u270f Fix example code with sets in tutorial for body nested models. PR #3030 by @hitrust.</li> <li>\u270f Fix links to Pydantic docs. PR #4670 by @kinuax.</li> <li>\ud83d\udcdd Update docs about Swagger UI self-hosting with newer source links. PR #4813 by @Kastakin.</li> <li>\ud83d\udcdd Add link to external article: Building the Poll App From Django Tutorial With ReadyAPI And React. PR #4778 by @jbrocher.</li> <li>\ud83d\udcdd Add OpenAPI warning to \"Body - Fields\" docs with extra schema extensions. PR #4846 by @ml-evs.</li> </ul>"},{"location":"release-notes/#translations_32","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix code examples in Japanese translation for <code>docs/ja/docs/tutorial/testing.md</code>. PR #4623 by @hirotoKirimaru.</li> </ul>"},{"location":"release-notes/#internal_38","title":"Internal","text":"<ul> <li>\u267b Refactor dict value extraction to minimize key lookups <code>readyapi/utils.py</code>. PR #3139 by @ShahriyarR.</li> <li>\u2705 Add tests for required nonable parameters and body fields. PR #4907 by @khulnasoft.</li> <li>\ud83d\udc77 Fix installing Material for MkDocs Insiders in CI. PR #4897 by @khulnasoft.</li> <li>\ud83d\udc77 Add pre-commit CI instead of custom GitHub Action. PR #4896 by @khulnasoft.</li> <li>\ud83d\udc77 Add pre-commit GitHub Action workflow. PR #4895 by @khulnasoft.</li> <li>\ud83d\udcdd Add dark mode auto switch to docs based on OS preference. PR #4869 by @ComicShrimp.</li> <li>\ud83d\udd25 Remove un-used old pending tests, already covered in other places. PR #4891 by @khulnasoft.</li> <li>\ud83d\udd27 Add Python formatting hooks to pre-commit. PR #4890 by @khulnasoft.</li> <li>\ud83d\udd27 Add pre-commit with first config and first formatting pass. PR #4888 by @khulnasoft.</li> <li>\ud83d\udc77 Disable CI installing Material for MkDocs in forks. PR #4410 by @dolfinus.</li> </ul>"},{"location":"release-notes/#0771","title":"0.77.1","text":""},{"location":"release-notes/#upgrades_15","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.19.0 to 0.19.1. PR #4819 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_36","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add link to german article: REST-API Programmieren mittels Python und dem ReadyAPI Modul. PR #4624 by @fschuermeyer.</li> <li>\ud83d\udcdd Add external link: PyCharm Guide to ReadyAPI. PR #4512 by @mukulmantosh.</li> <li>\ud83d\udcdd Add external link to article: Building an API with ReadyAPI and Supabase and Deploying on Deta. PR #4440 by @aUnicornDev.</li> <li>\u270f Fix small typo in <code>docs/en/docs/tutorial/security/first-steps.md</code>. PR #4515 by @KikoIlievski.</li> </ul>"},{"location":"release-notes/#translations_33","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/tutorial/index.md</code>. PR #4516 by @MKaczkow.</li> <li>\u270f Fix typo in deployment. PR #4629 by @raisulislam541.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/help-readyapi.md</code>. PR #4583 by @mateusjs.</li> </ul>"},{"location":"release-notes/#internal_39","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add notifications in issue for Uzbek translations. PR #4884 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0770","title":"0.77.0","text":""},{"location":"release-notes/#upgrades_16","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.18.0 to 0.19.0. PR #4488 by @Kludex.<ul> <li>When creating an explicit <code>JSONResponse</code> the <code>content</code> argument is now required.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_37","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add external link to article: Seamless ReadyAPI Configuration with ConfZ. PR #4414 by @silvanmelchior.</li> <li>\ud83d\udcdd Add external link to article: 5 Advanced Features of ReadyAPI You Should Try. PR #4436 by @kaustubhgupta.</li> <li>\u270f Reword to improve legibility of docs about <code>TestClient</code>. PR #4389 by @rgilton.</li> <li>\ud83d\udcdd Add external link to blog post about Kafka, ReadyAPI, and Ably. PR #4044 by @Ugbot.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #4875 by @wpyoga.</li> <li>\u270f Fix typo in <code>docs/en/docs/async.md</code>. PR #4726 by @Prezu.</li> </ul>"},{"location":"release-notes/#translations_34","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update source example highlights for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #4237 by @caimaoy.</li> <li>\ud83c\udf10 Remove translation docs references to aiofiles as it's no longer needed since AnyIO. PR #3594 by @alonme.</li> <li>\u270f \ud83c\udf10 Fix typo in Portuguese translation for <code>docs/pt/docs/tutorial/path-params.md</code>. PR #4722 by @CleoMenezesJr.</li> <li>\ud83c\udf10 Fix live docs server for translations for some languages. PR #4729 by @wakabame.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/cookie-params.md</code>. PR #4112 by @lbmendes.</li> <li>\ud83c\udf10 Fix French translation for <code>docs/tutorial/body.md</code>. PR #4332 by @Smlep.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/conditional-openapi.md</code>. PR #2631 by @sh0nk.</li> <li>\ud83c\udf10 Fix Japanese translation of <code>docs/ja/docs/tutorial/body.md</code>. PR #3062 by @a-takahashi223.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/background-tasks.md</code>. PR #2170 by @izaguerreiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/deta.md</code>. PR #4442 by @lsglucas.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/async.md</code>. PR #4036 by @Winand.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/body.md</code>. PR #3960 by @leandrodesouzadev.</li> <li>\ud83c\udf10 Add Portuguese translation of <code>tutorial/extra-data-types.md</code>. PR #4077 by @luccasmmg.</li> <li>\ud83c\udf10 Update German translation for <code>docs/features.md</code>. PR #3905 by @jomue.</li> </ul>"},{"location":"release-notes/#0760","title":"0.76.0","text":""},{"location":"release-notes/#upgrades_17","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.17.1 to 0.18.0. PR #4483 by @Kludex.</li> </ul>"},{"location":"release-notes/#internal_40","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4847 by @github-actions[bot].</li> <li>\ud83d\udd27 Add Budget Insight sponsor. PR #4824 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsor, ExoFlare badge. PR #4822 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, enable Dropbase again, update TalkPython link. PR #4821 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0752","title":"0.75.2","text":"<p>This release includes upgrades to third-party packages that handle security issues. Although there's a chance these issues don't affect you in particular, please upgrade as soon as possible.</p>"},{"location":"release-notes/#fixes_18","title":"Fixes","text":"<ul> <li>\u2705 Fix new/recent tests with new fixed <code>ValidationError</code> JSON Schema. PR #4806 by @khulnasoft.</li> <li>\ud83d\udc1b Fix JSON Schema for <code>ValidationError</code> at field <code>loc</code>. PR #3810 by @dconathan.</li> <li>\ud83d\udc1b Fix support for prefix on APIRouter WebSockets. PR #2640 by @Kludex.</li> </ul>"},{"location":"release-notes/#upgrades_18","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update ujson ranges for CVE-2021-45958. PR #4804 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade dependencies upper range for extras \"all\". PR #4803 by @khulnasoft.</li> <li>\u2b06 Upgrade Swagger UI - swagger-ui-dist@4. This handles a security issue in Swagger UI itself where it could be possible to inject HTML into Swagger UI. Please upgrade as soon as you can, in particular if you expose your Swagger UI (<code>/docs</code>) publicly to non-expert users. PR #4347 by @RAlanWright.</li> </ul>"},{"location":"release-notes/#internal_41","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add: ExoFlare, Ines Course; remove: Dropbase, Vim.so, Calmcode; update: Striveworks, TalkPython and TestDriven.io. PR #4805 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade Codecov GitHub Action. PR #4801 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0751","title":"0.75.1","text":""},{"location":"release-notes/#translations_35","title":"Translations","text":"<ul> <li>\ud83c\udf10 Start Dutch translations. PR #4703 by @khulnasoft.</li> <li>\ud83c\udf10 Start Persian/Farsi translations. PR #4243 by @aminalaee.</li> <li>\u270f Reword sentence about handling errors. PR #1993 by @khuhroproeza.</li> </ul>"},{"location":"release-notes/#internal_42","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4752 by @github-actions[bot].</li> <li>\u2796 Temporarily remove typer-cli from dependencies and upgrade Black to unblock Pydantic CI. PR #4754 by @khulnasoft.</li> <li>\ud83d\udd27 Add configuration to notify Dutch translations. PR #4702 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #4699 by @github-actions[bot].</li> <li>\ud83d\udc1b Fix ReadyAPI People generation to include missing file in commit. PR #4695 by @khulnasoft.</li> <li>\ud83d\udd27 Update Classiq sponsor links. PR #4688 by @khulnasoft.</li> <li>\ud83d\udd27 Add Classiq sponsor. PR #4671 by @khulnasoft.</li> <li>\ud83d\udcdd Add Jina's QA Bot to the docs to help people that want to ask quick questions. PR #4655 by @khulnasoft based on original PR #4626 by @hanxiao.</li> </ul>"},{"location":"release-notes/#0750","title":"0.75.0","text":""},{"location":"release-notes/#features_22","title":"Features","text":"<ul> <li>\u2728 Add support for custom <code>generate_unique_id_function</code> and docs for generating clients. New docs: Advanced - Generate Clients. PR #4650 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0741","title":"0.74.1","text":""},{"location":"release-notes/#features_23","title":"Features","text":"<ul> <li>\u2728 Include route in scope to allow middleware and other tools to extract its information. PR #4603 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0740","title":"0.74.0","text":""},{"location":"release-notes/#breaking-changes_3","title":"Breaking Changes","text":"<ul> <li>\u2728 Update internal <code>AsyncExitStack</code> to fix context for dependencies with <code>yield</code>. PR #4575 by @khulnasoft.</li> </ul> <p>Dependencies with <code>yield</code> can now catch <code>HTTPException</code> and custom exceptions. For example:</p> <pre><code>async def get_database():\n    with Session() as session:\n        try:\n            yield session\n        except HTTPException:\n            session.rollback()\n            raise\n        finally:\n            session.close()\n</code></pre> <p>After the dependency with <code>yield</code> handles the exception (or not) the exception is raised again. So that any exception handlers can catch it, or ultimately the default internal <code>ServerErrorMiddleware</code>.</p> <p>If you depended on exceptions not being received by dependencies with <code>yield</code>, and receiving an exception breaks the code after <code>yield</code>, you can use a block with <code>try</code> and <code>finally</code>:</p> <pre><code>async def do_something():\n    try:\n        yield something\n    finally:\n        some_cleanup()\n</code></pre> <p>...that way the <code>finally</code> block is run regardless of any exception that might happen.</p>"},{"location":"release-notes/#features_24","title":"Features","text":"<ul> <li>The same PR #4575 from above also fixes the <code>contextvars</code> context for the code before and after <code>yield</code>. This was the main objective of that PR.</li> </ul> <p>This means that now, if you set a value in a context variable before <code>yield</code>, the value would still be available after <code>yield</code> (as you would intuitively expect). And it also means that you can reset the context variable with a token afterwards.</p> <p>For example, this works correctly now:</p> <pre><code>from contextvars import ContextVar\nfrom typing import Any, Dict, Optional\n\n\nlegacy_request_state_context_var: ContextVar[Optional[Dict[str, Any]]] = ContextVar(\n    \"legacy_request_state_context_var\", default=None\n)\n\nasync def set_up_request_state_dependency():\n    request_state = {\"user\": \"deadpond\"}\n    contextvar_token = legacy_request_state_context_var.set(request_state)\n    yield request_state\n    legacy_request_state_context_var.reset(contextvar_token)\n</code></pre> <p>...before this change it would raise an error when resetting the context variable, because the <code>contextvars</code> context was different, because of the way it was implemented.</p> <p>Note: You probably don't need <code>contextvars</code>, and you should probably avoid using them. But they are powerful and useful in some advanced scenarios, for example, migrating from code that used Flask's <code>g</code> semi-global variable.</p> <p>Technical Details: If you want to know more of the technical details you can check out the PR description #4575.</p>"},{"location":"release-notes/#internal_43","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add Striveworks sponsor. PR #4596 by @khulnasoft.</li> <li>\ud83d\udc9a Only build docs on push when on master to avoid duplicate runs from PRs. PR #4564 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #4502 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0730","title":"0.73.0","text":""},{"location":"release-notes/#features_25","title":"Features","text":"<ul> <li>\u2728 Add support for declaring <code>UploadFile</code> parameters without explicit <code>File()</code>. PR #4469 by @khulnasoft. New docs: Request Files - File Parameters with UploadFile.</li> <li>\u2728 Add support for tags with Enums. PR #4468 by @khulnasoft. New docs: Path Operation Configuration - Tags with Enums.</li> <li>\u2728 Allow hiding from OpenAPI (and Swagger UI) <code>Query</code>, <code>Cookie</code>, <code>Header</code>, and <code>Path</code> parameters. PR #3144 by @astraldawn. New docs: Query Parameters and String Validations - Exclude from OpenAPI.</li> </ul>"},{"location":"release-notes/#docs_38","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak and improve docs for Request Files. PR #4470 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_19","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix bug preventing to use OpenAPI when using tuples. PR #3874 by @victorbenichoux.</li> <li>\ud83d\udc1b Prefer custom encoder over defaults if specified in <code>jsonable_encoder</code>. PR #2061 by @viveksunder.<ul> <li>\ud83d\udc9a Duplicate PR to trigger CI. PR #4467 by @khulnasoft.</li> </ul> </li> </ul>"},{"location":"release-notes/#internal_44","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix docs dependencies cache, to get the latest Material for MkDocs. PR #4466 by @khulnasoft.</li> <li>\ud83d\udd27 Add sponsor Dropbase. PR #4465 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0720","title":"0.72.0","text":""},{"location":"release-notes/#features_26","title":"Features","text":"<ul> <li>\u2728 Enable configuring Swagger UI parameters. Original PR #2568 by @jmriebold. Here are the new docs: Configuring Swagger UI.</li> </ul>"},{"location":"release-notes/#docs_39","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Python Types docs, add missing 3.6 / 3.9 example. PR #4434 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_36","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Chinese translation for <code>docs/help-readyapi.md</code>. PR #3847 by @jaystone776.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/index.md</code>. PR #4195 by @kty4119.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/index.md</code>. PR #4245 by @MicroPanda123.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs\\tutorial\\path-operation-configuration.md</code>. PR #3312 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_45","title":"Internal","text":"<ul> <li>\ud83d\udd27 Enable MkDocs Material Insiders' <code>content.tabs.link</code>. PR #4399 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0710","title":"0.71.0","text":""},{"location":"release-notes/#features_27","title":"Features","text":"<ul> <li>\u2728 Add docs and tests for Python 3.9 and Python 3.10. PR #3712 by @khulnasoft.<ul> <li>You can start with Python Types Intro, it explains what changes between different Python versions, in Python 3.9 and in Python 3.10.</li> <li>All the ReadyAPI docs are updated. Each code example in the docs that could use different syntax in Python 3.9 or Python 3.10 now has all the alternatives in tabs.</li> </ul> </li> <li>\u2b06\ufe0f Upgrade Starlette to 0.17.1. PR #4145 by @simondale00.</li> </ul>"},{"location":"release-notes/#internal_46","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4354 by @github-actions[bot].</li> <li>\ud83d\udd27 Add ReadyAPI Trove Classifier for PyPI as now there's one \ud83e\udd37\ud83d\ude01. PR #4386 by @khulnasoft.</li> <li>\u2b06 Upgrade MkDocs Material and configs. PR #4385 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0701","title":"0.70.1","text":"<p>There's nothing interesting in this particular ReadyAPI release. It is mainly to enable/unblock the release of the next version of Pydantic that comes packed with features and improvements. \ud83e\udd29</p>"},{"location":"release-notes/#fixes_20","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix JSON Schema for dataclasses, supporting the fixes in Pydantic 1.9. PR #4272 by @PrettyWood.</li> </ul>"},{"location":"release-notes/#translations_37","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/request-forms-and-files.md</code>. PR #3744 by @NinaHwang.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/request-files.md</code>. PR #3743 by @NinaHwang.</li> <li>\ud83c\udf10 Add portuguese translation for <code>docs/tutorial/query-params-str-validations.md</code>. PR #3965 by @leandrodesouzadev.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/response-status-code.md</code>. PR #3742 by @NinaHwang.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - JSON Compatible Encoder. PR #3152 by @NEONKID.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Path Parameters and Numeric Validations. PR #2432 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/versions.md</code>. PR #4121 by @DevDae.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/index.md</code>. PR #4193 by @kimjaeyoonn.</li> <li>\ud83d\udd27 Add CryptAPI sponsor. PR #4264 by @khulnasoft.</li> <li>\ud83d\udcdd Update <code>docs/tutorial/dependencies/classes-as-dependencies</code>: Add type of query parameters in a description of <code>Classes as dependencies</code>. PR #4015 by @0417taehyun.</li> <li>\ud83c\udf10 Add French translation for Tutorial - First steps. PR #3455 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/path-params.md</code>. PR #3548 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/query-params.md</code>. PR #3556 by @Smlep.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/python-types.md</code>. PR #3926 by @BilalAlpaslan.</li> </ul>"},{"location":"release-notes/#internal_47","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4274 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0700","title":"0.70.0","text":"<p>This release just upgrades Starlette to the latest version, <code>0.16.0</code>, which includes several bug fixes and some small breaking changes.</p> <p>These last three consecutive releases are independent so that you can migrate gradually:</p> <ul> <li>First to ReadyAPI <code>0.68.2</code>, with no breaking changes, but upgrading all the sub-dependencies.</li> <li>Next to ReadyAPI <code>0.69.0</code>, which upgrades Starlette to <code>0.15.0</code>, with AnyIO support, and a higher chance of having breaking changes in your code.</li> <li>Finally to ReadyAPI <code>0.70.0</code>, just upgrading Starlette to the latest version <code>0.16.0</code> with additional bug fixes.</li> </ul> <p>This way, in case there was a breaking change for your code in one of the releases, you can still benefit from the previous upgrades. \u2728</p>"},{"location":"release-notes/#breaking-changes-upgrade","title":"Breaking Changes - Upgrade","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.16.0. PR #4016 by @khulnasoft.</li> </ul> <p>Also upgrades the ranges of optional dependencies:</p> <ul> <li><code>\"jinja2 &gt;=2.11.2,&lt;4.0.0\"</code></li> <li><code>\"itsdangerous &gt;=1.1.0,&lt;3.0.0\"</code></li> </ul>"},{"location":"release-notes/#0690","title":"0.69.0","text":""},{"location":"release-notes/#breaking-changes-upgrade_1","title":"Breaking Changes - Upgrade","text":"<p>This release adds support for Trio. \u2728</p> <p>It upgrades the version of Starlette to <code>0.15.0</code>, now based on AnyIO, and the internal async components in ReadyAPI are now based on AnyIO as well, making it compatible with both asyncio and Trio.</p> <p>You can read the docs about running ReadyAPI with Trio using Hypercorn.</p> <p>This release also removes <code>graphene</code> as an optional dependency for GraphQL. If you need to work with GraphQL, the recommended library now is Strawberry. You can read the new ReadyAPI with GraphQL docs.</p>"},{"location":"release-notes/#features_28","title":"Features","text":"<ul> <li>\u2728 Add support for Trio via AnyIO, upgrading Starlette to <code>0.15.0</code>. PR #3372 by @graingert.</li> <li>\u2796 Remove <code>graphene</code> as an optional dependency. PR #4007 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_40","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs for using Trio with Hypercorn. PR #4014 by @khulnasoft.</li> <li>\u270f Fix typos in Deployment Guide. PR #3975 by @ghandic.</li> <li>\ud83d\udcdd Update docs with pip install calls when using extras with brackets, use quotes for compatibility with Zsh. PR #3131 by @tomwei7.</li> <li>\ud83d\udcdd Add external link to article: Deploying ML Models as API Using ReadyAPI and Heroku. PR #3904 by @kaustubhgupta.</li> <li>\u270f Fix typo in file paths in <code>docs/en/docs/contributing.md</code>. PR #3752 by @NinaHwang.</li> <li>\u270f Fix a typo in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code> and <code>docs/en/docs/release-notes.md</code>. PR #3750 by @saintmalik.</li> <li>\u270f\ufe0f Add a missing comma in the security tutorial. PR #3564 by @jalvaradosegura.</li> <li>\u270f Fix typo in <code>docs/en/docs/help-readyapi.md</code>. PR #3760 by @jaystone776.</li> <li>\u270f Fix typo about file path in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #3285 by @HolyDorus.</li> <li>\u270f Re-word to clarify test client in <code>docs/en/docs/tutorial/testing.md</code>. PR #3382 by @Bharat123rox.</li> <li>\ud83d\udcdd  Fix incorrect highlighted code. PR #3325 by @paxcodes.</li> <li>\ud83d\udcdd Add external link to article: How-to deploy ReadyAPI app to Heroku. PR #3241 by @Jarmos-san.</li> <li>\u270f Fix typo (mistranslation) in <code>docs/en/docs/advanced/templates.md</code>. PR #3211 by @oerpli.</li> <li>\ud83d\udcdd Remove note about (now supported) feature from Swagger UI in <code>docs/en/docs/tutorial/request-files.md</code>. PR #2803 by @gsganden.</li> <li>\u270f Fix typo re-word in <code>docs/tutorial/handling-errors.md</code>. PR #2700 by @graue70.</li> </ul>"},{"location":"release-notes/#translations_38","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize Azerbaijani translations. PR #3941 by @madatbay.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/readyapi-people.md</code>. PR #3848 by @BilalAlpaslan.</li> </ul>"},{"location":"release-notes/#internal_48","title":"Internal","text":"<ul> <li>\ud83d\udcdd Add supported Python versions badge. PR #2794 by @hramezani.</li> <li>\u270f Fix link in Japanese docs for <code>docs/ja/docs/deployment/docker.md</code>. PR #3245 by @utamori.</li> <li>\ud83d\udd27 Correct DeprecationWarning config and comment in pytest settings. PR #4008 by @graingert.</li> <li>\ud83d\udd27 Swap light/dark theme button icon. PR #3246 by @eddsalkield.</li> <li>\ud83d\udd27 Lint only in Python 3.7 and above. PR #4006 by @khulnasoft.</li> <li>\ud83d\udd27 Add GitHub Action notify-translations config for Azerbaijani. PR #3995 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0682","title":"0.68.2","text":"<p>This release has no breaking changes. \ud83c\udf89</p> <p>It upgrades the version ranges of sub-dependencies to allow applications using ReadyAPI to easily upgrade them.</p> <p>Soon there will be a new ReadyAPI release upgrading Starlette to take advantage of recent improvements, but as that has a higher chance of having breaking changes, it will be in a separate release.</p>"},{"location":"release-notes/#features_29","title":"Features","text":"<ul> <li>\u2b06Increase supported version of aiofiles to suppress warnings. PR #2899 by @SnkSynthesis.</li> <li>\u2796 Do not require backports in Python &gt;= 3.7. PR #1880 by @FFY00.</li> <li>\u2b06 Upgrade required Python version to &gt;= 3.6.1, needed by typing.Deque, used by Pydantic. PR #2733 by @hukkin.</li> <li>\u2b06\ufe0f Bump Uvicorn max range to 0.15.0. PR #3345 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_41","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update GraphQL docs, recommend Strawberry. PR #3981 by @khulnasoft.</li> <li>\ud83d\udcdd Re-write and extend Deployment guide: Concepts, Uvicorn, Gunicorn, Docker, Containers, Kubernetes. PR #3974 by @khulnasoft.</li> <li>\ud83d\udcdd Upgrade HTTPS guide with more explanations and diagrams. PR #3950 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_39","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Turkish translation for <code>docs/features.md</code>. PR #1950 by @ycd.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/benchmarks.md</code>. PR #2729 by @Telomeraz.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/index.md</code>. PR #1908 by @ycd.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/body.md</code>. PR #3671 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/docker.md</code>. PR #3694 by @rjNemo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/path-params.md</code>. PR #3664 by @FelipeSilva93.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/https.md</code>. PR #3754 by @lsglucas.</li> <li>\ud83c\udf10 Add German translation for <code>docs/features.md</code>. PR #3699 by @mawassk.</li> </ul>"},{"location":"release-notes/#internal_49","title":"Internal","text":"<ul> <li>\u2728 Update GitHub Action: notify-translations, to avoid a race conditions. PR #3989 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade development <code>autoflake</code>, supporting multi-line imports. PR #3988 by @khulnasoft.</li> <li>\u2b06\ufe0f Increase dependency ranges for tests and docs: pytest-cov, pytest-asyncio, black, httpx, sqlalchemy, databases, mkdocs-markdownextradata-plugin. PR #3987 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3986 by @github-actions[bot].</li> <li>\ud83d\udc9a Fix badges in README and main page. PR #3979 by @ghandic.</li> <li>\u2b06 Upgrade internal testing dependencies: mypy to version 0.910, add newly needed type packages. PR #3350 by @ArcLightSlavik.</li> <li>\u2728 Add Deepset Sponsorship. PR #3976 by @khulnasoft.</li> <li>\ud83c\udfa8 Tweak CSS styles for shell animations. PR #3888 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Sponsor Calmcode.io. PR #3777 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0681","title":"0.68.1","text":"<ul> <li>\u2728 Add support for <code>read_with_orm_mode</code>, to support SQLModel relationship attributes. PR #3757 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_40","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation of <code>docs/readyapi-people.md</code>. PR #3461 by @ComicShrimp.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #3492 by @jaystone776.</li> <li>\ud83d\udd27 Add new Translation tracking issues for German and Indonesian. PR #3718 by @khulnasoft.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/sub-dependencies.md</code>. PR #3491 by @jaystone776.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/advanced/index.md</code>. PR #3460 by @ComicShrimp.</li> <li>\ud83c\udf10 Portuguese translation of <code>docs/async.md</code>. PR #1330 by @Serrones.</li> <li>\ud83c\udf10 Add French translation for <code>docs/async.md</code>. PR #3416 by @Smlep.</li> </ul>"},{"location":"release-notes/#internal_50","title":"Internal","text":"<ul> <li>\u2728 Add GitHub Action: Notify Translations. PR #3715 by @khulnasoft.</li> <li>\u2728 Update computation of ReadyAPI People and sponsors. PR #3714 by @khulnasoft.</li> <li>\u2728 Enable recent Material for MkDocs Insiders features. PR #3710 by @khulnasoft.</li> <li>\ud83d\udd25 Remove/clean extra imports from examples in docs for features. PR #3709 by @khulnasoft.</li> <li>\u2795 Update docs library to include sources in Markdown. PR #3648 by @khulnasoft.</li> <li>\u2b06 Enable tests for Python 3.9. PR #2298 by @Kludex.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3642 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0680","title":"0.68.0","text":""},{"location":"release-notes/#features_30","title":"Features","text":"<ul> <li>\u2728 Add support for extensions and updates to the OpenAPI schema in each path operation. New docs: ReadyAPI Path Operation Advanced Configuration - OpenAPI Extra. Initial PR #1922 by @edouardlp.</li> <li>\u2728 Add additional OpenAPI metadata parameters to <code>ReadyAPI</code> class, shown on the automatic API docs UI. New docs: Metadata and Docs URLs. Initial PR #1812 by @dkreeft.</li> <li>\u2728 Add <code>description</code> parameter to all the security scheme classes, e.g. <code>APIKeyQuery(name=\"key\", description=\"A very cool API key\")</code>. PR #1757 by @hylkepostma.</li> <li>\u2728 Update OpenAPI models, supporting recursive models and extensions. PR #3628 by @khulnasoft.</li> <li>\u2728 Import and re-export data structures from Starlette, used by Request properties, on <code>readyapi.datastructures</code>. Initial PR #1872 by @jamescurtin.</li> </ul>"},{"location":"release-notes/#docs_42","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs about async and response-model with more gender neutral language. PR #1869 by @Edward-Knight.</li> </ul>"},{"location":"release-notes/#translations_41","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/python-types.md</code>. PR #3039 by @dukkee.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/index.md</code>. PR #3489 by @jaystone776.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/external-links.md</code>. PR #3036 by @dukkee.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/global-dependencies.md</code>. PR #3493 by @jaystone776.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/versions.md</code>. PR #3618 by @lsglucas.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #3526 by @sattosan.</li> </ul>"},{"location":"release-notes/#internal_51","title":"Internal","text":"<ul> <li>\u2705 Add  the <code>docs_src</code> directory to test coverage and update tests. Initial PR #1904 by @Kludex.</li> <li>\ud83d\udd27 Add new GitHub templates with forms for new issues. PR #3612 by @khulnasoft.</li> <li>\ud83d\udcdd Add official ReadyAPI Twitter to docs: @readyapi. PR #3578 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0670","title":"0.67.0","text":""},{"location":"release-notes/#features_31","title":"Features","text":"<ul> <li>\u2728 Add support for <code>dataclasses</code> in request bodies and <code>response_model</code>. New documentation: Advanced User Guide - Using Dataclasses. PR #3577 by @khulnasoft.</li> <li>\u2728 Support <code>dataclasses</code> in responses. PR #3576 by @khulnasoft, continuation from initial PR #2722 by @amitlissack.</li> </ul>"},{"location":"release-notes/#docs_43","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add external link: How to Create A Fake Certificate Authority And Generate TLS Certs for ReadyAPI. PR #2839 by @aitoehigie.</li> <li>\u270f Fix code highlighted line in: <code>body-nested-models.md</code>. PR #3463 by @jaystone776.</li> <li>\u270f Fix typo in <code>body-nested-models.md</code>. PR #3462 by @jaystone776.</li> <li>\u270f Fix typo \"might me\" -&gt; \"might be\" in <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #3362 by @dbrakman.</li> <li>\ud83d\udcdd Add external link: Building simple E-Commerce with NuxtJS and ReadyAPI. PR #3271 by @ShahriyarR.</li> <li>\ud83d\udcdd Add external link: Serve a machine learning model using Sklearn, ReadyAPI and Docker. PR #2974 by @rodrigo-arenas.</li> <li>\u270f\ufe0f Fix typo on docstring in datastructures file. PR #2887 by @Kludex.</li> <li>\ud83d\udcdd Add External Link: Deploy ReadyAPI on Ubuntu and Serve using Caddy 2 Web Server. PR #3572 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link, replaces #1898. PR #3571 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_52","title":"Internal","text":"<ul> <li>\ud83c\udfa8 Improve style for sponsors, add radius border. PR #2388 by @Kludex.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes. PR #3574 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes. PR #3573 by @khulnasoft.</li> <li>\ud83d\udc77 Rename and clarify CI workflow job names. PR #3570 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes, strike 2 \u26be. PR #3575 by @khulnasoft.</li> <li>\ud83d\udd27 Sort external links in docs to have the most recent at the top. PR #3568 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0661","title":"0.66.1","text":""},{"location":"release-notes/#translations_42","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add basic setup for German translations. PR #3522 by @0x4Dark.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/security/index.md</code>. PR #3507 by @oandersonmagalhaes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/index.md</code>. PR #3337 by @lsglucas.</li> </ul>"},{"location":"release-notes/#internal_53","title":"Internal","text":"<ul> <li>\ud83d\udd27 Configure strict pytest options and update/refactor tests. Upgrade pytest to <code>&gt;=6.2.4,&lt;7.0.0</code> and pytest-cov to <code>&gt;=2.12.0,&lt;3.0.0</code>. Initial PR #2790 by @graingert.</li> <li>\u2b06\ufe0f Upgrade python-jose dependency to <code>&gt;=3.3.0,&lt;4.0.0</code> for tests. PR #3468 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0660","title":"0.66.0","text":""},{"location":"release-notes/#features_32","title":"Features","text":"<ul> <li>\u2728 Allow setting the <code>response_class</code> to <code>RedirectResponse</code> or <code>FileResponse</code> and returning the URL from the function. New and updated docs are in the tutorial section Custom Response - HTML, Stream, File, others, in RedirectResponse and in FileResponse. PR #3457 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_21","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix include/exclude for dicts in <code>jsonable_encoder</code>. PR #2016 by @Rubikoid.</li> <li>\ud83d\udc1b Support custom OpenAPI / JSON Schema fields in the generated output OpenAPI. PR #1429 by @jmagnusson.</li> </ul>"},{"location":"release-notes/#translations_43","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>tutorial/query-params.md</code>. PR #2243 by @mariacamilagl.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/response-directly.md</code>. PR #1253 by @jfunez.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/additional-status-codes.md</code>. PR #1252 by @jfunez.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/path-operation-advanced-configuration.md</code>. PR #1251 by @jfunez.</li> </ul>"},{"location":"release-notes/#0653","title":"0.65.3","text":""},{"location":"release-notes/#fixes_22","title":"Fixes","text":"<ul> <li>\u267b Assume request bodies contain JSON when no Content-Type header is provided. This fixes a breaking change introduced by 0.65.2 with PR #2118. It should allow upgrading ReadyAPI applications with clients that send JSON data without a <code>Content-Type</code> header. And there's still protection against CSRFs. PR #3456 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_44","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize Indonesian translations. PR #3014 by @pace-noge.</li> <li>\ud83c\udf10 Add Spanish translation of Tutorial - Path Parameters. PR #2219 by @mariacamilagl.</li> <li>\ud83c\udf10 Add Spanish translation of Tutorial - First Steps. PR #2208 by @mariacamilagl.</li> <li>\ud83c\udf10 Portuguese translation of Tutorial - Body - Fields. PR #3420 by @ComicShrimp.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Request - Forms - and - Files. PR #3249 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Handling - Errors. PR #3299 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Form - Data. PR #3248 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Body - Updates. PR #3237 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for ReadyAPI People. PR #3112 by @hareru.</li> <li>\ud83c\udf10 Add French translation for Project Generation. PR #3197 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for Python Types Intro. PR #3185 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for External Links. PR #3103 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for Alternatives, Inspiration and Comparisons. PR #3020 by @rjNemo.</li> <li>\ud83c\udf10 Fix Chinese translation code snippet mismatch in Tutorial - Python Types Intro. PR #2573 by @BoYanZh.</li> <li>\ud83c\udf10 Add Portuguese translation for Development Contributing. PR #1364 by @Serrones.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Request - Files. PR #3244 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_54","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #3450 by @github-actions[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3319 by @github-actions[bot].</li> <li>\u2b06 Upgrade docs development dependency on <code>typer-cli</code> to &gt;=0.0.12 to fix conflicts. PR #3429 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0652","title":"0.65.2","text":""},{"location":"release-notes/#security-fixes_1","title":"Security fixes","text":"<ul> <li>\ud83d\udd12 Check Content-Type request header before assuming JSON. Initial PR #2118 by @patrickkwang.</li> </ul> <p>This change fixes a CSRF security vulnerability when using cookies for authentication in path operations with JSON payloads sent by browsers.</p> <p>In versions lower than <code>0.65.2</code>, ReadyAPI would try to read the request payload as JSON even if the <code>content-type</code> header sent was not set to <code>application/json</code> or a compatible JSON media type (e.g. <code>application/geo+json</code>).</p> <p>So, a request with a content type of <code>text/plain</code> containing JSON data would be accepted and the JSON data would be extracted.</p> <p>But requests with content type <code>text/plain</code> are exempt from CORS preflights, for being considered Simple requests. So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the ReadyAPI application.</p> <p>See CVE-2021-32677 for more details.</p> <p>Thanks to Dima Boger for the security report! \ud83d\ude47\ud83d\udd12</p>"},{"location":"release-notes/#internal_55","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors badge, course bundle. PR #3340 by @khulnasoft.</li> <li>\ud83d\udd27 Add new gold sponsor Jina \ud83c\udf89. PR #3291 by @khulnasoft.</li> <li>\ud83d\udd27 Add new banner sponsor badge for ReadyAPI courses bundle. PR #3288 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade Issue Manager GitHub Action. PR #3236 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0651","title":"0.65.1","text":""},{"location":"release-notes/#security-fixes_2","title":"Security fixes","text":"<ul> <li>\ud83d\udccc Upgrade pydantic pin, to handle security vulnerability CVE-2021-29510. PR #3213 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0650","title":"0.65.0","text":""},{"location":"release-notes/#breaking-changes-upgrade_2","title":"Breaking Changes - Upgrade","text":"<ul> <li>\u2b06\ufe0f  Upgrade Starlette to <code>0.14.2</code>, including internal <code>UJSONResponse</code> migrated from Starlette. This includes several bug fixes and features from Starlette. PR #2335 by @hanneskuettner.</li> </ul>"},{"location":"release-notes/#translations_45","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize new language Polish for translations. PR #3170 by @neternefer.</li> </ul>"},{"location":"release-notes/#internal_56","title":"Internal","text":"<ul> <li>\ud83d\udc77 Add GitHub Action cache to speed up CI installs. PR #3204 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade setup-python GitHub Action to v2. PR #3203 by @khulnasoft.</li> <li>\ud83d\udc1b Fix docs script to generate a new translation language with <code>overrides</code> boilerplate. PR #3202 by @khulnasoft.</li> <li>\u2728 Add new Deta banner badge with new sponsorship tier \ud83d\ude47. PR #3194 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3189 by @github-actions[bot].</li> <li>\ud83d\udd0a Update ReadyAPI People to allow better debugging. PR #3188 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0640","title":"0.64.0","text":""},{"location":"release-notes/#features_33","title":"Features","text":"<ul> <li>\u2728 Add support for adding multiple <code>examples</code> in request bodies and path, query, cookie, and header params. New docs: Declare Request Example Data. Initial PR #1267 by @austinorr.</li> </ul>"},{"location":"release-notes/#fixes_23","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin SQLAlchemy range for tests, as it doesn't use SemVer. PR #3001 by @khulnasoft.</li> <li>\ud83c\udfa8 Add newly required type annotations for mypy. PR #2882 by @khulnasoft.</li> <li>\ud83c\udfa8 Remove internal \"type: ignore\", now unnecessary. PR #2424 by @AsakuraMizu.</li> </ul>"},{"location":"release-notes/#docs_44","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add link to article in Russian \"ReadyAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c\". PR #2564 by @trkohler.</li> <li>\ud83d\udcdd Add external link to blog post \"Authenticate Your ReadyAPI App with Auth0\". PR #2172 by @dompatmore.</li> <li>\ud83d\udcdd Fix broken link to article: Machine learning model serving in Python using ReadyAPI and Streamlit. PR #2557 by @davidefiocco.</li> <li>\ud83d\udcdd Add ReadyAPI Medium Article: Deploy a dockerized ReadyAPI application to AWS. PR #2515 by @vjanz.</li> <li>\u270f Fix typo in Tutorial - Handling Errors. PR #2486 by @johnthagen.</li> <li>\u270f Fix typo in Security OAuth2 scopes. PR #2407 by @jugmac00.</li> <li>\u270f Fix typo/clarify docs for SQL (Relational) Databases. PR #2393 by @kangni.</li> <li>\ud83d\udcdd Add external link to \"ReadyAPI for Flask Users\". PR #2280 by @amitness.</li> </ul>"},{"location":"release-notes/#translations_46","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix Chinese translation of Tutorial - Query Parameters, remove obsolete content. PR #3051 by @louis70109.</li> <li>\ud83c\udf10 Add French translation for Tutorial - Background Tasks. PR #3098 by @Smlep.</li> <li>\ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md. PR #3159 by @SueNaEunYang.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Query Parameters. PR #2390 by @hard-coders.</li> <li>\ud83c\udf10 Add French translation for ReadyAPI People. PR #2232 by @JulianMaurin.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Path Parameters. PR #2355 by @hard-coders.</li> <li>\ud83c\udf10 Add French translation for Features. PR #2157 by @Jefidev.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3031 by @github-actions[bot].</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Debugging. PR #2737 by @blt232018.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - OAuth2 with Password (and hashing), Bearer with JWT tokens. PR #2642 by @waynerv.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Header Parameters. PR #2589 by @mode9.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Metadata and Docs URLs. PR #2559 by @blt232018.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - First Steps. PR #2323 by @hard-coders.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - CORS (Cross-Origin Resource Sharing). PR #2540 by @blt232018.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Middleware. PR #2334 by @lpdswing.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Intro. PR #2317 by @hard-coders.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Bigger Applications - Multiple Files. PR #2453 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Security Intro. PR #2443 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Header Parameters. PR #2412 by @maoyibo.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Extra Data Types. PR #2410 by @maoyibo.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Docker. PR #2312 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Versions. PR #2310 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Cookie Parameters. PR #2261 by @alicrazy1947.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Static files. PR #2260 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Testing. PR #2259 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Debugging. PR #2256 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Middleware. PR #2255 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Concurrency and async / await. PR #2058 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Simple OAuth2 with Password and Bearer. PR #2514 by @waynerv.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Deta. PR #2314 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Get Current User. PR #2474 by @waynerv.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Manually. PR #2313 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Intro. PR #2309 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for ReadyAPI People. PR #2254 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Advanced - Path Operation Advanced Configuration. PR #2124 by @Attsun1031.</li> <li>\ud83c\udf10 Add Japanese translation for External Links. PR #2070 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Body - Updates. PR #1956 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Form Data. PR #1943 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Cookie Parameters. PR #1933 by @SwftAlpc.</li> </ul>"},{"location":"release-notes/#internal_57","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update top banner, point to newsletter. PR #3003 by @khulnasoft.</li> <li>\ud83d\udd27 Disable sponsor WeTransfer. PR #3002 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2880 by @github-actions[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2739 by @github-actions[bot].</li> <li>\ud83d\udd27 Add new Gold Sponsor Talk Python \ud83c\udf89. PR #2673 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Gold Sponsor vim.so \ud83c\udf89. PR #2669 by @khulnasoft.</li> <li>\ud83d\udd27 Add ReadyAPI user survey banner. PR #2623 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Bronze Sponsor(s) \ud83e\udd49\ud83c\udf89. PR #2622 by @khulnasoft.</li> <li>\ud83d\udcdd Update social links: add Discord, fix GitHub. PR #2621 by @khulnasoft.</li> <li>\ud83d\udd27 Update ReadyAPI People GitHub Sponsors order. PR #2620 by @khulnasoft.</li> <li>\ud83d\udd27 Update InvestSuite sponsor data. PR #2608 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2590 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0630","title":"0.63.0","text":""},{"location":"release-notes/#features_34","title":"Features","text":"<ul> <li>\u2728 Improve type annotations, add support for mypy --strict, internally and for external packages. PR #2547 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#breaking-changes_4","title":"Breaking changes","text":"<ul> <li>\u2b06\ufe0f Upgrade Uvicorn when installing <code>readyapi[all]</code> to the latest version including <code>uvloop</code>, the new range is <code>uvicorn[standard] &gt;=0.12.0,&lt;0.14.0</code>. PR #2548 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_24","title":"Fixes","text":"<ul> <li>\ud83d\udc1b PR #2547 (read above) also fixes some false-positive mypy errors with <code>callbacks</code> parameters and when using the <code>OAuth2</code> class.</li> </ul>"},{"location":"release-notes/#docs_45","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Uvicorn installation instructions to use uvicorn[standard] (includes uvloop). PR #2543 by @khulnasoft.</li> <li>\ud83d\udcdd Update title for Deta tutorial. PR #2466 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2454 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#translations_47","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add docs lang selector widget. PR #2542 by @khulnasoft.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Response Status Code. PR #2442 by @waynerv.</li> <li>\ud83c\udf10 Start translation of the documentation for the Albanian language. PR #2516 by @vjanz.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Extra Models. PR #2416 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Response Model. PR #2414 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Schema Extra Example. PR #2411 by @maoyibo.</li> <li>\ud83c\udf10 Add Korean translation for Index. PR #2192 by @hard-coders.</li> <li>\ud83c\udf10 Add Japanese translation for Advanced User Guide - Additional Status Codes. PR #2145 by @Attsun1031.</li> </ul>"},{"location":"release-notes/#internal_58","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix docs overrides directory for translations. PR #2541 by @khulnasoft.</li> <li>\u2796 Remove Typer as a docs building dependency (covered by typer-cli) to fix pip resolver conflicts. PR #2539 by @khulnasoft.</li> <li>\u2728 Add newsletter: ReadyAPI and friends. PR #2509 by @khulnasoft.</li> <li>\u2728 Add new Gold Sponsor: InvestSuite \ud83c\udf89. PR #2508 by @khulnasoft.</li> <li>\ud83d\udd27 Add issue template configs. PR #2476 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0620","title":"0.62.0","text":""},{"location":"release-notes/#features_35","title":"Features","text":"<ul> <li>\u2728 Add support for shared/top-level parameters (dependencies, tags, etc). PR #2434 by @khulnasoft.</li> </ul> <p>Up to now, for several options, the only way to apply them to a group of path operations was in <code>include_router</code>. That works well, but the call to <code>app.include_router()</code> or <code>router.include_router()</code> is normally done in another file.</p> <p>That means that, for example, to apply authentication to all the path operations in a router it would end up being done in a different file, instead of keeping related logic together.</p> <p>Setting options in <code>include_router</code> still makes sense in some cases, for example, to override or increase configurations from a third party router included in an app. But in a router that is part of a bigger application, it would probably make more sense to add those settings when creating the <code>APIRouter</code>.</p> <p>In <code>ReadyAPI</code></p> <p>This allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>include_router</code>.</li> <li><code>dependencies</code>: to include \u2728 top-level dependencies \u2728 that apply to the whole application. E.g. to add global authentication.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations.</li> <li><code>deprecated</code>: to mark all the path operations as deprecated. \ud83e\udd37</li> <li><code>include_in_schema</code>: to allow excluding all the path operations from the OpenAPI schema.</li> <li><code>responses</code>: OpenAPI responses that apply to all the path operations.</li> </ul> <p>For example:</p> <pre><code>from readyapi import ReadyAPI, Depends\n\n\nasync def some_dependency():\n    return\n\n\napp = ReadyAPI(dependencies=[Depends(some_dependency)])\n</code></pre> <p>In <code>APIRouter</code></p> <p>This allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>include_router</code>. For example, it's not needed to set it explicitly when creating callbacks.</li> <li><code>dependencies</code>: to include \u2728 router-level dependencies \u2728 that apply to all the path operations in a router. Up to now, this was only possible with <code>include_router</code>.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations in this router.</li> <li><code>deprecated</code>: to mark all the path operations in a router as deprecated.</li> <li><code>include_in_schema</code>: to allow excluding all the path operations in a router from the OpenAPI schema.</li> <li><code>responses</code>: OpenAPI responses that apply to all the path operations in a router.</li> <li><code>prefix</code>: to set the path prefix for a router. Up to now, this was only possible when calling <code>include_router</code>.</li> <li><code>tags</code>: OpenAPI tags to apply to all the path operations in this router.</li> </ul> <p>For example:</p> <pre><code>from readyapi import APIRouter, Depends\n\n\nasync def some_dependency():\n    return\n\n\nrouter = APIRouter(prefix=\"/users\", dependencies=[Depends(some_dependency)])\n</code></pre> <p>In <code>include_router</code></p> <p>Most of these settings are now supported in <code>APIRouter</code>, which normally lives closer to the related code, so it is recommended to use <code>APIRouter</code> when possible.</p> <p>But <code>include_router</code> is still useful to, for example, adding options (like <code>dependencies</code>, <code>prefix</code>, and <code>tags</code>) when including a third party router, or a generic router that is shared between several projects.</p> <p>This PR allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>ReadyAPI</code>.</li> <li><code>deprecated</code>: to mark all the path operations in a router as deprecated in OpenAPI.</li> <li><code>include_in_schema</code>: to allow disabling all the path operations from showing in the OpenAPI schema.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations in this router.</li> </ul> <p>Note: all the previous parameters are still there, so it's still possible to declare <code>dependencies</code> in <code>include_router</code>.</p>"},{"location":"release-notes/#breaking-changes_5","title":"Breaking Changes","text":"<ul> <li>PR #2434 includes several improvements that shouldn't affect normal use cases, but could affect in advanced scenarios:<ul> <li>If you are testing the generated OpenAPI (you shouldn't, ReadyAPI already tests it extensively for you): the order for <code>tags</code> in <code>include_router</code> and path operations was updated for consistency, but it's a simple order change.</li> <li>If you have advanced custom logic to access each route's <code>route.response_class</code>, or the <code>router.default_response_class</code>, or the <code>app.default_response_class</code>: the default value for <code>response_class</code> in <code>APIRoute</code> and for <code>default_response_class</code> in <code>APIRouter</code> and <code>ReadyAPI</code> is now a <code>DefaultPlaceholder</code> used internally to handle and solve default values and overrides. The actual response class inside the <code>DefaultPlaceholder</code> is available at <code>route.response_class.value</code>.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_46","title":"Docs","text":"<ul> <li> <p>PR #2434 (above) includes new or updated docs:</p> <ul> <li>Advanced User Guide - OpenAPI Callbacks.</li> <li>Tutorial - Bigger Applications.</li> <li>Tutorial - Dependencies - Dependencies in path operation decorators.</li> <li>Tutorial - Dependencies - Global Dependencies.</li> </ul> </li> <li> <p>\ud83d\udcdd Add ReadyAPI monitoring blog post to External Links. PR #2324 by @louisguitton.</p> </li> <li>\u270f\ufe0f Fix typo in Deta tutorial. PR #2320 by @khulnasoft.</li> <li>\u2728 Add Discord chat. PR #2322 by @khulnasoft.</li> <li>\ud83d\udcdd Fix image links for sponsors. PR #2304 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_48","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for Advanced - Custom Response. PR #2193 by @Attsun1031.</li> <li>\ud83c\udf10 Add Chinese translation for Benchmarks. PR #2119 by @spaceack.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Body - Nested Models. PR #1609 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Custom Response. PR #1459 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Return a Response Directly. PR #1452 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Additional Status Codes. PR #1451 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Path Operation Advanced Configuration. PR #1447 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced User Guide - Intro. PR #1445 by @RunningIkkyu.</li> </ul>"},{"location":"release-notes/#internal_59","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update TestDriven link to course in sponsors section. PR #2435 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsor logos. PR #2418 by @khulnasoft.</li> <li>\ud83d\udc9a Fix disabling install of Material for MkDocs Insiders in forks, strike 1 \u26be. PR #2340 by @khulnasoft.</li> <li>\ud83d\udc1b Fix disabling Material for MkDocs Insiders install in forks. PR #2339 by @khulnasoft.</li> <li>\u2728 Add silver sponsor WeTransfer. PR #2338 by @khulnasoft.</li> <li>\u2728 Set up and enable Material for MkDocs Insiders for the docs. PR #2325 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0612","title":"0.61.2","text":""},{"location":"release-notes/#fixes_25","title":"Fixes","text":"<ul> <li>\ud83d\udccc Relax Swagger UI version pin. PR #2089 by @jmriebold.</li> <li>\ud83d\udc1b Fix bug overriding custom HTTPException and RequestValidationError from exception_handlers. PR #1924 by @uriyyo.</li> <li>\u270f\ufe0f Fix typo on dependencies utils and cleanup unused variable. PR #1912 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_47","title":"Docs","text":"<ul> <li>\u270f\ufe0f  Fix typo in Tutorial - Path Parameters. PR #2231 by @mariacamilagl.</li> <li>\u270f Fix a stylistic error in docs. PR #2206 by @ddobrinskiy.</li> <li>\u270f Fix capitalizaiton typo in docs. PR #2204 by @imba-tjd.</li> <li>\u270f Fix typo in docs. PR #2179 by @ammarasmro.</li> <li>\ud83d\udcdd Update/fix links in docs to use HTTPS. PR #2165 by @imba-tjd.</li> <li>\u270f Fix typos and add rewording in docs. PR #2159 by @nukopy.</li> <li>\ud83d\udcdd Fix code consistency in examples for Tutorial - User Guide - Path Parameters. PR #2158 by @nukopy.</li> <li>\ud83d\udcdd Fix renamed parameter <code>content_type</code> typo. PR #2135 by @TeoZosa.</li> <li>\u270f Fix minor typos in docs. PR #2122 by @TeoZosa.</li> <li>\u270f Fix typos in docs and source examples. PR #2102 by @AdrianDeAnda.</li> <li>\u270f Fix incorrect Celery URLs in docs. PR #2100 by @CircleOnCircles.</li> <li>\ud83d\udcdd Simplify intro to Python Types, all currently supported Python versions include type hints \ud83c\udf89. PR #2085 by @ninjaaron.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 3. PR #2054 by @hitrust.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 2. PR #2053 by @hitrust.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models. PR #2052 by @hitrust.</li> <li>\u270f Fix typo in Benchmarks. PR #1995 by @AlejoAsd.</li> <li>\ud83d\udcdd Add note in CORS tutorial about allow_origins with [\"*\"] and allow_credentials. PR #1895 by @dsmurrell.</li> <li>\ud83d\udcdd Add deployment to Deta, the first gold sponsor \ud83c\udf89. PR #2303 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2282 by @github-actions[bot].</li> <li>\u270f\ufe0f Fix uppercase in Tutorial - Query parameters. PR #2245 by @mariacamilagl.</li> <li>\ud83d\udcdd Add articles to External Links. PR #2247 by @khulnasoft.</li> <li>\u270f Fix typo in Spanish tutorial index. PR #2020 by @aviloncho.</li> </ul>"},{"location":"release-notes/#translations_49","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for Advanced Tutorial - Response Directly. PR #2191 by @Attsun1031.</li> <li>\ud83d\udcdd Add Japanese translation for Tutorial - Security - First Steps. PR #2153 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Query Parameters and String Validations. PR #1901 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Portuguese translation for External Links. PR #1443 by @Serrones.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - CORS. PR #2125 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Contributing. PR #2067 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Project Generation. PR #2050 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Alternatives. PR #2043 by @Attsun1031.</li> <li>\ud83c\udf10 Add Japanese translation for History Design and Future. PR #2002 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Benchmarks. PR #1992 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Header Parameters. PR #1935 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Portuguese translation for Tutorial - First Steps. PR #1861 by @jessicapaz.</li> <li>\ud83c\udf10 Add Portuguese translation for Python Types. PR #1796 by @izaguerreiro.</li> <li>\ud83c\udf10 Add Japanese translation for Help ReadyAPI. PR #1692 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Body. PR #1683 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Query Params. PR #1674 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/path-params.md. PR #1671 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/first-steps.md. PR #1658 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/index.md. PR #1656 by @tokusumi.</li> <li>\ud83c\udf10 Add translation to Portuguese for Project Generation. PR #1602 by @Serrones.</li> <li>\ud83c\udf10 Add Japanese translation for Features. PR #1625 by @tokusumi.</li> <li>\ud83c\udf10 Initialize new language Korean for translations. PR #2018 by @hard-coders.</li> <li>\ud83c\udf10 Add Portuguese translation of Deployment. PR #1374 by @Serrones.</li> </ul>"},{"location":"release-notes/#internal_60","title":"Internal","text":"<ul> <li>\ud83d\udd25 Cleanup after upgrade for Docs Previews GitHub Action. PR #2248 by @khulnasoft.</li> <li>\ud83d\udc1b Fix CI docs preview, unzip docs. PR #2246 by @khulnasoft.</li> <li>\u2728 Add instant docs deploy previews for PRs from forks. PR #2244 by @khulnasoft.</li> <li>\u26a1\ufe0f Build docs for languages in parallel in subprocesses to speed up CI. PR #2242 by @khulnasoft.</li> <li>\ud83d\udc1b Fix docs order generation for partial translations. PR #2238 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2202 by @github-actions[bot].</li> <li>\u267b\ufe0f Update ReadyAPI People GitHub Action to send the PR as github-actions. PR #2201 by @khulnasoft.</li> <li>\ud83d\udd27 Update ReadyAPI People GitHub Action config, run monthly. PR #2199 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action Docker dependency, strike 1 \u26be. PR #2198 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action Docker dependencies. PR #2197 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action when there's nothing to change. PR #2196 by @khulnasoft.</li> <li>\ud83d\udc65 Add new section ReadyAPI People. PR #2195 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action Latest Changes. PR #2190 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action Label Approved. PR #2189 by @khulnasoft.</li> <li>\ud83d\udd27 Update GitHub Action Label Approved, run at 12:00. PR #2185 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action Latest Changes. PR #2184 by @khulnasoft.</li> <li>\ud83d\udc77 Set GitHub Action Label Approved to run daily, not every minute. PR #2163 by @khulnasoft.</li> <li>\ud83d\udd25 Remove pr-approvals GitHub Action as it's not compatible with forks. Use the new one. PR #2162 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action Latest Changes. PR #2160.</li> <li>\ud83d\udc77 Add GitHub Action Label Approved. PR #2161.</li> </ul>"},{"location":"release-notes/#0611","title":"0.61.1","text":""},{"location":"release-notes/#fixes_26","title":"Fixes","text":"<ul> <li>Fix issues using <code>jsonable_encoder</code> with SQLAlchemy models directly. PR #1987.</li> </ul>"},{"location":"release-notes/#docs_48","title":"Docs","text":"<ul> <li>Fix typo in NoSQL docs. PR #1980 by @facundojmaero.</li> </ul>"},{"location":"release-notes/#translations_50","title":"Translations","text":"<ul> <li>Add translation for main page to Japanese PR #1571 by @ryuckel.</li> <li>Initialize French translations. PR #1975 by @JulianMaurin-BM.</li> <li>Initialize Turkish translations. PR #1905 by @ycd.</li> </ul>"},{"location":"release-notes/#internal_61","title":"Internal","text":"<ul> <li>Improve docs maintainability by updating <code>hl_lines</code> syntax to use ranges. PR #1863 by @la-mar.</li> </ul>"},{"location":"release-notes/#0610","title":"0.61.0","text":""},{"location":"release-notes/#features_36","title":"Features","text":"<ul> <li>Add support for injecting <code>HTTPConnection</code> (as <code>Request</code> and <code>WebSocket</code>). Useful for sharing app state in dependencies. PR #1827 by @nsidnev.</li> <li>Export <code>WebSocketDisconnect</code> and add example handling WebSocket disconnections to docs. PR #1822 by @rkbeatss.</li> </ul>"},{"location":"release-notes/#breaking-changes_6","title":"Breaking Changes","text":"<ul> <li>Require Pydantic &gt; <code>1.0.0</code>.<ul> <li>Remove support for deprecated Pydantic <code>0.32.2</code>. This improves maintainability and allows new features.</li> <li>In <code>ReadyAPI</code> and <code>APIRouter</code>:<ul> <li>Remove path operation decorators related/deprecated parameter <code>response_model_skip_defaults</code> (use <code>response_model_exclude_unset</code> instead).</li> <li>Change path operation decorators parameter default for <code>response_model_exclude</code> from <code>set()</code> to <code>None</code> (as is in Pydantic).</li> </ul> </li> <li>In <code>encoders.jsonable_encoder</code>:<ul> <li>Remove deprecated <code>skip_defaults</code>, use instead <code>exclude_unset</code>.</li> <li>Set default of <code>exclude</code> from <code>set()</code> to <code>None</code> (as is in Pydantic).</li> </ul> </li> <li>PR #1862.</li> </ul> </li> <li>In <code>encoders.jsonable_encoder</code> remove parameter <code>sqlalchemy_safe</code>.<ul> <li>It was an early hack to allow returning SQLAlchemy models, but it was never documented, and the recommended way is using Pydantic's <code>orm_mode</code> as described in the tutorial: SQL (Relational) Databases.</li> <li>PR #1864.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_49","title":"Docs","text":"<ul> <li>Add link to the course by TestDriven.io: Test-Driven Development with ReadyAPI and Docker. PR #1860.</li> <li>Fix empty log message in docs example about handling errors. PR #1815 by @manlix.</li> <li>Reword text to reduce ambiguity while not being gender-specific. PR #1824 by @Mause.</li> </ul>"},{"location":"release-notes/#internal_62","title":"Internal","text":"<ul> <li>Add Flake8 linting. Original PR #1774 by @MashhadiNima.</li> <li>Disable Gitter bot, as it's currently broken, and Gitter's response doesn't show the problem. PR #1853.</li> </ul>"},{"location":"release-notes/#0602","title":"0.60.2","text":"<ul> <li>Fix typo in docs for query parameters. PR #1832 by @ycd.</li> <li>Add docs about Async Tests. PR #1619 by @empicano.</li> <li>Raise an exception when using form data (<code>Form</code>, <code>File</code>) without having <code>python-multipart</code> installed.<ul> <li>Up to now the application would run, and raise an exception only when receiving a request with form data, the new behavior, raising early, will prevent from deploying applications with broken dependencies.</li> <li>It also detects if the correct package <code>python-multipart</code> is installed instead of the incorrect <code>multipart</code> (both importable as <code>multipart</code>).</li> <li>PR #1851 based on original PR #1627 by @chrisngyn, @YKo20010, @kx-chen.</li> </ul> </li> <li>Re-enable Gitter releases bot. PR #1831.</li> <li>Add link to async SQL databases tutorial from main SQL tutorial. PR #1813 by @short2strings.</li> <li>Fix typo in tutorial about behind a proxy. PR #1807 by @toidi.</li> <li>Fix typo in Portuguese docs. PR #1795 by @izaguerreiro.</li> <li>Add translations setup for Ukrainian. PR #1830.</li> <li>Add external link Build And Host Fast Data Science Applications Using ReadyAPI. PR #1786 by @Kludex.</li> <li>Fix encoding of Pydantic models that inherit from others models with custom <code>json_encoders</code>. PR #1769 by @henrybetts.</li> <li>Simplify and improve <code>jsonable_encoder</code>. PR #1754 by @MashhadiNima.</li> <li>Simplify internal code syntax in several points. PR #1753 by @uriyyo.</li> <li>Improve internal typing, declare <code>Optional</code> parameters. PR #1731 by @MashhadiNima.</li> <li>Add external link Deploy ReadyAPI on Azure App Service to docs. PR #1726 by @windson.</li> <li>Add link to Starlette docs about WebSocket testing. PR #1717 by @hellocoldworld.</li> <li>Refactor generating dependant, merge for loops. PR #1714 by @Bloodielie.</li> <li>Update example for templates with Jinja to include HTML media type. PR #1690 by @frafra.</li> <li>Fix typos in docs for security. PR #1678 by @nilslindemann.</li> <li>Fix typos in docs for dependencies. PR #1675 by @nilslindemann.</li> <li>Fix type annotation for <code>**extra</code> parameters in <code>ReadyAPI</code>. PR #1659 by @bharel.</li> <li>Bump MkDocs Material to fix docs in browsers with dark mode. PR #1789 by @adriencaccia.</li> <li>Remove docs preview comment from each commit. PR #1826.</li> <li>Update GitHub context extraction for Gitter notification bot. PR #1766.</li> </ul>"},{"location":"release-notes/#0601","title":"0.60.1","text":"<ul> <li>Add debugging logs for GitHub actions to introspect GitHub hidden context. PR #1764.</li> <li>Use OS preference theme for online docs. PR #1760 by @adriencaccia.</li> <li>Upgrade Starlette to version <code>0.13.6</code> to handle a vulnerability when using static files in Windows. PR #1759 by @jamesag26.</li> <li>Pin Swagger UI temporarily, waiting for a fix for swagger-api/swagger-ui#6249. PR #1763.</li> <li>Update GitHub Actions, use commit from PR for docs preview, not commit from pre-merge. PR #1761.</li> <li>Update GitHub Actions, refactor Gitter bot. PR #1746.</li> </ul>"},{"location":"release-notes/#0600","title":"0.60.0","text":"<ul> <li>Add GitHub Action to watch for missing preview docs and trigger a preview deploy. PR #1740.</li> <li>Add custom GitHub Action to get artifact with docs preview. PR #1739.</li> <li>Add new GitHub Actions to preview docs from PRs. PR #1738.</li> <li>Add XML test coverage to support GitHub Actions. PR #1737.</li> <li>Update badges and remove Travis now that GitHub Actions is the main CI. PR #1736.</li> <li>Add GitHub Actions for CI, move from Travis. PR #1735.</li> <li>Add support for adding OpenAPI schema for GET requests with a body. PR #1626 by @victorphoenix3.</li> </ul>"},{"location":"release-notes/#0590","title":"0.59.0","text":"<ul> <li>Fix typo in docstring for OAuth2 utils. PR #1621 by @tomarv2.</li> <li>Update JWT docs to use Python-jose instead of PyJWT. Initial PR #1610 by @asheux.</li> <li>Fix/re-enable search bar in docs. PR #1703.</li> <li>Auto-generate a \"server\" in OpenAPI <code>servers</code> when there's a <code>root_path</code> instead of prefixing all the <code>paths</code>:<ul> <li>Add a new parameter for <code>ReadyAPI</code> classes: <code>root_path_in_servers</code> to disable the auto-generation of <code>servers</code>.</li> <li>New docs about <code>root_path</code> and <code>servers</code> in Additional Servers.</li> <li>Update OAuth2 examples to use a relative URL for <code>tokenUrl=\"token\"</code> to make sure those examples keep working as-is even when behind a reverse proxy.</li> <li>Initial PR #1596 by @rkbeatss.</li> </ul> </li> <li>Fix typo/link in External Links. PR #1702.</li> <li>Update handling of External Links to use a data file and allow translating the headers without becoming obsolete quickly when new links are added. PR #https://github.com/khulnasoft/readyapi/pull/1701.</li> <li>Add external link Machine learning model serving in Python using ReadyAPI and Streamlit to docs. PR #1669 by @davidefiocco.</li> <li>Add note in docs on order in Pydantic Unions. PR #1591 by @kbanc.</li> <li>Improve support for tests in editor. PR #1699.</li> <li>Pin dependencies. PR #1697.</li> <li>Update isort to version 5.x.x. PR #1670 by @asheux.</li> </ul>"},{"location":"release-notes/#0581","title":"0.58.1","text":"<ul> <li>Add link in docs to Pydantic data types. PR #1612 by @tayoogunbiyi.</li> <li>Fix link in warning logs for <code>openapi_prefix</code>. PR #1611 by @bavaria95.</li> <li>Fix bad link in docs. PR #1603 by @molto0504.</li> <li>Add Vim temporary files to <code>.gitignore</code> for contributors using Vim. PR #1590 by @asheux.</li> <li>Fix typo in docs for sub-applications. PR #1578 by @schlpbch.</li> <li>Use <code>Optional</code> in all the examples in the docs. Original PR #1574 by @chrisngyn, @kx-chen, @YKo20010. Updated and merged PR #1644.</li> <li>Update tests and handling of <code>response_model_by_alias</code>. PR #1642.</li> <li>Add translation to Chinese for Body - Fields - \u200b\u8bf7\u6c42\u200b\u4f53\u200b - \u200b\u5b57\u200b\u6bb5\u200b. PR #1569 by @waynerv.</li> <li>Update Chinese translation of main page. PR #1564 by @waynerv.</li> <li>Add translation to Chinese for Body - Multiple Parameters - \u200b\u8bf7\u6c42\u200b\u4f53\u200b - \u200b\u591a\u4e2a\u200b\u53c2\u6570\u200b. PR #1532 by @waynerv.</li> <li>Add translation to Chinese for Path Parameters and Numeric Validations - \u200b\u8def\u5f84\u200b\u53c2\u6570\u200b\u548c\u200b\u6570\u503c\u200b\u6821\u9a8c\u200b. PR #1506 by @waynerv.</li> <li>Add GitHub action to auto-label approved PRs (mainly for translations). PR #1638.</li> </ul>"},{"location":"release-notes/#0580","title":"0.58.0","text":"<ul> <li>Deep merge OpenAPI responses to preserve all the additional metadata. PR #1577.</li> <li>Mention in docs that only main app events are run (not sub-apps). PR #1554 by @amacfie.</li> <li>Fix body validation error response, do not include body variable when it is not embedded. PR #1553 by @amacfie.</li> <li>Fix testing OAuth2 security scopes when using dependency overrides. PR #1549 by @amacfie.</li> <li>Fix Model for JSON Schema keyword <code>not</code> as a JSON Schema instead of a list. PR #1548 by @v-do.</li> <li>Add support for OpenAPI <code>servers</code>. PR #1547 by @mikaello.</li> </ul>"},{"location":"release-notes/#0570","title":"0.57.0","text":"<ul> <li>Remove broken link from \"External Links\". PR #1565 by @victorphoenix3.</li> <li>Update/fix docs for WebSockets with dependencies. Original PR #1540 by @ChihSeanHsu.</li> <li>Add support for Python's <code>http.HTTPStatus</code> in <code>status_code</code> parameters. PR #1534 by @retnikt.</li> <li>When using Pydantic models with <code>__root__</code>, use the internal value in <code>jsonable_encoder</code>. PR #1524 by @patrickkwang.</li> <li>Update docs for path parameters. PR #1521 by @yankeexe.</li> <li>Update docs for first steps, links and rewording. PR #1518 by @yankeexe.</li> <li>Enable <code>showCommonExtensions</code> in Swagger UI to show additional validations like <code>maxLength</code>, etc. PR #1466 by @TiewKH.</li> <li>Make <code>OAuth2PasswordRequestFormStrict</code> importable directly from <code>readyapi.security</code>. PR #1462 by @RichardHoekstra.</li> <li>Add docs about Default response class. PR #1455 by @TezRomacH.</li> <li>Add note in docs about additional parameters <code>response_model_exclude_defaults</code> and <code>response_model_exclude_none</code> in Response Model. PR #1427 by @wshayes.</li> <li>Add note about PyCharm Pydantic plugin to docs. PR #1420 by @koxudaxi.</li> <li>Update and clarify testing function name. PR #1395 by @chenl.</li> <li>Fix duplicated headers created by indirect dependencies that use the request directly. PR #1386 by @obataku from tests by @scottsmith2gmail.</li> <li>Upgrade Starlette version to <code>0.13.4</code>. PR #1361 by @rushton.</li> <li>Improve error handling and feedback for requests with invalid JSON. PR #1354 by @aviramha.</li> <li>Add support for declaring metadata for tags in OpenAPI. New docs at Tutorial - Metadata and Docs URLs - Metadata for tags. PR #1348 by @thomas-maschler.</li> <li>Add basic setup for Russian translations. PR #1566.</li> <li>Remove obsolete Chinese articles after adding official community translations. PR #1510 by @waynerv.</li> <li>Add <code>__repr__</code> for path operation function parameter helpers (like <code>Query</code>, <code>Depends</code>, etc) to simplify debugging. PR #1560 by @rkbeatss and @victorphoenix3.</li> </ul>"},{"location":"release-notes/#0561","title":"0.56.1","text":"<ul> <li>Add link to advanced docs from tutorial. PR #1512 by @kx-chen.</li> <li>Remove internal unnecessary f-strings. PR #1526 by @kotamatsuoka.</li> <li>Add translation to Chinese for Query Parameters and String Validations - \u200b\u67e5\u8be2\u200b\u53c2\u6570\u200b\u548c\u200b\u5b57\u7b26\u4e32\u200b\u6821\u9a8c\u200b. PR #1500 by @waynerv.</li> <li>Add translation to Chinese for Request Body - \u200b\u8bf7\u6c42\u200b\u4f53\u200b. PR #1492 by @waynerv.</li> <li>Add translation to Chinese for Help ReadyAPI - Get Help - \u200b\u5e2e\u52a9\u200b ReadyAPI - \u200b\u83b7\u53d6\u200b\u5e2e\u52a9\u200b. PR #1465 by @waynerv.</li> <li>Add translation to Chinese for Query Parameters - \u200b\u67e5\u8be2\u200b\u53c2\u6570\u200b. PR #1454 by @waynerv.</li> <li>Add translation to Chinese for Contributing - \u200b\u5f00\u53d1\u200b - \u200b\u8d21\u732e\u200b. PR #1460 by @waynerv.</li> <li>Add translation to Chinese for Path Parameters - \u200b\u8def\u5f84\u200b\u53c2\u6570\u200b. PR #1453 by @waynerv.</li> <li>Add official Microsoft project generator for serving spaCy with ReadyAPI and Azure Cognitive Skills to Project Generators. PR #1390 by @kabirkhan.</li> <li>Update docs in Python Types Intro to include info about <code>Optional</code>. Original PR #1377 by @yaegassy.</li> <li>Fix support for callable class dependencies with <code>yield</code>. PR #1365 by @mrosales.</li> <li>Fix/remove incorrect error logging when a client sends invalid payloads. PR #1351 by @dbanty.</li> <li>Add translation to Chinese for First Steps - \u200b\u7b2c\u4e00\u6b65\u200b. PR #1323 by @waynerv.</li> <li>Fix generating OpenAPI for apps using callbacks with routers including Pydantic models. PR #1322 by @nsidnev.</li> <li>Optimize internal regex performance in <code>get_path_param_names()</code>. PR #1243 by @heckad.</li> <li>Remove <code>*,</code> from functions in docs where it's not needed. PR #1239 by @pankaj-giri.</li> <li>Start translations for Italian. PR #1557 by @csr.</li> </ul>"},{"location":"release-notes/#0560","title":"0.56.0","text":"<ul> <li>Add support for ASGI <code>root_path</code>:<ul> <li>Use <code>root_path</code> internally for mounted applications, so that OpenAPI and the docs UI works automatically without extra configurations and parameters.</li> <li>Add new <code>root_path</code> parameter for <code>ReadyAPI</code> applications to provide it in cases where it can be set with the command line (e.g. for Uvicorn and Hypercorn, with the parameter <code>--root-path</code>).</li> <li>Deprecate <code>openapi_prefix</code> parameter in favor of the new <code>root_path</code> parameter.</li> <li>Add new/updated docs for Sub Applications - Mounts, without <code>openapi_prefix</code> (as it is now handled automatically).</li> <li>Add new/updated docs for Behind a Proxy, including how to setup a local testing proxy with Traefik and using <code>root_path</code>.</li> <li>Update docs for Extending OpenAPI with the new <code>openapi_prefix</code> parameter passed (internally generated from <code>root_path</code>).</li> <li>Original PR #1199 by @iksteen.</li> </ul> </li> <li>Update new issue templates and docs: Help ReadyAPI - Get Help. PR #1531.</li> <li>Update GitHub action issue-manager. PR #1520.</li> <li>Add new links:<ul> <li>English articles:<ul> <li>Real-time Notifications with Python and Postgres by Guillermo Cruz.</li> <li>Microservice in Python using ReadyAPI  by Paurakh Sharma Humagain.</li> <li>Build simple API service with Python ReadyAPI \u2014 Part 1 by cuongld2.</li> <li>ReadyAPI + Zeit.co = \ud83d\ude80 by Paul Sec.</li> <li>Build a web API from scratch with ReadyAPI - the workshop by KhulnaSoft DevOps (khulnasoft).</li> <li>Build a Secure Twilio Webhook with Python and ReadyAPI  by Twilio.</li> <li>Using ReadyAPI with Django  by Stavros Korokithakis.</li> <li>Introducing Dispatch by Netflix.</li> </ul> </li> <li>Podcasts:<ul> <li>Build The Next Generation Of Python Web Applications With ReadyAPI - Episode 259 - interview to KhulnaSoft DevOps (khulnasoft) by Podcast.<code>__init__</code>.</li> </ul> </li> <li>Talks:<ul> <li>PyConBY 2020: Serve ML models easily with ReadyAPI by KhulnaSoft DevOps (khulnasoft).</li> <li>[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to ReadyAPI by KhulnaSoft DevOps (khulnasoft).</li> </ul> </li> <li>PR #1467.</li> </ul> </li> <li>Add translation to Chinese for Python Types Intro - Python \u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b\u7b80\u4ecb\u200b. PR #1197 by @waynerv.</li> </ul>"},{"location":"release-notes/#0551","title":"0.55.1","text":"<ul> <li>Fix handling of enums with their own schema in path parameters. To support pydantic/pydantic#1432 in ReadyAPI. PR #1463.</li> </ul>"},{"location":"release-notes/#0550","title":"0.55.0","text":"<ul> <li>Allow enums to allow them to have their own schemas in OpenAPI. To support pydantic/pydantic#1432 in ReadyAPI. PR #1461.</li> <li>Add links for funding through GitHub sponsors. PR #1425.</li> <li>Update issue template for for questions. PR #1344 by @retnikt.</li> <li>Update warning about storing passwords in docs. PR #1336 by @skorokithakis.</li> <li>Fix typo. PR #1326 by @chenl.</li> <li>Add translation to Portuguese for Alternatives, Inspiration and Comparisons - Alternativas, Inspira\u00e7\u00e3o e Compara\u00e7\u00f5es. PR #1325 by @Serrones.</li> <li>Fix 2 typos in docs. PR #1324 by @waynerv.</li> <li>Update CORS docs, fix correct default of <code>max_age=600</code>. PR #1301 by @derekbekoe.</li> <li>Add translation of main page to Portuguese. PR #1300 by @Serrones.</li> <li>Re-word and clarify docs for extra info in fields. PR #1299 by @chris-allnutt.</li> <li>Make sure the <code>*</code> in short features in the docs is consistent (after <code>.</code>) in all languages. PR #1424.</li> <li>Update order of execution for <code>get_db</code> in SQLAlchemy tutorial. PR #1293 by @bcb.</li> <li>Fix typos in Async docs. PR #1423.</li> </ul>"},{"location":"release-notes/#0542","title":"0.54.2","text":"<ul> <li>Add translation to Spanish for Concurrency and async / await - Concurrencia y async / await. PR #1290 by @alvaropernas.</li> <li>Remove obsolete vote link. PR #1289 by @donhui.</li> <li>Allow disabling docs UIs by just disabling OpenAPI with <code>openapi_url=None</code>. New example in docs: Advanced: Conditional OpenAPI. PR #1421.</li> <li>Add translation to Portuguese for Benchmarks - Compara\u00e7\u00f5es. PR #1274 by @Serrones.</li> <li>Add translation to Portuguese for Tutorial - User Guide - Intro - Tutorial - Guia de Usu\u00e1rio - Introdu\u00e7\u00e3o. PR #1259 by @marcosmmb.</li> <li>Allow using Unicode in MkDocs for translations. PR #1419.</li> <li>Add translation to Spanish for Advanced User Guide - Intro - Gu\u00eda de Usuario Avanzada - Introducci\u00f3n. PR #1250 by @jfunez.</li> <li>Add translation to Portuguese for History, Design and Future - Hist\u00f3ria, Design e Futuro. PR #1249 by @marcosmmb.</li> <li>Add translation to Portuguese for Features - Recursos. PR #1248 by @marcosmmb.</li> <li>Add translation to Spanish for Tutorial - User Guide - Intro - Tutorial - Gu\u00eda de Usuario - Introducci\u00f3n. PR #1244 by @MartinEliasQ.</li> <li>Add translation to Chinese for Deployment - \u200b\u90e8\u7f72\u200b. PR #1203 by @RunningIkkyu.</li> <li>Add translation to Chinese for Tutorial - User Guide - Intro - \u200b\u6559\u7a0b\u200b - \u200b\u7528\u6237\u200b\u6307\u5357\u200b - \u200b\u7b80\u4ecb\u200b. PR #1202 by @waynerv.</li> <li>Add translation to Chinese for Features - \u200b\u7279\u6027\u200b. PR #1192 by @Dustyposa.</li> <li>Add translation for main page to Chinese PR #1191 by @waynerv.</li> <li>Update docs for project generation. PR #1287.</li> <li>Add Spanish translation for Introducci\u00f3n a los Tipos de Python (Python Types Intro). PR #1237 by @mariacamilagl.</li> <li>Add Spanish translation for Caracter\u00edsticas (Features). PR #1220 by @mariacamilagl.</li> </ul>"},{"location":"release-notes/#0541","title":"0.54.1","text":"<ul> <li>Update database test setup. PR #1226.</li> <li>Improve test debugging by showing response text in failing tests. PR #1222 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0540","title":"0.54.0","text":"<ul> <li>Fix grammatical mistakes in async docs. PR #1188 by @mickeypash.</li> <li>Add support for <code>response_model_exclude_defaults</code> and <code>response_model_exclude_none</code>:<ul> <li>Deprecate the parameter <code>include_none</code> in <code>jsonable_encoder</code> and add the inverted <code>exclude_none</code>, to keep in sync with Pydantic.</li> <li>PR #1166 by @voegtlel.</li> </ul> </li> <li>Add example about Testing a Database. Initial PR #1144 by @duganchen.</li> <li>Update docs for Development - Contributing: Translations including note about reviewing translation PRs. #1215.</li> <li>Update log style in README.md for GitHub Markdown compatibility. PR #1200 by #geekgao.</li> <li>Add Python venv <code>env</code> to <code>.gitignore</code>. PR #1212 by @cassiobotaro.</li> <li>Start Portuguese translations. PR #1210 by @cassiobotaro.</li> <li>Update docs for Pydantic's <code>Settings</code> using a dependency with <code>@lru_cache()</code>. PR #1214.</li> <li>Add first translation to Spanish ReadyAPI. PR #1201 by @mariacamilagl.</li> <li>Add docs about Settings and Environment Variables. Initial PR 1118 by @alexmitelman.</li> </ul>"},{"location":"release-notes/#0532","title":"0.53.2","text":"<ul> <li>Fix automatic embedding of body fields for dependencies and sub-dependencies. Original PR #1079 by @Toad2186.</li> <li>Fix dependency overrides in WebSocket testing. PR #1122 by @amitlissack.</li> <li>Fix docs script to ensure languages are always sorted. PR #1189.</li> <li>Start translations for Chinese. PR #1187 by @RunningIkkyu.</li> <li>Add docs for Schema Extra - Example. PR #1185.</li> </ul>"},{"location":"release-notes/#0531","title":"0.53.1","text":"<ul> <li>Fix included example after translations refactor. PR #1182.</li> <li>Add docs example for <code>example</code> in <code>Field</code>. Docs at Body - Fields: JSON Schema extras. PR #1106 by @JohnPaton.</li> <li>Fix using recursive models in <code>response_model</code>. PR #1164 by @voegtlel.</li> <li>Add docs for Pycharm Debugging. PR #1096 by @youngquan.</li> <li>Fix typo in docs. PR #1148 by @PLNech.</li> <li>Update Windows development environment instructions. PR #1179.</li> </ul>"},{"location":"release-notes/#0530","title":"0.53.0","text":"<ul> <li>Update test coverage badge. PR #1175.</li> <li>Add <code>orjson</code> to <code>pip install readyapi[all]</code>. PR #1161 by @michael0liver.</li> <li>Fix included example for <code>GZipMiddleware</code>. PR #1138 by @arimbr.</li> <li>Fix class name in docstring for <code>OAuth2PasswordRequestFormStrict</code>. PR #1126 by @adg-mh.</li> <li>Clarify function name in example in docs. PR #1121 by @tmsick.</li> <li>Add external link Apache Kafka producer and consumer with ReadyAPI and aiokafka to docs. PR #1112 by @iwpnd.</li> <li>Fix serialization when using <code>by_alias</code> or <code>exclude_unset</code> and returning data with Pydantic models. PR #1074 by @juhovh-aiven.</li> <li>Add Gitter chat to docs. PR #1061 by @aakashnand.</li> <li>Update and simplify translations docs. PR #1171.</li> <li>Update development of ReadyAPI docs, set address to <code>127.0.0.1</code> to improve Windows support. PR #1169 by @mariacamilagl.</li> <li>Add support for docs translations. New docs: Development - Contributing: Docs: Translations. PR #1168.</li> <li>Update terminal styles in docs and add note about Typer, the ReadyAPI of CLIs. PR #1139.</li> </ul>"},{"location":"release-notes/#0520","title":"0.52.0","text":"<ul> <li>Add new high-performance JSON response class using <code>orjson</code>. New docs: Custom Response - HTML, Stream, File, others: <code>ORJSONResponse</code>. PR #1065.</li> </ul>"},{"location":"release-notes/#0510","title":"0.51.0","text":"<ul> <li>Re-export utils from Starlette:<ul> <li>This allows using things like <code>from readyapi.responses import JSONResponse</code> instead of <code>from starlette.responses import JSONResponse</code>.</li> <li>It's mainly syntax sugar, a convenience for developer experience.</li> <li>Now <code>Request</code>, <code>Response</code>, <code>WebSocket</code>, <code>status</code> can be imported directly from <code>readyapi</code> as in <code>from readyapi import Response</code>. This is because those are frequently used, to use the request directly, to set headers and cookies, to get status codes, etc.</li> <li>Documentation changes in many places, but new docs and noticeable improvements:<ul> <li>Custom Response - HTML, Stream, File, others.</li> <li>Advanced Middleware.</li> <li>Including WSGI - Flask, Django, others.</li> </ul> </li> <li>PR #1064.</li> </ul> </li> </ul>"},{"location":"release-notes/#0500","title":"0.50.0","text":"<ul> <li>Add link to Release Notes from docs about pinning versions for deployment. PR #1058.</li> <li>Upgrade code to use the latest version of Starlette, including:<ul> <li>Several bug fixes.</li> <li>Optional redirects of slashes, with or without ending in <code>/</code>.</li> <li>Events for routers, <code>\"startup\"</code>, and <code>\"shutdown\"</code>.</li> <li>PR #1057.</li> </ul> </li> <li>Add docs about pinning ReadyAPI versions for deployment: Deployment: ReadyAPI versions. PR #1056.</li> </ul>"},{"location":"release-notes/#0492","title":"0.49.2","text":"<ul> <li>Fix links in release notes. PR #1052 by @sattosan.</li> <li>Fix typo in release notes. PR #1051 by @sattosan.</li> <li>Refactor/clarify <code>serialize_response</code> parameter name to avoid confusion. PR #1031 by @patrickmckenna.</li> <li>Refactor calling each a path operation's handler function in an isolated function, to simplify profiling. PR #1027 by @sm-Fifteen.</li> <li>Add missing dependencies for testing. PR #1026 by @sm-Fifteen.</li> <li>Fix accepting valid types for response models, including Python types like <code>List[int]</code>. PR #1017 by @patrickmckenna.</li> <li>Fix format in SQL tutorial. PR #1015 by @vegarsti.</li> </ul>"},{"location":"release-notes/#0491","title":"0.49.1","text":"<ul> <li>Fix path operation duplicated parameters when used in dependencies and the path operation function. PR #994 by @merowinger92.</li> <li>Update Netlify previews deployment GitHub action as the fix is already merged and there's a new release. PR #1047.</li> <li>Move mypy configurations to config file. PR #987 by @hukkinj1.</li> <li>Temporary fix to Netlify previews not deployable from PRs from forks. PR #1046 by @mariacamilagl.</li> </ul>"},{"location":"release-notes/#0490","title":"0.49.0","text":"<ul> <li>Fix encoding of <code>pathlib</code> paths in <code>jsonable_encoder</code>. PR #978 by @patrickmckenna.</li> <li>Add articles to External Links: Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u200b\u6bd4\u8f03\u200b (Django, Flask, responder, ReadyAPI, japronto) and [ReadyAPI] Python\u200b\u88fd\u200b\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI\u306b\u200b\u5165\u9580\u200b\u3059\u308b. PR #974 by @tokusumi.</li> <li>Fix broken links in docs. PR #949 by @tsotnikov.</li> <li>Fix small typos. PR #941 by @NikitaKolesov.</li> <li>Update and clarify docs for dependencies with <code>yield</code>. PR #986.</li> <li>Add Mermaid JS support for diagrams in docs. Add first diagrams to Dependencies: First Steps and Dependencies with <code>yield</code> and <code>HTTPException</code>. PR #985.</li> <li>Update CI to run docs deployment in GitHub actions. PR #983.</li> <li>Allow <code>callable</code>s in path operation functions, like functions modified with <code>functools.partial</code>. PR #977.</li> </ul>"},{"location":"release-notes/#0480","title":"0.48.0","text":"<ul> <li>Run linters first in tests to error out faster. PR #948.</li> <li>Log warning about <code>email-validator</code> only when used. PR #946.</li> <li>Simplify Peewee docs with double dependency with <code>yield</code>. PR #947.</li> <li>Add article External Links: Create and Deploy ReadyAPI app to Heroku. PR #942 by @windson.</li> <li>Update description of Sanic, as it is now ASGI too. PR #932 by @raphaelauv.</li> <li>Fix typo in main page. PR #920 by @mMarzeta.</li> <li>Fix parsing of possibly invalid bodies. PR #918 by @dmontagu.</li> <li>Fix typo #916 by @adursun.</li> <li>Allow <code>Any</code> type for enums in OpenAPI. PR #906 by @songzhi.</li> <li>Add article to External Links: How to continuously deploy a ReadyAPI to AWS Lambda with AWS SAM. PR #901 by @iwpnd.</li> <li>Add note about using Body parameters without Pydantic. PR #900 by @pawamoy.</li> <li>Fix Pydantic field clone logic. PR #899 by @deuce2367.</li> <li>Fix link in middleware docs. PR #893 by @linchiwei123.</li> <li>Rename default API title from \"Fast API\" to \"ReadyAPI\" for consistency. PR #890.</li> </ul>"},{"location":"release-notes/#0471","title":"0.47.1","text":"<ul> <li>Fix model filtering in <code>response_model</code>, cloning sub-models. PR #889.</li> <li>Fix ReadyAPI serialization of Pydantic models using ORM mode blocking the event loop. PR #888.</li> </ul>"},{"location":"release-notes/#0470","title":"0.47.0","text":"<ul> <li>Refactor documentation to make a simpler and shorter Tutorial - User Guide and an additional Advanced User Guide with all the additional docs. PR #887.</li> <li>Tweak external links, Markdown format, typos. PR #881.</li> <li>Fix bug in tutorial handling HTTP Basic Auth <code>username</code> and <code>password</code>. PR #865 by @isaevpd.</li> <li>Fix handling form path operation parameters declared with pure classes like <code>list</code>, <code>tuple</code>, etc. PR #856 by @nsidnev.</li> <li>Add request <code>body</code> to <code>RequestValidationError</code>, new docs: Use the <code>RequestValidationError</code> body. Initial PR #853 by @aviramha.</li> <li>Update External Links with new links and dynamic GitHub projects with <code>readyapi</code> topic. PR #850.</li> <li>Fix Peewee <code>contextvars</code> handling in docs: SQL (Relational) Databases with Peewee. PR #879.</li> <li>Setup development environment with Python's Venv and Flit, instead of requiring the extra Pipenv duplicating dependencies. Updated docs: Development - Contributing. PR #877.</li> <li>Update docs for HTTP Basic Auth to improve security against timing attacks. Initial PR #807 by @zwass.</li> </ul>"},{"location":"release-notes/#0460","title":"0.46.0","text":"<ul> <li>Fix typos and tweak configs. PR #837.</li> <li>Add link to Chinese article in External Links. PR 810 by @wxq0309.</li> <li>Implement <code>OAuth2AuthorizationCodeBearer</code> class. PR #797 by @kuwv.</li> <li>Update example upgrade in docs main page. PR #795 by @cdeil.</li> <li>Fix callback handling for sub-routers. PR #792 by @jekirl.</li> <li>Fix typos. PR #784 by @kkinder.</li> <li>Add 4 Japanese articles to External Links. PR #783 by @HymanZHAN.</li> <li>Add support for subtypes of main types in <code>jsonable_encoder</code>, e.g. asyncpg's UUIDs. PR #756 by @RmStorm.</li> <li>Fix usage of Pydantic's <code>HttpUrl</code> in docs. PR #832 by @Dustyposa.</li> <li>Fix Twitter links in docs. PR #813 by @justindujardin.</li> <li>Add docs for correctly using ReadyAPI with Peewee ORM. Including how to overwrite parts of Peewee to correctly handle async threads. PR #789.</li> </ul>"},{"location":"release-notes/#0450","title":"0.45.0","text":"<ul> <li>Add support for OpenAPI Callbacks:<ul> <li>New docs: OpenAPI Callbacks.</li> <li>Refactor generation of <code>operationId</code>s to be valid Python names (also valid variables in most languages).</li> <li>Add <code>default_response_class</code> parameter to <code>APIRouter</code>.</li> <li>Original PR #722 by @booooh.</li> </ul> </li> <li>Refactor logging to use the same logger everywhere, update log strings and levels. PR #781.</li> <li>Add article to External Links: \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c ReadyAPI?. PR #766 by @prostomarkeloff.</li> <li>Remove gender bias in docs for handling errors. PR #780. Original idea in PR #761 by @classywhetten.</li> <li>Rename docs and references to <code>body-schema</code> to <code>body-fields</code> to keep in line with Pydantic. PR #746 by @prostomarkeloff.</li> </ul>"},{"location":"release-notes/#0441","title":"0.44.1","text":"<ul> <li>Add GitHub social preview images to git. PR #752.</li> <li>Update PyPI \"trove classifiers\". PR #751.</li> <li>Add full support for Python 3.8. Enable Python 3.8 in full in Travis. PR 749.</li> <li>Update \"new issue\" templates. PR #749.</li> <li>Fix serialization of errors for exotic Pydantic types. PR #748 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0440","title":"0.44.0","text":"<ul> <li>Add GitHub action Issue Manager. PR #742.</li> <li>Fix typos in docs. PR 734 by @bundabrg.</li> <li>Fix usage of <code>custom_encoder</code> in <code>jsonable_encoder</code>. PR #715 by @matrixise.</li> <li>Fix invalid XML example. PR 710 by @OcasoProtal.</li> <li>Fix typos and update wording in deployment docs. PR #700 by @marier-nico.</li> <li>Add note about dependencies in <code>APIRouter</code> docs. PR #698 by @marier-nico.</li> <li>Add support for async class methods as dependencies #681 by @frankie567.</li> <li>Add ReadyAPI with Swagger UI cheatsheet to external links. PR #671 by @euri10.</li> <li>Fix typo in HTTP protocol in CORS example. PR #647 by @forestmonster.</li> <li>Add support for Pydantic versions <code>1.0.0</code> and above, with temporary (deprecated) backwards compatibility for Pydantic <code>0.32.2</code>. PR #646 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0430","title":"0.43.0","text":"<ul> <li>Update docs to reduce gender bias. PR #645 by @ticosax.</li> <li>Add docs about overriding the <code>operationId</code> for all the path operations based on their function name. PR #642 by @SKalt.</li> <li>Fix validators in models generating an incorrect key order. PR #637 by @jaddison.</li> <li>Generate correct OpenAPI docs for responses with no content. PR #621 by @brotskydotcom.</li> <li>Remove <code>$</code> from Bash code blocks in docs for consistency. PR #613 by @nstapelbroek.</li> <li>Add docs for self-serving docs' (Swagger UI) static assets, e.g. to use the docs offline, or without Internet. Initial PR #557 by @svalouch.</li> <li>Fix <code>black</code> linting after upgrade. PR #682 by @frankie567.</li> </ul>"},{"location":"release-notes/#0420","title":"0.42.0","text":"<ul> <li>Add dependencies with <code>yield</code>, a.k.a. exit steps, context managers, cleanup, teardown, ...<ul> <li>This allows adding extra code after a dependency is done. It can be used, for example, to close database connections.</li> <li>Dependencies with <code>yield</code> can be normal or <code>async</code>, ReadyAPI will run normal dependencies in a threadpool.</li> <li>They can be combined with normal dependencies.</li> <li>It's possible to have arbitrary trees/levels of dependencies with <code>yield</code> and exit steps are handled in the correct order automatically.</li> <li>It works by default in Python 3.7 or above. For Python 3.6, it requires the extra backport dependencies:<ul> <li><code>async-exit-stack</code></li> <li><code>async-generator</code></li> </ul> </li> <li>New docs at Dependencies with <code>yield</code>.</li> <li>Updated database docs SQL (Relational) Databases: Main ReadyAPI app.</li> <li>PR #595.</li> </ul> </li> <li>Fix <code>sitemap.xml</code> in website. PR #598 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0410","title":"0.41.0","text":"<ul> <li>Upgrade required Starlette to <code>0.12.9</code>, the new range is <code>&gt;=0.12.9,&lt;=0.12.9</code>.<ul> <li>Add <code>State</code> to ReadyAPI apps at <code>app.state</code>.</li> <li>PR #593.</li> </ul> </li> <li>Improve handling of custom classes for <code>Request</code>s and <code>APIRoute</code>s.<ul> <li>This helps to more easily solve use cases like:<ul> <li>Reading a body before and/or after a request (equivalent to a middleware).</li> <li>Run middleware-like code only for a subset of path operations.</li> <li>Process a request before passing it to a path operation function. E.g. decompressing, deserializing, etc.</li> <li>Processing a response after being generated by path operation functions but before returning it. E.g. adding custom headers, logging, adding extra metadata.</li> </ul> </li> <li>New docs section: Custom Request and APIRoute class.</li> <li>PR #589 by @dmontagu.</li> </ul> </li> <li>Fix preserving custom route class in routers when including other sub-routers. PR #538 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0400","title":"0.40.0","text":"<ul> <li>Add notes to docs about installing <code>python-multipart</code> when using forms. PR #574 by @sliptonic.</li> <li>Generate OpenAPI schemas in alphabetical order. PR #554 by @dmontagu.</li> <li>Add support for truncating docstrings from path operation functions.<ul> <li>New docs at Advanced description from docstring.</li> <li>PR #556 by @svalouch.</li> </ul> </li> <li>Fix <code>DOCTYPE</code> in HTML files generated for Swagger UI and ReDoc. PR #537 by @Trim21.</li> <li>Fix handling <code>4XX</code> responses overriding default <code>422</code> validation error responses. PR #517 by @tsouvarev.</li> <li>Fix typo in documentation for Simple HTTP Basic Auth. PR #514 by @prostomarkeloff.</li> <li>Fix incorrect documentation example in first steps. PR #511 by @IgnatovFedor.</li> <li>Add support for Swagger UI initOauth settings with the parameter <code>swagger_ui_init_oauth</code>. PR #499 by @zamiramir.</li> </ul>"},{"location":"release-notes/#0390","title":"0.39.0","text":"<ul> <li>Allow path parameters to have default values (e.g. <code>None</code>) and discard them instead of raising an error.<ul> <li>This allows declaring a parameter like <code>user_id: str = None</code> that can be taken from a query parameter, but the same path operation can be included in a router with a path <code>/users/{user_id}</code>, in which case will be taken from the path and will be required.</li> <li>PR #464 by @jonathanunderwood.</li> </ul> </li> <li>Add support for setting a <code>default_response_class</code> in the <code>ReadyAPI</code> instance or in <code>include_router</code>. Initial PR #467 by @toppk.</li> <li>Add support for type annotations using strings and <code>from __future__ import annotations</code>. PR #451 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0381","title":"0.38.1","text":"<ul> <li>Fix incorrect <code>Request</code> class import. PR #493 by @kamalgill.</li> </ul>"},{"location":"release-notes/#0380","title":"0.38.0","text":"<ul> <li>Add recent articles to External Links and recent opinions. PR #490.</li> <li>Upgrade support range for Starlette to include <code>0.12.8</code>. The new range is <code>&gt;=0.11.1,&lt;=0.12.8\"</code>. PR #477 by @dmontagu.</li> <li>Upgrade support to Pydantic version 0.32.2 and update internal code to use it (breaking change). PR #463 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0370","title":"0.37.0","text":"<ul> <li>Add support for custom route classes for advanced use cases. PR #468 by @dmontagu.</li> <li>Allow disabling Google fonts in ReDoc. PR #481 by @b1-luettje.</li> <li>Fix security issue: when returning a sub-class of a response model and using <code>skip_defaults</code> it could leak information. PR #485 by @dmontagu.</li> <li>Enable tests for Python 3.8-dev. PR #465 by @Jamim.</li> <li>Add support and tests for Pydantic dataclasses in <code>response_model</code>. PR #454 by @dconathan.</li> <li>Fix typo in OAuth2 JWT tutorial. PR #447 by @pablogamboa.</li> <li>Use the <code>media_type</code> parameter in <code>Body()</code> params to set the media type in OpenAPI for <code>requestBody</code>. PR #439 by @divums.</li> <li>Add article Deploying a scikit-learn model with ONNX and ReadyAPI by Nico Axtmann. PR #438 by @naxty.</li> <li>Allow setting custom <code>422</code> (validation error) response/schema in OpenAPI.<ul> <li>And use media type from response class instead of fixed <code>application/json</code> (the default).</li> <li>PR #437 by @divums.</li> </ul> </li> <li>Fix using <code>\"default\"</code> extra response with status codes at the same time. PR #489.</li> <li>Allow additional responses to use status code ranges (like <code>5XX</code> and <code>4XX</code>) and <code>\"default\"</code>. PR #435 by @divums.</li> </ul>"},{"location":"release-notes/#0360","title":"0.36.0","text":"<ul> <li>Fix implementation for <code>skip_defaults</code> when returning a Pydantic model. PR #422 by @dmontagu.</li> <li>Fix OpenAPI generation when using the same dependency in multiple places for the same path operation. PR #417 by @dmontagu.</li> <li>Allow having empty paths in path operations used with <code>include_router</code> and a <code>prefix</code>.<ul> <li>This allows having a router for <code>/cats</code> and all its path operations, while having one of them for <code>/cats</code>.</li> <li>Now it doesn't have to be only <code>/cats/</code> (with a trailing slash).</li> <li>To use it, declare the path in the path operation as the empty string (<code>\"\"</code>).</li> <li>PR #415 by @vitalik.</li> </ul> </li> <li>Fix mypy error after merging PR #415. PR #462.</li> </ul>"},{"location":"release-notes/#0350","title":"0.35.0","text":"<ul> <li>Fix typo in routing <code>assert</code>. PR #419 by @pablogamboa.</li> <li>Fix typo in docs. PR #411 by @bronsen.</li> <li>Fix parsing a body type declared with <code>Union</code>. PR #400 by @koxudaxi.</li> </ul>"},{"location":"release-notes/#0340","title":"0.34.0","text":"<ul> <li> <p>Upgrade Starlette supported range to include the latest <code>0.12.7</code>. The new range is <code>0.11.1,&lt;=0.12.7</code>. PR #367 by @dedsm.</p> </li> <li> <p>Add test for OpenAPI schema with duplicate models from PR #333 by @dmontagu. PR #385.</p> </li> </ul>"},{"location":"release-notes/#0330","title":"0.33.0","text":"<ul> <li>Upgrade Pydantic version to <code>0.30.0</code>. PR #384 by @jekirl.</li> </ul>"},{"location":"release-notes/#0320","title":"0.32.0","text":"<ul> <li> <p>Fix typo in docs for features. PR #380 by @MartinoMensio.</p> </li> <li> <p>Fix source code <code>limit</code> for example in Query Parameters. PR #366 by @Smashman.</p> </li> <li> <p>Update wording in docs about OAuth2 scopes. PR #371 by @cjw296.</p> </li> <li> <p>Update docs for <code>Enum</code>s to inherit from <code>str</code> and improve Swagger UI rendering. PR #351.</p> </li> <li> <p>Fix regression, add Swagger UI deep linking again. PR #350.</p> </li> <li> <p>Add test for having path templates in <code>prefix</code> of <code>.include_router</code>. PR #349.</p> </li> <li> <p>Add note to docs: Include the same router multiple times with different <code>prefix</code>. PR #348.</p> </li> <li> <p>Fix OpenAPI/JSON Schema generation for two functions with the same name (in different modules) with the same composite bodies.</p> <ul> <li>Composite bodies' IDs are now based on path, not only on route name, as the auto-generated name uses the function names, that can be duplicated in different modules.</li> <li>The same new ID generation applies to response models.</li> <li>This also changes the generated title for those models.</li> <li>Only composite bodies and response models are affected because those are generated dynamically, they don't have a module (a Python file).</li> <li>This also adds the possibility of using <code>.include_router()</code> with the same <code>APIRouter</code> multiple  times, with different prefixes, e.g. <code>/api/v2</code> and <code>/api/latest</code>, and it will now work correctly.</li> <li>PR #347.</li> </ul> </li> </ul>"},{"location":"release-notes/#0310","title":"0.31.0","text":"<ul> <li>Upgrade Pydantic supported version to <code>0.29.0</code>.<ul> <li>New supported version range is <code>\"pydantic &gt;=0.28,&lt;=0.29.0\"</code>.</li> <li>This adds support for Pydantic Generic Models, kudos to @dmontagu.</li> <li>PR #344.</li> </ul> </li> </ul>"},{"location":"release-notes/#0301","title":"0.30.1","text":"<ul> <li> <p>Add section in docs about External Links and Articles. PR #341.</p> </li> <li> <p>Remove <code>Pipfile.lock</code> from the repository as it is only used by ReadyAPI contributors (developers of ReadyAPI itself). See the PR for more details. PR #340.</p> </li> <li> <p>Update section about Help ReadyAPI - Get Help. PR #339.</p> </li> <li> <p>Refine internal type declarations to improve/remove Mypy errors in users' code. PR #338.</p> </li> <li> <p>Update and clarify SQL tutorial with SQLAlchemy. PR #331 by @mariacamilagl.</p> </li> <li> <p>Add SQLite online viewers to the docs. PR #330 by @cyrilbois.</p> </li> </ul>"},{"location":"release-notes/#0300","title":"0.30.0","text":"<ul> <li> <p>Add support for Pydantic's ORM mode:</p> <ul> <li>Updated documentation about SQL with SQLAlchemy, using Pydantic models with ORM mode, SQLAlchemy models with relations, separation of files, simplification of code and other changes. New docs: SQL (Relational) Databases.</li> <li>The new support for ORM mode fixes issues/adds features related to ORMs with lazy-loading, hybrid properties, dynamic/getters (using <code>@property</code> decorators) and several other use cases.</li> <li>This applies to ORMs like SQLAlchemy, Peewee, Tortoise ORM, GINO ORM and virtually any other.</li> <li>If your path operations return an arbitrary object with attributes (e.g. <code>my_item.name</code> instead of <code>my_item[\"name\"]</code>) AND you use a <code>response_model</code>, make sure to update the Pydantic models with <code>orm_mode = True</code> as described in the docs (link above).</li> <li>New documentation about receiving plain <code>dict</code>s as request bodies: Bodies of arbitrary <code>dict</code>s.</li> <li>New documentation about returning arbitrary <code>dict</code>s in responses: Response with arbitrary <code>dict</code>.</li> <li>Technical Details:<ul> <li>When declaring a <code>response_model</code> it is used directly to generate the response content, from whatever was returned from the path operation function.</li> <li>Before this, the return content was first passed through <code>jsonable_encoder</code> to ensure it was a \"jsonable\" object, like a <code>dict</code>, instead of an arbitrary object with attributes (like an ORM model). That's why you should make sure to update your Pydantic models for objects with attributes to use <code>orm_mode = True</code>.</li> <li>If you don't have a <code>response_model</code>, the return object will still be passed through <code>jsonable_encoder</code> first.</li> <li>When a <code>response_model</code> is declared, the same <code>response_model</code> type declaration won't be used as is, it will be \"cloned\" to create an new one (a cloned Pydantic <code>Field</code> with all the submodels cloned as well).</li> <li>This avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the <code>response_model</code> (e.g. you return a <code>UserInDB</code> that inherits from <code>User</code> but contains extra fields, like <code>hashed_password</code>, and <code>User</code> is used in the <code>response_model</code>), it would still pass the validation (because <code>UserInDB</code> is a subclass of <code>User</code>) and the object would be returned as-is, including the <code>hashed_password</code>. To fix this, the declared <code>response_model</code> is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a <code>List[Item]</code>), the Pydantic model class(es) will be a different one (the \"cloned\" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned <code>response_model</code>. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned <code>response_model</code>, containing only the declared fields as normally.</li> </ul> </li> <li>PR #322.</li> </ul> </li> <li> <p>Remove/clean unused RegEx code in routing. PR #314 by @dmontagu.</p> </li> <li> <p>Use default response status code descriptions for additional responses. PR #313 by @duxiaoyao.</p> </li> <li> <p>Upgrade Pydantic support to <code>0.28</code>. PR #320 by @jekirl.</p> </li> </ul>"},{"location":"release-notes/#0291","title":"0.29.1","text":"<ul> <li> <p>Fix handling an empty-body request with a required body param. PR #311.</p> </li> <li> <p>Fix broken link in docs: Return a Response directly. PR #306 by @dmontagu.</p> </li> <li> <p>Fix docs discrepancy in docs for Response Model. PR #288 by @awiddersheim.</p> </li> </ul>"},{"location":"release-notes/#0290","title":"0.29.0","text":"<ul> <li>Add support for declaring a <code>Response</code> parameter:<ul> <li>This allows declaring:<ul> <li>Response Cookies.</li> <li>Response Headers.</li> <li>An HTTP Status Code different than the default: Response - Change Status Code.</li> </ul> </li> <li>All of this while still being able to return arbitrary objects (<code>dict</code>, DB model, etc).</li> <li>Update attribution to Hug, for inspiring the <code>response</code> parameter pattern.</li> <li>PR #294.</li> </ul> </li> </ul>"},{"location":"release-notes/#0280","title":"0.28.0","text":"<ul> <li> <p>Implement dependency cache per request.</p> <ul> <li>This avoids calling each dependency multiple times for the same request.</li> <li>This is useful while calling external services, performing costly computation, etc.</li> <li>This also means that if a dependency was declared as a path operation decorator dependency, possibly at the router level (with <code>.include_router()</code>) and then it is declared again in a specific path operation, the dependency will be called only once.</li> <li>The cache can be disabled per dependency declaration, using <code>use_cache=False</code> as in <code>Depends(your_dependency, use_cache=False)</code>.</li> <li>Updated docs at: Using the same dependency multiple times.</li> <li>PR #292.</li> </ul> </li> <li> <p>Implement dependency overrides for testing.</p> <ul> <li>This allows using overrides/mocks of dependencies during tests.</li> <li>New docs: Testing Dependencies with Overrides.</li> <li>PR #291.</li> </ul> </li> </ul>"},{"location":"release-notes/#0272","title":"0.27.2","text":"<ul> <li>Fix path and query parameters receiving <code>dict</code> as a valid type. It should be mapped to a body payload. PR #287. Updated docs at: Query parameter list / multiple values with defaults: Using <code>list</code>.</li> </ul>"},{"location":"release-notes/#0271","title":"0.27.1","text":"<ul> <li> <p>Fix <code>auto_error=False</code> handling in <code>HTTPBearer</code> security scheme. Do not <code>raise</code> when there's an incorrect <code>Authorization</code> header if <code>auto_error=False</code>. PR #282.</p> </li> <li> <p>Fix type declaration of <code>HTTPException</code>. PR #279.</p> </li> </ul>"},{"location":"release-notes/#0270","title":"0.27.0","text":"<ul> <li> <p>Fix broken link in docs about OAuth 2.0 with scopes. PR #275 by @dmontagu.</p> </li> <li> <p>Refactor param extraction using Pydantic <code>Field</code>:</p> <ul> <li>Large refactor, improvement, and simplification of param extraction from path operations.</li> <li>Fix/add support for list query parameters with list defaults. New documentation: Query parameter list / multiple values with defaults.</li> <li>Add support for enumerations in path operation parameters. New documentation: Path Parameters: Predefined values.</li> <li>Add support for type annotations using <code>Optional</code> as in <code>param: Optional[str] = None</code>. New documentation: Optional type declarations.</li> <li>PR #278.</li> </ul> </li> </ul>"},{"location":"release-notes/#0260","title":"0.26.0","text":"<ul> <li> <p>Separate error handling for validation errors.</p> <ul> <li>This will allow developers to customize the exception handlers.</li> <li>Document better how to handle exceptions and use error handlers.</li> <li>Include <code>RequestValidationError</code> and <code>WebSocketRequestValidationError</code> (this last one will be useful once encode/starlette#527 or equivalent is merged).</li> <li>New documentation about exceptions handlers:<ul> <li>Install custom exception handlers.</li> <li>Override the default exception handlers.</li> <li>Re-use ReadyAPI's exception handlers.</li> </ul> </li> <li>PR #273.</li> </ul> </li> <li> <p>Fix support for paths in path parameters without needing explicit <code>Path(...)</code>.</p> <ul> <li>PR #256.</li> <li>Documented in PR #272 by @wshayes.</li> <li>New documentation at: Path Parameters containing paths.</li> </ul> </li> <li> <p>Update docs for testing ReadyAPI. Include using <code>POST</code>, sending JSON, testing headers, etc. New documentation: Testing. PR #271.</p> </li> <li> <p>Fix type declaration of <code>response_model</code> to allow generic Python types as <code>List[Model]</code>. Mainly to fix <code>mypy</code> for users. PR #266.</p> </li> </ul>"},{"location":"release-notes/#0250","title":"0.25.0","text":"<ul> <li> <p>Add support for Pydantic's <code>include</code>, <code>exclude</code>, <code>by_alias</code>.</p> <ul> <li>Update documentation: Response Model.</li> <li>Add docs for: Body - updates, using Pydantic's <code>skip_defaults</code>.</li> <li>Add method consistency tests.</li> <li>PR #264.</li> </ul> </li> <li> <p>Add <code>CONTRIBUTING.md</code> file to GitHub, to help new contributors. PR #255 by @wshayes.</p> </li> <li> <p>Add support for Pydantic's <code>skip_defaults</code>:</p> <ul> <li>There's a new path operation decorator parameter <code>response_model_skip_defaults</code>.<ul> <li>The name of the parameter will most probably change in a future version to <code>response_skip_defaults</code>, <code>model_skip_defaults</code> or something similar.</li> </ul> </li> <li>New documentation section about using <code>response_model_skip_defaults</code>.</li> <li>PR #248 by @wshayes.</li> </ul> </li> </ul>"},{"location":"release-notes/#0240","title":"0.24.0","text":"<ul> <li> <p>Add support for WebSockets with dependencies and parameters.</p> <ul> <li>Support included for:<ul> <li><code>Depends</code></li> <li><code>Security</code></li> <li><code>Cookie</code></li> <li><code>Header</code></li> <li><code>Path</code></li> <li><code>Query</code></li> <li>...as these are compatible with the WebSockets protocol (e.g. <code>Body</code> is not).</li> </ul> </li> <li>Updated documentation for WebSockets.</li> <li>PR #178 by @jekirl.</li> </ul> </li> <li> <p>Upgrade the compatible version of Pydantic to <code>0.26.0</code>.</p> <ul> <li>This includes JSON Schema support for IP address and network objects, bug fixes, and other features.</li> <li>PR #247 by @euri10.</li> </ul> </li> </ul>"},{"location":"release-notes/#0230","title":"0.23.0","text":"<ul> <li> <p>Upgrade the compatible version of Starlette to <code>0.12.0</code>.</p> <ul> <li>This includes support for ASGI 3 (the latest version of the standard).</li> <li>It's now possible to use Starlette's <code>StreamingResponse</code> with iterators, like file-like objects (as those returned by <code>open()</code>).</li> <li>It's now possible to use the low level utility <code>iterate_in_threadpool</code> from <code>starlette.concurrency</code> (for advanced scenarios).</li> <li>PR #243.</li> </ul> </li> <li> <p>Add OAuth2 redirect page for Swagger UI. This allows having delegated authentication in the Swagger UI docs. For this to work, you need to add <code>{your_origin}/docs/oauth2-redirect</code> to the allowed callbacks in your OAuth2 provider (in Auth0, Facebook, Google, etc).</p> <ul> <li>For example, during development, it could be <code>http://localhost:8000/docs/oauth2-redirect</code>.</li> <li>Keep in mind that this callback URL is independent of whichever one is used by your frontend. You might also have another callback at <code>https://yourdomain.com/login/callback</code>.</li> <li>This is only to allow delegated authentication in the API docs with Swagger UI.</li> <li>PR #198 by @steinitzu.</li> </ul> </li> <li> <p>Make Swagger UI and ReDoc route handlers (path operations) be <code>async</code> functions instead of lambdas to improve performance. PR #241 by @Trim21.</p> </li> <li> <p>Make Swagger UI and ReDoc URLs parameterizable, allowing to host and serve local versions of them and have offline docs. PR #112 by @euri10.</p> </li> </ul>"},{"location":"release-notes/#0220","title":"0.22.0","text":"<ul> <li> <p>Add support for <code>dependencies</code> parameter:</p> <ul> <li>A parameter in path operation decorators, for dependencies that should be executed but the return value is not important or not used in the path operation function.</li> <li>A parameter in the <code>.include_router()</code> method of ReadyAPI applications and routers, to include dependencies that should be executed in each path operation in a router.<ul> <li>This is useful, for example, to require authentication or permissions in specific group of path operations.</li> <li>Different <code>dependencies</code> can be applied to different routers.</li> </ul> </li> <li>These <code>dependencies</code> are run before the normal parameter dependencies. And normal dependencies are run too. They can be combined.</li> <li>Dependencies declared in a router are executed first, then the ones defined in path operation decorators, and then the ones declared in normal parameters. They are all combined and executed.</li> <li>All this also supports using <code>Security</code> with <code>scopes</code> in those <code>dependencies</code> parameters, for more advanced OAuth 2.0 security scenarios with scopes.</li> <li>New documentation about dependencies in path operation decorators.</li> <li>New documentation about dependencies in the <code>include_router()</code> method.</li> <li>PR #235.</li> </ul> </li> <li> <p>Fix OpenAPI documentation of Starlette URL convertors. Specially useful when using <code>path</code> convertors, to take a whole path as a parameter, like <code>/some/url/{p:path}</code>. PR #234 by @euri10.</p> </li> <li> <p>Make default parameter utilities exported from <code>readyapi</code> be functions instead of classes (the new functions return instances of those classes). To be able to override the return types and fix <code>mypy</code> errors in ReadyAPI's users' code. Applies to <code>Path</code>, <code>Query</code>, <code>Header</code>, <code>Cookie</code>, <code>Body</code>, <code>Form</code>, <code>File</code>, <code>Depends</code>, and <code>Security</code>. PR #226 and PR #231.</p> </li> <li> <p>Separate development scripts <code>test.sh</code>, <code>lint.sh</code>, and <code>format.sh</code>. PR #232.</p> </li> <li> <p>Re-enable <code>black</code> formatting checks for Python 3.7. PR #229 by @zamiramir.</p> </li> </ul>"},{"location":"release-notes/#0210","title":"0.21.0","text":"<ul> <li> <p>On body parsing errors, raise <code>from</code> previous exception, to allow better introspection in logging code. PR #192 by @ricardomomm.</p> </li> <li> <p>Use Python logger named \"<code>readyapi</code>\" instead of root logger. PR #222 by @euri10.</p> </li> <li> <p>Upgrade Pydantic to version 0.25. PR #225 by @euri10.</p> </li> <li> <p>Fix typo in routing. PR #221 by @djlambert.</p> </li> </ul>"},{"location":"release-notes/#0201","title":"0.20.1","text":"<ul> <li> <p>Add typing information to package including file <code>py.typed</code>. PR #209 by @meadsteve.</p> </li> <li> <p>Add ReadyAPI bot for Gitter. To automatically announce new releases. PR #189.</p> </li> </ul>"},{"location":"release-notes/#0200","title":"0.20.0","text":"<ul> <li> <p>Upgrade OAuth2:</p> <ul> <li>Upgrade Password flow using Bearer tokens to use the correct HTTP status code 401 <code>UNAUTHORIZED</code>, with <code>WWW-Authenticate</code> headers.</li> <li>Update, simplify, and improve all the security docs.</li> <li>Add new <code>scope_str</code> to <code>SecurityScopes</code> and update docs: OAuth2 scopes.</li> <li>Update docs, images, tests.</li> <li>PR #188.</li> </ul> </li> <li> <p>Include Hypercorn as an alternative ASGI server in the docs. PR #187.</p> </li> <li> <p>Add docs for Static Files and Templates. PR #186.</p> </li> <li> <p>Add docs for handling Response Cookies and Response Headers. PR #185.</p> </li> <li> <p>Fix typos in docs. PR #176 by @chdsbd.</p> </li> </ul>"},{"location":"release-notes/#0190","title":"0.19.0","text":"<ul> <li> <p>Rename path operation decorator parameter <code>content_type</code> to <code>response_class</code>. PR #183.</p> </li> <li> <p>Add docs:</p> <ul> <li>How to use the <code>jsonable_encoder</code> in JSON compatible encoder.</li> <li>How to Return a Response directly.</li> <li>Update how to use a Custom Response Class.</li> <li>PR #184.</li> </ul> </li> </ul>"},{"location":"release-notes/#0180","title":"0.18.0","text":"<ul> <li> <p>Add docs for HTTP Basic Auth. PR #177.</p> </li> <li> <p>Upgrade HTTP Basic Auth handling with automatic headers (automatic browser login prompt). PR #175.</p> </li> <li> <p>Update dependencies for security. PR #174.</p> </li> <li> <p>Add docs for Middleware. PR #173.</p> </li> </ul>"},{"location":"release-notes/#0170","title":"0.17.0","text":"<ul> <li> <p>Make Flit publish from CI. PR #170.</p> </li> <li> <p>Add documentation about handling CORS (Cross-Origin Resource Sharing). PR #169.</p> </li> <li> <p>By default, encode by alias. This allows using Pydantic <code>alias</code> parameters working by default. PR #168.</p> </li> </ul>"},{"location":"release-notes/#0160","title":"0.16.0","text":"<ul> <li> <p>Upgrade path operation <code>docstring</code> parsing to support proper Markdown descriptions. New documentation at Path Operation Configuration. PR #163.</p> </li> <li> <p>Refactor internal usage of Pydantic to use correct data types. PR #164.</p> </li> <li> <p>Upgrade Pydantic to version <code>0.23</code>. PR #160 by @euri10.</p> </li> <li> <p>Fix typo in Tutorial about Extra Models. PR #159 by @danielmichaels.</p> </li> <li> <p>Fix Query Parameters URL examples in docs. PR #157 by @hayata-yamamoto.</p> </li> </ul>"},{"location":"release-notes/#0150","title":"0.15.0","text":"<ul> <li> <p>Add support for multiple file uploads (as a single form field). New docs at: Multiple file uploads. PR #158.</p> </li> <li> <p>Add docs for: Additional Status Codes. PR #156.</p> </li> </ul>"},{"location":"release-notes/#0140","title":"0.14.0","text":"<ul> <li> <p>Improve automatically generated names of path operations in OpenAPI (in API docs). A function <code>read_items</code> instead of having a generated name \"Read Items Get\" will have \"Read Items\". PR #155.</p> </li> <li> <p>Add docs for: Testing ReadyAPI. PR #151.</p> </li> <li> <p>Update <code>/docs</code> Swagger UI to enable deep linking. This allows sharing the URL pointing directly to the path operation documentation in the docs. PR #148 by @wshayes.</p> </li> <li> <p>Update development dependencies, <code>Pipfile.lock</code>. PR #150.</p> </li> <li> <p>Include Falcon and Hug in: Alternatives, Inspiration and Comparisons.</p> </li> </ul>"},{"location":"release-notes/#0130","title":"0.13.0","text":"<ul> <li>Improve/upgrade OAuth2 scopes support with <code>SecurityScopes</code>:<ul> <li><code>SecurityScopes</code> can be declared as a parameter like <code>Request</code>, to get the scopes of all super-dependencies/dependants.</li> <li>Improve <code>Security</code> handling, merging scopes when declaring <code>SecurityScopes</code>.</li> <li>Allow using <code>SecurityBase</code> (like <code>OAuth2</code>) classes with <code>Depends</code> and still document them. <code>Security</code> now is needed only to declare <code>scopes</code>.</li> <li>Updated docs about: OAuth2 with Password (and hashing), Bearer with JWT tokens.</li> <li>New docs about: OAuth2 scopes.</li> <li>PR #141.</li> </ul> </li> </ul>"},{"location":"release-notes/#0121","title":"0.12.1","text":"<ul> <li> <p>Fix bug: handling additional <code>responses</code> in <code>APIRouter.include_router()</code>. PR #140.</p> </li> <li> <p>Fix typo in SQL tutorial. PR #138 by @mostaphaRoudsari.</p> </li> <li> <p>Fix typos in section about nested models and OAuth2 with JWT. PR #127 by @mmcloud.</p> </li> </ul>"},{"location":"release-notes/#0120","title":"0.12.0","text":"<ul> <li>Add additional <code>responses</code> parameter to path operation decorators to extend responses in OpenAPI (and API docs).<ul> <li>It also allows extending existing responses generated from <code>response_model</code>, declare other media types (like images), etc.</li> <li>The new documentation is here: Additional Responses.</li> <li><code>responses</code> can also be added to <code>.include_router()</code>, the updated docs are here: Bigger Applications.</li> <li>PR #97 originally initiated by @barsi.</li> </ul> </li> <li>Update <code>scripts/test-cov-html.sh</code> to allow passing extra parameters like <code>-vv</code>, for development.</li> </ul>"},{"location":"release-notes/#0110","title":"0.11.0","text":"<ul> <li> <p>Add <code>auto_error</code> parameter to security utility functions. Allowing them to be optional. Also allowing to have multiple alternative security schemes that are then checked in a single dependency instead of each one verifying and returning the error to the client automatically when not satisfied. PR #134.</p> </li> <li> <p>Update SQL Tutorial to close database sessions even when there are exceptions. PR #89 by @alexiri.</p> </li> <li> <p>Fix duplicate dependency in <code>pyproject.toml</code>. PR #128 by @zxalif.</p> </li> </ul>"},{"location":"release-notes/#0103","title":"0.10.3","text":"<ul> <li> <p>Add Gitter chat, badge, links, etc. https://gitter.im/khulnasoft/readyapi . PR #117.</p> </li> <li> <p>Add docs about Extending OpenAPI. PR #126.</p> </li> <li> <p>Make Travis run Ubuntu Xenial (newer version) and Python 3.7 instead of Python 3.7-dev. PR #92 by @blueyed.</p> </li> <li> <p>Fix duplicated param variable creation. PR #123 by @yihuang.</p> </li> <li> <p>Add note in Response Model docs about why using a function parameter instead of a function return type annotation. PR #109 by @JHSaunders.</p> </li> <li> <p>Fix event docs (startup/shutdown) function name. PR #105 by @stratosgear.</p> </li> </ul>"},{"location":"release-notes/#0102","title":"0.10.2","text":"<ul> <li> <p>Fix OpenAPI (JSON Schema) for declarations of Python <code>Union</code> (JSON Schema <code>additionalProperties</code>). PR #121.</p> </li> <li> <p>Update Background Tasks with a note on Celery.</p> </li> <li> <p>Document response models using unions and lists, updated at: Extra Models. PR #108.</p> </li> </ul>"},{"location":"release-notes/#0101","title":"0.10.1","text":"<ul> <li>Add docs and tests for encode/databases. New docs at: Async SQL (Relational) Databases. PR #107.</li> </ul>"},{"location":"release-notes/#0100","title":"0.10.0","text":"<ul> <li> <p>Add support for Background Tasks in path operation functions and dependencies. New documentation about Background Tasks is here. PR #103.</p> </li> <li> <p>Add support for <code>.websocket_route()</code> in <code>APIRouter</code>. PR #100 by @euri10.</p> </li> <li> <p>New docs section about Events: startup - shutdown. PR #99.</p> </li> </ul>"},{"location":"release-notes/#091","title":"0.9.1","text":"<ul> <li>Document receiving Multiple values with the same query parameter and Duplicate headers. PR #95.</li> </ul>"},{"location":"release-notes/#090","title":"0.9.0","text":"<ul> <li> <p>Upgrade compatible Pydantic version to <code>0.21.0</code>. PR #90.</p> </li> <li> <p>Add documentation for: Application Configuration.</p> </li> <li> <p>Fix typo in docs. PR #76 by @matthewhegarty.</p> </li> <li> <p>Fix link in \"Deployment\" to \"Bigger Applications\".</p> </li> </ul>"},{"location":"release-notes/#080","title":"0.8.0","text":"<ul> <li> <p>Make development scripts executable. PR #76 by @euri10.</p> </li> <li> <p>Add support for adding <code>tags</code> in <code>app.include_router()</code>. PR #55 by @euri10. Documentation updated in the section: Bigger Applications.</p> </li> <li> <p>Update docs related to Uvicorn to use new <code>--reload</code> option from version <code>0.5.x</code>. PR #74.</p> </li> <li> <p>Update <code>isort</code> imports and scripts to be compatible with newer versions. PR #75.</p> </li> </ul>"},{"location":"release-notes/#071","title":"0.7.1","text":"<ul> <li> <p>Update technical details about <code>async def</code> handling with respect to previous frameworks. PR #64 by @haizaar.</p> </li> <li> <p>Add deployment documentation for Docker in Raspberry Pi and other architectures.</p> </li> <li> <p>Trigger Docker images build on Travis CI automatically. PR #65.</p> </li> </ul>"},{"location":"release-notes/#070","title":"0.7.0","text":"<ul> <li>Add support for <code>UploadFile</code> in <code>File</code> parameter annotations.<ul> <li>This includes a file-like interface.</li> <li>Here's the updated documentation for declaring <code>File</code> parameters with <code>UploadFile</code>.</li> <li>And here's the updated documentation for using <code>Form</code> parameters mixed with <code>File</code> parameters, supporting <code>bytes</code> and <code>UploadFile</code> at the same time.</li> <li>PR #63.</li> </ul> </li> </ul>"},{"location":"release-notes/#064","title":"0.6.4","text":"<ul> <li> <p>Add technical details about <code>async def</code> handling to docs. PR #61.</p> </li> <li> <p>Add docs for Debugging ReadyAPI applications in editors.</p> </li> <li> <p>Clarify Bigger Applications deployed with Docker.</p> </li> <li> <p>Fix typos in docs.</p> </li> <li> <p>Add section about History, Design and Future.</p> </li> <li> <p>Add docs for using WebSockets with ReadyAPI. PR #62.</p> </li> </ul>"},{"location":"release-notes/#063","title":"0.6.3","text":"<ul> <li>Add Favicons to docs. PR #53.</li> </ul>"},{"location":"release-notes/#062","title":"0.6.2","text":"<ul> <li> <p>Introduce new project generator based on ReadyAPI and PostgreSQL: https://github.com/khulnasoft/full-stack-readyapi-postgresql. PR #52.</p> </li> <li> <p>Update SQL tutorial with SQLAlchemy, using <code>Depends</code> to improve editor support and reduce code repetition. PR #52.</p> </li> <li> <p>Improve middleware naming in tutorial for SQL with SQLAlchemy https://readyapi.khulnasoft.com/tutorial/sql-databases/.</p> </li> </ul>"},{"location":"release-notes/#061","title":"0.6.1","text":"<ul> <li>Add docs for GraphQL: https://readyapi.khulnasoft.com/advanced/graphql/. PR #48.</li> </ul>"},{"location":"release-notes/#060","title":"0.6.0","text":"<ul> <li> <p>Update SQL with SQLAlchemy tutorial at https://readyapi.khulnasoft.com/tutorial/sql-databases/ using the new official <code>request.state</code>. PR #45.</p> </li> <li> <p>Upgrade Starlette to version <code>0.11.1</code> and add required compatibility changes. PR #44.</p> </li> </ul>"},{"location":"release-notes/#051","title":"0.5.1","text":"<ul> <li> <p>Add section about helping and getting help with ReadyAPI.</p> </li> <li> <p>Add note about path operations order in docs.</p> </li> <li> <p>Update section about error handling with more information and make relation with Starlette error handling utilities more explicit. PR #41.</p> </li> <li> <p>Add Development - Contributing section to the docs. PR #42.</p> </li> </ul>"},{"location":"release-notes/#050","title":"0.5.0","text":"<ul> <li> <p>Add new <code>HTTPException</code> with support for custom headers. With new documentation for handling errors at: https://readyapi.khulnasoft.com/tutorial/handling-errors/. PR #35.</p> </li> <li> <p>Add documentation to use Starlette <code>Request</code> object directly. Check #25 by @euri10.</p> </li> <li> <p>Add issue templates to simplify reporting bugs, getting help, etc: #34.</p> </li> <li> <p>Update example for the SQLAlchemy tutorial at https://readyapi.khulnasoft.com/tutorial/sql-databases/ using middleware and database session attached to request.</p> </li> </ul>"},{"location":"release-notes/#040","title":"0.4.0","text":"<ul> <li> <p>Add <code>openapi_prefix</code>, support for reverse proxy and mounting sub-applications. See the docs at https://readyapi.khulnasoft.com/advanced/sub-applications-proxy/: #26 by @kabirkhan.</p> </li> <li> <p>Update docs/tutorial for SQLAlchemy including note about DB Browser for SQLite.</p> </li> </ul>"},{"location":"release-notes/#030","title":"0.3.0","text":"<ul> <li>Fix/add SQLAlchemy support, including ORM, and update docs for SQLAlchemy: #30.</li> </ul>"},{"location":"release-notes/#021","title":"0.2.1","text":"<ul> <li>Fix <code>jsonable_encoder</code> for Pydantic models with <code>Config</code> but without <code>json_encoders</code>: #29.</li> </ul>"},{"location":"release-notes/#020","title":"0.2.0","text":"<ul> <li> <p>Fix typos in Security section: #24 by @kkinder.</p> </li> <li> <p>Add support for Pydantic custom JSON encoders: #21 by @euri10.</p> </li> </ul>"},{"location":"release-notes/#0119","title":"0.1.19","text":"<ul> <li>Upgrade Starlette version to the current latest <code>0.10.1</code>: #17 by @euri10.</li> </ul>"}]}
